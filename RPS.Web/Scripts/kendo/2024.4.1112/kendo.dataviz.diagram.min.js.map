{"version":3,"file":"kendo.dataviz.diagram.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","DatavizDiagram","this","$","window","diagram","dataviz","deepExtend","isArray","Array","Utils","isNearZero","num","Math","abs","isDefined","obj","isUndefined","isObject","Object","has","key","hasOwnProperty","call","isString","prototype","toString","isBoolean","isType","type","isNumber","isNaN","parseFloat","isFinite","isEmpty","length","simpleExtend","destination","source","name","initArray","size","value","array","i","serializePoints","points","res","p","push","x","y","join","deserializePoints","s","v","split","Point","parseInt","randomInteger","lower","upper","floor","random","DFT","el","func","childNodes","item","getMatrixAngle","m","d","atan2","b","PI","getMatrixScaling","sqrt","a","c","sign","number","findAngle","center","end","start","sngXComp","sngYComp","atan","findRadian","forEach","arr","iterator","thisRef","any","predicate","remove","what","ax","indexOf","splice","contains","inArray","fold","list","acc","context","initial","arguments","find","result","index","first","constraint","insert","element","position","all","clear","bisort","sortfunc","sort","n","addRange","range","apply","Easing","pos","cos","Ticker","Class","extend","init","adapters","target","tick","interval","duration","lastTime","handlers","_this","transition","timerDelegate","onTimerEvent","addAdapter","onComplete","handler","removeHandler","grep","h","trigger","caller","onStep","seekTo","to","seekFromTo","from","max","min","Date","getTime","intervalId","setInterval","stop","clearInterval","play","origin","initState","reverse","propagate","update","now","timePassed","movement","ui","Range","step","Infinity","j","k","rangeIntegerScale","jQuery","geometry","isFunction","map","ExtendedPoint","constructor","super","clone","plus","minus","offset","times","normalize","lengthSquared","middleOf","q","toPolar","useDegrees","factor","halfpi","len","Polar","isOnLine","temp","o1","u1","r1","Rect","inflate","r2","union","height","width","parse","str","xy","slice","PathDefiner","left","right","point","dx","dy","r","x1","y1","x2","y2","top","bottom","topLeft","topRight","bottomLeft","bottomRight","equals","rect","rotatedBounds","angle","rotatedPoints","tl","tr","br","bl","rotate","delimiter","scale","scaleX","scaleY","staicPoint","adornerCenter","thisCenter","delta","scaled","zoom","overlaps","rectBottomRight","Size","intersectLine","start1","end1","start2","end2","isSegment","tangensdiff","Empty","toRect","empty","fromPoints","Intersect","lines","segments","rectWithLine","rects","rect1","rect2","intersect","reverseAngle","RectAlign","container","align","content","alignment","alignValues","toLowerCase","_singleAlign","_align","_left","_center","_right","stretch","_stretch","_top","middle","_middle","_bottom","alignCalc","Matrix","e","f","applyRect","fromSVGMatrix","vm","fromMatrixVector","fromList","translation","unit","rotation","sin","scaling","parts","nums","trim","substr","MatrixVector","fromMatrix","randomId","chars","charAt","round","Geometry","_distanceToLineSquared","d2","pt1","pt2","vx","vy","dot","distanceToLine","distanceToPolyline","minimum","Number","MAX_VALUE","p1","p2","HashTable","_buckets","add","_createGetBucket","get","_bucketExists","set","containsKey","hashId","_hash","hashes","_hashes","hash","bucket","ht","_hashString","_objectHashId","charCodeAt","id","_hashId","Dictionary","Observable","dictionary","fn","_hashTable","entry","Error","forEachValue","forEachKey","keys","Queue","_tail","_head","enqueue","next","dequeue","current","Set","resource","kv","toArray","Node","shape","links","outgoing","incoming","weight","associatedShape","bounds","data","shortForm","isVirtual","isIsolated","isLinkedTo","node","that","link","getComplement","getChildren","children","getParents","parents","copy","balance","owner","adjacentTo","removeLink","hasLinkTo","degree","incidentWith","getLinksWith","getNeighbors","neighbors","Link","connection","sourceFound","targetFound","associatedConnection","getCommonNode","isBridging","v1","v2","getNodes","changeSource","changeTarget","changesNodes","w","oldSource","oldTarget","directTo","createReverseEdge","reversed","Graph","idOrDiagram","nodes","_nodeMap","_root","_hasCachedRelationships","cacheRelationships","forceRebuild","assignLevels","startNode","visited","level","child","root","found","getConnectedComponents","componentIndex","setItemIndices","componentId","_collectConnectedNodes","components","addNodeAndOutgoings","setIds","nodeIndex","nextId","calcBounds","getSpanningTree","tree","remaining","_addNode","levelCount","pop","ni","cn","newLink","addLink","treeLevels","takeRandomNode","excludedNodes","incidenceLessThan","pool","isHealthy","hasNode","sourceOrLink","addExistingLink","foundSource","getNode","addNode","foundTarget","removeAllLinks","hasLink","t","linkOrId","nodeOrId","_removeNode","removeNode","areConnected","n1","n2","layoutRect","newNode","newLinks","saveMapping","save","nodeMap","linkMap","nOriginal","nCopy","linkOriginal","linkCopy","linearize","addIds","depthFirstTraversal","action","foundNode","_dftIterator","breadthFirstTraversal","queue","_stronglyConnectedComponents","excludeSingleItems","indices","lowLinks","connected","stack","component","findCycles","isAcyclic","isSubGraph","other","otherArray","thisArray","makeAcyclic","oneNode","rev","N","intensityCatalog","flowIntensity","catalogEqualIntensity","intensity","sourceStack","targetStack","targets","li","targetLink","unshift","sources","si","sourceLink","ri","ril","u","concat","vertexOrder","kk","reversedEdges","Predefined","EightGraph","Mindmap","ThreeGraph","BinaryTree","levels","createBalancedTree","Linear","Tree","siblingsCount","Forest","trees","createBalancedForest","Workflow","Grid","g","previous","graphString","previousLink","graph","part","lin","_addShape","kendoDiagram","shapeDefaults","radius","fill","undoable","addShape","_addConnection","options","connect","createDiagramFromGraph","doLayout","randomSize","clientWidth","clientHeight","opt","color","gli","sourceShape","targetShape","SpringLayout","layoutGraph","limitToView","shi","news","counter","lastAdded","parent","treeCount","createRandomConnectedGraph","nodeCount","maxIncidence","isTree","poolNode","randomAdditions","randomDiagram","shapeCount","normalVariable","mean","deviation","log","undefined$1","drawing","defined","util","TRANSPARENT","Markers","none","arrowStart","filledCircle","arrowEnd","START","END","WIDTH","HEIGHT","diffNumericOptions","fields","field","elementOptions","hasChanges","Scale","toMatrix","format","invert","Translation","toMatrixVector","Length","Rotation","ZERO","create","values","CompositeTransform","translate","transform","render","visual","_transform","_renderTransform","rotateMatrix","scaleMatrix","translatePoint","AutoSizeableMixin","_setScale","originWidth","_originWidth","originHeight","_originHeight","_setTranslate","_initSize","autoSize","_measure","_updateSize","_diffNumericOptions","Element","_originSize","visible","drawingContainer","redraw","drawingElement","matrix","_hover","force","_measured","box","_boundingBox","startPoint","rawBBox","VisualBase","normalizeDrawingOptions","stroke","opacity","_fill","getColor","_stroke","show","hover","strokeOptions","dashType","fillOptions","gradient","GradientClass","RadialGradient","LinearGradient","TextBlock","_textColor","_font","_initText","fontSize","fontFamily","Text","text","font","fontOptions","fontStyle","fontWeight","sizeChanged","textOptions","Rectangle","_initPath","_setPosition","_drawPath","Path","closed","sizeOptions","sizeOptionsOrDefault","elements","createSegment","MarkerBase","anchor","createElement","_transformToPath","path","transformCopy","CircleMarker","Circle","positionMarker","targetSegment","ArrowMarker","xDiff","yDiff","_linePoints","deg","endPoint","controlOut","nextSegment","controlIn","prevSegment","MarkerPathMixin","_getPath","MultiPath","paths","_normalizeMarkerOptions","startCap","endCap","_removeMarker","marker","_markers","_createMarkers","_createMarker","markerType","append","_positionMarker","_capMap","_redrawMarker","pathChange","pathOptions","cap","pathCapType","optionsCap","created","_redrawMarkers","Group","_createElements","_setData","multipath","Line","Polyline","_updatePath","_pointsDiffer","currentPoints","differ","Image","_initImage","src","_rect","_childrenChange","_remove","removeAt","toFront","visuals","toBack","_reorderChildren","toIndex","group","drawingChildren","fixedPosition","boundingBox","childBoundingBox","_includeInBBox","clippedBBox","Layout","toDrawingRect","drawingRect","reflow","_initCircle","circleOptions","move","_circle","setRadius","Canvas","surface","Surface","_translate","_viewBox","viewBox","setSize","draw","insertBefore","destroy","clearHtml","drawingOptions","Color","toHex","Segment","Movable","Cursors","arrow","grip","cross","select","south","east","west","north","rowresize","colresize","HIT_TEST_DISTANCE","AUTO","TOP","RIGHT","LEFT","BOTTOM","DRAG_START","DRAG","DRAG_END","ITEMBOUNDSCHANGE","ROTATED","TARGET","HANDLE_NAMES","PositionAdapter","layoutState","froms","tos","subjects","getShapeById","LayoutUndoUnit","initialState","finalState","animate","_initialState","_finalState","title","undo","setState","redo","state","conn","ticker","CompositeUnit","units","undoUnit","ConnectionEditUnit","redoSource","redoTarget","_redoSource","_redoTarget","_undoSource","_undoTarget","_updateConnector","updateModel","ConnectionEditUndoUnit","undoSource","undoTarget","DeleteConnectionUnit","targetConnector","DeleteShapeUnit","TransformUnit","shapes","undoStates","adorner","redoStates","layout","refreshBounds","refresh","AddConnectionUnit","AddShapeUnit","deselect","PanUndoUnit","initialPosition","finalPosition","finalPos","pan","RotateUnit","undoRotates","redoRotates","redoAngle","_angle","_innerBounds","_initialize","ToFrontUnit","items","initialIndices","_toIndex","ToBackUnit","UndoRedoService","bind","events","capacity","begin","composite","cancel","commit","execute","_restart","addCompositeItem","count","EmptyTool","toolService","tryActivate","getCursor","ScrollerTool","tool","friction","support","mobileOS","canvas","scroller","scrollable","kendoMobileScroller","velocityMultiplier","mousewheelScrolling","scroll","_move","movableCanvas","virtualScroll","dimension","makeVirtual","virtualSize","dimensions","disable","meta","pannable","enabled","ctrlKey","noMeta","hoveredItem","hoveredAdorner","_hoveredConnector","enable","args","scrollPos","scrollLeft","scrollTop","_storePan","moveTo","_pan","PointerTool","selectSingle","handle","_hitTest","_resizingAdorner","isDragHandle","connections","undoRedoService","_getCursor","SelectionTool","selectable","multiple","selector","isSelected","selectArea","ConnectionTool","connector","_createConnection","_c","canDrag","connectionHandle","_connectionManipulation","_removeHover","activeConnection","_cachedTouchTarget","cachedTouchTarget","sourceConnector","Shape","getConnector","_syncConnectionChanges","_connectorsAdorner","ConnectionEditTool","isActive","handleName","testKey","toUpperCase","ToolService","tools","activeTool","_updateHoveredItem","_activateTool","_updateCursor","focus","suspendTracking","updateHovered","resumeTracking","keyDown","metaKey","altKey","toRemove","_triggerRemove","_syncChanges","_destroyToolBar","_discardNewConnection","selectAll","cut","paste","wheel","z","zoomRate","zoomOptions","zoomMin","zoomMax","setTool","addToSelection","newConnection","cursor","css","disabledShape","isNew","hit","_visible","selectedConnections","_selectedItems","Connection","_hitTestItems","_hitTestElements","shapeHit","connectionHit","idx","connectors","hitTestShapeConnectors","mainLayer","ConnectionRouterBase","LinearConnectionRouter","hitTest","getBounds","allPoints","PolylineRouter","route","CascadingRouter","SAME_SIDE_DISTANCE_RATIO","routePoints","_connectorPoints","_floatingPoints","_resolvedSourceConnector","_resolvedTargetConnector","sourcePoint","targetPoint","_connectorSides","axis","boundsPoint","secondarySign","_connectorSide","sideDistance","minSide","side","shapeBounds","sides","MAX_NUM","_sameSideDistance","pointX","pointY","sourceConnectorSide","targetConnectorSide","deltaX","deltaY","sameSideDistance","shiftX","shiftY","cascadeStartHorizontal","_startHorizontal","sourceSide","AdornerBase","_adorners","ConnectionEditAdorner","_ts","sp","tp","spVisual","handles","epVisual","_initialSource","_initialTarget","ts","radiusX","radiusY","sourcePointDistance","distanceTo","targetPointDistance","sourceHandle","targetHandle","modelToLayer","ConnectorsAdorner","_refreshHandler","ctr","_clearVisual","ConnectorVisual","_keepCachedTouchTarget","visualChildren","childrenCount","unbind","each","ResizingAdorner","_manipulating","_initSelection","_createHandles","selected","_internalChange","_rotatedHandler","_resizable","editable","resize","_handleOptions","_bounds","handleBounds","handlesCount","_getHandleBounds","_rotationOffset","_startAngle","_rotates","_positions","initialRotates","initialStates","handleOptions","_sp","_cp","_lp","shapeStates","visibleHandles","currentAngle","dragging","newBounds","staticPoint","dtl","dbr","changed","_truncateAngle","_rotating","shouldSnap","thr","_truncateDistance","hitToOppositeSide","_displaceBounds","newCenter","minWidth","minHeight","oldBounds","states","_truncatePositionToGuides","ruler","truncatePositionToGuides","_truncateSizeToGuides","truncateSizeToGuides","snap","snapOptions","snapAngle","snapSize","drag","_diffStates","_syncShapeChanges","rotationThumb","thumb","_rotationThumbBounds","Selector","_ep","_adorn","visualBounds","modelToView","relative","_visualBounds","shiftKey","HyperTree","EPSILON","DEG_TO_RAD","LayoutBase","defaultOptions","subtype","roots","nodeDistance","iterations","horizontalSeparation","verticalSeparation","underneathVerticalTopOffset","underneathHorizontalOffset","underneathVerticalSeparation","grid","offsetX","offsetY","componentSpacingX","componentSpacingY","layerSeparation","layeredIterations","startRadialAngle","endRadialAngle","radialSeparation","radialFirstLevelSeparation","keepComponentsInOneRadialLayout","ignoreContainers","layoutContainerChildren","ignoreInvisible","animateTransitions","gridLayoutComponents","maxWidth","startX","resultLinkSet","resultNodeSet","moveToOffset","boundingRect","currentHeight","currentWidth","deltax","deltay","nodeBounds","newpoints","pt","currentHorizontalOffset","transferOptions","DiagramToHyperTreeAdapter","shapeMap","edges","edgeMap","finalNodes","finalLinks","ignoredConnections","ignoredShapes","hyperMap","hyperTree","finalGraph","convert","_renormalizeShapes","_renormalizeConnections","l","mapConnection","mapShape","getEdge","listToRoot","containerGraph","parentContainer","firstNonIgnorableContainer","isContainer","_isIgnorableItem","isContainerConnection","isDescendantOf","scope","containers","isIgnorableItem","isCollapsed","_isVisible","_isTop","isShapeMapped","leastCommonAncestor","al","xa","xb","_isCollapsed","sink","sourceNode","sinkNode","areConnectedAlready","newEdge","finalNodeSet","LayoutState","initialTemperature","temperature","guessBounds","_expectedBounds","refineStage","_repulsion","_attraction","_shake","rho","alpha","_InverseSquareForce","wn","hn","wm","hm","pow","_SquareForce","distance","squareSize","area","ceil","TreeLayoutProcessor","treeGraph","layoutSwitch","layoutLeft","setChildrenDirection","setChildrenLayout","TreeDirection","measure","Width","arrange","layoutRight","layoutUp","up","layoutDown","down","treeDirection","layoutRadialTree","previousRoot","startAngle","endAngle","maxDepth","calculateAngularWidth","radialLayout","Angle","tipOverTree","startFromLevel","aw","diameter","sectorAngle","sortChildren","basevalue","pl","nl","normalizeAngle","col","deltaTheta","deltaThetaHalf","parentSector","fraction","sorted","childNode","cp","childAngleFraction","setPolarLocation","BoundingRectangle","direction","includeStart","rootDirection","rootLayout","childrenLayout","givenSize","shapeWidth","shapeHeight","AngleToParent","SectorAngle","pp","childrenwidth","selfLocation","single","male","female","leftcount","tipOverTreeStartLevel","TreeLayout","adapter","layoutComponents","getTree","getTreeForRoot","LayeredLayout","_initRuntimeProperties","layer","downstreamLinkCount","upstreamLinkCount","uBaryCenter","dBaryCenter","upstreamPriority","downstreamPriority","gridPosition","_prepare","targetLayer","layerMap","layerCount","shift","sortedNodes","o2","o1layer","o2layer","minLayer","layers","linksTo","_dummify","_optimizeCrossings","_swapPairs","arrangeNodes","_moveThingsAround","_dedummify","setMinDist","minDist","layerIndex","minDistances","getMinDist","dist","i1","i2","placeLeftToRight","leftClasses","leftPos","classNodes","placeLeft","POSITIVE_INFINITY","rightSibling","nodeLeftClass","D","upNodes","downNodes","neighbor","intDiv","placeRightToLeft","rightClasses","rightPos","placeRight","NEGATIVE_INFINITY","leftSibling","nodeRightClass","_getLeftWing","leftWing","computeClasses","_getRightWing","rightWing","wingPair","currentWing","wing","ndsinl","_nodesInLink","vnode","wings","classIndex","_isVerticalLayout","_isHorizontalLayout","_isIncreasingLayout","_gridPositionComparer","dest","currentNode","currDown","downNode","order","placed","sequenceStart","virtualStartIndex","_firstVirtualNode","virtualStart","sequence","_sequencer","virtualEnd","nextVirtualNode","virtualEndIndex","adjustDirections","ctx","fromLayerIndex","layerIncrement","maximumHeight","MIN_VALUE","prevBridge","prevBridgeTarget","nextBridge","nextBridgeTarget","getNeighborOnLayer","clayer","j1","j2","dir","_sequenceSingle","combineSequences","pair","leftHeap","_positionDescendingComparer","rightHeap","_positionAscendingComparer","leftRes","rightRes","leftClass","_getComposite","rightClass","it","layoutLayer","gridPos","iconsidered","considered","n1Priority","n2Priority","nodeGridPos","nodeBaryCenter","calcBaryCenter","nodePriority","moveRight","moveLeft","calcDownData","calcUpData","priority","rightNode","rightNodePriority","leftNode","leftNodePriority","mapVirtualNode","nodeToLinkMap","linkToNodeMap","addLinkBetweenLayers","upLayer","downLayer","o","oLayer","dLayer","oPos","dPos","depthOfDumminess","dedum","prevLink","moves","iter","optimizeLayerCrossings","sum","total","presorted","n1BaryCenter","n2BaryCenter","compareByIndex","compareValue","inode","maxIterations","downwards","secondPass","hasSwapped","calcCrossings","memCrossings","crossBefore","countLinksCrossingBetweenTwoLayers","node1","node2","node1GridPos","node2GridPos","crossAfter","ulayer","dlayer","link1","link2","n11","n12","n21","n22","l1","l2","crossings","n11gp","n12gp","numerator","denominator","graphOrNodes","capture","diagramOrGraphOrNodes","GraphAdapter","geom","Widget","outerWidth","_outerWidth","outerHeight","_outerHeight","HierarchicalDataSource","isPlainObject","math","NS","CASCADING","CHANGE","CLICK","ERROR","MAXINT","SELECT","ITEMROTATE","PAN","ZOOM_START","ZOOM_END","NONE","TRANSFORMED","MOUSEWHEEL_NS","BUTTON_TEMPLATE","className","icon","themeColor","html","renderButton","DefaultConnectors","getPosition","defaultButtons","imageClass","isAutoConnector","closestConnector","resCtr","minimumDistance","indicesOfItems","extra","defaults","DiagramElement","dataItem","_template","serializable","serialize","json","_content","contentOptions","_contentVisual","_updateContentVisual","_createContentVisual","template","elementTemplate","paramName","_canSelect","toJSON","Connector","shapeId","tempStr","updateOptionsFromModel","createShapeVisual","updateBounds","_createConnectors","_setOptionsFromModel","model","modelOptions","filterShapeDataItem","redrawVisual","_isEditable","_redrawVisual","syncChanges","_suspendModelRefresh","_resumeModelRefresh","_rotate","_alignContent","contentVisual","containerRect","aligner","contentBounds","bbox","contentRect","alignedBounds","connectorDefaults","_transformedBounds","_rotatedBounds","_setBounds","_triggerBoundsChange","_layouting","refreshConnections","cloneDataItem","deselected","_internalSelection","_selectionChanged","deltaAngle","newPosition","sc","con","cons","nameOrPoint","toLocaleLowerCase","fnName","_transformPoint","boundsChange","shapeOptions","shapeVisual","_visualOptions","_updateConnectors","_showConnectors","rotatedPoint","visualOptions","visualTemplate","_initRouter","_sourcePoint","_targetPoint","_setSource","_setTarget","definers","fromConnector","toConnector","dataMap","_dataMap","fromX","fromY","toX","toY","filterConnectionDataItem","connectionsDataSource","getByUid","uid","clearField","shapeSource","defaultConnector","_removeFromSourceConnector","_clearSourceConnector","_setFromOptions","fromPoint","sourceDefiner","_sourceDefiner","shapeTarget","_removeFromTargetConnector","_clearTargetConnector","_setToOptions","toPoint","targetDefiner","_targetDefiner","instance","connectorName","setNewTarget","inactiveItem","_inactiveShapeItems","_deferredConnectionUpdates","onActivate","endIdx","startIdx","alignToPath","midIdx","selection","_router","pts","definition","_resolveConnectors","_refreshPath","sourceConnectors","targetConnectors","_resolveAutoConnectors","minNonConflictSource","minNonConflictTarget","minSource","minTarget","sourceIdx","targetIdx","minNonConflict","_testRoutePoints","router","passRoute","exclude","_getRouteExclude","_shapesQuadTree","hitTestRect","_isPointInsideShape","boundsX","boundsY","Diagram","userOptions","_initTheme","_initElements","_extendLayoutOptions","_initDefaults","_interactionDefaults","_initCanvas","ShapesQuadTree","adornerLayer","_createHandlers","_clipboard","pauseMouseHandlers","_fetchFreshData","_createGlobalToolBar","_createOptionElements","theme","dataSource","draggable","autoBind","tooltip","connectionDefaults","toolBar","DiagramToolBar","click","_toolBarClick","modal","textAlign","prepend","_resize","createShape","editor","view","createModel","_createShape","edit","createConnection","_connectionsDataMap","addConnection","editModel","editorType","editors","cancelEdit","shapeEditors","shapeTemplate","connectionSelectorHandler","connectionSelector","connectionEditors","connectionTemplate","PopupEditor","_update","_cancel","_editArgs","_getEditDataSource","cancelChanges","_destroyEditor","saveEdit","sync","wrapper","close","attr","addClass","appendTo","userShapeDefaults","copyDefaultOptions","mobile","canvasContainer","viewPort","viewport","on","_wheel","_keydown","_userEvents","UserEvents","multiTouch","fastTap","tap","_tap","_dragStart","_drag","_dragEnd","gesturestart","_gestureStart","gesturechange","_gestureChange","gestureend","_gestureEnd","doubleTap","_doubleTap","supportDoubleTap","_mouseover","_mouseout","_mouseMove","_mouseDown","_mouseUp","_syncHandler","_resizeHandler","onResize","_pauseMouseHandlers","_eventPositions","event","_meta","preventDefault","_createToolBar","focused","ctrlPressed","keyCode","origEvent","originalEvent","wheelDelta","detail","mwDelta","touch","pageX","pageY","documentToModel","initialCenter","eventArgs","_gesture","_initialCenter","previousGesture","documentToView","scaleDelta","_zoom","updateZoom","_getValidZoom","zoomedPoint","_panTransform","_updateAdorners","pointPosition","_kendoNode","srcElement","themeOptions","themeName","themes","SASS_THEMES","autoTheme","shapesLength","_createShapes","_createConnections","_findConnectionTarget","unbindResize","off","destroyScroller","_destroyGlobalToolBar","is","_activeElement","scrollContainer","offsets","documentElement","document","parentNode","scrollHeight","load","setOptions","added","removed","_parseBounds","splitDiagramElements","_removeItem","_removeShapeDataItem","_removeConnectionDataItem","_getDiagramItems","_fixOrdering","bringIntoView","original","newPan","_zoomMainLayer","alignShapes","val","raw","hideTooltip","_getPan","animatedScrollTo","scrollTo","_copyOffset","copied","mapping","_updateCopiedConnection","sourceConnection","di","_containerOffset","containerOffset","viewToDocument","viewToModel","_transformWithMatrix","_matrixInvert","_matrix","_layerMatrix","layerToModel","_layerMatrixInvert","viewPoint","modelToDocument","setDataSource","_dataSource","fetch","setConnectionsDataSource","_connectionDataSource","_redrawConnections","getShapeByModelId","getShapeByModelUid","getConnectionByModelId","getConnectionByModelUid","_transformMainLayer","_finishPan","NaN","_storeViewMatrix","_storeLayerMatrix","canvasTransform","shapePos","conPos","removedConnections","_removeShape","_removeConnection","_removeDataItems","recursive","_removeShapeConnections","hasChildren","loaded","_addDataItem","_addDataItemByUid","_addDataItems","parentShape","_refreshSource","dataBound","_bindingRoots","_addItem","preventClosing","singleToolBar","popupZIndex","closest","popupWidth","_popup","popupHeight","connectionBounds","showAt","one","_normalizePointZoom","InactiveItemsCollection","undone","redone","_loadingShapes","_loadingConnections","dsOptions","ds","_shapesRefreshHandler","_shapesRequestStartHandler","_shapesErrorHandler","_refreshShapes","_shapesRequestStart","_error","DataSource","_treeDataSource","_connectionsRefreshHandler","_connectionsRequestStartHandler","_connectionsErrorHandler","_refreshConnections","_connectionsRequestStart","_connectionsError","_shouldRefresh","_removeShapes","_updateShapes","_syncShapes","_suspended","_rebindShapesAndConnections","_addShapes","_addConnections","inactiveItems","activate","dataItems","_removeConnections","_updateConnections","_addConnectionDataItem","_validateConnector","_unbindDataSource","_errorHandler","adorners","_refresh","hide","exportDOMVisual","scrollOffset","viewRect","clipPath","fromRect","wrap","clipWrap","clip","exportVisual","when","then","deferredConnectionUpdates","ExportMixin","PDFMixin","_tools","createToolBar","createTools","appendTools","createPopup","kendoPopup","getKendoPopup","buttons","_toolBar","kendoToolBar","resizable","getKendoToolBar","createTool","toolName","attributes","_setAttributes","open","newGroup","editTool","showText","deleteTool","rotateAnticlockwiseTool","_appendGroup","_rotateGroup","rotateClockwiseTool","createShapeTool","_createGroup","createConnectionTool","undoTool","_historyGroup","redoTool","prop","_getAttributes","eventData","selectedElements","delete","selectedElemens","rotateClockwise","rotateAnticlockwise","Editor","_getFields","_initContainer","createEditable","Editable","clearContainer","modelFields","columns","formContent","_renderTemplate","_renderFields","_renderButtons","Window","userTriggered","sender","_cancelClick","_attachButtonEvents","unescape","form","_createButton","_cancelClickHandler","_updateClickHandler","_updateClick","_editUpdateClickHandler","reader","textField","idField","kendoDropDownList","dataValueField","dataTextField","optionLabel","valuePrimitive","InactiveItem","callbacks","callback","deffered","Deferred","deferred","resolve","QuadRoot","_add","_quadNode","_testRect","QuadNode","inBounds","nodeRect","nodeBottomRight","overlapsBounds","inserted","_initChildren","childIdx","shapeIdx","halfWidth","halfHeight","ROOT_SIZE","boundsChangeHandler","_boundsChange","initRoots","rootMap","rootSize","sectors","getSectors","inRoot","bottomX","bottomY","xIdx","yIdx","Model","_defaultId","ObservableObject","mainOptions","plugin","kendo$1","__meta__","category","description","depends","features","default","defineProperty"],"sources":["kendo.dataviz.diagram.js"],"mappings":"CAAA,SAAWA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,wBAAyBA,QAAQ,uBAAwBA,QAAQ,4BAA6BA,QAAQ,iBAAkBA,QAAQ,yBAA0BA,QAAQ,oBAAqBA,QAAQ,oBAAqBA,QAAQ,qBAAsBA,QAAQ,mBAAoBA,QAAQ,yBAA0BA,QAAQ,2BAA4BA,QAAQ,yBAC5b,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,CAAC,UAAW,aAAc,oBAAqB,mBAAoB,wBAAyB,iBAAkB,qBAAsB,gBAAiB,gBAAiB,iBAAkB,eAAgB,qBAAsB,uBAAwB,qBAAsBJ,GACrPA,IAA1ED,EAA+B,oBAAfO,WAA6BA,WAAaP,GAAUQ,MAAsBC,MAAQT,EAAOS,OAAS,CAAC,EAAGT,EAAOS,MAAMC,SAAWV,EAAOS,MAAMC,UAAY,CAAC,EAAGV,EAAOS,MAAMC,SAASC,eAAiB,CAAC,GACvN,CAJD,CAIGC,MAAM,SAAWV,IAChB,SAAUW,GACN,IAAIJ,EAAQK,OAAOL,MACfM,EAAUN,EAAMO,QAAQD,QAAU,CAAC,EACnCE,EAAaR,EAAMQ,WACnBC,EAAUC,MAAMD,QAIhBE,EAAQ,CACZ,EAEAH,EAAWG,EAAO,CACdC,WAAY,SAASC,GACjB,OAAOC,KAAKC,IAAIF,GARV,IASV,EACAG,UAAW,SAASC,GAChB,YAAsB,IAARA,CAClB,EAEAC,YAAa,SAASD,GAClB,OAAO,MAAQA,CACnB,EAIAE,SAAU,SAASF,GACf,OAAOA,IAAQG,OAAOH,EAC1B,EAIAI,IAAK,SAASJ,EAAKK,GACf,OAAOF,OAAOG,eAAeC,KAAKP,EAAKK,EAC3C,EAIAG,SAAU,SAASR,GACf,MAA8C,mBAAvCG,OAAOM,UAAUC,SAASH,KAAKP,EAC1C,EACAW,UAAW,SAASX,GAChB,MAA8C,oBAAvCG,OAAOM,UAAUC,SAASH,KAAKP,EAC1C,EACAY,OAAQ,SAASZ,EAAKa,GAClB,OAAOV,OAAOM,UAAUC,SAASH,KAAKP,IAAQ,WAAaa,EAAO,GACtE,EAIAC,SAAU,SAASd,GACf,OAAQe,MAAMC,WAAWhB,KAASiB,SAASjB,EAC/C,EAIAkB,QAAS,SAASlB,GACd,GAAY,OAARA,EACA,OAAO,EAEX,GAAIR,EAAQQ,IAAQN,EAAMc,SAASR,GAC/B,OAAsB,IAAfA,EAAImB,OAEf,IAAK,IAAId,KAAOL,EACZ,GAAIN,EAAMU,IAAIJ,EAAKK,GACf,OAAO,EAGf,OAAO,CACX,EACAe,aAAc,SAASC,EAAaC,GAChC,GAAK5B,EAAMQ,SAASoB,GAIpB,IAAK,IAAIC,KAAQD,EACbD,EAAYE,GAAQD,EAAOC,EAEnC,EAOAC,UAAW,SAAuBC,EAAMC,GAEpC,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIH,IAAQG,EACxBD,EAAMC,GAAKF,EAEf,OAAOC,CACX,EACAE,gBAAiB,SAASC,GAEtB,IADA,IAAIC,EAAM,GACDH,EAAI,EAAGA,EAAIE,EAAOX,OAAQS,IAAK,CACpC,IAAII,EAAIF,EAAOF,GACfG,EAAIE,KAAKD,EAAEE,EAAI,IAAMF,EAAEG,EAC3B,CACA,OAAOJ,EAAIK,KAAK,IACpB,EACAC,kBAAmB,SAASC,GACxB,IAAIC,EAAID,EAAEE,MAAM,KAAMV,EAAS,GAC/B,GAAIS,EAAEpB,OAAS,GAAM,EACjB,KAAM,0BAEV,IAAK,IAAIS,EAAI,EAAGA,EAAIW,EAAEpB,OAAQS,GAAK,EAC/BE,EAAOG,KAAK,IAAI5C,EAAQoD,MACpBC,SAASH,EAAEX,GAAI,IACfc,SAASH,EAAEX,EAAI,GAAI,MAG3B,OAAOE,CACX,EAOAa,cAAe,SAASC,EAAOC,GAC3B,OAAOH,SAAS7C,KAAKiD,MAAMjD,KAAKkD,SAAWF,GAASD,EAAO,GAC/D,EAIAI,IAAK,SAASC,EAAIC,GAEd,GADAA,EAAKD,GACDA,EAAGE,WACH,IAAK,IAAIvB,EAAI,EAAGA,EAAIqB,EAAGE,WAAWhC,OAAQS,IAAK,CAC3C,IAAIwB,EAAOH,EAAGE,WAAWvB,GACzB1C,KAAK8D,IAAII,EAAMF,EACnB,CAER,EAIAG,eAAgB,SAASC,GACrB,OAAU,OAANA,GAAsB,IAARA,EAAEC,EACT,EAEmB,IAAvB1D,KAAK2D,MAAMF,EAAEG,EAAGH,EAAEC,GAAW1D,KAAK6D,EAC7C,EAKAC,iBAAkB,SAASL,GAGvB,MAAO,CAFEzD,KAAK+D,KAAKN,EAAEO,EAAIP,EAAEO,EAAIP,EAAEQ,EAAIR,EAAEQ,GAC9BjE,KAAK+D,KAAKN,EAAEG,EAAIH,EAAEG,EAAIH,EAAEC,EAAID,EAAEC,GAE3C,IAqEJ7D,EAAMqE,KAAO,SAASC,GAClB,OAAOA,EAASA,EAAS,GAAK,EAAI,EAAI,CAC1C,EAEAtE,EAAMuE,UAAY,SAASC,EAAQC,GAC/B,OAAiC,IAlBrC,SAAoBC,EAAOD,GACvB,GAAIC,GAASD,EACT,OAAO,EAEX,IAAIE,EAAWF,EAAIjC,EAAIkC,EAAMlC,EACzBoC,EAAWF,EAAMjC,EAAIgC,EAAIhC,EACzBoC,EAAO1E,KAAK0E,KAAKF,EAAWC,GAChC,OAAIA,GAAY,EACLD,EAAW,EAAIE,EAAQ,EAAI1E,KAAK6D,GAAMa,EAE1CA,EAAO1E,KAAK6D,EACvB,CAOWc,CAAWN,EAAQC,GAAatE,KAAK6D,EAChD,EAIAhE,EAAM+E,QAAU,SAASC,EAAKC,EAAUC,GACpC,IAAK,IAAIhD,EAAI,EAAGA,EAAI8C,EAAIvD,OAAQS,IAC5B+C,EAASpE,KAAKqE,EAASF,EAAI9C,GAAIA,EAAG8C,EAE1C,EAEAhF,EAAMmF,IAAM,SAASH,EAAKI,GACtB,IAAK,IAAIlD,EAAI,EAAGA,EAAI8C,EAAIvD,SAAUS,EAC9B,GAAIkD,EAAUJ,EAAI9C,IACd,OAAO8C,EAAI9C,GAGnB,OAAO,IACX,EAEAlC,EAAMqF,OAAS,SAASL,EAAKM,GAEzB,IADA,IAAIC,GACwC,KAApCA,EAAKvF,EAAMwF,QAAQR,EAAKM,KAC5BN,EAAIS,OAAOF,EAAI,GAEnB,OAAOP,CACX,EAEAhF,EAAM0F,SAAW,SAASV,EAAK1E,GAC3B,OAAoC,IAA7BN,EAAMwF,QAAQR,EAAK1E,EAC9B,EAEAN,EAAMwF,QAAU,SAASR,EAAKM,GAC1B,OAAO7F,EAAEkG,QAAQL,EAAMN,EAC3B,EAEAhF,EAAM4F,KAAO,SAASC,EAAMZ,EAAUa,EAAKC,GAGvC,IAFA,IAAIC,EAAUC,UAAUxE,OAAS,EAExBS,EAAI,EAAGA,EAAI2D,EAAKpE,OAAQS,IAAK,CAClC,IAAIF,EAAQ6D,EAAK3D,GACZ8D,EAKDF,EAAMb,EAASpE,KAAKkF,EAASD,EAAK9D,EAAOE,EAAG2D,IAJ5CC,EAAM9D,EACNgE,GAAU,EAKlB,CAEA,IAAKA,EACD,KAAM,8CAGV,OAAOF,CACX,EAEA9F,EAAMkG,KAAO,SAASlB,EAAKC,EAAUc,GACjC,IAAII,EAQJ,OAPAnG,EAAMmF,IAAIH,GAAK,SAAShD,EAAOoE,EAAOP,GAClC,QAAIZ,EAASpE,KAAKkF,EAAS/D,EAAOoE,EAAOP,KACrCM,EAASnE,GACF,EAGf,IACOmE,CACX,EAEAnG,EAAMqG,MAAQ,SAASrB,EAAKsB,EAAYP,GACpC,OAAmB,IAAff,EAAIvD,OACG,KAEPzB,EAAMO,YAAY+F,GACXtB,EAAI,GAGRhF,EAAMkG,KAAKlB,EAAKsB,EAAYP,EACvC,EAKA/F,EAAMuG,OAAS,SAASvB,EAAKwB,EAASC,GAElC,OADAzB,EAAIS,OAAOgB,EAAU,EAAGD,GACjBxB,CACX,EAEAhF,EAAM0G,IAAM,SAAS1B,EAAKC,EAAUc,GAIhC,IAHA,IACI/D,EADAmE,GAAS,EAGJjE,EAAI,EAAGA,EAAI8C,EAAIvD,SACpBO,EAAQgD,EAAI9C,GACZiE,EAASA,GAAUlB,EAASpE,KAAKkF,EAAS/D,EAAOE,EAAG8C,IAFxB9C,KAShC,OAAOiE,CACX,EAEAnG,EAAM2G,MAAQ,SAAS3B,GACnBA,EAAIS,OAAO,EAAGT,EAAIvD,OACtB,EAQAzB,EAAM4G,OAAS,SAASzC,EAAGJ,EAAG8C,GAC1B,GAAI7G,EAAMO,YAAY4D,GAClB,KAAM,gCAEV,GAAInE,EAAMO,YAAYwD,GAClB,KAAM,iCAEV,GAAII,EAAE1C,QAAUsC,EAAEtC,OACd,KAAM,0CAGV,IAAcS,EAAVwE,EAAM,GAEV,IAAKxE,EAAI,EAAGA,EAAIiC,EAAE1C,OAAQS,IACtBwE,EAAInE,KAAK,CAAEC,EAAK2B,EAAEjC,GAAIO,EAAKsB,EAAE7B,KAgBjC,IAdIlC,EAAMO,YAAYsG,GAClBH,EAAII,MAAK,SAASlD,EAAGmD,GACjB,OAAOnD,EAAEpB,EAAIuE,EAAEvE,CACnB,IAGAkE,EAAII,MAAK,SAASlD,EAAGmD,GACjB,OAAOF,EAASjD,EAAEpB,EAAGuE,EAAEvE,EAC3B,IAGJxC,EAAM2G,MAAMxC,GACZnE,EAAM2G,MAAM5C,GAEP7B,EAAI,EAAGA,EAAIwE,EAAIjF,OAAQS,IACxBiC,EAAE5B,KAAKmE,EAAIxE,GAAGM,GACduB,EAAExB,KAAKmE,EAAIxE,GAAGO,EAEtB,EAEAzC,EAAMgH,SAAW,SAAShC,EAAKiC,GAC3BjC,EAAIzC,KAAK2E,MAAMlC,EAAKiC,EACxB,EAEA,IAAIE,EACW,SAASC,GAChB,OAAUjH,KAAKkH,IAAID,EAAMjH,KAAK6D,IAAM,EAAK,EAC7C,EAQAsD,EAASjI,EAAMkI,MAAMC,OAAO,CAC5BC,KAAM,WACFjI,KAAKkI,SAAW,GAChBlI,KAAKmI,OAAS,EACdnI,KAAKoI,KAAO,EACZpI,KAAKqI,SAAW,GAChBrI,KAAKsI,SAAW,IAChBtI,KAAKuI,SAAW,KAChBvI,KAAKwI,SAAW,GAChB,IAAIC,EAAQzI,KACZA,KAAK0I,WAAaf,EAClB3H,KAAK2I,cAAgB,WACjBF,EAAMG,cACV,CACJ,EACAC,WAAY,SAASlE,GACjB3E,KAAKkI,SAASnF,KAAK4B,EACvB,EACAmE,WAAY,SAASC,GACjB/I,KAAKwI,SAASzF,KAAKgG,EACvB,EACAC,cAAe,SAASD,GACpB/I,KAAKwI,SAAWvI,EAAEgJ,KAAKjJ,KAAKwI,UAAU,SAASU,GAC3C,OAAOA,IAAMH,CACjB,GACJ,EACAI,QAAS,WACL,IAAIV,EAAQzI,KACRA,KAAKwI,UACLhI,EAAM+E,QAAQvF,KAAKwI,UAAU,SAASU,GAClC,OAAOA,EAAE7H,KAAsB,OAAjBoH,EAAMW,OAAkBX,EAAMW,OAASX,EACzD,GAER,EACAY,OAAQ,WACR,EACAC,OAAQ,SAASC,GACbvJ,KAAKwJ,WAAWxJ,KAAKoI,KAAMmB,EAC/B,EACAC,WAAY,SAASC,EAAMF,GACvBvJ,KAAKmI,OAASxH,KAAK+I,IAAI,EAAG/I,KAAKgJ,IAAI,EAAGJ,IACtCvJ,KAAKoI,KAAOzH,KAAK+I,IAAI,EAAG/I,KAAKgJ,IAAI,EAAGF,IACpCzJ,KAAKuI,UAAW,IAAIqB,MAAOC,UACtB7J,KAAK8J,aACN9J,KAAK8J,WAAa5J,OAAO6J,YAAY/J,KAAK2I,cAAe3I,KAAKqI,UAEtE,EACA2B,KAAM,WACEhK,KAAK8J,aACL5J,OAAO+J,cAAcjK,KAAK8J,YAC1B9J,KAAK8J,WAAa,KAGlB9J,KAAKmJ,UAGb,EACAe,KAAM,SAASC,GACkB,IAAzBnK,KAAKkI,SAASjG,SAGH,OAAXkI,IACAnK,KAAKoJ,OAASe,GAElBnK,KAAKoK,YACLpK,KAAKwJ,WAAW,EAAG,GACvB,EACAa,QAAS,WACLrK,KAAKwJ,WAAW,EAAG,EACvB,EACAY,UAAW,WACP,GAA6B,IAAzBpK,KAAKkI,SAASjG,OAGlB,IAAK,IAAIS,EAAI,EAAGA,EAAI1C,KAAKkI,SAASjG,OAAQS,IACtC1C,KAAKkI,SAASxF,GAAG0H,WAEzB,EACAE,UAAW,WAGP,IAFA,IAAI9H,EAAQxC,KAAK0I,WAAW1I,KAAKoI,MAExB1F,EAAI,EAAGA,EAAI1C,KAAKkI,SAASjG,OAAQS,IACtC1C,KAAKkI,SAASxF,GAAG6H,OAAO/H,EAEhC,EACAoG,aAAc,WACV,IAAI4B,GAAM,IAAIZ,MAAOC,UACjBY,EAAaD,EAAMxK,KAAKuI,SAC5BvI,KAAKuI,SAAWiC,EAChB,IAAIE,EAAYD,EAAazK,KAAKsI,UAAatI,KAAKoI,KAAOpI,KAAKmI,OAAS,GAAK,GAC1ExH,KAAKC,IAAI8J,IAAa/J,KAAKC,IAAIZ,KAAKoI,KAAOpI,KAAKmI,QAChDnI,KAAKoI,KAAOpI,KAAKmI,OAEjBnI,KAAKoI,MAAQsC,EAGjB,IACI1K,KAAKsK,WACT,CAAE,QACEtK,KAAKqJ,OAAOhI,KAAKrB,MACbA,KAAKmI,QAAUnI,KAAKoI,MACpBpI,KAAKgK,MAEb,CACJ,IAGJnK,EAAMQ,WAAWF,EAAS,CACtB8H,KAAM,SAASjB,GACXnH,EAAMoI,KAAKjB,EAAS7G,EAAQwK,GAChC,EAEAnK,MAAOA,EACPoK,MArVJ,SAAe1F,EAAO8E,EAAMa,GACxB,QAAoB,IAAT3F,QAAuC,IAAR8E,EACtC,MAAO,GAEX,GAAIa,GAAQrK,EAAMqE,KAAKmF,EAAO9E,IAAU1E,EAAMqE,KAAKgG,GAC/C,KAAM,kEAKV,GAFA3F,EAAQA,GAAS,IACjB8E,EAAOA,GAAQ9E,GACHA,IAHZ2F,EAAOA,GAAQ,IAGeC,IAC1B,KAAM,0BAEV,IAAwBC,EAApBtD,EAAQ,GAAI/E,GAAK,EAUjBsI,EARJ,SAA2BhI,GAEvB,IADA,IAAIgI,EAAI,EACDhI,EAAIgI,EAAI,GACXA,GAAK,GAET,OAAOA,CACX,CAEQC,CAAkBtK,KAAKC,IAAIiK,IAOnC,GAJAA,GAAQG,GAFR9F,GAAS8F,IACThB,GAAQgB,IAEYH,EAAO,IACvBA,GAAQA,GAERA,EAAO,EACP,MAAQE,EAAI7F,EAAQ2F,IAASnI,IAAMsH,GAC/BvC,EAAM1E,KAAKgI,EAAIC,QAInB,MAAQD,EAAI7F,EAAQ2F,IAASnI,IAAMsH,GAC/BvC,EAAM1E,KAAKgI,EAAIC,GAGvB,OAAOvD,CACX,EA6SIK,OAAQA,GAEf,CAzfD,CAyfG5H,OAAOL,MAAMqL,QAEhB,SAAUjL,GAEN,IAAIJ,EAAQK,OAAOL,MACfM,EAAUN,EAAMO,QAAQD,QACxB4H,EAAQlI,EAAMkI,MACd1H,EAAaR,EAAMQ,WACnBG,EAAQL,EAAQK,MAChB+C,EAAQ1D,EAAMsL,SAAS5H,MACvB6H,EAAavL,EAAMuL,WACnBlF,EAAW1F,EAAM0F,SACjBmF,EAAMpL,EAAEoL,IAMZ,MAAMC,UAAsB/H,EACxB,WAAAgI,CAAYvI,EAAGC,GACXuI,MAAMxI,EAAGC,EACb,CAEA,KAAAwI,GACI,OAAO,IAAIH,EAActL,KAAKgD,EAAGhD,KAAKiD,EAC1C,CAEA,IAAAyI,CAAK5I,GACD,OAAO,IAAIwI,EAActL,KAAKgD,EAAIF,EAAEE,EAAGhD,KAAKiD,EAAIH,EAAEG,EACtD,CAEA,KAAA0I,CAAM7I,GACF,OAAO,IAAIwI,EAActL,KAAKgD,EAAIF,EAAEE,EAAGhD,KAAKiD,EAAIH,EAAEG,EACtD,CAEA,MAAA2I,CAAOpJ,GACH,OAAO,IAAI8I,EAActL,KAAKgD,EAAIR,EAAOxC,KAAKiD,EAAIT,EACtD,CAEA,KAAAqJ,CAAMzI,GACF,OAAO,IAAIkI,EAActL,KAAKgD,EAAII,EAAGpD,KAAKiD,EAAIG,EAClD,CAEA,SAAA0I,GACI,OAAsB,IAAlB9L,KAAKiC,SACE,IAAIqJ,EAERtL,KAAK6L,MAAM,EAAI7L,KAAKiC,SAC/B,CAEA,MAAAA,GACI,OAAOtB,KAAK+D,KAAK1E,KAAKgD,EAAIhD,KAAKgD,EAAIhD,KAAKiD,EAAIjD,KAAKiD,EACrD,CAEA,QAAAzB,GACI,MAAO,IAAMxB,KAAKgD,EAAI,IAAMhD,KAAKiD,EAAI,GACzC,CAEA,aAAA8I,GACI,OAAQ/L,KAAKgD,EAAIhD,KAAKgD,EAAIhD,KAAKiD,EAAIjD,KAAKiD,CAC5C,CAEA,QAAA+I,CAASlJ,EAAGmJ,GACR,OAAO,IAAIX,EAAcW,EAAEjJ,EAAIF,EAAEE,EAAGiJ,EAAEhJ,EAAIH,EAAEG,GAAG4I,MAAM,IAAKH,KAAK5I,EACnE,CAEA,OAAAoJ,CAAQC,GACJ,IAAIC,EAAS,EACTD,IACAC,EAAS,IAAMzL,KAAK6D,IAExB,IAAIG,EAAIhE,KAAK2D,MAAM3D,KAAKC,IAAIZ,KAAKiD,GAAItC,KAAKC,IAAIZ,KAAKgD,IAC/CqJ,EAAS1L,KAAK6D,GAAK,EACnB8H,EAAMtM,KAAKiC,SACf,GAAe,IAAXjC,KAAKgD,EAAS,CAGd,GAAe,IAAXhD,KAAKiD,EACL,OAAO,IAAIsJ,EAAM,EAAG,GAExB,GAAIvM,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAKF,EAASC,GAEnC,GAAIrM,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAc,EAATF,EAAaC,EAE3C,MACK,GAAIrM,KAAKgD,EAAI,EAAG,CACjB,GAAe,IAAXhD,KAAKiD,EACL,OAAO,IAAIsJ,EAAMD,EAAK,GAE1B,GAAItM,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAKF,EAASzH,GAEnC,GAAI3E,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAKF,GAAU,EAAIC,EAAS1H,GAErD,KACK,CACD,GAAe,IAAX3E,KAAKiD,EACL,OAAO,IAAIsJ,EAAMD,EAAK,EAAID,GAE9B,GAAIrM,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAKF,GAAU,EAAIC,EAAS1H,IAEjD,GAAI3E,KAAKiD,EAAI,EACT,OAAO,IAAIsJ,EAAMD,EAAKF,GAAU,EAAIC,EAAS1H,GAErD,CACJ,CACA,QAAA6H,CAAS/C,EAAMF,GACX,GAAIE,EAAKzG,EAAIuG,EAAGvG,EAAG,CACf,IAAIyJ,EAAOlD,EACXA,EAAKE,EACLA,EAAOgD,CACX,CACA,IACiEC,EAAIC,EADjEC,EAAK,IAAIC,EAAKpD,EAAKzG,EAAGyG,EAAKxG,GAAG6J,QArGxB,KAsGNC,EAAK,IAAIF,EAAKtD,EAAGvG,EAAGuG,EAAGtG,GAAG6J,QAtGpB,KAuGV,QAAIF,EAAGI,MAAMD,GAAI7G,SAASlG,QAClByJ,EAAKzG,IAAMuG,EAAGvG,GAAKyG,EAAKxG,IAAMsG,EAAGtG,IAG5BwG,EAAKxG,EAAIsG,EAAGtG,GACjByJ,EAAKE,EAAG5J,GAAO+J,EAAG/J,EAAI4J,EAAG5J,IAAMhD,KAAKiD,GAAK2J,EAAG3J,EAAI2J,EAAGK,UAAcF,EAAG9J,EAAI8J,EAAGE,QAAWL,EAAG3J,EAAI2J,EAAGK,SAChGN,EAAMC,EAAG5J,EAAI4J,EAAGM,OAAaH,EAAG/J,EAAI+J,EAAGG,OAAUN,EAAG5J,EAAI4J,EAAGM,SAAWlN,KAAKiD,EAAI2J,EAAG3J,IAAO8J,EAAG9J,EAAI2J,EAAG3J,KAGnGyJ,EAAKE,EAAG5J,GAAO+J,EAAG/J,EAAI4J,EAAG5J,IAAMhD,KAAKiD,EAAI2J,EAAG3J,IAAO8J,EAAG9J,EAAI2J,EAAG3J,GAC5D0J,EAAMC,EAAG5J,EAAI4J,EAAGM,OAAaH,EAAG/J,EAAI+J,EAAGG,OAAUN,EAAG5J,EAAI4J,EAAGM,SAAWlN,KAAKiD,GAAK2J,EAAG3J,EAAI2J,EAAGK,UAAcF,EAAG9J,EAAI8J,EAAGE,QAAWL,EAAG3J,EAAI2J,EAAGK,UAEnIjN,KAAKgD,EAAI0J,GAAM1M,KAAKgD,EAAI2J,GAGxC,CACA,KAAAQ,CAAMC,GACF,IACIC,EADUD,EAAIE,MAAM,EAAGF,EAAInL,OAAS,GACvBqB,MAAM,KACnBN,EAAIQ,SAAS6J,EAAG,GAAI,IACpBpK,EAAIO,SAAS6J,EAAG,GAAI,IACxB,IAAKxL,MAAMmB,KAAOnB,MAAMoB,GACpB,OAAO,IAAIqI,EAActI,EAAGC,EAEpC,EAQJ,IAAIsK,EAAcxF,EAAMC,OACpB,CACIC,KAAM,SAASnF,EAAG0K,EAAMC,GACpBzN,KAAK0N,MAAQ5K,EACb9C,KAAKwN,KAAOA,EACZxN,KAAKyN,MAAQA,CACjB,IAOJZ,EAAO9E,EAAMC,OAAO,CACpBC,KAAM,SAASjF,EAAGC,EAAGiK,EAAOD,GACxBjN,KAAKgD,EAAIA,GAAK,EACdhD,KAAKiD,EAAIA,GAAK,EACdjD,KAAKkN,MAAQA,GAAS,EACtBlN,KAAKiN,OAASA,GAAU,CAC5B,EACA/G,SAAU,SAASwH,GACf,OAASA,EAAM1K,GAAKhD,KAAKgD,GAAO0K,EAAM1K,GAAMhD,KAAKgD,EAAIhD,KAAKkN,OAAYQ,EAAMzK,GAAKjD,KAAKiD,GAAOyK,EAAMzK,GAAMjD,KAAKiD,EAAIjD,KAAKiN,MAC3H,EACAH,QAAS,SAASa,EAAIC,GASlB,OApLZ,YA4KgBA,IACAA,EAAKD,GAGT3N,KAAKgD,GAAK2K,EACV3N,KAAKiD,GAAK2K,EACV5N,KAAKkN,OAAS,EAAIS,EAAK,EACvB3N,KAAKiN,QAAU,EAAIW,EAAK,EACjB5N,IACX,EACA4L,OAAQ,SAAS+B,EAAIC,GACjB,IAAI5K,EAAI2K,EAAI1K,EAAI2K,EAOhB,OANID,aAAcrC,IACdtI,EAAI2K,EAAG3K,EACPC,EAAI0K,EAAG1K,GAEXjD,KAAKgD,GAAKA,EACVhD,KAAKiD,GAAKA,EACHjD,IACX,EACAgN,MAAO,SAASa,GACZ,IAAIC,EAAKnN,KAAKgJ,IAAI3J,KAAKgD,EAAG6K,EAAE7K,GACxB+K,EAAKpN,KAAKgJ,IAAI3J,KAAKiD,EAAG4K,EAAE5K,GACxB+K,EAAKrN,KAAK+I,IAAK1J,KAAKgD,EAAIhD,KAAKkN,MAASW,EAAE7K,EAAI6K,EAAEX,OAC9Ce,EAAKtN,KAAK+I,IAAK1J,KAAKiD,EAAIjD,KAAKiN,OAAUY,EAAE5K,EAAI4K,EAAEZ,QACnD,OAAO,IAAIJ,EAAKiB,EAAIC,EAAIC,EAAKF,EAAIG,EAAKF,EAC1C,EACA/I,OAAQ,WACJ,OAAO,IAAIsG,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAQ,EAAGlN,KAAKiD,EAAIjD,KAAKiN,OAAS,EAC7E,EACAiB,IAAK,WACD,OAAO,IAAI5C,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAQ,EAAGlN,KAAKiD,EAC3D,EACAwK,MAAO,WACH,OAAO,IAAInC,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAOlN,KAAKiD,EAAIjD,KAAKiN,OAAS,EACzE,EACAkB,OAAQ,WACJ,OAAO,IAAI7C,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAQ,EAAGlN,KAAKiD,EAAIjD,KAAKiN,OACpE,EACAO,KAAM,WACF,OAAO,IAAIlC,EAActL,KAAKgD,EAAGhD,KAAKiD,EAAIjD,KAAKiN,OAAS,EAC5D,EACAmB,QAAS,WACL,OAAO,IAAI9C,EAActL,KAAKgD,EAAGhD,KAAKiD,EAC1C,EACAoL,SAAU,WACN,OAAO,IAAI/C,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAOlN,KAAKiD,EACvD,EACAqL,WAAY,WACR,OAAO,IAAIhD,EAActL,KAAKgD,EAAGhD,KAAKiD,EAAIjD,KAAKiN,OACnD,EACAsB,YAAa,WACT,OAAO,IAAIjD,EAActL,KAAKgD,EAAIhD,KAAKkN,MAAOlN,KAAKiD,EAAIjD,KAAKiN,OAChE,EACAxB,MAAO,WACH,OAAO,IAAIoB,EAAK7M,KAAKgD,EAAGhD,KAAKiD,EAAGjD,KAAKkN,MAAOlN,KAAKiN,OACrD,EACAjL,QAAS,WACL,OAAQhC,KAAKkN,QAAUlN,KAAKiN,MAChC,EACAuB,OAAQ,SAASC,GACb,OAAOzO,KAAKgD,IAAMyL,EAAKzL,GAAKhD,KAAKiD,IAAMwL,EAAKxL,GAAKjD,KAAKkN,QAAUuB,EAAKvB,OAASlN,KAAKiN,SAAWwB,EAAKxB,MACvG,EACAyB,cAAe,SAASC,GACpB,IAAIF,EAAOzO,KAAKyL,QACZ7I,EAAS5C,KAAK4O,cAAcD,GAC5BE,EAAKjM,EAAO,GACZkM,EAAKlM,EAAO,GACZmM,EAAKnM,EAAO,GACZoM,EAAKpM,EAAO,GAOhB,OALA6L,EAAKzL,EAAIrC,KAAKgJ,IAAIoF,EAAG/L,EAAG6L,EAAG7L,EAAG8L,EAAG9L,EAAGgM,EAAGhM,GACvCyL,EAAKxL,EAAItC,KAAKgJ,IAAIoF,EAAG9L,EAAG4L,EAAG5L,EAAG6L,EAAG7L,EAAG+L,EAAG/L,GACvCwL,EAAKvB,MAAQvM,KAAK+I,IAAIqF,EAAG/L,EAAG6L,EAAG7L,EAAG8L,EAAG9L,EAAGgM,EAAGhM,GAAKyL,EAAKzL,EACrDyL,EAAKxB,OAAStM,KAAK+I,IAAIqF,EAAG9L,EAAG4L,EAAG5L,EAAG6L,EAAG7L,EAAG+L,EAAG/L,GAAKwL,EAAKxL,EAE/CwL,CACX,EACAG,cAAe,SAASD,GACpB,IAAIF,EAAOzO,KACP4E,EAAI6J,EAAKzJ,SACT+J,EAAKN,EAAKF,cAAcU,OAAON,EAAO/J,GAK1C,MAAO,CAJE6J,EAAKL,UAAUa,OAAON,EAAO/J,GAC7B6J,EAAKJ,WAAWY,OAAON,EAAO/J,GAGvBmK,EAFPN,EAAKH,aAAaW,OAAON,EAAO/J,GAG7C,EACApD,SAAU,SAAS0N,GAGf,OAFAA,EAAYA,GAAa,IAElBlP,KAAKgD,EAAIkM,EAAYlP,KAAKiD,EAAIiM,EAAYlP,KAAKkN,MAAQgC,EAAYlP,KAAKiN,MACnF,EACAkC,MAAO,SAASC,EAAQC,EAAQC,EAAYC,EAAeZ,GACvD,IAAIE,EAAK7O,KAAKoO,UACVoB,EAAaxP,KAAKgF,SACtB6J,EAAGI,OAAON,EAAOa,GAAYP,OAAON,EAAOY,GAE3C,IAAIE,EAAQH,EAAW3D,MAAMkD,GACzBa,EAAS,IAAIpE,EAAcmE,EAAMzM,EAAIoM,EAAQK,EAAMxM,EAAIoM,GACvDpI,EAAWwI,EAAM9D,MAAM+D,IAC3Bb,EAAKA,EAAGnD,KAAKzE,IACVgI,OAAON,EAAOY,GAAeN,OAAON,EAAOa,GAE9CxP,KAAKgD,EAAI6L,EAAG7L,EACZhD,KAAKiD,EAAI4L,EAAG5L,EAEZjD,KAAKkN,OAASkC,EACdpP,KAAKiN,QAAUoC,CACnB,EAEAM,KAAM,SAASA,GAKX,OAJA3P,KAAKgD,GAAK2M,EACV3P,KAAKiD,GAAK0M,EACV3P,KAAKkN,OAASyC,EACd3P,KAAKiN,QAAU0C,EACR3P,IACX,EAEA4P,SAAU,SAASnB,GACf,IAAIF,EAAcvO,KAAKuO,cACnBsB,EAAkBpB,EAAKF,cAG3B,QAFiBA,EAAYvL,EAAIyL,EAAKzL,GAAKuL,EAAYtL,EAAIwL,EAAKxL,GAC5D4M,EAAgB7M,EAAIhD,KAAKgD,GAAK6M,EAAgB5M,EAAIjD,KAAKiD,EAE/D,IAGA6M,EAAO/H,EAAMC,OAAO,CACpBC,KAAM,SAASiF,EAAOD,GAClBjN,KAAKkN,MAAQA,EACblN,KAAKiN,OAASA,CAClB,IA4BJ,SAAS8C,EAAcC,EAAQC,EAAMC,EAAQC,EAAMC,GAC/C,IAAIC,GAAgBJ,EAAKjN,EAAIgN,EAAOhN,IAAMmN,EAAKlN,EAAIiN,EAAOjN,IAAQgN,EAAKhN,EAAI+M,EAAO/M,IAAMkN,EAAKnN,EAAIkN,EAAOlN,GACxG,GANgBtC,EAMD2P,IALR1P,KAAKC,IAAIF,GA3TN,MAgUV,CANJ,IAAoBA,EAaZmN,IAFSmC,EAAO/M,EAAIiN,EAAOjN,IAAMkN,EAAKnN,EAAIkN,EAAOlN,IAAQgN,EAAOhN,EAAIkN,EAAOlN,IAAMmN,EAAKlN,EAAIiN,EAAOjN,IAEtFoN,EACXjN,IAFS4M,EAAO/M,EAAIiN,EAAOjN,IAAMgN,EAAKjN,EAAIgN,EAAOhN,IAAQgN,EAAOhN,EAAIkN,EAAOlN,IAAMiN,EAAKhN,EAAI+M,EAAO/M,IAEtFoN,EAEf,IAAID,KAAcvC,EAAI,GAAKA,EAAI,GAAKzK,EAAI,GAAKA,EAAI,GAQjD,OAAO,IAAIkI,EAAc0E,EAAOhN,EAAK6K,GAAKoC,EAAKjN,EAAIgN,EAAOhN,GAAKgN,EAAO/M,EAAK4K,GAAKoC,EAAKhN,EAAI+M,EAAO/M,GAfhG,CAgBJ,CA9CA6M,EAAKvO,UAAU+O,MAAQ,IAAIR,EAAK,EAAG,GAEnCjD,EAAK0D,OAAS,SAAS9B,GAKnB,OAJMA,aAAgB5B,IAClB4B,EAAO,IAAI5B,EAAK4B,EAAKzL,EAAGyL,EAAKxL,EAAGwL,EAAKvB,MAAOuB,EAAKxB,SAG9CwB,CACX,EAEA5B,EAAK2D,MAAQ,WACT,OAAO,IAAI3D,EAAK,EAAG,EAAG,EAAG,EAC7B,EAEAA,EAAK4D,WAAa,SAAS3N,EAAGmJ,GAC1B,GAAIpK,MAAMiB,EAAEE,IAAMnB,MAAMiB,EAAEG,IAAMpB,MAAMoK,EAAEjJ,IAAMnB,MAAMoK,EAAEhJ,GAClD,KAAM,uBAEV,OAAO,IAAI4J,EAAKlM,KAAKgJ,IAAI7G,EAAEE,EAAGiJ,EAAEjJ,GAAIrC,KAAKgJ,IAAI7G,EAAEG,EAAGgJ,EAAEhJ,GAAItC,KAAKC,IAAIkC,EAAEE,EAAIiJ,EAAEjJ,GAAIrC,KAAKC,IAAIkC,EAAEG,EAAIgJ,EAAEhJ,GAClG,EA6BA,IAAIyN,EAAY,CACZC,MAAO,SAASX,EAAQC,EAAMC,EAAQC,GAClC,OAAOJ,EAAcC,EAAQC,EAAMC,EAAQC,EAC/C,EACAS,SAAU,SAASZ,EAAQC,EAAMC,EAAQC,GACrC,OAAOJ,EAAcC,EAAQC,EAAMC,EAAQC,GAAM,EACrD,EACAU,aAAc,SAASpC,EAAMvJ,EAAOD,GAChC,OAAOyL,EAAUE,SAAS1L,EAAOD,EAAKwJ,EAAKL,UAAWK,EAAKJ,aACvDqC,EAAUE,SAAS1L,EAAOD,EAAKwJ,EAAKJ,WAAYI,EAAKF,gBACrDmC,EAAUE,SAAS1L,EAAOD,EAAKwJ,EAAKH,aAAcG,EAAKF,gBACvDmC,EAAUE,SAAS1L,EAAOD,EAAKwJ,EAAKL,UAAWK,EAAKH,aAC5D,EACAwC,MAAO,SAASC,EAAOC,EAAOrC,GAC1B,IAAIE,EAAKmC,EAAM5C,UACXU,EAAKkC,EAAM3C,WACXW,EAAKgC,EAAM1C,aACXS,EAAKiC,EAAMzC,cACXvJ,EAASgM,EAAMhM,SACf2J,IACAE,EAAKA,EAAGI,OAAON,EAAO3J,GACtB8J,EAAKA,EAAGG,OAAON,EAAO3J,GACtBgK,EAAKA,EAAGC,OAAON,EAAO3J,GACtB+J,EAAKA,EAAGE,OAAON,EAAO3J,IAG1B,IAAIiM,EAAYF,EAAM7K,SAAS2I,IAC3BkC,EAAM7K,SAAS4I,IACfiC,EAAM7K,SAAS8I,IACf+B,EAAM7K,SAAS6I,IACf2B,EAAUG,aAAaE,EAAOlC,EAAIC,IAClC4B,EAAUG,aAAaE,EAAOlC,EAAIG,IAClC0B,EAAUG,aAAaE,EAAOjC,EAAIC,IAClC2B,EAAUG,aAAaE,EAAO/B,EAAID,GAEtC,IAAKkC,EAAW,CAMZ,GALApC,EAAKkC,EAAM3C,UACXU,EAAKiC,EAAM1C,WACXW,EAAK+B,EAAMzC,aACXS,EAAKgC,EAAMxC,cAEPI,EAAO,CACP,IAAIuC,EAAe,IAAMvC,EACzBE,EAAKA,EAAGI,OAAOiC,EAAclM,GAC7B8J,EAAKA,EAAGG,OAAOiC,EAAclM,GAC7BgK,EAAKA,EAAGC,OAAOiC,EAAclM,GAC7B+J,EAAKA,EAAGE,OAAOiC,EAAclM,EACjC,CAEAiM,EAAYD,EAAM9K,SAAS2I,IACvBmC,EAAM9K,SAAS4I,IACfkC,EAAM9K,SAAS8I,IACfgC,EAAM9K,SAAS6I,EACvB,CAEA,OAAOkC,CACX,GAMAE,EAAYpJ,EAAMC,OAAO,CACzBC,KAAM,SAASmJ,GACXpR,KAAKoR,UAAYvE,EAAK0D,OAAOa,EACjC,EAEAC,MAAO,SAASC,EAASC,GAGrB,IAFA,IAAIC,EAAcD,EAAUE,cAAcnO,MAAM,KAEvCZ,EAAI,EAAGA,EAAI8O,EAAYvP,OAAQS,IACpC4O,EAAUtR,KAAK0R,aAAaJ,EAASE,EAAY9O,IAGrD,OAAO4O,CACX,EACAI,aAAc,SAASJ,EAASC,GAC5B,OAAInG,EAAWpL,KAAKuR,IACTvR,KAAKuR,GAAWD,GAGhBA,CAEf,EAEA9D,KAAM,SAAS8D,GACX,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAK4R,MACrC,EACA5M,OAAQ,SAASsM,GACb,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAK6R,QACrC,EACApE,MAAO,SAAS6D,GACZ,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAK8R,OACrC,EACAC,QAAS,SAAST,GACd,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAKgS,SACrC,EACA9D,IAAK,SAASoD,GACV,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAKiS,KACrC,EACAC,OAAQ,SAASZ,GACb,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAKmS,QACrC,EACAhE,OAAQ,SAASmD,GACb,OAAOtR,KAAK2R,OAAOL,EAAStR,KAAKoS,QACrC,EAEAR,MAAO,SAASR,EAAWE,GACvBA,EAAQtO,EAAIoO,EAAUpO,CAC1B,EACA6O,QAAS,SAAST,EAAWE,GACzBA,EAAQtO,GAAMoO,EAAUlE,MAAQoE,EAAQpE,OAAS,GAAM,CAC3D,EACA4E,OAAQ,SAASV,EAAWE,GACxBA,EAAQtO,EAAIoO,EAAUlE,MAAQoE,EAAQpE,KAC1C,EACA+E,KAAM,SAASb,EAAWE,GACtBA,EAAQrO,EAAImO,EAAUnO,CAC1B,EACAkP,QAAS,SAASf,EAAWE,GACzBA,EAAQrO,GAAMmO,EAAUnE,OAASqE,EAAQrE,QAAU,GAAM,CAC7D,EACAmF,QAAS,SAAShB,EAAWE,GACzBA,EAAQrO,EAAImO,EAAUnE,OAASqE,EAAQrE,MAC3C,EACA+E,SAAU,SAASZ,EAAWE,GAC1BA,EAAQtO,EAAI,EACZsO,EAAQrO,EAAI,EACZqO,EAAQrE,OAASmE,EAAUnE,OAC3BqE,EAAQpE,MAAQkE,EAAUlE,KAC9B,EACAyE,OAAQ,SAASL,EAASe,GAItB,OAHAf,EAAUzE,EAAK0D,OAAOe,GACtBe,EAAUrS,KAAKoR,UAAWE,GAEnBA,CACX,IAGA/E,EAAQxE,EAAMC,OAAO,CACrBC,KAAM,SAAS4F,EAAGlJ,GACd3E,KAAK6N,EAAIA,EACT7N,KAAK2O,MAAQhK,CACjB,IAMA2N,EAASvK,EAAMC,OAAO,CACtBC,KAAM,SAAStD,EAAGJ,EAAGK,EAAGP,EAAGkO,EAAGC,GAC1BxS,KAAK2E,EAAIA,GAAK,EACd3E,KAAKuE,EAAIA,GAAK,EACdvE,KAAK4E,EAAIA,GAAK,EACd5E,KAAKqE,EAAIA,GAAK,EACdrE,KAAKuS,EAAIA,GAAK,EACdvS,KAAKwS,EAAIA,GAAK,CAClB,EACA9G,KAAM,SAAStH,GACXpE,KAAK2E,GAAKP,EAAEO,EACZ3E,KAAKuE,GAAKH,EAAEG,EACZvE,KAAK4E,GAAKR,EAAEQ,EACZ5E,KAAKqE,GAAKD,EAAEC,EACZrE,KAAKuS,GAAKnO,EAAEmO,EACZvS,KAAKwS,GAAKpO,EAAEoO,CAChB,EACA7G,MAAO,SAASvH,GACZpE,KAAK2E,GAAKP,EAAEO,EACZ3E,KAAKuE,GAAKH,EAAEG,EACZvE,KAAK4E,GAAKR,EAAEQ,EACZ5E,KAAKqE,GAAKD,EAAEC,EACZrE,KAAKuS,GAAKnO,EAAEmO,EACZvS,KAAKwS,GAAKpO,EAAEoO,CAChB,EACA3G,MAAO,SAASzH,GACZ,OAAO,IAAIkO,EACPtS,KAAK2E,EAAIP,EAAEO,EAAI3E,KAAK4E,EAAIR,EAAEG,EAC1BvE,KAAKuE,EAAIH,EAAEO,EAAI3E,KAAKqE,EAAID,EAAEG,EAC1BvE,KAAK2E,EAAIP,EAAEQ,EAAI5E,KAAK4E,EAAIR,EAAEC,EAC1BrE,KAAKuE,EAAIH,EAAEQ,EAAI5E,KAAKqE,EAAID,EAAEC,EAC1BrE,KAAK2E,EAAIP,EAAEmO,EAAIvS,KAAK4E,EAAIR,EAAEoO,EAAIxS,KAAKuS,EACnCvS,KAAKuE,EAAIH,EAAEmO,EAAIvS,KAAKqE,EAAID,EAAEoO,EAAIxS,KAAKwS,EAE3C,EACA9K,MAAO,SAAS5E,GACZ,OAAO,IAAIwI,EAActL,KAAK2E,EAAI7B,EAAEE,EAAIhD,KAAK4E,EAAI9B,EAAEG,EAAIjD,KAAKuS,EAAGvS,KAAKuE,EAAIzB,EAAEE,EAAIhD,KAAKqE,EAAIvB,EAAEG,EAAIjD,KAAKwS,EACtG,EACAC,UAAW,SAAS5E,GAChB,OAAOhB,EAAK4D,WAAWzQ,KAAK0H,MAAMmG,EAAEO,WAAYpO,KAAK0H,MAAMmG,EAAEU,eACjE,EACA/M,SAAU,WACN,MAAO,UAAYxB,KAAK2E,EAAI,IAAM3E,KAAKuE,EAAI,IAAMvE,KAAK4E,EAAI,IAAM5E,KAAKqE,EAAI,IAAMrE,KAAKuS,EAAI,IAAMvS,KAAKwS,EAAI,GAC3G,IAGJnS,EAAWiS,EAAQ,CACfI,cAAe,SAASC,GACpB,IAAIvO,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAIgO,EAAGhO,EACTP,EAAEG,EAAIoO,EAAGpO,EACTH,EAAEQ,EAAI+N,EAAG/N,EACTR,EAAEC,EAAIsO,EAAGtO,EACTD,EAAEmO,EAAII,EAAGJ,EACTnO,EAAEoO,EAAIG,EAAGH,EACFpO,CACX,EACAwO,iBAAkB,SAASvP,GACvB,IAAIe,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAItB,EAAEsB,EACRP,EAAEG,EAAIlB,EAAEkB,EACRH,EAAEQ,EAAIvB,EAAEuB,EACRR,EAAEC,EAAIhB,EAAEgB,EACRD,EAAEmO,EAAIlP,EAAEkP,EACRnO,EAAEoO,EAAInP,EAAEmP,EACDpO,CACX,EACAyO,SAAU,SAASxP,GACf,GAAiB,IAAbA,EAAEpB,OACF,KAAM,iDAEV,IAAImC,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAItB,EAAE,GACRe,EAAEG,EAAIlB,EAAE,GACRe,EAAEQ,EAAIvB,EAAE,GACRe,EAAEC,EAAIhB,EAAE,GACRe,EAAEmO,EAAIlP,EAAE,GACRe,EAAEoO,EAAInP,EAAE,GACDe,CACX,EACA0O,YAAa,SAAS9P,EAAGC,GACrB,IAAImB,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAI,EACNP,EAAEG,EAAI,EACNH,EAAEQ,EAAI,EACNR,EAAEC,EAAI,EACND,EAAEmO,EAAIvP,EACNoB,EAAEoO,EAAIvP,EACCmB,CACX,EACA2O,KAAM,WACF,OAAO,IAAIT,EAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EACrC,EACAU,SAAU,SAASrE,EAAO3L,EAAGC,GACzB,IAAImB,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAIhE,KAAKkH,IAAI8G,EAAQhO,KAAK6D,GAAK,KACjCJ,EAAEG,EAAI5D,KAAKsS,IAAItE,EAAQhO,KAAK6D,GAAK,KACjCJ,EAAEQ,GAAKR,EAAEG,EACTH,EAAEC,EAAID,EAAEO,EACRP,EAAEmO,EAAKvP,EAAIA,EAAIoB,EAAEO,EAAI1B,EAAImB,EAAEG,GAAM,EACjCH,EAAEoO,EAAKvP,EAAIA,EAAImB,EAAEO,EAAI3B,EAAIoB,EAAEG,GAAM,EAC1BH,CACX,EACA8O,QAAS,SAAS9D,EAAQC,GACtB,IAAIjL,EAAI,IAAIkO,EAOZ,OANAlO,EAAEO,EAAIyK,EACNhL,EAAEG,EAAI,EACNH,EAAEQ,EAAI,EACNR,EAAEC,EAAIgL,EACNjL,EAAEmO,EAAI,EACNnO,EAAEoO,EAAI,EACCpO,CACX,EACA+I,MAAO,SAAS9J,GACZ,IAAI8P,EAAOC,EACX,GAAI/P,EAAG,CAGH,GAAoC,YAFpCA,EAAIA,EAAEgQ,QAEA/F,MAAM,EAAG,GAAGmE,cAA4B,CAG1C,GAAqB,KADrB0B,GADAC,EAAO/P,EAAEiK,MAAM,EAAGjK,EAAEpB,OAAS,GAAGoR,QACnB/P,MAAM,MACTrB,OACN,OAAOqQ,EAAOO,SAASxH,EAAI8H,GAAO,SAASrQ,GACvC,OAAOhB,WAAWgB,EACtB,KAGJ,GAAqB,KADrBqQ,EAAQC,EAAK9P,MAAM,MACTrB,OACN,OAAOqQ,EAAOO,SAASxH,EAAI8H,GAAO,SAASrQ,GACvC,OAAOhB,WAAWgB,EACtB,IAER,CAKA,GAHsB,MAAlBO,EAAEiK,MAAM,EAAG,IAAwC,MAA1BjK,EAAEiK,MAAMjK,EAAEpB,OAAS,KAC5CoB,EAAIA,EAAEiQ,OAAO,EAAGjQ,EAAEpB,OAAS,IAE3BoB,EAAE2C,QAAQ,KAAO,GAEI,KADrBmN,EAAQ9P,EAAEC,MAAM,MACNrB,OACN,OAAOqQ,EAAOO,SAASxH,EAAI8H,GAAO,SAASrQ,GACvC,OAAOhB,WAAWgB,EACtB,KAGR,GAAIO,EAAE2C,QAAQ,KAAO,GAEI,KADrBmN,EAAQ9P,EAAEC,MAAM,MACNrB,OACN,OAAOqQ,EAAOO,SAASxH,EAAI8H,GAAO,SAASrQ,GACvC,OAAOhB,WAAWgB,EACtB,IAGZ,CACA,OAAOqQ,CACX,IAMJ,IAAII,EAAexL,EAAMC,OAAO,CAC5BC,KAAM,SAAStD,EAAGJ,EAAGK,EAAGP,EAAGkO,EAAGC,GAC1BxS,KAAK2E,EAAIA,GAAK,EACd3E,KAAKuE,EAAIA,GAAK,EACdvE,KAAK4E,EAAIA,GAAK,EACd5E,KAAKqE,EAAIA,GAAK,EACdrE,KAAKuS,EAAIA,GAAK,EACdvS,KAAKwS,EAAIA,GAAK,CAClB,EACAgB,WAAY,SAAoBpP,GAC5B,IAAIf,EAAI,IAAIkQ,EAOZ,OANAlQ,EAAEsB,EAAIP,EAAEO,EACRtB,EAAEkB,EAAIH,EAAEG,EACRlB,EAAEuB,EAAIR,EAAEQ,EACRvB,EAAEgB,EAAID,EAAEC,EACRhB,EAAEkP,EAAInO,EAAEmO,EACRlP,EAAEmP,EAAIpO,EAAEoO,EACDnP,CACX,IAwBJ,SAASoQ,EAASxR,GACVzB,EAAMO,YAAYkB,KAClBA,EAAS,IAKb,IAFA,IAAI0E,EAAS,GACT+M,EAAQ,iEACHhR,EAAIT,EAAQS,EAAI,IAAKA,EAC1BiE,GAAU+M,EAAMC,OAAOhT,KAAKiT,MAAsB,GAAhBjT,KAAKkD,WAE3C,OAAO8C,CACX,CAEA,IAAIkN,EAAW,CAQXC,uBAAwB,SAAShR,EAAG6B,EAAGJ,GACnC,SAASwP,EAAGC,EAAKC,GACb,OAAQD,EAAIhR,EAAIiR,EAAIjR,IAAMgR,EAAIhR,EAAIiR,EAAIjR,IAAMgR,EAAI/Q,EAAIgR,EAAIhR,IAAM+Q,EAAI/Q,EAAIgR,EAAIhR,EAC9E,CAEA,GAAI0B,IAAMJ,EACN,OAAOwP,EAAGjR,EAAG6B,GAGjB,IAAIuP,EAAK3P,EAAEvB,EAAI2B,EAAE3B,EACbmR,EAAK5P,EAAEtB,EAAI0B,EAAE1B,EACbmR,GAAOtR,EAAEE,EAAI2B,EAAE3B,GAAKkR,GAAMpR,EAAEG,EAAI0B,EAAE1B,GAAKkR,EAC3C,OAAIC,EAAM,EACCL,EAAGpP,EAAG7B,IAGjBsR,GAAO7P,EAAEvB,EAAIF,EAAEE,GAAKkR,GAAM3P,EAAEtB,EAAIH,EAAEG,GAAKkR,GAC7B,EACCJ,EAAGxP,EAAGzB,IAGjBsR,GAAO7P,EAAEvB,EAAIF,EAAEE,GAAKmR,GAAM5P,EAAEtB,EAAIH,EAAEG,GAAKiR,GAC1BE,GAAOF,EAAKA,EAAKC,EAAKA,EACvC,EAQAE,eAAgB,SAASvR,EAAG6B,EAAGJ,GAC3B,OAAO5D,KAAK+D,KAAK1E,KAAK8T,uBAAuBhR,EAAG6B,EAAGJ,GACvD,EAQA+P,mBAAoB,SAASxR,EAAGF,GAC5B,IAAI2R,EAAUC,OAAOC,UACrB,GAAIjU,EAAMO,YAAY6B,IAA6B,IAAlBA,EAAOX,OACpC,OAAOuS,OAAOC,UAElB,IAAK,IAAIrR,EAAI,EAAGA,EAAIR,EAAOX,OAAS,EAAGmB,IAAK,CACxC,IAAIsR,EAAK9R,EAAOQ,GACZuR,EAAK/R,EAAOQ,EAAI,GAEhBiB,EAAIrE,KAAK8T,uBAAuBhR,EAAG4R,EAAIC,GACvCtQ,EAAIkQ,IACJA,EAAUlQ,EAElB,CACA,OAAO1D,KAAK+D,KAAK6P,EACrB,GAWAK,EAAY/U,EAAMkI,MAAMC,OAAO,CAC/BC,KAAM,WACFjI,KAAK6U,SAAW,GAChB7U,KAAKiC,OAAS,CAClB,EAKA6S,IAAK,SAAS3T,EAAKqB,GAEf,IAAI1B,EAAMd,KAAK+U,iBAAiB5T,GAIhC,OAHIX,EAAMK,UAAU2B,KAChB1B,EAAI0B,MAAQA,GAET1B,CACX,EAKAkU,IAAK,SAAS7T,GACV,OAAInB,KAAKiV,cAAc9T,GACZnB,KAAK+U,iBAAiB5T,GAE1B,IACX,EAOA+T,IAAK,SAAS/T,EAAKqB,GACfxC,KAAK8U,IAAI3T,EAAKqB,EAClB,EAKA2S,YAAa,SAAShU,GAClB,OAAOnB,KAAKiV,cAAc9T,EAC9B,EAMA0E,OAAQ,SAAS1E,GACb,GAAInB,KAAKiV,cAAc9T,GAAM,CACzB,IAAIiU,EAASpV,KAAKqV,MAAMlU,GAGxB,cAFOnB,KAAK6U,SAASO,GACrBpV,KAAKiC,SACEd,CACX,CACJ,EAMAoE,QAAS,SAASvB,GAEd,IADA,IAAIsR,EAAStV,KAAKuV,UACT7S,EAAI,EAAG4J,EAAMgJ,EAAOrT,OAAQS,EAAI4J,EAAK5J,IAAK,CAC/C,IAAI8S,EAAOF,EAAO5S,GACd+S,EAASzV,KAAK6U,SAASW,GACvBhV,EAAMO,YAAY0U,IAGtBzR,EAAKyR,EACT,CACJ,EAMAhK,MAAO,WAGH,IAFA,IAAIiK,EAAK,IAAId,EACTU,EAAStV,KAAKuV,UACT7S,EAAI,EAAG4J,EAAMgJ,EAAOrT,OAAQS,EAAI4J,EAAK5J,IAAK,CAC/C,IAAI8S,EAAOF,EAAO5S,GACd+S,EAASzV,KAAK6U,SAASW,GACvBhV,EAAMO,YAAY0U,IAGtBC,EAAGZ,IAAIW,EAAOtU,IAAKsU,EAAOjT,MAC9B,CACA,OAAOkT,CACX,EAOAH,QAAS,WACL,IAAID,EAAS,GACb,IAAK,IAAIE,KAAQxV,KAAK6U,SACd7U,KAAK6U,SAASzT,eAAeoU,IAC7BF,EAAOvS,KAAKyS,GAGpB,OAAOF,CACX,EAEAL,cAAe,SAAS9T,GACpB,IAAIiU,EAASpV,KAAKqV,MAAMlU,GACxB,OAAOX,EAAMK,UAAUb,KAAK6U,SAASO,GACzC,EAOAL,iBAAkB,SAAS5T,GACvB,IAAIiU,EAASpV,KAAKqV,MAAMlU,GACpBsU,EAASzV,KAAK6U,SAASO,GAM3B,OALI5U,EAAMO,YAAY0U,KAClBA,EAAS,CAAEtU,IAAKA,GAChBnB,KAAK6U,SAASO,GAAUK,EACxBzV,KAAKiC,UAEFwT,CACX,EAKAJ,MAAO,SAASlU,GACZ,GAAIX,EAAMoB,SAAST,GACf,OAAOA,EAEX,GAAIX,EAAMc,SAASH,GACf,OAAOnB,KAAK2V,YAAYxU,GAE5B,GAAIX,EAAMQ,SAASG,GACf,OAAOnB,KAAK4V,cAAczU,GAE9B,KAAM,uBACV,EAKAwU,YAAa,SAASvS,GAElB,IAAIuD,EAAS,EACb,GAAiB,IAAbvD,EAAEnB,OACF,OAAO0E,EAEX,IAAK,IAAIjE,EAAI,EAAGA,EAAIU,EAAEnB,OAAQS,IAAK,CAE/BiE,EAAoB,GAATA,EAAeA,EADjBvD,EAAEyS,WAAWnT,EAE1B,CACA,OAAOiE,CACX,EAKAiP,cAAe,SAASzU,GACpB,IAAI2U,EAAK3U,EAAI4U,QAKb,OAJIvV,EAAMO,YAAY+U,KAClBA,EAAKrC,IACLtS,EAAI4U,QAAUD,GAEXA,CACX,IASAE,EAAanW,EAAMoW,WAAWjO,OAAO,CAKrCC,KAAM,SAASiO,GAKX,GAHArW,EAAMoW,WAAWE,GAAGlO,KAAK5G,KADdrB,MAEXA,KAAKoW,WAAa,IAAIxB,EACtB5U,KAAKiC,OAAS,EACVzB,EAAMK,UAAUqV,GAChB,GAAI3V,MAAMD,QAAQ4V,GACd,IAAK,IAAIxT,EAAI,EAAGA,EAAIwT,EAAWjU,OAAQS,IACnC1C,KAAK8U,IAAIoB,EAAWxT,SAGxBwT,EAAW3Q,SAAQ,SAASyF,EAAG3H,GAC3BrD,KAAK8U,IAAI9J,EAAG3H,EAChB,GAAGrD,KAGf,EAMA8U,IAAK,SAAS3T,EAAKqB,GACf,IAAI6T,EAAQrW,KAAKoW,WAAWpB,IAAI7T,GAC3BkV,IACDA,EAAQrW,KAAKoW,WAAWtB,IAAI3T,GAC5BnB,KAAKiC,SACLjC,KAAKmJ,QAAQ,YAEjBkN,EAAM7T,MAAQA,CAClB,EAOA0S,IAAK,SAAS/T,EAAKqB,GACfxC,KAAK8U,IAAI3T,EAAKqB,EAClB,EAKAwS,IAAK,SAAS7T,GACV,IAAIkV,EAAQrW,KAAKoW,WAAWpB,IAAI7T,GAChC,GAAIkV,EACA,OAAOA,EAAM7T,MAEjB,MAAM,IAAI8T,MAAM,mBAAqBnV,EACzC,EAKAgU,YAAa,SAAShU,GAClB,OAAOnB,KAAKoW,WAAWjB,YAAYhU,EACvC,EAKA0E,OAAQ,SAAS1E,GACb,GAAInB,KAAKmV,YAAYhU,GAGjB,OAFAnB,KAAKmJ,QAAQ,WACbnJ,KAAKiC,SACEjC,KAAKoW,WAAWvQ,OAAO1E,EAEtC,EAKAoE,QAAS,SAASvB,EAAM0B,GACpB1F,KAAKoW,WAAW7Q,SAAQ,SAAS8Q,GAC7BrS,EAAK3C,KAAKqE,EAAS2Q,EAAMlV,IAAKkV,EAAM7T,MACxC,GACJ,EAKA+T,aAAc,SAASvS,EAAM0B,GACzB1F,KAAKoW,WAAW7Q,SAAQ,SAAS8Q,GAC7BrS,EAAK3C,KAAKqE,EAAS2Q,EAAM7T,MAC7B,GACJ,EAKAgU,WAAY,SAASxS,EAAM0B,GACvB1F,KAAKoW,WAAW7Q,SAAQ,SAAS8Q,GAC7BrS,EAAK3C,KAAKqE,EAAS2Q,EAAMlV,IAC7B,GACJ,EAKAsV,KAAM,WACF,IAAIA,EAAO,GAIX,OAHAzW,KAAKwW,YAAW,SAASrV,GACrBsV,EAAK1T,KAAK5B,EACd,IACOsV,CACX,IAKAC,EAAQ7W,EAAMkI,MAAMC,OAAO,CAE3BC,KAAM,WACFjI,KAAK2W,MAAQ,KACb3W,KAAK4W,MAAQ,KACb5W,KAAKiC,OAAS,CAClB,EAKA4U,QAAS,SAASrU,GACd,IAAI6T,EAAQ,CAAE7T,MAAOA,EAAOsU,KAAM,MAC7B9W,KAAK4W,OAKN5W,KAAK2W,MAAMG,KAAOT,EAClBrW,KAAK2W,MAAQ3W,KAAK2W,MAAMG,OALxB9W,KAAK4W,MAAQP,EACbrW,KAAK2W,MAAQ3W,KAAK4W,OAMtB5W,KAAKiC,QACT,EAKA8U,QAAS,WACL,GAAI/W,KAAKiC,OAAS,EACd,MAAM,IAAIqU,MAAM,uBAEpB,IAAI9T,EAAQxC,KAAK4W,MAAMpU,MAGvB,OAFAxC,KAAK4W,MAAQ5W,KAAK4W,MAAME,KACxB9W,KAAKiC,SACEO,CACX,EAEA0D,SAAU,SAAShC,GAEf,IADA,IAAI8S,EAAUhX,KAAK4W,MACZI,GAAS,CACZ,GAAIA,EAAQxU,QAAU0B,EAClB,OAAO,EAEX8S,EAAUA,EAAQF,IACtB,CACA,OAAO,CACX,IASAG,EAAMpX,EAAMoW,WAAWjO,OAAO,CAC9BC,KAAM,SAASiP,GAEXrX,EAAMoW,WAAWE,GAAGlO,KAAK5G,KADdrB,MAEXA,KAAKoW,WAAa,IAAIxB,EACtB5U,KAAKiC,OAAS,EACVzB,EAAMK,UAAUqW,KACZA,aAAoBtC,EACpBsC,EAAS3R,SAAQ,SAASlB,GACtBrE,KAAK8U,IAAIzQ,EACb,IAEK6S,aAAoBlB,GACzBkB,EAAS3R,SAAQ,SAASyF,EAAG3H,GACzBrD,KAAK8U,IAAI,CAAE3T,IAAK6J,EAAGxI,MAAOa,GAC9B,GAAGrD,MAGf,EAEAkG,SAAU,SAAShC,GACf,OAAOlE,KAAKoW,WAAWjB,YAAYjR,EACvC,EAEA4Q,IAAK,SAAS5Q,GACElE,KAAKoW,WAAWpB,IAAI9Q,KAE5BlE,KAAKoW,WAAWtB,IAAI5Q,EAAMA,GAC1BlE,KAAKiC,SACLjC,KAAKmJ,QAAQ,WAErB,EAEA6L,IAAK,SAAS9Q,GACV,OAAIlE,KAAKkG,SAAShC,GACPlE,KAAKoW,WAAWpB,IAAI9Q,GAAM1B,MAG1B,IAEf,EAOAgT,KAAM,SAAStR,GACX,OAAOlE,KAAKoW,WAAWf,MAAMnR,EACjC,EAMA2B,OAAQ,SAAS3B,GACTlE,KAAKkG,SAAShC,KACdlE,KAAKoW,WAAWvQ,OAAO3B,GACvBlE,KAAKiC,SACLjC,KAAKmJ,QAAQ,WAErB,EAKA5D,QAAS,SAASvB,EAAMuC,GACpBvG,KAAKoW,WAAW7Q,SAAQ,SAAS4R,GAC7BnT,EAAKmT,EAAG3U,MACZ,GAAG+D,EACP,EACA6Q,QAAS,WACL,IAAIvJ,EAAI,GAIR,OAHA7N,KAAKuF,SAAQ,SAASlB,GAClBwJ,EAAE9K,KAAKsB,EACX,IACOwJ,CACX,IAQAwJ,EAAOxX,EAAMkI,MAAMC,OAAO,CAE1BC,KAAM,SAAS6N,EAAIwB,GA+Bf,GAzBAtX,KAAKuX,MAAQ,GAMbvX,KAAKwX,SAAW,GAMhBxX,KAAKyX,SAAW,GAKhBzX,KAAK0X,OAAS,EAEVlX,EAAMK,UAAUiV,GAChB9V,KAAK8V,GAAKA,EAGV9V,KAAK8V,GAAKrC,IAEVjT,EAAMK,UAAUyW,GAAQ,CACxBtX,KAAK2X,gBAAkBL,EAEvB,IAAI/S,EAAI+S,EAAMM,SACd5X,KAAKkN,MAAQ3I,EAAE2I,MACflN,KAAKiN,OAAS1I,EAAE0I,OAChBjN,KAAKgD,EAAIuB,EAAEvB,EACXhD,KAAKiD,EAAIsB,EAAEtB,CACf,MAEIjD,KAAK2X,gBAAkB,KAM3B3X,KAAK6X,KAAO,KACZ7X,KAAK2B,KAAO,OACZ3B,KAAK8X,UAAY,SAAW9X,KAAK8V,GAAK,IAKtC9V,KAAK+X,WAAY,CACrB,EAKAC,WAAY,WACR,OAAOxX,EAAMwB,QAAQhC,KAAKuX,MAC9B,EAMAK,OAAQ,SAAS/J,GACb,IAAKrN,EAAMK,UAAUgN,GACjB,OAAO,IAAI1N,EAAQ0M,KAAK7M,KAAKgD,EAAGhD,KAAKiD,EAAGjD,KAAKkN,MAAOlN,KAAKiN,QAG7DjN,KAAKgD,EAAI6K,EAAE7K,EACXhD,KAAKiD,EAAI4K,EAAE5K,EACXjD,KAAKkN,MAAQW,EAAEX,MACflN,KAAKiN,OAASY,EAAEZ,MACpB,EAMAgL,WAAY,SAASC,GACjB,IAAIC,EAAOnY,KACX,OAAOQ,EAAMmF,IAAIwS,EAAKZ,OAAO,SAASa,GAClC,OAAOA,EAAKC,cAAcF,KAAUD,CACxC,GACJ,EAMAI,YAAa,WACT,GAA6B,IAAzBtY,KAAKwX,SAASvV,OACd,MAAO,GAGX,IADA,IAAIsW,EAAW,GACN7V,EAAI,EAAG4J,EAAMtM,KAAKwX,SAASvV,OAAQS,EAAI4J,EAAK5J,IAAK,CACtD,IAAI0V,EAAOpY,KAAKwX,SAAS9U,GACzB6V,EAASxV,KAAKqV,EAAKC,cAAcrY,MACrC,CACA,OAAOuY,CACX,EAMAC,WAAY,WACR,GAA6B,IAAzBxY,KAAKyX,SAASxV,OACd,MAAO,GAGX,IADA,IAAIwW,EAAU,GACL/V,EAAI,EAAG4J,EAAMtM,KAAKyX,SAASxV,OAAQS,EAAI4J,EAAK5J,IAAK,CACtD,IAAI0V,EAAOpY,KAAKyX,SAAS/U,GACzB+V,EAAQ1V,KAAKqV,EAAKC,cAAcrY,MACpC,CACA,OAAOyY,CACX,EAMAhN,MAAO,WACH,IAAIiN,EAAO,IAAIrB,EAef,OAdI7W,EAAMK,UAAUb,KAAK0X,UACrBgB,EAAKhB,OAAS1X,KAAK0X,QAEnBlX,EAAMK,UAAUb,KAAK2Y,WACrBD,EAAKC,QAAU3Y,KAAK2Y,SAEpBnY,EAAMK,UAAUb,KAAK4Y,SACrBF,EAAKE,MAAQ5Y,KAAK4Y,OAEtBF,EAAKf,gBAAkB3X,KAAK2X,gBAC5Be,EAAK1V,EAAIhD,KAAKgD,EACd0V,EAAKzV,EAAIjD,KAAKiD,EACdyV,EAAKxL,MAAQlN,KAAKkN,MAClBwL,EAAKzL,OAASjN,KAAKiN,OACZyL,CACX,EAKAG,WAAY,SAASX,GACjB,OAAiC,OAA1BlY,KAAKiY,WAAWC,EAC3B,EAMAY,WAAY,SAASV,GACbA,EAAKhW,SAAWpC,OAChBQ,EAAMqF,OAAO7F,KAAKuX,MAAOa,GACzB5X,EAAMqF,OAAO7F,KAAKwX,SAAUY,GAC5BA,EAAKhW,OAAS,MAGdgW,EAAKjQ,SAAWnI,OAChBQ,EAAMqF,OAAO7F,KAAKuX,MAAOa,GACzB5X,EAAMqF,OAAO7F,KAAKyX,SAAUW,GAC5BA,EAAKjQ,OAAS,KAEtB,EAKA4Q,UAAW,SAASb,GAChB,OAAO1X,EAAMmF,IAAI3F,KAAKwX,UAAU,SAASY,GACrC,OAAOA,EAAKjQ,SAAW+P,CAC3B,GACJ,EAKAc,OAAQ,WACJ,OAAOhZ,KAAKuX,MAAMtV,MACtB,EAKAgX,aAAc,SAASb,GACnB,OAAOlS,EAASlG,KAAKuX,MAAOa,EAChC,EAKAc,aAAc,SAAShB,GACnB,OAAO1X,EAAM0G,IAAIlH,KAAKuX,OAAO,SAASa,GAClC,OAAOA,EAAKC,cAAcrY,QAAUkY,CACxC,GAAGlY,KACP,EAKAmZ,aAAc,WACV,IAAIC,EAAY,GAOhB,OANA5Y,EAAM+E,QAAQvF,KAAKyX,UAAU,SAASlF,GAClC6G,EAAUrW,KAAKwP,EAAE8F,cAAcrY,MACnC,GAAGA,MACHQ,EAAM+E,QAAQvF,KAAKwX,UAAU,SAASjF,GAClC6G,EAAUrW,KAAKwP,EAAE8F,cAAcrY,MACnC,GAAGA,MACIoZ,CACX,IAMAC,EAAOxZ,EAAMkI,MAAMC,OAAO,CAE1BC,KAAM,SAAS7F,EAAQ+F,EAAQ2N,EAAIwD,GAC/B,GAAI9Y,EAAMO,YAAYqB,GAClB,KAAM,yCAEV,GAAI5B,EAAMO,YAAYoH,GAClB,KAAM,yCAEV,IAAIoR,EAAaC,EAEbD,EADA/Y,EAAMc,SAASc,GACD,IAAIiV,EAAKjV,GAGTA,EAGdoX,EADAhZ,EAAMc,SAAS6G,GACD,IAAIkP,EAAKlP,GAGTA,EAGlBnI,KAAKoC,OAASmX,EACdvZ,KAAKmI,OAASqR,EACdxZ,KAAKoC,OAAOmV,MAAMxU,KAAK/C,MACvBA,KAAKmI,OAAOoP,MAAMxU,KAAK/C,MACvBA,KAAKoC,OAAOoV,SAASzU,KAAK/C,MAC1BA,KAAKmI,OAAOsP,SAAS1U,KAAK/C,MACtBQ,EAAMK,UAAUiV,GAChB9V,KAAK8V,GAAKA,EAGV9V,KAAK8V,GAAKrC,IAEVjT,EAAMK,UAAUyY,GAChBtZ,KAAKyZ,qBAAuBH,EAG5BtZ,KAAKyZ,qBAAuB,KAEhCzZ,KAAK2B,KAAO,OACZ3B,KAAK8X,UAAY,SAAW9X,KAAKoC,OAAO0T,GAAK,KAAO9V,KAAKmI,OAAO2N,GAAK,GACzE,EAKAuC,cAAe,SAASH,GACpB,GAAIlY,KAAKoC,SAAW8V,GAAQlY,KAAKmI,SAAW+P,EACxC,KAAM,iDAEV,OAAOlY,KAAKoC,SAAW8V,EAAOlY,KAAKmI,OAASnI,KAAKoC,MACrD,EAKAsX,cAAe,SAAStB,GACpB,OAAIpY,KAAKoC,SAAWgW,EAAKhW,QAAUpC,KAAKoC,SAAWgW,EAAKjQ,OAC7CnI,KAAKoC,OAEZpC,KAAKmI,SAAWiQ,EAAKhW,QAAUpC,KAAKmI,SAAWiQ,EAAKjQ,OAC7CnI,KAAKmI,OAET,IACX,EAKAwR,WAAY,SAASC,EAAIC,GACrB,OAAO7Z,KAAKoC,SAAWwX,GAAM5Z,KAAKmI,SAAW0R,GAAM7Z,KAAKoC,SAAWyX,GAAM7Z,KAAKmI,SAAWyR,CAC7F,EAKAE,SAAU,WACN,MAAO,CAAC9Z,KAAKoC,OAAQpC,KAAKmI,OAC9B,EAKA8Q,aAAc,SAASf,GACnB,OAAOlY,KAAKoC,SAAW8V,GAAQlY,KAAKmI,SAAW+P,CACnD,EAMAW,WAAY,SAAST,GACjB,OAAOlS,EAASlG,KAAKoC,OAAOmV,MAAOa,IAASlS,EAASlG,KAAKmI,OAAOoP,MAAOa,EAC5E,EAKA2B,aAAc,SAAS7B,GACnB1X,EAAMqF,OAAO7F,KAAKoC,OAAOmV,MAAOvX,MAChCQ,EAAMqF,OAAO7F,KAAKoC,OAAOoV,SAAUxX,MAEnCkY,EAAKX,MAAMxU,KAAK/C,MAChBkY,EAAKV,SAASzU,KAAK/C,MAEnBA,KAAKoC,OAAS8V,CAClB,EAMA8B,aAAc,SAAS9B,GACnB1X,EAAMqF,OAAO7F,KAAKmI,OAAOoP,MAAOvX,MAChCQ,EAAMqF,OAAO7F,KAAKmI,OAAOsP,SAAUzX,MAEnCkY,EAAKX,MAAMxU,KAAK/C,MAChBkY,EAAKT,SAAS1U,KAAK/C,MAEnBA,KAAKmI,OAAS+P,CAClB,EAKA+B,aAAc,SAAS5W,EAAG6W,GAClBla,KAAKoC,SAAWiB,EAChBrD,KAAK+Z,aAAaG,GAEbla,KAAKmI,SAAW9E,GACrBrD,KAAKga,aAAaE,EAE1B,EAKA7P,QAAS,WACL,IAAI8P,EAAYna,KAAKoC,OACjBgY,EAAYpa,KAAKmI,OASrB,OAPAnI,KAAKoC,OAASgY,EACd5Z,EAAMqF,OAAOsU,EAAU3C,SAAUxX,MACjCA,KAAKoC,OAAOoV,SAASzU,KAAK/C,MAE1BA,KAAKmI,OAASgS,EACd3Z,EAAMqF,OAAOuU,EAAU3C,SAAUzX,MACjCA,KAAKmI,OAAOsP,SAAS1U,KAAK/C,MACnBA,IACX,EAKAqa,SAAU,SAASlS,GACf,GAAInI,KAAKoC,SAAW+F,GAAUnI,KAAKmI,SAAWA,EAC1C,KAAM,iDAENnI,KAAKmI,SAAWA,GAChBnI,KAAKqK,SAEb,EAKAiQ,kBAAmB,WACf,IAAIzM,EAAI7N,KAAKyL,QAGb,OAFAoC,EAAExD,UACFwD,EAAE0M,UAAW,EACN1M,CACX,EAKApC,MAAO,WAEH,OADY,IAAI4N,EAAKrZ,KAAKoC,OAAQpC,KAAKmI,OAE3C,IASAqS,EAAQ3a,EAAMkI,MAAMC,OAAO,CAC3BC,KAAM,SAASwS,GAKXza,KAAKuX,MAAQ,GAKbvX,KAAK0a,MAAQ,GAEb1a,KAAK2a,SAAW,IAAI3E,EAKpBhW,KAAKG,QAAU,KAOfH,KAAK4a,MAAQ,KACTpa,EAAMK,UAAU4Z,GACZja,EAAMc,SAASmZ,GACfza,KAAK8V,GAAK2E,GAGVza,KAAKG,QAAUsa,EACfza,KAAK8V,GAAK2E,EAAY3E,IAI1B9V,KAAK8V,GAAKrC,IAOdzT,KAAK4X,OAAS,IAAI/K,EAElB7M,KAAK6a,yBAA0B,EAC/B7a,KAAK2B,KAAO,OAChB,EAMAmZ,mBAAoB,SAASC,GAIzB,GAHIva,EAAMO,YAAYga,KAClBA,GAAe,IAEf/a,KAAK6a,yBAA4BE,EAArC,CAGA,IAAK,IAAIrY,EAAI,EAAG4J,EAAMtM,KAAK0a,MAAMzY,OAAQS,EAAI4J,EAAK5J,IAAK,CACnD,IAAIwV,EAAOlY,KAAK0a,MAAMhY,GACtBwV,EAAKK,SAAWvY,KAAKsY,YAAYJ,GACjCA,EAAKO,QAAUzY,KAAKwY,WAAWN,EACnC,CACAlY,KAAK6a,yBAA0B,CAN/B,CAOJ,EAUAG,aAAc,SAASC,EAAWrP,EAAQsP,GACtC,IAAKD,EACD,KAAM,4BAENza,EAAMO,YAAY6K,KAClBA,EAAS,GAGb5L,KAAK8a,qBACDta,EAAMO,YAAYma,KAClBA,EAAU,IAAIlF,EACdxV,EAAM+E,QAAQvF,KAAK0a,OAAO,SAASnT,GAC/B2T,EAAQpG,IAAIvN,GAAG,EACnB,KAEJ2T,EAAQhG,IAAI+F,GAAW,GACvBA,EAAUE,MAAQvP,EAElB,IADA,IAAI2M,EAAW0C,EAAU1C,SAChB7V,EAAI,EAAG4J,EAAMiM,EAAStW,OAAQS,EAAI4J,EAAK5J,IAAK,CACjD,IAAI0Y,EAAQ7C,EAAS7V,GAChB0Y,IAASF,EAAQlG,IAAIoG,IAG1Bpb,KAAKgb,aAAaI,EAAOxP,EAAS,EAAGsP,EACzC,CACJ,EAQAG,KAAM,SAAS7Y,GACX,GAAIhC,EAAMO,YAAYyB,GAAQ,CAC1B,GAAKxC,KAAK4a,MAWN,OAAO5a,KAAK4a,MATZ,IAAIU,EAAQ9a,EAAMqG,MAAM7G,KAAK0a,OAAO,SAASnT,GACzC,OAA6B,IAAtBA,EAAEkQ,SAASxV,MACtB,IACA,OAAIqZ,GAGG9a,EAAMqG,MAAM7G,KAAK0a,MAKhC,CAEI1a,KAAK4a,MAAQpY,CAErB,EAQA+Y,uBAAwB,WACpBvb,KAAKwb,eAAiB,EACtBxb,KAAKyb,iBAGL,IAFA,IAAIC,EAAclb,EAAM8B,UAAUtC,KAAK0a,MAAMzY,QAAS,GAE7CoB,EAAI,EAAGA,EAAIrD,KAAK0a,MAAMzY,OAAQoB,KACX,IAApBqY,EAAYrY,KACZrD,KAAK2b,uBAAuBD,EAAarY,GACzCrD,KAAKwb,kBAIb,IAAqB9Y,EAAjBkZ,EAAa,GACjB,IAAKlZ,EAAI,EAAGA,EAAI1C,KAAKwb,iBAAkB9Y,EACnCkZ,EAAWlZ,GAAK,IAAI8X,EAExB,IAAK9X,EAAI,EAAGA,EAAIgZ,EAAYzZ,SAAUS,EAAG,CACzBkZ,EAAWF,EAAYhZ,IAC7BmZ,oBAAoB7b,KAAK0a,MAAMhY,GACzC,CAKA,OAHAkZ,EAAWtU,MAAK,SAAS3C,EAAGJ,GACxB,OAAOA,EAAEmW,MAAMzY,OAAS0C,EAAE+V,MAAMzY,MACpC,IACO2Z,CACX,EAEAD,uBAAwB,SAASG,EAAQC,GACrCD,EAAOC,GAAa/b,KAAKwb,eACzB,IAAItD,EAAOlY,KAAK0a,MAAMqB,GACtBvb,EAAM+E,QAAQ2S,EAAKX,OACf,SAASa,GACL,IACI4D,EADO5D,EAAKC,cAAcH,GACZtR,OACM,IAApBkV,EAAOE,IACPhc,KAAK2b,uBAAuBG,EAAQE,EAE5C,GAAGhc,KACX,EAMAic,WAAY,WACR,GAAIjc,KAAKgC,UAEL,OADAhC,KAAK4X,OAAS,IAAI/K,EACX7M,KAAK4X,OAGhB,IADA,IAAIrT,EAAI,KACC7B,EAAI,EAAG4J,EAAMtM,KAAK0a,MAAMzY,OAAQS,EAAI4J,EAAK5J,IAAK,CACnD,IAAIwV,EAAOlY,KAAK0a,MAAMhY,GAKlB6B,EAJCA,EAIGA,EAAEyI,MAAMkL,EAAKN,UAHbM,EAAKN,QAKjB,CAEA,OADA5X,KAAK4X,OAASrT,EACPvE,KAAK4X,MAChB,EAUAsE,gBAAiB,SAASb,GACtB,IAC4BjZ,EAAQ+F,EADhCgU,EAAO,IAAI3B,EACXnP,EAAM,IAAI2K,EACdmG,EAAKd,KAAOA,EAAK5P,QACjB0Q,EAAKd,KAAKF,MAAQ,EAClBgB,EAAKd,KAAKvF,GAAKuF,EAAKvF,GACpBzK,EAAIyJ,IAAIuG,EAAMc,EAAKd,MACnBA,EAAKF,MAAQ,EAEb,IAAID,EAAU,GACVkB,EAAY,GAChBD,EAAKE,SAASF,EAAKd,MACnBH,EAAQnY,KAAKsY,GACbe,EAAUrZ,KAAKsY,GAGf,IADA,IAAIiB,EAAa,EACVF,EAAUna,OAAS,GAEtB,IADA,IAAI6U,EAAOsF,EAAUG,MACZC,EAAK,EAAGA,EAAK1F,EAAKS,MAAMtV,OAAQua,IAAM,CAC3C,IACIC,EADO3F,EAAKS,MAAMiF,GACRnE,cAAcvB,GAC5B,IAAI5Q,EAASgV,EAASuB,GAAtB,CAIAA,EAAGtB,MAAQrE,EAAKqE,MAAQ,EACpBmB,EAAaG,EAAGtB,MAAQ,IACxBmB,EAAaG,EAAGtB,MAAQ,GAEvBjV,EAASkW,EAAWK,IACrBL,EAAUrZ,KAAK0Z,GAEdvW,EAASgV,EAASuB,IACnBvB,EAAQnY,KAAK0Z,GAEbpR,EAAI8J,YAAY2B,GAChB1U,EAASiJ,EAAI2J,IAAI8B,KAGjB1U,EAAS0U,EAAKrL,SACP0P,MAAQrE,EAAKqE,MACpB/Y,EAAO0T,GAAKgB,EAAKhB,GACjBzK,EAAIyJ,IAAIgC,EAAM1U,IAEdiJ,EAAI8J,YAAYsH,GAChBtU,EAASkD,EAAI2J,IAAIyH,KAGjBtU,EAASsU,EAAGhR,SACL0P,MAAQsB,EAAGtB,MAClBhT,EAAO2N,GAAK2G,EAAG3G,GACfzK,EAAIyJ,IAAI2H,EAAItU,IAEhB,IAAIuU,EAAU,IAAIrD,EAAKjX,EAAQ+F,GAC/BgU,EAAKQ,QAAQD,EA/Bb,CAgCJ,CAKJ,IADA,IAAIE,EAAa,GACRla,EAAI,EAAGA,EAAI4Z,EAAY5Z,IAC5Bka,EAAW7Z,KAAK,IASpB,OANAvC,EAAM+E,QAAQ4W,EAAKzB,OAAO,SAASxC,GAC/B0E,EAAW1E,EAAKiD,OAAOpY,KAAKmV,EAChC,IAEAiE,EAAKS,WAAaA,EAClBT,EAAKrB,qBACEqB,CACX,EAQAU,eAAgB,SAASC,EAAeC,GAOpC,GANIvc,EAAMO,YAAY+b,KAClBA,EAAgB,IAEhBtc,EAAMO,YAAYgc,KAClBA,EAAoB,GAEE,IAAtB/c,KAAK0a,MAAMzY,OACX,OAAO,KAEX,GAA0B,IAAtBjC,KAAK0a,MAAMzY,OACX,OAAOiE,EAAS4W,EAAe9c,KAAK0a,MAAM,IAAM,KAAO1a,KAAK0a,MAAM,GAEtE,IAAIsC,EAAO/c,EAAEgJ,KAAKjJ,KAAK0a,OAAO,SAASxC,GACnC,OAAQhS,EAAS4W,EAAe5E,IAASA,EAAKc,UAAY+D,CAC9D,IACA,OAAIvc,EAAMwB,QAAQgb,GACP,KAEJA,EAAKxc,EAAMiD,cAAc,EAAGuZ,EAAK/a,QAC5C,EAKAD,QAAS,WACL,OAAOxB,EAAMwB,QAAQhC,KAAK0a,MAC9B,EAKAuC,UAAW,WACP,OAAOzc,EAAM0G,IAAIlH,KAAKuX,OAAO,SAASa,GAClC,OAAOlS,EAASlG,KAAK0a,MAAOtC,EAAKhW,SAAW8D,EAASlG,KAAK0a,MAAOtC,EAAKjQ,OAC1E,GAAGnI,KACP,EAMAwY,WAAY,SAASjR,GACjB,IAAKvH,KAAKkd,QAAQ3V,GACd,KAAM,4CAEV,OAAOA,EAAEiR,YACb,EAMAF,YAAa,SAAS/Q,GAClB,IAAKvH,KAAKkd,QAAQ3V,GACd,KAAM,4CAEV,OAAOA,EAAE+Q,aACb,EAKAqE,QAAS,SAASQ,EAAchV,EAAQyQ,GAEpC,GAAIpY,EAAMO,YAAYoc,GAClB,KAAM,yCAEV,GAAI3c,EAAMO,YAAYoH,GAAS,CAE3B,GAAI3H,EAAMK,UAAUsc,EAAaxb,OAA+B,SAAtBwb,EAAaxb,KAEnD,YADA3B,KAAKod,gBAAgBD,GAIrB,KAAM,wCAEd,CAEA,IAAIE,EAAcrd,KAAKsd,QAAQH,GAC3B3c,EAAMO,YAAYsc,KAClBA,EAAcrd,KAAKud,QAAQJ,IAE/B,IAAIK,EAAcxd,KAAKsd,QAAQnV,GAC3B3H,EAAMO,YAAYyc,KAClBA,EAAcxd,KAAKud,QAAQpV,IAG/B,IAAIuU,EAAU,IAAIrD,EAAKgE,EAAaG,GAapC,OAXIhd,EAAMK,UAAU+X,KAChB8D,EAAQ9D,MAAQA,GAQpB5Y,KAAKuX,MAAMxU,KAAK2Z,GAETA,CACX,EAKAe,eAAgB,WACZ,KAAOzd,KAAKuX,MAAMtV,OAAS,GAAG,CAC1B,IAAImW,EAAOpY,KAAKuX,MAAM,GACtBvX,KAAK8Y,WAAWV,EACpB,CACJ,EAKAgF,gBAAiB,SAAShF,GAEtB,IAAIpY,KAAK0d,QAAQtF,GAAjB,CAIA,GADApY,KAAKuX,MAAMxU,KAAKqV,GACZpY,KAAKkd,QAAQ9E,EAAKhW,OAAO0T,IAAK,CAE9B,IAAI1S,EAAIpD,KAAKsd,QAAQlF,EAAKhW,OAAO0T,IACjCsC,EAAK2B,aAAa3W,EACtB,MAEIpD,KAAKud,QAAQnF,EAAKhW,QAGtB,GAAIpC,KAAKkd,QAAQ9E,EAAKjQ,OAAO2N,IAAK,CAC9B,IAAI6H,EAAI3d,KAAKsd,QAAQlF,EAAKjQ,OAAO2N,IACjCsC,EAAK4B,aAAa2D,EACtB,MAEI3d,KAAKud,QAAQnF,EAAKjQ,OAhBtB,CA+BJ,EAOAuV,QAAS,SAASE,GACd,GAAIpd,EAAMc,SAASsc,GACf,OAAOpd,EAAMmF,IAAI3F,KAAKuX,OAAO,SAASa,GAClC,OAAOA,EAAKtC,KAAO8H,CACvB,IAEJ,GAAsB,SAAlBA,EAASjc,KACT,OAAOuE,EAASlG,KAAKuX,MAAOqG,GAEhC,KAAM,uDACV,EAIAN,QAAS,SAASO,GACd,IAAI/H,EAAK+H,EAAS/H,IAAM+H,EACxB,GAAI7d,KAAK2a,SAASxF,YAAYW,GAC1B,OAAO9V,KAAK2a,SAAS3F,IAAIc,EAEjC,EAKAoH,QAAS,SAASW,GACd,IAAI/H,EAAK+H,EAAS/H,IAAM+H,EACxB,OAAO7d,KAAK2a,SAASxF,YAAYW,EACrC,EAEAuG,SAAU,SAASnE,GACflY,KAAK0a,MAAM3X,KAAKmV,GAChBlY,KAAK2a,SAAS7F,IAAIoD,EAAKpC,GAAIoC,EAC/B,EAEA4F,YAAa,SAAS5F,GAClB1X,EAAMqF,OAAO7F,KAAK0a,MAAOxC,GACzBlY,KAAK2a,SAAS9U,OAAOqS,EAAKpC,GAC9B,EAMAiI,WAAY,SAASF,GACjB,IAAItW,EAAIsW,EAKR,GAJIrd,EAAMc,SAASuc,KACftW,EAAIvH,KAAKsd,QAAQO,KAGjBrd,EAAMK,UAAU0G,GAUhB,KAAM,gEATN,IAAIgQ,EAAQhQ,EAAEgQ,MACdhQ,EAAEgQ,MAAQ,GACV,IAAK,IAAI7U,EAAI,EAAG4J,EAAMiL,EAAMtV,OAAQS,EAAI4J,EAAK5J,IAAK,CAC9C,IAAI0V,EAAOb,EAAM7U,GACjB1C,KAAK8Y,WAAWV,EACpB,CACApY,KAAK8d,YAAYvW,EAKzB,EAKAyW,aAAc,SAASC,EAAIC,GACvB,OAAO1d,EAAMmF,IAAI3F,KAAKuX,OAAO,SAASa,GAClC,OAAOA,EAAKhW,QAAU6b,GAAM7F,EAAKjQ,QAAU+V,GAAM9F,EAAKhW,QAAU8b,GAAM9F,EAAKjQ,QAAU8V,CACzF,GACJ,EAKAnF,WAAY,SAASV,GAKjB5X,EAAMqF,OAAO7F,KAAKuX,MAAOa,GAEzB5X,EAAMqF,OAAOuS,EAAKhW,OAAOoV,SAAUY,GACnC5X,EAAMqF,OAAOuS,EAAKhW,OAAOmV,MAAOa,GAChC5X,EAAMqF,OAAOuS,EAAKjQ,OAAOsP,SAAUW,GACnC5X,EAAMqF,OAAOuS,EAAKjQ,OAAOoP,MAAOa,EACpC,EAOAmF,QAAS,SAASM,EAAUM,EAAYvF,GAEpC,IAAIwF,EAAU,KAEd,IAAK5d,EAAMK,UAAUgd,GACjB,KAAM,iDAGV,GAAIrd,EAAMc,SAASuc,GAAW,CAC1B,GAAI7d,KAAKkd,QAAQW,GACb,OAAO7d,KAAKsd,QAAQO,GAExBO,EAAU,IAAI/G,EAAKwG,EACvB,KACK,CACD,GAAI7d,KAAKkd,QAAQW,GACb,OAAO7d,KAAKsd,QAAQO,GAGxBO,EAAUP,CACd,CAUA,OARIrd,EAAMK,UAAUsd,IAChBC,EAAQxG,OAAOuG,GAGf3d,EAAMK,UAAU+X,KAChBwF,EAAQxF,MAAQA,GAEpB5Y,KAAKqc,SAAS+B,GACPA,CACX,EAKAvC,oBAAqB,SAAS3D,GACrBlY,KAAKkd,QAAQhF,IACdlY,KAAKqc,SAASnE,GAGlB,IAAImG,EAAWnG,EAAKV,SACpBU,EAAKV,SAAW,GAChBhX,EAAM+E,QAAQ8Y,GAAU,SAASjG,GAC7BpY,KAAKod,gBAAgBhF,EACzB,GAAGpY,KACP,EAKAyb,eAAgB,WACZ,IAAI/Y,EACJ,IAAKA,EAAI,EAAGA,EAAI1C,KAAK0a,MAAMzY,SAAUS,EACjC1C,KAAK0a,MAAMhY,GAAGkE,MAAQlE,EAG1B,IAAKA,EAAI,EAAGA,EAAI1C,KAAKuX,MAAMtV,SAAUS,EACjC1C,KAAKuX,MAAM7U,GAAGkE,MAAQlE,CAE9B,EAKA+I,MAAO,SAAS6S,GACZ,IAAI5F,EAAO,IAAI8B,EACX+D,EAAO/d,EAAMK,UAAUyd,KAAgC,IAAhBA,EACvCC,IACA7F,EAAK8F,QAAU,IAAIxI,EACnB0C,EAAK+F,QAAU,IAAIzI,GAGvB,IAAI3K,EAAM,IAAI2K,EAoBd,OAnBAxV,EAAM+E,QAAQvF,KAAK0a,OAAO,SAASgE,GAC/B,IAAIC,EAAQD,EAAUjT,QACtBJ,EAAI6J,IAAIwJ,EAAWC,GACnBjG,EAAK2D,SAASsC,GAEVJ,GACA7F,EAAK8F,QAAQtJ,IAAIyJ,EAAOD,EAEhC,IAEAle,EAAM+E,QAAQvF,KAAKuX,OAAO,SAASqH,GAC/B,GAAIvT,EAAI8J,YAAYyJ,EAAaxc,SAAWiJ,EAAI8J,YAAYyJ,EAAazW,QAAS,CAC9E,IAAI0W,EAAWnG,EAAKiE,QAAQtR,EAAI2J,IAAI4J,EAAaxc,QAASiJ,EAAI2J,IAAI4J,EAAazW,SAC3EoW,GACA7F,EAAK+F,QAAQvJ,IAAI2J,EAAUD,EAEnC,CACJ,IAEOlG,CACX,EAOAoG,UAAW,SAASC,GAChB,OAAOvE,EAAMha,MAAMse,UAAU9e,KAAM+e,EACvC,EAOAC,oBAAqB,SAAS/D,EAAWgE,GACrC,GAAIze,EAAMO,YAAYka,GAClB,KAAM,sCAEV,GAAIza,EAAMO,YAAYke,GAClB,KAAM,gCAEV,IAAKjf,KAAKkd,QAAQjC,GACd,KAAM,iDAEV,IAAIiE,EAAYlf,KAAKsd,QAAQrC,GAE7Bjb,KAAKmf,aAAaD,EAAWD,EADf,GAElB,EAEAE,aAAc,SAASjH,EAAM+G,EAAQ/D,GAEjC+D,EAAO/G,GACPgD,EAAQnY,KAAKmV,GAEb,IADA,IAAIK,EAAWL,EAAKI,cACX5V,EAAI,EAAG4J,EAAMiM,EAAStW,OAAQS,EAAI4J,EAAK5J,IAAK,CACjD,IAAI0Y,EAAQ7C,EAAS7V,GACjBwD,EAASgV,EAASE,IAGtBpb,KAAKmf,aAAa/D,EAAO6D,EAAQ/D,EACrC,CACJ,EAOAkE,sBAAuB,SAASnE,EAAWgE,GAEvC,GAAIze,EAAMO,YAAYka,GAClB,KAAM,sCAEV,GAAIza,EAAMO,YAAYke,GAClB,KAAM,gCAGV,IAAKjf,KAAKkd,QAAQjC,GACd,KAAM,iDAEV,IAAIiE,EAAYlf,KAAKsd,QAAQrC,GACzBoE,EAAQ,IAAI3I,EACZwE,EAAU,GAGd,IAFAmE,EAAMxI,QAAQqI,GAEPG,EAAMpd,OAAS,GAAG,CACrB,IAAIiW,EAAOmH,EAAMtI,UACjBkI,EAAO/G,GACPgD,EAAQnY,KAAKmV,GAEb,IADA,IAAIK,EAAWL,EAAKI,cACX5V,EAAI,EAAG4J,EAAMiM,EAAStW,OAAQS,EAAI4J,EAAK5J,IAAK,CACjD,IAAI0Y,EAAQ7C,EAAS7V,GACjBwD,EAASgV,EAASE,IAAUlV,EAASmZ,EAAOjE,IAGhDiE,EAAMxI,QAAQuE,EAClB,CACJ,CACJ,EAcAkE,6BAA8B,SAASC,EAAoBrH,EAAMsH,EAASC,EAAUC,EAAWC,EAAO/Y,GAClG4Y,EAAQ1K,IAAIoD,EAAMtR,GAClB6Y,EAAS3K,IAAIoD,EAAMtR,GACnBA,IAEA+Y,EAAM5c,KAAKmV,GAGX,IADA,IAAmCpB,EAA/ByB,EAAWL,EAAKI,cACX5V,EAAI,EAAG4J,EAAMiM,EAAStW,OAAQS,EAAI4J,EAAK5J,IAC5CoU,EAAOyB,EAAS7V,GACX8c,EAAQrK,YAAY2B,GAIhB5Q,EAASyZ,EAAO7I,IACrB2I,EAAS3K,IAAIoD,EAAMvX,KAAKgJ,IAAI8V,EAASzK,IAAIkD,GAAOsH,EAAQxK,IAAI8B,MAJ5D9W,KAAKsf,6BAA6BC,EAAoBzI,EAAM0I,EAASC,EAAUC,EAAWC,EAAO/Y,GACjG6Y,EAAS3K,IAAIoD,EAAMvX,KAAKgJ,IAAI8V,EAASzK,IAAIkD,GAAOuH,EAASzK,IAAI8B,MAOrE,GAAI2I,EAASzK,IAAIkD,KAAUsH,EAAQxK,IAAIkD,GAAO,CAC1C,IAAI0H,EAAY,GAChB,GACI9I,EAAO6I,EAAMpD,MACbqD,EAAU7c,KAAK+T,SAEZA,IAASoB,KACXqH,GAAuBK,EAAU3d,OAAS,IAC3Cyd,EAAU3c,KAAK6c,EAEvB,CACJ,EAQAC,WAAY,SAASN,GACb/e,EAAMO,YAAYwe,KAClBA,GAAqB,GAMzB,IAJA,IAAIC,EAAU,IAAIxJ,EACdyJ,EAAW,IAAIzJ,EACf0J,EAAY,GACZC,EAAQ,GACHjd,EAAI,EAAG4J,EAAMtM,KAAK0a,MAAMzY,OAAQS,EAAI4J,EAAK5J,IAAK,CACnD,IAAIwV,EAAOlY,KAAK0a,MAAMhY,GAClB8c,EAAQrK,YAAY+C,IAGxBlY,KAAKsf,6BAA6BC,EAAoBrH,EAAMsH,EAASC,EAAUC,EAAWC,EAAO,EACrG,CACA,OAAOD,CACX,EAMAI,UAAW,WACP,OAAOtf,EAAMwB,QAAQhC,KAAK6f,aAC9B,EAMAE,WAAY,SAASC,GACjB,IAAIC,EAAaD,EAAMlB,YACnBoB,EAAYlgB,KAAK8e,YACrB,OAAOte,EAAM0G,IAAI+Y,GAAY,SAAS7c,GAClC,OAAO8C,EAASga,EAAW9c,EAC/B,GACJ,EAMA+c,YAAa,WAET,GAAIngB,KAAKgC,WAAahC,KAAK0a,MAAMzY,QAAU,GAAKjC,KAAKuX,MAAMtV,QAAU,EACjE,MAAO,GAGX,GAAyB,GAArBjC,KAAK0a,MAAMzY,OAAa,CACxB,IAAI0E,EAAS,GACb,GAAI3G,KAAKuX,MAAMtV,OAAS,EAGpB,IAFA,IACIme,EADUpgB,KAAKuX,MAAM,GACHnV,OACbM,EAAI,EAAG4J,EAAMtM,KAAKuX,MAAMtV,OAAQS,EAAI4J,EAAK5J,IAAK,CACnD,IAAI0V,EAAOpY,KAAKuX,MAAM7U,GACtB,GAAI0V,EAAKhW,QAAUge,EAAnB,CAGA,IAAIC,EAAMjI,EAAK/N,UACf1D,EAAO5D,KAAKsd,EAFZ,CAGJ,CAEJ,OAAO1Z,CACX,CAEA,IAAI+R,EAAO1Y,KAAKyL,OAAM,GAClB6U,EAAItgB,KAAK0a,MAAMzY,OAEfse,EAAmB,IAAIvK,EAQvBwK,EAAgB,SAAStI,GACzB,OAA6B,IAAzBA,EAAKV,SAASvV,OACN,EAAIqe,EAEkB,IAAzBpI,EAAKT,SAASxV,OACXqe,EAAI,EAGLpI,EAAKV,SAASvV,OAASiW,EAAKT,SAASxV,MAEpD,EAOIwe,EAAwB,SAASvI,EAAMqI,GACvC,IAAIG,EAAYF,EAActI,GACzBqI,EAAiBpL,YAAYuL,IAC9BH,EAAiBrL,IAAIwL,EAAW,IAEpCH,EAAiBvL,IAAI0L,GAAW3d,KAAKmV,EACzC,EAEA1X,EAAM+E,QAAQmT,EAAKgC,OAAO,SAASrX,GAC/Bod,EAAsBpd,EAAGkd,EAC7B,IAKA,IAHA,IAAII,EAAc,GACdC,EAAc,GAEXlI,EAAKgC,MAAMzY,OAAS,GAAG,CAC1B,IAAIG,EAAQ+F,EAAQuY,EACpB,GAAIH,EAAiBpL,YAAY,EAAImL,GAEjC,IADA,IAAIO,EAAUN,EAAiBvL,IAAI,EAAIsL,GAChCO,EAAQ5e,OAAS,GAAG,CACvBkG,EAAS0Y,EAAQtE,MACjB,IAAK,IAAIuE,EAAK,EAAGA,EAAK3Y,EAAOoP,MAAMtV,OAAQ6e,IAAM,CAC7C,IAAIC,EAAa5Y,EAAOoP,MAAMuJ,GAC9B1e,EAAS2e,EAAW1I,cAAclQ,GAClCuY,EAAYF,EAAcpe,GAC1B5B,EAAMqF,OAAO0a,EAAiBvL,IAAI0L,GAAYte,GAC9CA,EAAO0W,WAAWiI,GAClBN,EAAsBre,EAAQme,EAClC,CACA7H,EAAKoF,YAAY3V,GACjByY,EAAYI,QAAQ7Y,EACxB,CAIJ,GAAIoY,EAAiBpL,YAAYmL,EAAI,GAEjC,IADA,IAAIW,EAAUV,EAAiBvL,IAAIsL,EAAI,GAChCW,EAAQhf,OAAS,GAAG,CACvBG,EAAS6e,EAAQ1E,MACjB,IAAK,IAAI2E,EAAK,EAAGA,EAAK9e,EAAOmV,MAAMtV,OAAQif,IAAM,CAC7C,IAAIC,EAAa/e,EAAOmV,MAAM2J,GAC9B/Y,EAASgZ,EAAW9I,cAAcjW,GAClCse,EAAYF,EAAcrY,GAC1B3H,EAAMqF,OAAO0a,EAAiBvL,IAAI0L,GAAYvY,GAC9CA,EAAO2Q,WAAWqI,GAClBV,EAAsBtY,EAAQoY,EAClC,CACAI,EAAY5d,KAAKX,GACjBsW,EAAKoF,YAAY1b,EACrB,CAGJ,GAAIsW,EAAKgC,MAAMzY,OAAS,EACpB,IAAK,IAAI+I,EAAIsV,EAAI,EAAGtV,EAAI,EAAIsV,EAAGtV,IAC3B,GAAIuV,EAAiBpL,YAAYnK,IAC7BuV,EAAiBvL,IAAIhK,GAAG/I,OAAS,EAAG,CAGpC,IAFA,IACIoB,EADUkd,EAAiBvL,IAAIhK,GACnBuR,MACP6E,EAAK,EAAGA,EAAK/d,EAAEkU,MAAMtV,OAAQmf,IAAM,CACxC,IAAIC,EAAMhe,EAAEkU,MAAM6J,GACdE,EAAID,EAAIhJ,cAAchV,GAC1Bqd,EAAYF,EAAcc,GAC1B9gB,EAAMqF,OAAO0a,EAAiBvL,IAAI0L,GAAYY,GAC9CA,EAAExI,WAAWuI,GACbZ,EAAsBa,EAAGf,EAC7B,CACAI,EAAY5d,KAAKM,GACjBqV,EAAKoF,YAAYza,GACjB,KACJ,CAGZ,CAEAsd,EAAcA,EAAYY,OAAOX,GAGjC,IADA,IAAIY,EAAc,IAAIxL,EACbyL,EAAK,EAAGA,EAAKzhB,KAAK0a,MAAMzY,OAAQwf,IACrCD,EAAYtM,IAAIwD,EAAK8F,QAAQxJ,IAAI2L,EAAYc,IAAMA,GAGvD,IAAIC,EAAgB,GAOpB,OANAlhB,EAAM+E,QAAQvF,KAAKuX,OAAO,SAASa,GAC3BoJ,EAAYxM,IAAIoD,EAAKhW,QAAUof,EAAYxM,IAAIoD,EAAKjQ,UACpDiQ,EAAK/N,UACLqX,EAAc3e,KAAKqV,GAE3B,IACOsJ,CACX,IAMJlH,EAAMmH,WAAa,CAMfC,WAAY,WACR,OAAOpH,EAAMha,MAAM2M,MAAM,CAAE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACvF,EAOA0U,QAAS,WACL,OAAOrH,EAAMha,MAAM2M,MAAM,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAChH,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,SAAU,SAAU,SACvI,EAOA2U,WAAY,WACR,OAAOtH,EAAMha,MAAM2M,MAAM,CAAE,OAAQ,OAAQ,QAC/C,EAQA4U,WAAY,SAASC,GAIjB,OAHIxhB,EAAMO,YAAYihB,KAClBA,EAAS,GAENxH,EAAMha,MAAMyhB,mBAAmBD,EAAQ,EAClD,EAQAE,OAAQ,SAASjgB,GAIb,OAHIzB,EAAMO,YAAYkB,KAClBA,EAAS,IAENuY,EAAMha,MAAMyhB,mBAAmBhgB,EAAQ,EAClD,EAYAkgB,KAAM,SAASH,EAAQI,GACnB,OAAO5H,EAAMha,MAAMyhB,mBAAmBD,EAAQI,EAClD,EAaAC,OAAQ,SAASL,EAAQI,EAAeE,GACpC,OAAO9H,EAAMha,MAAM+hB,qBAAqBP,EAAQI,EAAeE,EACnE,EAOAE,SAAU,WACN,OAAOhI,EAAMha,MAAM2M,MACf,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAEjF,EAUAsV,KAAM,SAASlb,EAAGnD,GACd,IAAIse,EAAI,IAAIviB,EAAQqa,MACpB,GAAIjT,GAAK,GAAKnD,GAAK,EACf,OAAOse,EAGX,IAAK,IAAIhgB,EAAI,EAAGA,EAAI6E,EAAI,EAAG7E,IAEvB,IADA,IAAIigB,EAAW,KACN5X,EAAI,EAAGA,EAAI3G,EAAI,EAAG2G,IAAK,CAE5B,IAAImN,EAAO,IAAIb,EAAK3U,EAAElB,WAAa,IAAMuJ,EAAEvJ,YAK3C,GAJAkhB,EAAEnF,QAAQrF,GACNyK,GACAD,EAAE/F,QAAQgG,EAAUzK,GAEpBxV,EAAI,EAAG,CACP,IAAI8K,EAAOkV,EAAEpF,SAAS5a,EAAI,GAAGlB,WAAa,IAAMuJ,EAAEvJ,YAClDkhB,EAAE/F,QAAQnP,EAAM0K,EACpB,CACAyK,EAAWzK,CACf,CAEJ,OAAOwK,CACX,GAOJlI,EAAMha,MAAQ,CAMV2M,MAAO,SAASyV,GAGZ,IADA,IAAIC,EAAcC,EAAQ,IAAI3iB,EAAQqa,MAASrH,EAAQyP,EAAYtV,QAC1D5K,EAAI,EAAG4J,EAAM6G,EAAMlR,OAAQS,EAAI4J,EAAK5J,IAAK,CAC9C,IAAIqgB,EAAO5P,EAAMzQ,GACjB,GAAIlC,EAAMc,SAASyhB,GACnB,CACI,GAAIA,EAAK/c,QAAQ,MAAQ,EACrB,KAAM,0CAEV,IAAIlD,EAAIigB,EAAKzf,MAAM,MACnB,GAAgB,GAAZR,EAAEb,OACF,KAAM,0CAEV4gB,EAAe,IAAIxJ,EAAKvW,EAAE,GAAIA,EAAE,IAChCggB,EAAMnG,QAAQkG,EAClB,CACA,GAAIriB,EAAMQ,SAAS+hB,GAAO,CACtB,IAAKF,EACD,KAAM,8CAEVhjB,EAAMQ,WAAWwiB,EAAcE,EACnC,CACJ,CACA,OAAOD,CACX,EAMAhE,UAAW,SAASgE,EAAO/D,GACvB,GAAIve,EAAMO,YAAY+hB,GAClB,KAAM,sDAENtiB,EAAMO,YAAYge,KAClBA,GAAS,GAGb,IADA,IAAIiE,EAAM,GACDtgB,EAAI,EAAG4J,EAAMwW,EAAMvL,MAAMtV,OAAQS,EAAI4J,EAAK5J,IAAK,CACpD,IAAI0V,EAAO0K,EAAMvL,MAAM7U,GACvBsgB,EAAIjgB,KAAKqV,EAAKhW,OAAO0T,GAAK,KAAOsC,EAAKjQ,OAAO2N,IACzCiJ,GACAiE,EAAIjgB,KAAK,CAAE+S,GAAIsC,EAAKtC,IAE5B,CACA,OAAOkN,CACX,EAWAC,UAAW,SAASC,EAAcpgB,EAAGgT,EAAIqN,GAqBrC,OApBI3iB,EAAMO,YAAY+B,KAClBA,EAAI,IAAIwI,EAAc,EAAG,IAGzB9K,EAAMO,YAAY+U,KAClBA,EAAKrC,KAGT0P,EAAgBtjB,EAAMQ,WAAW,CAC7B6M,MAAO,GACPD,OAAQ,GACR6I,GAAIA,EACJsN,OAAQ,GACRC,KAAM,UACNxL,KAAM,SACNyL,UAAU,EACVtgB,EAAGF,EAAEE,EACLC,EAAGH,EAAEG,GACNkgB,GAEID,EAAaK,SAASJ,EACjC,EAUAK,eAAgB,SAASrjB,EAASsJ,EAAMF,EAAIka,GACxC,OAAOtjB,EAAQujB,QAAQja,EAAMF,EAAIka,EACrC,EAOAE,uBAAwB,SAASxjB,EAAS2iB,EAAOc,EAAUC,GAEvD,GAAIrjB,EAAMO,YAAYZ,GAClB,KAAM,oCAEV,GAAIK,EAAMO,YAAY+hB,GAClB,KAAM,kCAENtiB,EAAMO,YAAY6iB,KAClBA,GAAW,GAEXpjB,EAAMO,YAAY8iB,KAClBA,GAAa,GAMjB,IAHA,IAEc3L,EAAMZ,EAFhBpK,EAAQ/M,EAAQ6G,QAAQ8c,aAAe,IACvC7W,EAAS9M,EAAQ6G,QAAQ+c,cAAgB,IACzC1Y,EAAM,GACD3I,EAAI,EAAG4J,EAAMwW,EAAMpI,MAAMzY,OAAQS,EAAI4J,EAAK5J,IAAK,CAEpD,IAAII,GADJoV,EAAO4K,EAAMpI,MAAMhY,IACNuE,SACTzG,EAAMO,YAAY+B,KAEdA,EADAtC,EAAMK,UAAUqX,EAAKlV,IAAMxC,EAAMK,UAAUqX,EAAKjV,GAC5C,IAAIqI,EAAc4M,EAAKlV,EAAGkV,EAAKjV,GAG/B,IAAIqI,EAAc9K,EAAMiD,cAAc,GAAIyJ,EAAQ,IAAK1M,EAAMiD,cAAc,GAAIwJ,EAAS,MAGpG,IAAI+W,EAAM,CAAC,EAEK,MAAZ9L,EAAKpC,IAUA+N,GACLhkB,EAAMQ,WAAW2jB,EAAK,CAClB9W,MAAuB,IAAhBvM,KAAKkD,SAAiB,GAC7BoJ,OAAwB,GAAhBtM,KAAKkD,SAAgB,GAC7BgU,KAAM,YACNwL,KAAM,CACFY,MAAO,aAQnB,IAAIrM,GAHJN,EAAQtX,KAAKijB,UAAU9iB,EAAS2C,EAAGoV,EAAKpC,GAAIkO,IAGzBpM,SACfpX,EAAMK,UAAU+W,KAChBM,EAAKlV,EAAI4U,EAAO5U,EAChBkV,EAAKjV,EAAI2U,EAAO3U,EAChBiV,EAAKhL,MAAQ0K,EAAO1K,MACpBgL,EAAKjL,OAAS2K,EAAO3K,QAEzB5B,EAAI6M,EAAKpC,IAAMwB,CACnB,CACA,IAAK,IAAI4M,EAAM,EAAGA,EAAMpB,EAAMvL,MAAMtV,OAAQiiB,IAAO,CAC/C,IAAI9L,EAAO0K,EAAMvL,MAAM2M,GACnBC,EAAc9Y,EAAI+M,EAAKhW,OAAO0T,IAClC,IAAItV,EAAMO,YAAYojB,GAAtB,CAGA,IAAIC,EAAc/Y,EAAI+M,EAAKjQ,OAAO2N,IAC9BtV,EAAMO,YAAYqjB,IAGtBpkB,KAAKwjB,eAAerjB,EAASgkB,EAAaC,EAAa,CAAEtO,GAAIsC,EAAKtC,IALlE,CAOJ,CACA,GAAI8N,EAAU,CACF,IAAIzjB,EAAQkkB,aAAalkB,GAC/BmkB,YAAYxB,EAAO,CAAEyB,aAAa,IACpC,IAAK,IAAIC,EAAM,EAAGA,EAAM1B,EAAMpI,MAAMzY,OAAQuiB,KAExClN,EAAQjM,GADR6M,EAAO4K,EAAMpI,MAAM8J,IACF1O,KACX8B,OAAO,IAAI/K,EAAKqL,EAAKlV,EAAGkV,EAAKjV,EAAGiV,EAAKhL,MAAOgL,EAAKjL,QAE/D,CACJ,EAWAgV,mBAAoB,SAASD,EAAQI,GAC7B5hB,EAAMO,YAAYihB,KAClBA,EAAS,GAETxhB,EAAMO,YAAYqhB,KAClBA,EAAgB,GAGpB,IAA2DqC,EAAvD/B,EAAI,IAAIviB,EAAQqa,MAASkK,GAAW,EAAGC,EAAY,GACvD,GAAI3C,GAAU,GAAKI,GAAiB,EAChC,OAAOM,EAEX,IAAIrH,EAAO,IAAIhE,KAAQqN,GAASljB,YAChCkhB,EAAEnF,QAAQlC,GACVqH,EAAErH,KAAOA,EACTsJ,EAAU5hB,KAAKsY,GACf,IAAK,IAAI3Y,EAAI,EAAGA,EAAIsf,EAAQtf,IAAK,CAC7B+hB,EAAO,GACP,IAAK,IAAI1Z,EAAI,EAAGA,EAAI4Z,EAAU1iB,OAAQ8I,IAElC,IADA,IAAI6Z,EAASD,EAAU5Z,GACdC,EAAI,EAAGA,EAAIoX,EAAepX,IAAK,CACpC,IAAI9G,EAAO,IAAImT,KAAQqN,GAASljB,YAChCkhB,EAAE/F,QAAQiI,EAAQ1gB,GAClBugB,EAAK1hB,KAAKmB,EACd,CAEJygB,EAAYF,CAChB,CACA,OAAO/B,CACX,EAYAH,qBAAsB,SAASP,EAAQI,EAAeyC,GAC9CrkB,EAAMO,YAAYihB,KAClBA,EAAS,GAETxhB,EAAMO,YAAYqhB,KAClBA,EAAgB,GAEhB5hB,EAAMO,YAAY8jB,KAClBA,EAAY,GAEhB,IAA2DJ,EAAvD/B,EAAI,IAAIviB,EAAQqa,MAASkK,GAAW,EAAGC,EAAY,GACvD,GAAI3C,GAAU,GAAKI,GAAiB,GAAKyC,GAAa,EAClD,OAAOnC,EAGX,IAAK,IAAI/E,EAAI,EAAGA,EAAIkH,EAAWlH,IAAK,CAChC,IAAItC,EAAO,IAAIhE,KAAQqN,GAASljB,YAChCkhB,EAAEnF,QAAQlC,GACVsJ,EAAY,CAACtJ,GACb,IAAK,IAAI3Y,EAAI,EAAGA,EAAIsf,EAAQtf,IAAK,CAC7B+hB,EAAO,GACP,IAAK,IAAI1Z,EAAI,EAAGA,EAAI4Z,EAAU1iB,OAAQ8I,IAElC,IADA,IAAI6Z,EAASD,EAAU5Z,GACdC,EAAI,EAAGA,EAAIoX,EAAepX,IAAK,CACpC,IAAI9G,EAAO,IAAImT,KAAQqN,GAASljB,YAChCkhB,EAAE/F,QAAQiI,EAAQ1gB,GAClBugB,EAAK1hB,KAAKmB,EACd,CAEJygB,EAAYF,CAChB,CACJ,CACA,OAAO/B,CACX,EASAoC,2BAA4B,SAASC,EAAWC,EAAcC,GAWtDzkB,EAAMO,YAAYgkB,KAClBA,EAAY,IAEZvkB,EAAMO,YAAYikB,KAClBA,EAAe,GAEfxkB,EAAMO,YAAYkkB,KAClBA,GAAS,GAGb,IAAIvC,EAAI,IAAIviB,EAAQqa,MAASkK,GAAW,EACxC,GAAIK,GAAa,EACb,OAAOrC,EAGX,IAAIrH,EAAO,IAAIhE,KAAQqN,GAASljB,YAEhC,GADAkhB,EAAEnF,QAAQlC,GACQ,IAAd0J,EACA,OAAOrC,EAEX,GAAIqC,EAAY,EAAG,CAEf,IAAK,IAAIriB,EAAI,EAAGA,EAAIqiB,EAAWriB,IAAK,CAChC,IAAIwiB,EAAWxC,EAAE7F,eAAe,GAAImI,GACpC,IAAKE,EAED,MAEJ,IAAI9G,EAAUsE,EAAEnF,QAAQ7a,EAAElB,YAC1BkhB,EAAE/F,QAAQuI,EAAU9G,EACxB,CACA,IAAK6G,GAAUF,EAAY,EAEvB,IADA,IAAII,EAAkB3kB,EAAMiD,cAAc,EAAGshB,GACpC3D,EAAK,EAAGA,EAAK+D,EAAiB/D,IAAM,CACzC,IAAInD,EAAKyE,EAAE7F,eAAe,GAAImI,GAC1B9G,EAAKwE,EAAE7F,eAAe,GAAImI,GAC1B/G,GAAMC,IAAOwE,EAAE1E,aAAaC,EAAIC,IAChCwE,EAAE/F,QAAQsB,EAAIC,EAEtB,CAEJ,OAAOwE,CACX,CACJ,EAUA0C,cAAe,SAASjlB,EAASklB,EAAYL,EAAcC,EAAQpB,GAC/D,IAAInB,EAAI7iB,EAAMO,QAAQD,QAAQqa,MAAMha,MAAMskB,2BAA2BO,EAAYL,EAAcC,GAC/FzK,EAAMha,MAAMmjB,uBAAuBxjB,EAASuiB,GAAG,EAAOmB,EAC1D,GAGJhkB,EAAMQ,WAAWF,EAAS,CACtB8H,KAAM,SAASjB,GACXnH,EAAMoI,KAAKjB,EAAS7G,EAAQwK,GAChC,EAEApH,MAAO+H,EACPoF,UAAWA,EACXmD,SAAUA,EACVhH,KAAMA,EACNiD,KAAMA,EACNqB,UAAWA,EACXmB,OAAQA,EACRiB,aAAcA,EACd+R,eAl2EJ,SAAwBC,EAAMC,GAC1B,IAAIxiB,EAAGC,EAAG4K,EACV,GAGIA,GAFA7K,EAAoB,EAAhBrC,KAAKkD,SAAe,GAEhBb,GADRC,EAAoB,EAAhBtC,KAAKkD,SAAe,GACRZ,SAEZ4K,GAAKA,EAAI,GACjB,OAAO0X,EAAOC,EAAYxiB,EAAIrC,KAAK+D,MAAM,EAAI/D,KAAK8kB,IAAI5X,GAAKA,EAC/D,EA01EI4F,SAAUA,EACVuC,WAAYA,EACZpB,UAAWA,EACX8B,MAAOA,EACPO,IAAKA,EACLI,KAAMA,EACNgC,KAAMA,EACNmB,MAAOA,EACPjN,YAAaA,GAEpB,CAjiGD,CAiiGGrN,OAAOL,MAAMqL,QAEhB,SAAUjL,EAAGylB,GAET,IAAI7lB,EAAQK,OAAOL,MACfM,EAAUN,EAAMO,QAAQD,QACxB4H,EAAQlI,EAAMkI,MACd1H,EAAaR,EAAMQ,WACnBkD,EAAQpD,EAAQoD,MAChBsJ,EAAO1M,EAAQ0M,KACfyF,EAASnS,EAAQmS,OACjB9R,EAAQL,EAAQK,MAChBoB,EAAWpB,EAAMoB,SACjBN,EAAWd,EAAMc,SACjBiS,EAAepT,EAAQoT,aAEvBmP,EAAI7iB,EAAMsL,SACV9G,EAAIxE,EAAM8lB,QAEVC,EAAUvhB,EAAEwhB,KAAKD,QAEjBzf,EAAUlG,EAAEkG,QAGZ2f,EAAc,cACdC,EAAU,CACNC,KAAM,OACNC,WAAY,aACZC,aAAc,eACdC,SAAU,YAGdC,EAAQ,QACRC,EAAM,MACNC,EAAQ,QACRC,EAAS,SAMb,SAASC,EAAmB/C,EAASgD,GAIjC,IAHA,IAEIjkB,EAAOkkB,EAFPC,EAAiB3mB,KAAKyjB,QACtBmD,GAAa,EAERlkB,EAAI,EAAGA,EAAI+jB,EAAOxkB,OAAQS,IAE/BF,EAAQihB,EADRiD,EAAQD,EAAO/jB,IAEXd,EAASY,IAAUmkB,EAAeD,KAAWlkB,IAC7CmkB,EAAeD,GAASlkB,EACxBokB,GAAa,GAIrB,OAAOA,CACX,CAhBAzmB,EAAQ4lB,QAAUA,EAkBlB,IAAIc,EAAQ9e,EAAMC,OAAO,CACrBC,KAAM,SAASjF,EAAGC,GACdjD,KAAKgD,EAAIA,EACThD,KAAKiD,EAAIA,CACb,EACA6jB,SAAU,WACN,OAAOxU,EAAOY,QAAQlT,KAAKgD,EAAGhD,KAAKiD,EACvC,EACAzB,SAAU,WACN,OAAO3B,EAAMknB,OAAO,iBAAkB/mB,KAAKgD,EAAGhD,KAAKiD,EACvD,EACA+jB,OAAQ,WACJ,OAAO,IAAIH,EAAM,EAAI7mB,KAAKgD,EAAG,EAAIhD,KAAKiD,EAC1C,IAGAgkB,EAAclf,EAAMC,OAAO,CAC3BC,KAAM,SAASjF,EAAGC,GACdjD,KAAKgD,EAAIA,EACThD,KAAKiD,EAAIA,CACb,EACAikB,eAAgB,WACZ,OAAO,IAAI3T,EAAa,EAAG,EAAG,EAAG,EAAGvT,KAAKgD,EAAGhD,KAAKiD,EACrD,EACA6jB,SAAU,WACN,OAAOxU,EAAOQ,YAAY9S,KAAKgD,EAAGhD,KAAKiD,EAC3C,EACAzB,SAAU,WACN,OAAO3B,EAAMknB,OAAO,qBAAsB/mB,KAAKgD,EAAGhD,KAAKiD,EAC3D,EACAyI,KAAM,SAAS+D,GACXzP,KAAKgD,GAAKyM,EAAMzM,EAChBhD,KAAKiD,GAAKwM,EAAMxM,CACpB,EACA4I,MAAO,SAASO,GACZpM,KAAKgD,GAAKoJ,EACVpM,KAAKiD,GAAKmJ,CACd,EACAnK,OAAQ,WACJ,OAAOtB,KAAK+D,KAAK1E,KAAKgD,EAAIhD,KAAKgD,EAAIhD,KAAKiD,EAAIjD,KAAKiD,EACrD,EACA6I,UAAW,WACa,IAAhB9L,KAAKmnB,QAGTnnB,KAAK6L,MAAM,EAAI7L,KAAKiC,SACxB,EACA+kB,OAAQ,WACJ,OAAO,IAAIC,GAAajnB,KAAKgD,GAAIhD,KAAKiD,EAC1C,IAGAmkB,EAAWrf,EAAMC,OAAO,CACxBC,KAAM,SAAS0G,EAAO3L,EAAGC,GACrBjD,KAAKgD,EAAIA,GAAK,EACdhD,KAAKiD,EAAIA,GAAK,EACdjD,KAAK2O,MAAQA,CACjB,EACAnN,SAAU,WACN,OAAIxB,KAAKgD,GAAKhD,KAAKiD,EACRpD,EAAMknB,OAAO,sBAAuB/mB,KAAK2O,MAAO3O,KAAKgD,EAAGhD,KAAKiD,GAE7DpD,EAAMknB,OAAO,cAAe/mB,KAAK2O,MAEhD,EACAmY,SAAU,WACN,OAAOxU,EAAOU,SAAShT,KAAK2O,MAAO3O,KAAKgD,EAAGhD,KAAKiD,EACpD,EACA+B,OAAQ,WACJ,OAAO,IAAIzB,EAAMvD,KAAKgD,EAAGhD,KAAKiD,EAClC,EACA+jB,OAAQ,WACJ,OAAO,IAAII,EAlGK,IAkGwBpnB,KAAK2O,MAAO3O,KAAKgD,EAAGhD,KAAKiD,EACrE,IAGJmkB,EAASC,KAAO,IAAID,EAAS,GAE7BA,EAASE,OAAS,SAAStU,GACvB,OAAO,IAAIoU,EAASpU,EAASrE,MAAOqE,EAAShQ,EAAGgQ,EAAS/P,EAC7D,EAEAmkB,EAASja,MAAQ,SAASC,GACtB,IAAIma,EAASna,EAAIE,MAAM,EAAGF,EAAInL,OAAS,GAAGqB,MAAM,KAC5CqL,EAAQ4Y,EAAO,GACfvkB,EAAIukB,EAAO,GACXtkB,EAAIskB,EAAO,GAEf,OADe,IAAIH,EAASzY,EAAO3L,EAAGC,EAE1C,EAEA,IAAIukB,EAAqBzf,EAAMC,OAAO,CAClCC,KAAM,SAASjF,EAAGC,EAAGmM,EAAQC,EAAQV,EAAO3J,GACxChF,KAAKynB,UAAY,IAAIR,EAAYjkB,EAAGC,GAChCmM,IAAWsW,GAAerW,IAAWqW,IACrC1lB,KAAKmP,MAAQ,IAAI0X,EAAMzX,EAAQC,IAE/BV,IAAU+W,IACV1lB,KAAKiP,OAASjK,EAAS,IAAIoiB,EAASzY,EAAO3J,EAAOhC,EAAGgC,EAAO/B,GAAK,IAAImkB,EAASzY,GAEtF,EACAnN,SAAU,WACN,IAAIA,EAAW,SAASkmB,GACpB,OAAOA,EAAYA,EAAUlmB,WAAa,EAC9C,EAEA,OAAOA,EAASxB,KAAKynB,WACjBjmB,EAASxB,KAAKiP,QACdzN,EAASxB,KAAKmP,MACtB,EAEAwY,OAAQ,SAASC,GACbA,EAAOC,WAAa7nB,KACpB4nB,EAAOE,kBACX,EAEAhB,SAAU,WACN,IAAI1iB,EAAIkO,EAAOS,OAWf,OATI/S,KAAKynB,YACLrjB,EAAIA,EAAEyH,MAAM7L,KAAKynB,UAAUX,aAE3B9mB,KAAKiP,SACL7K,EAAIA,EAAEyH,MAAM7L,KAAKiP,OAAO6X,aAExB9mB,KAAKmP,QACL/K,EAAIA,EAAEyH,MAAM7L,KAAKmP,MAAM2X,aAEpB1iB,CACX,EACA4iB,OAAQ,WACJ,IAAI/X,EAASjP,KAAKiP,OAASjP,KAAKiP,OAAO+X,SAAWtB,EAC9CqC,EAAe9Y,EAASA,EAAO6X,WAAaxU,EAAOS,OACnD5D,EAAQnP,KAAKmP,MAAQnP,KAAKmP,MAAM6X,SAAWtB,EAC3CsC,EAAc7Y,EAAQA,EAAM2X,WAAaxU,EAAOS,OAEhDkV,EAAiB,IAAI1kB,GAAOvD,KAAKynB,UAAUzkB,GAAIhD,KAAKynB,UAAUxkB,GAClEglB,EAAiBF,EAAalc,MAAMmc,GAAatgB,MAAMugB,GACvD,IAAIR,EAAY,IAAIR,EAAYgB,EAAejlB,EAAGilB,EAAehlB,GAE7DykB,EAAY,IAAIF,EAKpB,OAJAE,EAAUD,UAAYA,EACtBC,EAAUzY,OAASA,EACnByY,EAAUvY,MAAQA,EAEXuY,CACX,IAGAQ,EAAoB,CACpBC,UAAW,WACP,IAAI1E,EAAUzjB,KAAKyjB,QACf2E,EAAcpoB,KAAKqoB,aACnBC,EAAetoB,KAAKuoB,cACpBnZ,EAASqU,EAAQvW,MAAQkb,EACzB/Y,EAASoU,EAAQxW,OAASqb,EAEzB1mB,EAASwN,KACVA,EAAS,GAERxN,EAASyN,KACVA,EAAS,GAGbrP,KAAK6nB,WAAW1Y,MAAQ,IAAI0X,EAAMzX,EAAQC,EAC9C,EAEAmZ,cAAe,WACX,IAAI/E,EAAUzjB,KAAKyjB,QACfzgB,EAAIygB,EAAQzgB,GAAK,EACjBC,EAAIwgB,EAAQxgB,GAAK,EACrBjD,KAAK6nB,WAAWJ,UAAY,IAAIR,EAAYjkB,EAAGC,EACnD,EAEAwlB,UAAW,WACP,IAAIhF,EAAUzjB,KAAKyjB,QACfiE,GAAY,GACS,IAArBjE,EAAQiF,WAAuB9C,EAAQnC,EAAQvW,QAAU0Y,EAAQnC,EAAQxW,WACzEjN,KAAK2oB,UAAS,GACd3oB,KAAKmoB,YACLT,GAAY,IAGZ9B,EAAQnC,EAAQzgB,IAAM4iB,EAAQnC,EAAQxgB,MACtCjD,KAAKwoB,gBACLd,GAAY,GAGZA,GACA1nB,KAAK8nB,kBAEb,EAEAc,YAAa,SAASnF,GAClB,IAAIlZ,GAAS,EAiBb,OAf8B,IAA1BvK,KAAKyjB,QAAQiF,UAAsB1oB,KAAK6oB,oBAAoBpF,EAAS,CAAC6C,EAAOC,MAC7Ehc,GAAS,EACTvK,KAAK2oB,UAAS,GACd3oB,KAAKmoB,aAGLnoB,KAAK6oB,oBAAoBpF,EAAS,CA/NtC,IACA,QA+NIlZ,GAAS,EACTvK,KAAKwoB,iBAGLje,GACAvK,KAAK8nB,mBAGFvd,CACX,GAGAue,EAAU/gB,EAAMC,OAAO,CACvBC,KAAM,SAASwb,GACX,IAAIzc,EAAUhH,KACdgH,EAAQyc,QAAUpjB,EAAW,CAAC,EAAG2G,EAAQyc,QAASA,GAClDzc,EAAQ8O,GAAK9O,EAAQyc,QAAQ3N,GAC7B9O,EAAQ+hB,YAAclc,EAAK2D,QAC3BxJ,EAAQ6gB,WAAa,IAAIL,CAC7B,EAEAwB,QAAS,SAASxmB,GACd,OAAOxC,KAAKipB,mBAAmBD,QAAQxmB,EAC3C,EAEA0mB,OAAQ,SAASzF,GACTA,GAAWA,EAAQ3N,KAClB9V,KAAK8V,GAAK2N,EAAQ3N,GAE3B,EAEA7O,SAAU,SAASjE,EAAGC,GAClB,IAAIwgB,EAAUzjB,KAAKyjB,QACnB,IAAKmC,EAAQ5iB,GACV,OAAO,IAAIO,EAAMkgB,EAAQzgB,EAAGygB,EAAQxgB,GAGnC2iB,EAAQ3iB,IACRwgB,EAAQzgB,EAAIA,EACZygB,EAAQxgB,EAAIA,GACLD,aAAaO,IACpBkgB,EAAQzgB,EAAIA,EAAEA,EACdygB,EAAQxgB,EAAID,EAAEC,GAGlBjD,KAAK6nB,WAAWJ,UAAY,IAAIR,EAAYxD,EAAQzgB,EAAGygB,EAAQxgB,GAC/DjD,KAAK8nB,kBACT,EAEA7Y,OAAQ,SAASN,EAAO3J,GAKpB,OAJI4gB,EAAQjX,KACR3O,KAAK6nB,WAAW5Y,OAAS,IAAImY,EAASzY,EAAO3J,EAAOhC,EAAGgC,EAAO/B,GAC9DjD,KAAK8nB,oBAEF9nB,KAAK6nB,WAAW5Y,QAAUmY,EAASC,IAC9C,EAEA4B,iBAAkB,WACd,OAAOjpB,KAAKmpB,cAChB,EAEArB,iBAAkB,WACd,IAAIsB,EAASppB,KAAK6nB,WAAWf,WAC7B9mB,KAAKipB,mBAAmBvB,UAAU,IAAIhF,EAAEpQ,OAAO8W,EAAOzkB,EAAGykB,EAAO7kB,EAAG6kB,EAAOxkB,EAAGwkB,EAAO/kB,EAAG+kB,EAAO7W,EAAG6W,EAAO5W,GAC5G,EAEA6W,OAAQ,WAAY,EAEpBR,oBAAqBrC,EAErBmC,SAAU,SAASW,GACf,IAAI7a,EACJ,IAAKzO,KAAKupB,WAAaD,EAAO,CAC1B,IAAIE,EAAMxpB,KAAKypB,gBAAkB,IAAI/G,EAAE7V,KACnC6c,EAAaF,EAAIpb,UACrBK,EAAO,IAAI5B,EAAK6c,EAAW1mB,EAAG0mB,EAAWzmB,EAAGumB,EAAItc,QAASsc,EAAIvc,UAC7DjN,KAAK+oB,YAActa,EACnBzO,KAAKqoB,aAAe5Z,EAAKvB,MACzBlN,KAAKuoB,cAAgB9Z,EAAKxB,OAC1BjN,KAAKupB,WAAY,CACrB,MACI9a,EAAOzO,KAAK+oB,YAEhB,OAAOta,CACX,EAEAgb,aAAc,WACV,OAAOzpB,KAAKmpB,eAAeQ,SAC/B,IAGAC,EAAad,EAAQ9gB,OAAO,CAC5BC,KAAM,SAASwb,GACXqF,EAAQ3S,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,IAE3BA,EAAUzjB,KAAKyjB,SACPJ,KAAOwG,EAAwBpG,EAAQJ,MAC/CI,EAAQqG,OAASD,EAAwBpG,EAAQqG,OACrD,EAEArG,QAAS,CACLqG,OAAQ,CACJ7F,MAAO,OACP/W,MAAO,GAEXmW,KAAM,CACFY,MAAO6B,IAIfzC,KAAM,SAASY,EAAO8F,GAClB/pB,KAAKgqB,MAAM,CACP/F,MAAOgG,EAAShG,GAChB8F,QAASA,GAEjB,EAEAD,OAAQ,SAAS7F,EAAO/W,EAAO6c,GAC3B/pB,KAAKkqB,QAAQ,CACTjG,MAAOgG,EAAShG,GAChB/W,MAAOA,EACP6c,QAASA,GAEjB,EAEAb,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACT,IAAIqG,EAASrG,EAAQqG,OACjBzG,EAAOI,EAAQJ,KACfyG,GACA9pB,KAAKkqB,QAAQL,EAAwBC,IAErCzG,GACArjB,KAAKgqB,MAAMH,EAAwBxG,IAGvCyF,EAAQ3S,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,EACjC,CACJ,EAEA4F,OAAQ,SAASc,GACb,IAAIhB,EAAiBnpB,KAAKmpB,eACtB1F,EAAUzjB,KAAKyjB,QACf2G,EAAQ3G,EAAQ2G,MAEpB,GAAIA,GAASA,EAAM/G,KAAM,CACrB,IAAIA,EAAO8G,EAAON,EAAwBO,EAAM/G,MAAQI,EAAQJ,KAChE8F,EAAe9F,KAAKA,EAAKY,MAAOZ,EAAK0G,QACzC,CACJ,EAEAG,QAAS,SAASG,GACd,IAAI5G,EAAUzjB,KAAKyjB,QACnBpjB,EAAWojB,EAAS,CAChBqG,OAAQO,IAKZ,IAAIP,EAAS,MAFbO,EAAgB5G,EAAQqG,QAGN5c,MAAQ,IACtB4c,EAAS,CACL7F,MAAOoG,EAAcpG,MACrB/W,MAAOmd,EAAcnd,MACrB6c,QAASM,EAAcN,QACvBO,SAAUD,EAAcC,WAIhCtqB,KAAKmpB,eAAe1F,QAAQvO,IAAI,SAAU4U,EAC9C,EAEAE,MAAO,SAASO,GACZ,IAAI9G,EAAUzjB,KAAKyjB,QACnBpjB,EAAWojB,EAAS,CAChBJ,KAAMkH,GAAe,CAAC,IAE1B,IAAIlH,EAAOI,EAAQJ,KAEnB,GAAIA,EAAKmH,SAAU,CACf,IAAIA,EAAWnH,EAAKmH,SAChBC,EAAmC,WAAlBD,EAAS7oB,KAAoB0C,EAAEqmB,eAAiBrmB,EAAEsmB,eACvE3qB,KAAKmpB,eAAe9F,KAAK,IAAIoH,EAAcD,GAC/C,MACIxqB,KAAKmpB,eAAe9F,KAAKA,EAAKY,MAAOZ,EAAK0G,QAElD,IAGAa,EAAYhB,EAAW5hB,OAAO,CAC9BC,KAAM,SAASwb,GACXA,EAAUzjB,KAAK6qB,WAAWpH,GAC1BmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAE9BzjB,KAAK8qB,QACL9qB,KAAK+qB,YACL/qB,KAAKyoB,WACT,EAEAhF,QAAS,CACLuH,SAAU,GACVC,WAAY,aACZnB,OAAQ,CACJ5c,MAAO,GAEXmW,KAAM,CACFY,MAAO,SAEXyE,UAAU,GAGdqC,UAAW,WACP,IAAItH,EAAUzjB,KAAKyjB,QAEnBzjB,KAAKmpB,eAAiB,IAAI9kB,EAAE6mB,KAAKtF,EAAQnC,EAAQ0H,MAAQ1H,EAAQ0H,KAAO,GAAI,IAAIzI,EAAEnf,MAAS,CACvF6nB,KAAM3H,EAAQ2H,OAGlBprB,KAAKgqB,QACLhqB,KAAKkqB,SACT,EAEAW,WAAY,SAASpH,GAQjB,OAPIA,GAAWA,EAAQQ,QACnBR,EAAUpjB,EAAW,CAAC,EAAGojB,EAAS,CAC9BJ,KAAM,CACFY,MAAOR,EAAQQ,UAIpBR,CACX,EAEAqH,MAAO,WACH,IAAIrH,EAAUzjB,KAAKyjB,QACnB,GAAIA,EAAQwH,YAAcrF,EAAQnC,EAAQuH,UAAW,CACjD,IAAIK,EAAc,GAEd5H,EAAQ6H,WACRD,EAAYtoB,KAAK0gB,EAAQ6H,WAGzB7H,EAAQ8H,YACRF,EAAYtoB,KAAK0gB,EAAQ8H,YAG7BF,EAAYtoB,KAAK0gB,EAAQuH,UAAYppB,EAAS6hB,EAAQuH,UAAY,KAAO,KACzEK,EAAYtoB,KAAK0gB,EAAQwH,YAEzBxH,EAAQ2H,KAAOC,EAAYnoB,KAAK,IACpC,aACWugB,EAAQ2H,IAEvB,EAEA9Z,QAAS,SAAS6Z,GACd,OAAOnrB,KAAKmpB,eAAe7X,QAAQ6Z,EACvC,EAEAjC,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACT,IAAI+H,GAAc,EACdC,EAAczrB,KAAKyjB,QAEvBA,EAAUzjB,KAAK6qB,WAAWpH,GAE1BmG,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,IAE5BA,EAAQwH,YAAcrF,EAAQnC,EAAQuH,WAAavH,EAAQ6H,WAAa7H,EAAQ8H,cAChFlrB,EAAWorB,EAAa,CACpBR,WAAYxH,EAAQwH,WACpBD,SAAUvH,EAAQuH,SAClBM,UAAW7H,EAAQ6H,UACnBC,WAAY9H,EAAQ8H,aAExBvrB,KAAK8qB,QACL9qB,KAAKmpB,eAAe1F,QAAQvO,IAAI,OAAQuW,EAAYL,MACpDI,GAAc,GAGd/H,EAAQ0H,OACRnrB,KAAKsR,QAAQmS,EAAQ0H,MACrBK,GAAc,IAGbxrB,KAAK4oB,YAAYnF,IAAY+H,GAC9BxrB,KAAKyoB,WAEb,CACJ,IAGJpoB,EAAWuqB,EAAUzU,GAAI+R,GAEzB,IAAIwD,EAAY9B,EAAW5hB,OAAO,CAC9BC,KAAM,SAASwb,GACXmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9BzjB,KAAK2rB,YACL3rB,KAAK4rB,cACT,EAEAA,aAAc,WACV,IAAInI,EAAUzjB,KAAKyjB,QACfzgB,EAAIygB,EAAQzgB,EACZC,EAAIwgB,EAAQxgB,GACZ2iB,EAAQ5iB,IAAM4iB,EAAQ3iB,KACtBjD,KAAKiH,SAASjE,GAAK,EAAGC,GAAK,EAEnC,EAEAimB,OAAQ,SAASzF,GACTA,IACAmG,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAC5BzjB,KAAK6oB,oBAAoBpF,EAAS,CAAC6C,EAAOC,KAC1CvmB,KAAK6rB,YAEL7rB,KAAK6oB,oBAAoBpF,EAAS,CA5hB1C,IACA,OA4hBQzjB,KAAK4rB,eAGjB,EAEAD,UAAW,WACP,IAAIlI,EAAUzjB,KAAKyjB,QACnBzjB,KAAKmpB,eAAiB,IAAI9kB,EAAEynB,KAAK,CAC7BhC,OAAQrG,EAAQqG,OAChBiC,QAAQ,IAGZ/rB,KAAKgqB,QACLhqB,KAAK6rB,WACT,EAEAA,UAAW,WACP,IAAI1C,EAAiBnpB,KAAKmpB,eACtB6C,EAAcC,EAAqBjsB,KAAKyjB,SACxCvW,EAAQ8e,EAAY9e,MACpBD,EAAS+e,EAAY/e,OAEzBkc,EAAevY,SAASsb,SAAS,CAC7BC,EAAc,EAAG,GACjBA,EAAcjf,EAAO,GACrBif,EAAcjf,EAAOD,GACrBkf,EAAc,EAAGlf,IAEzB,IAGAmf,EAAaxC,EAAW5hB,OAAO,CAC/BC,KAAM,SAASwb,GACZmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9B,IAAI4I,EAASrsB,KAAKyjB,QAAQ4I,OAC1BrsB,KAAKqsB,OAAS,IAAI3J,EAAEnf,MAAM8oB,EAAOrpB,EAAGqpB,EAAOppB,GAC3CjD,KAAKssB,eACR,EAEA7I,QAAS,CACNqG,OAAQ,CACH7F,MAAO6B,EACP5Y,MAAO,GAEZmW,KAAM,CACDY,MAAO,UAIfsI,iBAAkB,SAAS7e,EAAO8e,GAC9B,IAAI9E,EAAY8E,EAAK9E,YAIrB,OAHIha,GAASga,IACTha,EAAQA,EAAM+e,cAAc/E,IAEzBha,CACX,EAEAwb,OAAQ,SAASzF,GACTA,IACIA,EAAQxc,WACRjH,KAAKyjB,QAAQxc,SAAWwc,EAAQxc,UAGpC2iB,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAExC,IAGAiJ,EAAeN,EAAWpkB,OAAO,CACjCyb,QAAS,CACLL,OAAQ,EACRiJ,OAAQ,CACJrpB,EAAG,EACHC,EAAG,IAIXqpB,cAAe,WACX,IAAI7I,EAAUzjB,KAAKyjB,QACnBzjB,KAAKmpB,eAAiB,IAAI9kB,EAAEsoB,OAAO,IAAIjK,EAAEiK,OAAO3sB,KAAKqsB,OAAQ5I,EAAQL,QAAS,CAC1EC,KAAMI,EAAQJ,KACdyG,OAAQrG,EAAQqG,QAExB,EAEA8C,eAAgB,SAASJ,GACrB,IAGIK,EACAnf,EAHAzG,EADUjH,KAAKyjB,QACIxc,SACnB2J,EAAW4b,EAAK5b,UAKhBic,EADA5lB,GAAYmf,EACIxV,EAAS,GAETA,EAASA,EAAS3O,OAAS,MAG3CyL,EAAQ1N,KAAKusB,iBAAiBM,EAAcR,SAAUG,GACtDxsB,KAAKmpB,eAAezB,UAAUhF,EAAEgF,YAAYD,UAAU/Z,EAAM1K,EAAG0K,EAAMzK,IAE7E,IAGA6pB,EAAcV,EAAWpkB,OAAO,CAChCyb,QAAS,CACL+I,KAAM,8BACNH,OAAQ,CACJrpB,EAAG,GACHC,EAAG,IAIXqpB,cAAe,WACX,IAAI7I,EAAUzjB,KAAKyjB,QACnBzjB,KAAKmpB,eAAiB9kB,EAAEynB,KAAK3e,MAAMsW,EAAQ+I,KAAM,CAC7CnJ,KAAMI,EAAQJ,KACdyG,OAAQrG,EAAQqG,QAExB,EAEA8C,eAAgB,SAASJ,GACrB,IAqvBW9X,EAAIC,EACfoY,EACAC,EAvvBIpqB,EAAS5C,KAAKitB,YAAYT,GAC1BtnB,EAAQtC,EAAOsC,MACfD,EAAMrC,EAAOqC,IACbyiB,EAAYhF,EAAEgF,YAKlB,GAJIxiB,GACAwiB,EAAUzY,QAgvBHyF,EAhvBoBxP,EAivB/B6nB,GADepY,EAhvBuB1P,GAivB3BjC,EAAI0R,EAAG1R,EAClBgqB,EAAQrY,EAAG1R,EAAIyR,EAAGzR,EACVoB,EAAEwhB,KAAKqH,IAAIvsB,KAAK2D,MAAM0oB,EAAOD,KAnvBO9nB,GAGxCA,EAAK,CACL,IAAIonB,EAASrsB,KAAKqsB,OACd5E,EAAYxiB,EAAIwG,QAAQgc,WAAW4E,EAAOrpB,GAAIqpB,EAAOppB,GACzDykB,EAAUD,UAAUA,EAAUzkB,EAAGykB,EAAUxkB,EAC/C,CACAjD,KAAKmpB,eAAezB,UAAUA,EAClC,EAEAuF,YAAa,SAAST,GAClB,IAEI9C,EAAYyD,EAAUN,EAFtBpJ,EAAUzjB,KAAKyjB,QACf7S,EAAW4b,EAAK5b,SAEpB,GAAI6S,EAAQxc,UAAYmf,GAEpB,GADAyG,EAAgBjc,EAAS,GACN,CACfuc,EAAWN,EAAcR,SACzB3C,EAAamD,EAAcO,aAC3B,IAAIC,EAAczc,EAAS,IACtB8Y,GAAc2D,IACf3D,EAAa2D,EAAYhB,SAEjC,OAGA,GADAQ,EAAgBjc,EAASA,EAAS3O,OAAS,GACxB,CACfkrB,EAAWN,EAAcR,SACzB3C,EAAamD,EAAcS,YAC3B,IAAIC,EAAc3c,EAASA,EAAS3O,OAAS,IACxCynB,GAAc6D,IACf7D,EAAa6D,EAAYlB,SAEjC,CAEJ,GAAIc,EACA,MAAO,CACHjoB,MAAOlF,KAAKusB,iBAAiB7C,EAAY8C,GACzCvnB,IAAKjF,KAAKusB,iBAAiBY,EAAUX,GAGjD,IAGAgB,EAAkB,CAClBC,SAAU,SAASxmB,GACf,IAAIulB,EAAOxsB,KAAKmpB,eAQhB,GAPIqD,aAAgBnoB,EAAEqpB,YAEdlB,EADAvlB,GAAYmf,EACLoG,EAAKmB,MAAM,GAEXnB,EAAKmB,MAAMnB,EAAKmB,MAAM1rB,OAAS,IAG1CuqB,GAAQA,EAAK5b,SAAS3O,OACtB,OAAOuqB,CAEf,EAEAoB,wBAAyB,SAASnK,GAC9B,IAAIoK,EAAWpK,EAAQoK,SACnBC,EAASrK,EAAQqK,OAEjBxsB,EAASusB,KACTpK,EAAQoK,SAAW,CACflsB,KAAMksB,IAIVvsB,EAASwsB,KACTrK,EAAQqK,OAAS,CACbnsB,KAAMmsB,GAGlB,EAEAC,cAAe,SAAS9mB,GACpB,IAAI+mB,EAAShuB,KAAKiuB,SAAShnB,GACvB+mB,IACAhuB,KAAKipB,mBAAmBpjB,OAAOmoB,EAAO7E,uBAC/BnpB,KAAKiuB,SAAShnB,GAE7B,EAEAinB,eAAgB,WACZ,IAAIzK,EAAUzjB,KAAKyjB,QACnBzjB,KAAK4tB,wBAAwBnK,GAE7BzjB,KAAKiuB,SAAW,CAAC,EACjBjuB,KAAKiuB,SAAS7H,GAASpmB,KAAKmuB,cAAc1K,EAAQoK,SAAUzH,GAC5DpmB,KAAKiuB,SAAS5H,GAAOrmB,KAAKmuB,cAAc1K,EAAQqK,OAAQzH,EAC5D,EAEA8H,cAAe,SAAS1K,EAASxc,GAC7B,IAEImnB,EAAYJ,EAFZrsB,GAAQ8hB,GAAW,CAAC,GAAG9hB,KACvB6qB,EAAOxsB,KAAKytB,SAASxmB,GAEzB,GAAKulB,EAYL,OAPI7qB,GAAQokB,EAAQG,aAChBkI,EAAa1B,EACN/qB,GAAQokB,EAAQE,YAActkB,GAAQokB,EAAQI,SACrDiI,EAAatB,EAEb9sB,KAAK+tB,cAAc9mB,GAEnBmnB,IACAJ,EAAS,IAAII,EAAW/tB,EAAW,CAAC,EAAGojB,EAAS,CAC5Cxc,SAAUA,MAEP2lB,eAAeJ,GACtBxsB,KAAKipB,mBAAmBoF,OAAOL,EAAO7E,gBAE/B6E,QAPX,EAXIhuB,KAAK+tB,cAAc9mB,EAoB3B,EAEAqnB,gBAAiB,SAASrnB,GACtB,IAAI+mB,EAAShuB,KAAKiuB,SAAShnB,GAE3B,GAAI+mB,EAAQ,CACR,IAAIxB,EAAOxsB,KAAKytB,SAASxmB,GACrBulB,EACAwB,EAAOpB,eAAeJ,GAEtBxsB,KAAK+tB,cAAc9mB,EAE3B,CACJ,EAEAsnB,QAAS,CACLrpB,MAAO,WACPD,IAAK,UAGTupB,cAAe,SAASC,EAAYxnB,EAAUwc,GAC1CzjB,KAAK4tB,wBAAwBnK,GAE7B,IAAIiL,EAAc1uB,KAAKyjB,QACnBkL,EAAM3uB,KAAKuuB,QAAQtnB,GACnB2nB,GAAeF,EAAYC,IAAQ,CAAC,GAAGhtB,KACvCktB,EAAapL,EAAQkL,GACrBG,GAAU,EAcd,OAbID,GACAH,EAAYC,GAAOtuB,EAAW,CAAC,EAAGquB,EAAYC,GAAME,GAChDA,EAAWltB,MAAQitB,GAAeC,EAAWltB,MAC7C3B,KAAK+tB,cAAc9mB,GACnBjH,KAAKiuB,SAAShnB,GAAYjH,KAAKmuB,cAAcO,EAAYC,GAAM1nB,GAC/D6nB,GAAU,GACH9uB,KAAKiuB,SAAShnB,IACtBjH,KAAKiuB,SAAShnB,GAAUiiB,OAAO2F,IAE3BJ,IAAezuB,KAAKiuB,SAAShnB,IAAaynB,EAAYC,KAC7D3uB,KAAKiuB,SAAShnB,GAAYjH,KAAKmuB,cAAcO,EAAYC,GAAM1nB,GAC/D6nB,GAAU,GAEPA,CACX,EAEAC,eAAgB,SAASN,EAAYhL,IAC5BzjB,KAAKwuB,cAAcC,EAAYrI,EAAO3C,IAAYgL,GACnDzuB,KAAKsuB,gBAAgBlI,IAEpBpmB,KAAKwuB,cAAcC,EAAYpI,EAAK5C,IAAYgL,GACjDzuB,KAAKsuB,gBAAgBjI,EAE7B,GAGAyF,EAAOlC,EAAW5hB,OAAO,CACzBC,KAAM,SAASwb,GACXmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9BzjB,KAAKoR,UAAY,IAAI/M,EAAE2qB,MACvBhvB,KAAKivB,kBACLjvB,KAAKyoB,WACT,EAEAhF,QAAS,CACLiF,UAAU,GAGdO,iBAAkB,WACd,OAAOjpB,KAAKoR,SAChB,EAEAyG,KAAM,SAASrV,GACX,IAAIihB,EAAUzjB,KAAKyjB,QACnB,IAAIjhB,EAQA,OAAOihB,EAAQ5L,KAPX4L,EAAQ5L,MAAQrV,IACjBihB,EAAQ5L,KAAOrV,EACfxC,KAAKkvB,SAAS1sB,GACdxC,KAAKyoB,YACLzoB,KAAK+uB,gBAAe,EAAM,CAAC,GAKtC,EAEA7F,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACTmG,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAEhC,IAAIiL,EAAc1uB,KAAKyjB,QACnB5L,EAAO4L,EAAQ5L,KAEf+N,EAAQ/N,IAAS6W,EAAY7W,MAAQA,GACrC6W,EAAY7W,KAAOA,EACnB7X,KAAKkvB,SAASrX,GACT7X,KAAK4oB,YAAYnF,IAClBzjB,KAAKyoB,YAETzoB,KAAK+uB,gBAAe,EAAMtL,KAE1BzjB,KAAK4oB,YAAYnF,GACjBzjB,KAAK+uB,gBAAe,EAAOtL,GAEnC,CACJ,EAEAwL,gBAAiB,WACb,IAAIxL,EAAUzjB,KAAKyjB,QAEnBzjB,KAAKmpB,eAAiB9kB,EAAEynB,KAAK3e,MAAMsW,EAAQ5L,MAAQ,GAAI,CACnDiS,OAAQrG,EAAQqG,SAGpB9pB,KAAKgqB,QACLhqB,KAAKoR,UAAUid,OAAOruB,KAAKmpB,gBAC3BnpB,KAAKkuB,gBACT,EAEAgB,SAAU,SAASrX,GACf,IAAIsR,EAAiBnpB,KAAKmpB,eACtBgG,EAAY9qB,EAAEynB,KAAK3e,MAAM0K,GAAQ,IACjC8V,EAAQwB,EAAUxB,MAAMrgB,MAAM,GAClC6hB,EAAUxB,MAAMzB,SAAS,IACzB/C,EAAewE,MAAMzB,SAASyB,EAClC,IAGJttB,EAAWyrB,EAAK3V,GAAI+R,GACpB7nB,EAAWyrB,EAAK3V,GAAIqX,GAEpB,IAAI4B,EAAOxF,EAAW5hB,OAAO,CACzBC,KAAM,SAASwb,GACXmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9BzjB,KAAKoR,UAAY,IAAI/M,EAAE2qB,MACvBhvB,KAAK2rB,YACL3rB,KAAKkuB,gBACT,EAEAjF,iBAAkB,WACd,OAAOjpB,KAAKoR,SAChB,EAEA8X,OAAQ,SAASzF,GACb,GAAIA,EAAS,CAET,IAAIha,GADJga,EAAUA,GAAW,CAAC,GACHha,KACfF,EAAKka,EAAQla,GACbE,IACAzJ,KAAKyjB,QAAQha,KAAOA,GAGpBF,IACAvJ,KAAKyjB,QAAQla,GAAKA,GAGlBE,GAAQF,GACRvJ,KAAK6rB,YACL7rB,KAAK+uB,gBAAe,EAAMtL,IAE1BzjB,KAAK+uB,gBAAe,EAAOtL,GAG/BmG,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,EACpC,CACJ,EAEAkI,UAAW,WACP,IAAIlI,EAAUzjB,KAAKyjB,QACf0F,EAAiBnpB,KAAKmpB,eAAiB,IAAI9kB,EAAEynB,KAAK,CAClDhC,OAAQrG,EAAQqG,SAGpB9pB,KAAKgqB,QACLhqB,KAAK6rB,YACL7rB,KAAKoR,UAAUid,OAAOlF,EAC1B,EAEA0C,UAAW,WACP,IAAIpI,EAAUzjB,KAAKyjB,QACf0F,EAAiBnpB,KAAKmpB,eACtB1f,EAAOga,EAAQha,MAAQ,IAAIlG,EAC3BgG,EAAKka,EAAQla,IAAM,IAAIhG,EAE3B4lB,EAAevY,SAASsb,SAAS,CAC7BC,EAAc1iB,EAAKzG,EAAGyG,EAAKxG,GAC3BkpB,EAAc5iB,EAAGvG,EAAGuG,EAAGtG,IAE/B,IAGJ5C,EAAW+uB,EAAKjZ,GAAIqX,GAEpB,IAAI6B,EAAWzF,EAAW5hB,OAAO,CAC7BC,KAAM,SAASwb,GACXmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9BzjB,KAAKoR,UAAY,IAAI/M,EAAE2qB,MACvBhvB,KAAK2rB,YACL3rB,KAAKkuB,gBACT,EAEAjF,iBAAkB,WACd,OAAOjpB,KAAKoR,SAChB,EAEAxO,OAAQ,SAASA,GACb,IAAI6gB,EAAUzjB,KAAKyjB,QACnB,IAAI7gB,EAIA,OAAO6gB,EAAQ7gB,OAHf6gB,EAAQ7gB,OAASA,EACjB5C,KAAKsvB,aAIb,EAEApG,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACT,IAAI7gB,EAAS6gB,EAAQ7gB,OACrBgnB,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAE5B7gB,GAAU5C,KAAKuvB,cAAc3sB,IAC7B5C,KAAK4C,OAAOA,GACZ5C,KAAK+uB,gBAAe,EAAMtL,IAE1BzjB,KAAK+uB,gBAAe,EAAOtL,EAEnC,CACJ,EAEAkI,UAAW,WACP,IAAIlI,EAAUzjB,KAAKyjB,QACnBzjB,KAAKmpB,eAAiB,IAAI9kB,EAAEynB,KAAK,CAC7BhC,OAAQrG,EAAQqG,SAGpB9pB,KAAKgqB,QACLhqB,KAAKoR,UAAUid,OAAOruB,KAAKmpB,gBAEvB1F,EAAQ7gB,QACR5C,KAAKsvB,aAEb,EAEAC,cAAe,SAAS3sB,GACpB,IAAI4sB,EAAgBxvB,KAAKyjB,QAAQ7gB,OAC7B6sB,EAASD,EAAcvtB,SAAWW,EAAOX,OAC7C,IAAKwtB,EACD,IAAK,IAAI/sB,EAAI,EAAGA,EAAIE,EAAOX,OAAQS,IAC/B,GAAI8sB,EAAc9sB,GAAGM,IAAMJ,EAAOF,GAAGM,GAAKwsB,EAAc9sB,GAAGO,IAAML,EAAOF,GAAGO,EAAG,CAC1EwsB,GAAS,EACT,KACJ,CAIR,OAAOA,CACX,EAEAH,YAAa,WAMT,IALA,IAII5hB,EAJAyb,EAAiBnpB,KAAKmpB,eAEtBvmB,EADU5C,KAAKyjB,QACE7gB,OACjBgO,EAAW,GAENlO,EAAI,EAAGA,EAAIE,EAAOX,OAAQS,IAC/BgL,EAAQ9K,EAAOF,GACfkO,EAAS7N,KAAKopB,EAAcze,EAAM1K,EAAG0K,EAAMzK,IAG/CkmB,EAAevY,SAASsb,SAAStb,EACrC,EAEA6S,QAAS,CACL7gB,OAAQ,MAIhBvC,EAAWgvB,EAASlZ,GAAIqX,GAExB,IAAIkC,EAAQ5G,EAAQ9gB,OAAO,CACvBC,KAAM,SAASwb,GACXqF,EAAQ3S,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAE3BzjB,KAAK2vB,YACT,EAEAzG,OAAQ,SAASzF,GACTA,IACIA,EAAQrhB,QACRpC,KAAKmpB,eAAeyG,IAAInM,EAAQrhB,QAGhCpC,KAAK6oB,oBAAoBpF,EAAS,CAAC6C,EAAOC,EArjClD,IACA,OAqjCQvmB,KAAKmpB,eAAe1a,KAAKzO,KAAK6vB,SAGlC/G,EAAQ3S,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAErC,EAEAkM,WAAY,WACR,IAAIlM,EAAUzjB,KAAKyjB,QACfhV,EAAOzO,KAAK6vB,QAEhB7vB,KAAKmpB,eAAiB,IAAI9kB,EAAEqrB,MAAMjM,EAAQrhB,OAAQqM,EAAM,CAAC,EAC7D,EAEAohB,MAAO,WACH,IAAI7D,EAAcC,EAAqBjsB,KAAKyjB,SACxCtZ,EAAS,IAAIuY,EAAEnf,MAAMyoB,EAAYhpB,EAAGgpB,EAAY/oB,GAChDV,EAAO,IAAImgB,EAAE5S,KAAKkc,EAAY9e,MAAO8e,EAAY/e,QAErD,OAAO,IAAIyV,EAAE7V,KAAK1C,EAAQ5H,EAC9B,IAGAysB,EAAQlG,EAAQ9gB,OAAO,CACvBC,KAAM,SAASwb,GACXzjB,KAAKuY,SAAW,GAChBuQ,EAAQ3S,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC3BzjB,KAAKmpB,eAAiB,IAAI9kB,EAAE2qB,MAC5BhvB,KAAKyoB,WACT,EAEAhF,QAAS,CACLiF,UAAU,GAGd2F,OAAQ,SAASzG,GACb5nB,KAAKmpB,eAAekF,OAAOzG,EAAOqB,oBAClCjpB,KAAKuY,SAASxV,KAAK6kB,GACnB5nB,KAAK8vB,iBAAkB,CAC3B,EAEAjqB,OAAQ,SAAS+hB,GACT5nB,KAAK+vB,QAAQnI,KACb5nB,KAAK8vB,iBAAkB,EAE/B,EAEAC,QAAS,SAASnI,GACd,IAAIhhB,EAAQT,EAAQyhB,EAAQ5nB,KAAKuY,UACjC,GAAI3R,GAAS,EAGT,OAFA5G,KAAKmpB,eAAe6G,SAASppB,GAC7B5G,KAAKuY,SAAStS,OAAOW,EAAO,IACrB,CAEf,EAEAO,MAAO,WACHnH,KAAKmpB,eAAehiB,QACpBnH,KAAKuY,SAAW,GAChBvY,KAAK8vB,iBAAkB,CAC3B,EAEAG,QAAS,SAASC,GAGd,IAFA,IAAItI,EAEKllB,EAAI,EAAGA,EAAIwtB,EAAQjuB,OAAQS,IAChCklB,EAASsI,EAAQxtB,GACb1C,KAAK+vB,QAAQnI,IACb5nB,KAAKquB,OAAOzG,EAGxB,EAEAuI,OAAQ,SAASD,GACblwB,KAAKowB,iBAAiBF,EAAS,EACnC,EAEAG,QAAS,SAASH,EAAS1Q,GACvBxf,KAAKowB,iBAAiBF,EAAS1Q,EACnC,EAEA4Q,iBAAkB,SAASF,EAAS1Q,GAChC,IAII9c,EAAGkE,EAAOypB,EAASlH,EAAgBvB,EAJnC0I,EAAQtwB,KAAKmpB,eACboH,EAAkBD,EAAM/X,SAASjL,MAAM,GACvCiL,EAAWvY,KAAKuY,SAChBiY,EAAgB5uB,EAAS4d,GAG7B,IAAK9c,EAAI,EAAGA,EAAIwtB,EAAQjuB,OAAQS,IAE5BymB,GADAvB,EAASsI,EAAQxtB,IACOumB,oBAExBriB,EAAQT,EAAQyhB,EAAQrP,KACX,IACTgY,EAAgBtqB,OAAOW,EAAO,GAC9B2R,EAAStS,OAAOW,EAAO,GAEvBypB,EAAUG,EAAgBhR,EAAUA,EAAQ9c,GAE5C6tB,EAAgBtqB,OAAOoqB,EAAS,EAAGlH,GACnC5Q,EAAStS,OAAOoqB,EAAS,EAAGzI,IAGpC0I,EAAMnpB,QACNmpB,EAAMjC,OAAO3mB,MAAM4oB,EAAOC,EAC9B,EAEArH,OAAQ,SAASzF,GACTA,IACIzjB,KAAK8vB,iBACL9vB,KAAK8vB,iBAAkB,EAClB9vB,KAAK4oB,YAAYnF,IAClBzjB,KAAKyoB,aAGTzoB,KAAK4oB,YAAYnF,GAGrBqF,EAAQ3S,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,GAErC,EAEAgG,aAAc,WAIV,IAHA,IACIgH,EACA7I,EAAQ8I,EAFRnY,EAAWvY,KAAKuY,SAGX7V,EAAI,EAAGA,EAAI6V,EAAStW,OAAQS,KACjCklB,EAASrP,EAAS7V,IACPsmB,YAAuC,IAA1BpB,EAAO+I,iBAC3BD,EAAmB9I,EAAOqB,mBAAmB2H,YAAY,SAGjDH,EADAA,EACc/N,EAAE7V,KAAKG,MAAMyjB,EAAaC,GAE1BA,GAM9B,OAAOD,CACX,IAGJpwB,EAAW2uB,EAAM7Y,GAAI+R,GAErB,IAAI2I,EAAS7B,EAAMhnB,OAAO,CACtBC,KAAM,SAASwG,EAAMgV,GACjBzjB,KAAKuY,SAAW,GAChBuQ,EAAQ3S,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC3BzjB,KAAKmpB,eAAiB,IAAI9kB,EAAEwsB,OAAOC,EAAcriB,GAAOgV,GACxDzjB,KAAKyoB,WACT,EAEAha,KAAM,SAASA,GACX,GAAIA,EACAzO,KAAKmpB,eAAe1a,KAAKqiB,EAAcriB,QACpC,CACH,IAAIsiB,EAAc/wB,KAAKmpB,eAAe1a,OACtC,GAAIsiB,EACA,OAAO,IAAIlkB,EAAKkkB,EAAY5mB,OAAOnH,EAAG+tB,EAAY5mB,OAAOlH,EAAG8tB,EAAYxuB,KAAK2K,MAAO6jB,EAAYxuB,KAAK0K,OAE7G,CACJ,EAEA+jB,OAAQ,WACJhxB,KAAKmpB,eAAe6H,QACxB,EAEA9H,OAAQ,SAASzF,GACb5jB,EAAMQ,WAAWL,KAAKmpB,eAAe1F,QAASA,GAC9CuL,EAAM7Y,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,EAC/B,IAGAkJ,EAAS/C,EAAW5hB,OAAO,CAC3BC,KAAM,SAASwb,GACXmG,EAAWzT,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GAC9BzjB,KAAKixB,cACLjxB,KAAKyoB,WACT,EAEAS,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACT,IAAIyN,EAAgBlxB,KAAKyjB,QAErBA,EAAQze,SACR3E,EAAW6wB,EAAe,CACtBlsB,OAAQye,EAAQze,SAEpBhF,KAAK6R,QAAQsf,KAAKD,EAAclsB,OAAOhC,EAAGkuB,EAAclsB,OAAO/B,IAG/DjD,KAAK6oB,oBAAoBpF,EAAS,CAAC,YACnCzjB,KAAKoxB,QAAQC,UAAUH,EAAc9N,QAGzCpjB,KAAK4oB,YAAYnF,GAEjBmG,EAAWzT,GAAG+S,OAAO7nB,KAAKrB,KAAMyjB,EACpC,CACJ,EAEAwN,YAAa,WACT,IAAIxN,EAAUzjB,KAAKyjB,QACfvW,EAAQuW,EAAQvW,MAChBD,EAASwW,EAAQxW,OACjBmW,EAASK,EAAQL,OAChBwC,EAAQxC,KACJwC,EAAQ1Y,KACTA,EAAQD,GAEP2Y,EAAQ3Y,KACTA,EAASC,GAEbuW,EAAQL,OAASA,EAASziB,KAAKgJ,IAAIuD,EAAOD,GAAU,GAGxD,IAAIjI,EAASye,EAAQze,QAAU,CAAEhC,EAAGogB,EAAQngB,EAAGmgB,GAC/CpjB,KAAK6R,QAAU,IAAI6Q,EAAEnf,MAAMyB,EAAOhC,EAAGgC,EAAO/B,GAC5CjD,KAAKoxB,QAAU,IAAI1O,EAAEiK,OAAO3sB,KAAK6R,QAASuR,GAC1CpjB,KAAKmpB,eAAiB,IAAI9kB,EAAEsoB,OAAO3sB,KAAKoxB,QAAS,CAC7CtH,OAAQrG,EAAQqG,SAGpB9pB,KAAKgqB,OACT,IAEJ3pB,EAAWssB,EAAOxW,GAAI+R,GAEtB,IAAIoJ,EAASvpB,EAAMC,OAAO,CACtBC,KAAM,SAASjB,EAASyc,GACpBA,EAAUA,GAAW,CAAC,EACtBzjB,KAAKgH,QAAUA,EACfhH,KAAKuxB,QAAUltB,EAAEmtB,QAAQlK,OAAOtgB,EAASyc,GACrC5jB,EAAMuL,WAAWpL,KAAKuxB,QAAQ9J,aAC9BznB,KAAKynB,UAAYznB,KAAKyxB,YAG1BzxB,KAAKmpB,eAAiB,IAAI9kB,EAAE2qB,MAC5BhvB,KAAK0xB,SAAW,IAAI7kB,EAAK,EAAG,EAAG4W,EAAQvW,MAAOuW,EAAQxW,QACtDjN,KAAKuC,KAAKvC,KAAK0xB,SACnB,EAEA9Z,OAAQ,WACJ,IAAI4R,EAAMxpB,KAAKmpB,eAAeyH,cAC9B,OAAO,IAAI/jB,EAAK,EAAG,EAAG2c,EAAItc,QAASsc,EAAIvc,SAC3C,EAEA1K,KAAM,SAASA,GACX,IAAIovB,EAAU3xB,KAAK0xB,SAMnB,OALI9L,EAAQrjB,KACRovB,EAAQzkB,MAAQ3K,EAAK2K,MACrBykB,EAAQ1kB,OAAS1K,EAAK0K,OACtBjN,KAAKuxB,QAAQK,QAAQrvB,IAElB,CACH2K,MAAOykB,EAAQzkB,MACfD,OAAQ0kB,EAAQ1kB,OAExB,EAEAwkB,WAAY,SAASzuB,EAAGC,GACpB,IAAI0uB,EAAU3xB,KAAK0xB,SAMnB,OALI9L,EAAQ5iB,IAAM4iB,EAAQ3iB,KACtB0uB,EAAQ3uB,EAAIA,EACZ2uB,EAAQ1uB,EAAIA,EACZjD,KAAKuxB,QAAQ9J,UAAU,CAAEzkB,EAAGA,EAAGC,EAAGA,KAE/B,CACHD,EAAG2uB,EAAQ3uB,EACXC,EAAG0uB,EAAQ1uB,EAEnB,EAEA4uB,KAAM,WACF7xB,KAAKuxB,QAAQM,KAAK7xB,KAAKmpB,eAC3B,EAEAkF,OAAQ,SAASzG,GAEb,OADA5nB,KAAKmpB,eAAekF,OAAOzG,EAAOqB,oBAC3BjpB,IACX,EAEA6F,OAAQ,SAAS+hB,GACb5nB,KAAKmpB,eAAetjB,OAAO+hB,EAAOqB,mBACtC,EAEA6I,aAAc,WAEd,EAEA3qB,MAAO,WACHnH,KAAKmpB,eAAehiB,OACxB,EAEA4qB,QAAS,SAASC,GACdhyB,KAAKuxB,QAAQQ,UACTC,GACA/xB,EAAED,KAAKgH,SAASnB,QAExB,IAKJ,SAASomB,EAAqBxI,GAC1B,MAAO,CACHzgB,EAAGygB,EAAQzgB,GAAK,EAChBC,EAAGwgB,EAAQxgB,GAAK,EAChBiK,MAAOuW,EAAQvW,OAAS,EACxBD,OAAQwW,EAAQxW,QAAU,EAElC,CAEA,SAAS4c,EAAwBpG,GAC7B,GAAIA,EAAS,CACT,IAAIwO,EAAiBxO,EAWrB,OATIniB,EAAS2wB,KACTA,EAAiB,CACbhO,MAAOgO,IAIXA,EAAehO,QACfgO,EAAehO,MAAQgG,EAASgI,EAAehO,QAE5CgO,CACX,CACJ,CAEA,SAAShI,EAASznB,GAOd,OALIA,GAASsjB,EACD,IAAIzhB,EAAE6tB,MAAM1vB,GAAO2vB,QAEnB3vB,CAGhB,CASA,SAAS2pB,EAAcnpB,EAAGC,GACtB,OAAO,IAAIyf,EAAE0P,QAAQ,IAAI1P,EAAEnf,MAAMP,EAAGC,GACxC,CAEA,SAAS6tB,EAAcriB,GACnB,GAAIA,EACA,OAAO,IAAIiU,EAAE7V,KAAK,CAAC4B,EAAKzL,EAAGyL,EAAKxL,GAAI,CAACwL,EAAKvB,MAAOuB,EAAKxB,QAE9D,CAGApN,EAAMQ,WAAWF,EAAS,CACtB8H,KAAM,SAASjB,GACXnH,EAAMoI,KAAKjB,EAAS7G,EAAQwK,GAChC,EACA6b,mBAAoBA,EACpBsC,QAASA,EACTjC,MAAOA,EACPI,YAAaA,EACbG,SAAUA,EACVuF,OAAQA,EACRqC,MAAOA,EACPtD,UAAWA,EACX4F,OAAQA,EACRxF,KAAMA,EACN+E,OAAQA,EACRzB,KAAMA,EACNhD,WAAYA,EACZU,YAAaA,EACbJ,aAAcA,EACd2C,SAAUA,EACV7H,mBAAoBA,EACpBoD,UAAWA,EACX8E,MAAOA,EACP9F,WAAYA,GAEnB,CAz9CD,CAy9CG1pB,OAAOL,MAAMqL,QAEhB,SAAUjL,EAAGylB,GAEL,IAAI7lB,EAAQK,OAAOL,MAEfM,EADUN,EAAMO,QACED,QAClB4H,EAAQlI,EAAMkI,MACdinB,EAAQ7uB,EAAQ6uB,MAChBniB,EAAO1M,EAAQ0M,KACf6e,EAAYvrB,EAAQurB,UACpBlrB,EAAQL,EAAQK,MAChBO,EAAcP,EAAMO,YACpBwC,EAAQpD,EAAQoD,MAChBopB,EAASxsB,EAAQwsB,OACjB7kB,EAAS3H,EAAQ2H,OACjBzH,EAAaR,EAAMQ,WACnBgyB,EAAUxyB,EAAM8K,GAAG0nB,QACnBxM,EAAOhmB,EAAM8lB,QAAQE,KACrBD,EAAUC,EAAKD,QACfzf,EAAUlG,EAAEkG,QAGZmsB,EAAU,CACNC,MAAO,UACPC,KAAM,UACNC,MAAO,UACP3d,IAAK,UACLqc,KAAM,OACNuB,OAAQ,UACRC,MAAO,WACPC,KAAM,WACNC,KAAM,WACNC,MAAO,WACPC,UAAW,aACXC,UAAW,cAEfC,EAAoB,GACpBC,EAAO,OACPC,EAAM,MACNC,EAAQ,QACRC,EAAO,OACPC,EAAS,SAGTC,EAAa,YACbC,EAAO,OACPC,EAAW,UAEXC,EAAmB,mBAYnB5N,EAAc,cAEd6N,EAAU,UAEVC,EAAS,SACTC,EAAe,CACX,KAHK,SAIL,EAAKD,GAGbzzB,EAAQmyB,QAAUA,EAElB,IAAIwB,EAAkBj0B,EAAMkI,MAAMC,OAAO,CACrCC,KAAM,SAAS8rB,GACX/zB,KAAK+zB,YAAcA,EACnB/zB,KAAKG,QAAU4zB,EAAY5zB,OAC/B,EACAiK,UAAW,WACPpK,KAAKg0B,MAAQ,GACbh0B,KAAKi0B,IAAM,GACXj0B,KAAKk0B,SAAW,GAUhBl0B,KAAK+zB,YAAYvV,QAAQjZ,SATzB,SAAgBuQ,EAAI8B,GAChB,IAAIN,EAAQtX,KAAKG,QAAQg0B,aAAare,GAClCwB,IACAtX,KAAKk0B,SAASnxB,KAAKuU,GACnBtX,KAAKg0B,MAAMjxB,KAAKuU,EAAMM,SAASxJ,WAC/BpO,KAAKi0B,IAAIlxB,KAAK6U,EAAOxJ,WAE7B,GAEyCpO,KAC7C,EACAuK,OAAQ,SAASnC,GACb,KAAIpI,KAAKk0B,SAASjyB,QAAU,GAG5B,IAAK,IAAIS,EAAI,EAAGA,EAAI1C,KAAKk0B,SAASjyB,OAAQS,IAEtC1C,KAAKk0B,SAASxxB,GAAGuE,SACb,IAAI1D,EAAMvD,KAAKg0B,MAAMtxB,GAAGM,GAAKhD,KAAKi0B,IAAIvxB,GAAGM,EAAIhD,KAAKg0B,MAAMtxB,GAAGM,GAAKoF,EAAMpI,KAAKg0B,MAAMtxB,GAAGO,GAAKjD,KAAKi0B,IAAIvxB,GAAGO,EAAIjD,KAAKg0B,MAAMtxB,GAAGO,GAAKmF,GAGxI,IAGAgsB,EAAiBrsB,EAAMC,OAAO,CAC9BC,KAAM,SAASosB,EAAcC,EAAYC,GACjCxzB,EAAYwzB,GACZv0B,KAAKu0B,SAAU,EAGfv0B,KAAKu0B,QAAUA,EAEnBv0B,KAAKw0B,cAAgBH,EACrBr0B,KAAKy0B,YAAcH,EACnBt0B,KAAK00B,MAAQ,gBACjB,EACAC,KAAM,WACF30B,KAAK40B,SAAS50B,KAAKw0B,cACvB,EACAK,KAAM,WACF70B,KAAK40B,SAAS50B,KAAKy0B,YACvB,EACAG,SAAU,SAASE,GACf,IAAI30B,EAAU20B,EAAM30B,QACpB,GAAIH,KAAKu0B,QAAS,CACdO,EAAMrW,QAAQlZ,SACV,SAASuQ,EAAIlT,GACT,IAAImyB,EAAO50B,EAAQg0B,aAAare,GAChCif,EAAK/L,SAAQ,GACT+L,GACAA,EAAKnyB,OAAOA,EAEpB,IAEJ,IAAIoyB,EAAS,IAAIltB,EACjBktB,EAAOnsB,WAAW,IAAIirB,EAAgBgB,IACtCE,EAAOlsB,YAAW,WACdgsB,EAAMrW,QAAQlZ,SACV,SAASuQ,GACM3V,EAAQg0B,aAAare,GAC3BkT,SAAQ,EACjB,GAER,IACAgM,EAAO9qB,MACX,MAEI4qB,EAAMtW,QAAQjZ,SAAQ,SAASuQ,EAAI8B,GAC/B,IAAIN,EAAQnX,EAAQg0B,aAAare,GAC7BwB,GACAA,EAAMrQ,SAAS2Q,EAAOxJ,UAE9B,IACA0mB,EAAMrW,QAAQlZ,SACV,SAASuQ,EAAIlT,GACT,IAAImyB,EAAO50B,EAAQg0B,aAAare,GAC5Bif,GACAA,EAAKnyB,OAAOA,EAEpB,GAGZ,IAGAqyB,EAAgBltB,EAAMC,OAAO,CAC7BC,KAAM,SAAS8K,GACX/S,KAAKk1B,MAAQ,GACbl1B,KAAK00B,MAAQ,iBACT3hB,IAAS2S,GACT1lB,KAAKk1B,MAAMnyB,KAAKgQ,EAExB,EACA+B,IAAK,SAASqgB,GACVn1B,KAAKk1B,MAAMnyB,KAAKoyB,EACpB,EACAR,KAAM,WACF,IAAK,IAAIjyB,EAAI,EAAGA,EAAI1C,KAAKk1B,MAAMjzB,OAAQS,IACnC1C,KAAKk1B,MAAMxyB,GAAGiyB,MAEtB,EACAE,KAAM,WACF,IAAK,IAAInyB,EAAI,EAAGA,EAAI1C,KAAKk1B,MAAMjzB,OAAQS,IACnC1C,KAAKk1B,MAAMxyB,GAAGmyB,MAEtB,IAGAO,EAAqBrtB,EAAMC,OAAO,CAClCC,KAAM,SAAS/D,EAAMmxB,EAAYC,GAC7Bt1B,KAAKkE,KAAOA,EACZlE,KAAKu1B,YAAcF,EACnBr1B,KAAKw1B,YAAcF,EACf1P,EAAQyP,KACRr1B,KAAKy1B,YAAcvxB,EAAK9B,UAGxBwjB,EAAQ0P,KACRt1B,KAAK01B,YAAcxxB,EAAKiE,UAE5BnI,KAAK00B,MAAQ,oBACjB,EACAC,KAAM,WACE30B,KAAKy1B,cAAgB/P,GACrB1lB,KAAKkE,KAAKyxB,iBAAiB31B,KAAKy1B,YAAa,UAG7Cz1B,KAAK01B,cAAgBhQ,GACrB1lB,KAAKkE,KAAKyxB,iBAAiB31B,KAAK01B,YAAa,UAGjD11B,KAAKkE,KAAK0xB,aACd,EACAf,KAAM,WACE70B,KAAKu1B,cAAgB7P,GACrB1lB,KAAKkE,KAAKyxB,iBAAiB31B,KAAKu1B,YAAa,UAG7Cv1B,KAAKw1B,cAAgB9P,GACrB1lB,KAAKkE,KAAKyxB,iBAAiB31B,KAAKw1B,YAAa,UAGjDx1B,KAAKkE,KAAK0xB,aACd,IAGAC,EAAyB9tB,EAAMC,OAAO,CACtCC,KAAM,SAAS/D,EAAM4xB,EAAYC,GAC7B/1B,KAAKkE,KAAOA,EACZlE,KAAKy1B,YAAcK,EACnB91B,KAAK01B,YAAcK,EACnB/1B,KAAKu1B,YAAcrxB,EAAK9B,SACxBpC,KAAKw1B,YAActxB,EAAKiE,SACxBnI,KAAK00B,MAAQ,oBACjB,EACAC,KAAM,WACF30B,KAAKkE,KAAKyxB,iBAAiB31B,KAAKy1B,YAAa,UAC7Cz1B,KAAKkE,KAAKyxB,iBAAiB31B,KAAK01B,YAAa,UAC7C11B,KAAKkE,KAAK0xB,aACd,EACAf,KAAM,WACF70B,KAAKkE,KAAKyxB,iBAAiB31B,KAAKu1B,YAAa,UAC7Cv1B,KAAKkE,KAAKyxB,iBAAiB31B,KAAKw1B,YAAa,UAC7Cx1B,KAAKkE,KAAK0xB,aACd,IAGAI,EAAuBjuB,EAAMC,OAAO,CACpCC,KAAM,SAASqR,GACXtZ,KAAKsZ,WAAaA,EAClBtZ,KAAKG,QAAUmZ,EAAWnZ,QAC1BH,KAAKi2B,gBAAkB3c,EAAW2c,gBAClCj2B,KAAK00B,MAAQ,mBACjB,EACAC,KAAM,WACF30B,KAAKG,QAAQqjB,eAAexjB,KAAKsZ,YAAY,EACjD,EACAub,KAAM,WACF70B,KAAKG,QAAQ0F,OAAO7F,KAAKsZ,YAAY,EACzC,IAGA4c,EAAkBnuB,EAAMC,OAAO,CAC/BC,KAAM,SAASqP,GACXtX,KAAKsX,MAAQA,EACbtX,KAAKG,QAAUmX,EAAMnX,QACrBH,KAAK00B,MAAQ,UACjB,EACAC,KAAM,WACF30B,KAAKG,QAAQ8iB,UAAUjjB,KAAKsX,OAAO,GACnCtX,KAAKsX,MAAMob,QAAO,EACtB,EACAmC,KAAM,WACF70B,KAAKsX,MAAMob,QAAO,GAClB1yB,KAAKG,QAAQ0F,OAAO7F,KAAKsX,OAAO,EACpC,IAMA6e,EAAgBpuB,EAAMC,OAAO,CAC7BC,KAAM,SAASmuB,EAAQC,EAAYC,GAC/Bt2B,KAAKo2B,OAASA,EACdp2B,KAAKq2B,WAAaA,EAClBr2B,KAAK00B,MAAQ,iBACb10B,KAAKu2B,WAAa,GAClBv2B,KAAKs2B,QAAUA,EACf,IAAK,IAAI5zB,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB1C,KAAKu2B,WAAWxzB,KAAKuU,EAAMM,SAC/B,CACJ,EACA+c,KAAM,WACF,IAAK,IAAIjyB,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB4U,EAAMM,OAAO5X,KAAKq2B,WAAW3zB,IACzB4U,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,EAAOtX,KAAKu2B,WAAW7zB,GAAI1C,KAAKq2B,WAAW3zB,IAE5D4U,EAAMse,aACV,CACI51B,KAAKs2B,UACLt2B,KAAKs2B,QAAQG,gBACbz2B,KAAKs2B,QAAQI,UAErB,EACA7B,KAAM,WACF,IAAK,IAAInyB,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB4U,EAAMM,OAAO5X,KAAKu2B,WAAW7zB,IAEzB4U,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,EAAOtX,KAAKq2B,WAAW3zB,GAAI1C,KAAKu2B,WAAW7zB,IAE5D4U,EAAMse,aACV,CAEI51B,KAAKs2B,UACLt2B,KAAKs2B,QAAQG,gBACbz2B,KAAKs2B,QAAQI,UAErB,IAGAC,EAAoB5uB,EAAMC,OAAO,CACjCC,KAAM,SAASqR,EAAYnZ,GACvBH,KAAKsZ,WAAaA,EAClBtZ,KAAKG,QAAUA,EACfH,KAAK00B,MAAQ,gBACjB,EAEAC,KAAM,WACF30B,KAAKG,QAAQ0F,OAAO7F,KAAKsZ,YAAY,EACzC,EAEAub,KAAM,WACF70B,KAAKG,QAAQqjB,eAAexjB,KAAKsZ,YAAY,EACjD,IAGAsd,EAAe7uB,EAAMC,OAAO,CAC5BC,KAAM,SAASqP,EAAOnX,GAClBH,KAAKsX,MAAQA,EACbtX,KAAKG,QAAUA,EACfH,KAAK00B,MAAQ,WACjB,EAEAC,KAAM,WACF30B,KAAKG,QAAQ02B,WACb72B,KAAKG,QAAQ0F,OAAO7F,KAAKsX,OAAO,EACpC,EAEAud,KAAM,WACF70B,KAAKG,QAAQ8iB,UAAUjjB,KAAKsX,OAAO,EACvC,IAGAwf,EAAc/uB,EAAMC,OAAO,CAC3BC,KAAM,SAAS8uB,EAAiBC,EAAe72B,GAC3CH,KAAKwG,QAAUuwB,EACf/2B,KAAKi3B,SAAWD,EAChBh3B,KAAKG,QAAUA,EACfH,KAAK00B,MAAQ,UACjB,EACAC,KAAM,WACF30B,KAAKG,QAAQ+2B,IAAIl3B,KAAKwG,QAC1B,EACAquB,KAAM,WACF70B,KAAKG,QAAQ+2B,IAAIl3B,KAAKi3B,SAC1B,IAGAE,EAAapvB,EAAMC,OAAO,CAC1BC,KAAM,SAASquB,EAASF,EAAQgB,GAC5Bp3B,KAAKo2B,OAASA,EACdp2B,KAAKo3B,YAAcA,EACnBp3B,KAAK00B,MAAQ,WACb10B,KAAKq3B,YAAc,GACnBr3B,KAAKs3B,UAAYhB,EAAQiB,OACzBv3B,KAAKs2B,QAAUA,EACft2B,KAAKgF,OAASsxB,EAAQkB,aAAaxyB,SACnC,IAAK,IAAItC,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB1C,KAAKq3B,YAAYt0B,KAAKuU,EAAMrI,SAASN,MACzC,CACJ,EACAgmB,KAAM,WACF,IAAIjyB,EAAG4U,EACP,IAAK5U,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,KAChC4U,EAAQtX,KAAKo2B,OAAO1zB,IACduM,OAAOjP,KAAKo3B,YAAY10B,GAAI1C,KAAKgF,QAAQ,GAC3CsS,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,GAEjBA,EAAMse,cAEN51B,KAAKs2B,UACLt2B,KAAKs2B,QAAQmB,cACbz3B,KAAKs2B,QAAQI,UAErB,EACA7B,KAAM,WACF,IAAInyB,EAAG4U,EACP,IAAK5U,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,KAChC4U,EAAQtX,KAAKo2B,OAAO1zB,IACduM,OAAOjP,KAAKq3B,YAAY30B,GAAI1C,KAAKgF,QAAQ,GAC3CsS,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,GAEjBA,EAAMse,cAEN51B,KAAKs2B,UACLt2B,KAAKs2B,QAAQmB,cACbz3B,KAAKs2B,QAAQI,UAErB,IAGAgB,EAAc3vB,EAAMC,OAAO,CAC3BC,KAAM,SAAS9H,EAASw3B,EAAOC,GAC3B53B,KAAKG,QAAUA,EACfH,KAAKwf,QAAUoY,EACf53B,KAAK23B,MAAQA,EACb33B,KAAK00B,MAAQ,aACjB,EACAC,KAAM,WACF30B,KAAKG,QAAQ03B,SAAS73B,KAAK23B,MAAO33B,KAAKwf,QAC3C,EACAqV,KAAM,WACF70B,KAAKG,QAAQ8vB,QAAQjwB,KAAK23B,OAAO,EACrC,IAGAG,EAAa/vB,EAAMC,OAAO,CAC1BC,KAAM,SAAS9H,EAASw3B,EAAOC,GAC3B53B,KAAKG,QAAUA,EACfH,KAAKwf,QAAUoY,EACf53B,KAAK23B,MAAQA,EACb33B,KAAK00B,MAAQ,aACjB,EACAC,KAAM,WACF30B,KAAKG,QAAQ03B,SAAS73B,KAAK23B,MAAO33B,KAAKwf,QAC3C,EACAqV,KAAM,WACF70B,KAAKG,QAAQgwB,OAAOnwB,KAAK23B,OAAO,EACpC,IAMAI,EAAkBl4B,EAAMoW,WAAWjO,OAAO,CAC1CC,KAAM,SAASwb,GACX5jB,EAAMoW,WAAWE,GAAGlO,KAAK5G,KAAKrB,KAAMyjB,GACpCzjB,KAAKg4B,KAAKh4B,KAAKi4B,OAAQxU,GACvBzjB,KAAK2f,MAAQ,GACb3f,KAAK4G,MAAQ,EACb5G,KAAKk4B,SAAW,GACpB,EAEAD,OAAQ,CAAC,SAAU,UAMnBE,MAAO,WACHn4B,KAAKo4B,UAAY,IAAInD,CACzB,EAKAoD,OAAQ,WACJr4B,KAAKo4B,UAAY1S,CACrB,EAKA4S,OAAQ,SAASC,GACTv4B,KAAKo4B,UAAUlD,MAAMjzB,OAAS,GAC9BjC,KAAKw4B,SAASx4B,KAAKo4B,UAAWG,GAElCv4B,KAAKo4B,UAAY1S,CACrB,EAMA+S,iBAAkB,SAAStD,GACnBn1B,KAAKo4B,UACLp4B,KAAKo4B,UAAUtjB,IAAIqgB,GAEnBn1B,KAAK8U,IAAIqgB,EAEjB,EAOArgB,IAAK,SAASqgB,EAAUoD,GACpBv4B,KAAKw4B,SAASrD,EAAUoD,EAC5B,EAOAhc,IAAK,WACGvc,KAAK4G,MAAQ,IACb5G,KAAK2f,MAAMpD,MACXvc,KAAK4G,QAEb,EAEA8xB,MAAO,WACH,OAAO14B,KAAK2f,MAAM1d,MACtB,EAKA0yB,KAAM,WACE30B,KAAK4G,MAAQ,IACb5G,KAAK4G,QACL5G,KAAK2f,MAAM3f,KAAK4G,OAAO+tB,OACvB30B,KAAKmJ,QAAQ,UAErB,EAKA0rB,KAAM,WACE70B,KAAK2f,MAAM1d,OAAS,GAAKjC,KAAK4G,MAAQ5G,KAAK2f,MAAM1d,SACjDjC,KAAK2f,MAAM3f,KAAK4G,OAAOiuB,OACvB70B,KAAK4G,QACL5G,KAAKmJ,QAAQ,UAErB,EAEAqvB,SAAU,SAASJ,EAAWG,GAE1Bv4B,KAAK2f,MAAM1Z,OAAOjG,KAAK4G,MAAO5G,KAAK2f,MAAM1d,OAASjC,KAAK4G,OACvD5G,KAAK2f,MAAM5c,KAAKq1B,IACA,IAAZG,EACAv4B,KAAK60B,OAEL70B,KAAK4G,QAGL5G,KAAK2f,MAAM1d,OAASjC,KAAKk4B,WACzBl4B,KAAK2f,MAAM1Z,OAAO,EAAGjG,KAAK2f,MAAM1d,OAASjC,KAAKk4B,UAC9Cl4B,KAAK4G,MAAQ5G,KAAKk4B,SAE1B,EAKA/wB,MAAO,WACHnH,KAAK2f,MAAQ,GACb3f,KAAK4G,MAAQ,CACjB,IAKA+xB,EAAY5wB,EAAMC,OAAO,CACzBC,KAAM,SAAS2wB,GACX54B,KAAK44B,YAAcA,CACvB,EACA1zB,MAAO,WACP,EACAisB,KAAM,WACN,EACAlsB,IAAK,WACL,EACA4zB,YAAa,WACT,OAAO,CACX,EACAC,UAAW,WACP,OAAOxG,EAAQC,KACnB,IAGAwG,EAAeJ,EAAU3wB,OAAO,CAChCC,KAAM,SAAS2wB,GACX,IAAII,EAAOh5B,KACPi5B,EAAWp5B,EAAMq5B,QAAQC,SA1hBf,IADP,GA4hBPR,EAAUxiB,GAAGlO,KAAK5G,KAAK23B,EAAMJ,GAE7B,IAAIz4B,EAAU64B,EAAKJ,YAAYz4B,QAC3Bi5B,EAASj5B,EAAQi5B,OAEjBC,EAAWl5B,EAAQk5B,SAAWL,EAAKK,SAAWp5B,EAAEE,EAAQm5B,YAAYC,oBAAoB,CACxFN,SAAUA,EACVO,mBAjiBc,EAkiBdC,qBAAqB,EACrB9pB,MAAM,EACN+pB,OAAQV,EAAKW,MAAM3B,KAAKgB,KACzBnhB,KAAK,uBAEJuhB,EAAO3R,YACPuR,EAAKY,cAAgB,IAAIvH,EAAQ+G,EAAOpyB,UAG5C,IAAI6yB,EAAgB,SAASC,EAAWnwB,EAAKD,GACzCowB,EAAUC,cACVD,EAAUE,YAAYrwB,IAjjBjB,IAijBoCD,GAhjBpC,IAijBT,EAEAmwB,EAAcR,EAASY,WAAWj3B,GAClC62B,EAAcR,EAASY,WAAWh3B,GAClCo2B,EAASa,SACb,EAEArB,YAAa,SAAS/1B,EAAGq3B,GACrB,IAAIvB,EAAc54B,KAAK44B,YACnBnV,EAAUmV,EAAYz4B,QAAQsjB,QAAQ2W,SACtCC,EAAUF,EAAKG,QAUnB,OARI1U,EAAQnC,EAAQtiB,OAIZk5B,EAHC5W,EAAQtiB,KAAsB,QAAfsiB,EAAQtiB,IAGdg5B,EAAK1W,EAAQtiB,IAAM,OAFnBo5B,GAAOJ,KAAUvU,EAAQgT,EAAY4B,eAMpC,IAAZ/W,GAAqB4W,IAAYzU,EAAQgT,EAAY6B,kBAAoB7U,EAAQgT,EAAY8B,kBACxG,EAEAx1B,MAAO,WACHlF,KAAKq5B,SAASsB,QAClB,EACAxJ,KAAM,WACN,EACAwI,MAAO,SAASiB,GACZ,IACIz6B,EADOH,KACQ44B,YAAYz4B,QAC3Bi5B,EAASj5B,EAAQi5B,OACjByB,EAAY,IAAIt3B,EAAMq3B,EAAKE,WAAYF,EAAKG,WAE5C3B,EAAO3R,WACPtnB,EAAQ66B,UAAUH,EAAUhvB,OAAO,IAN5B7L,KAOF45B,cAAcqB,OAAOJ,GAC1BzB,EAAO3R,UAAUoT,EAAU73B,EAAG63B,EAAU53B,IAExC43B,EAAYA,EAAUnvB,KAAKvL,EAAQ+6B,KAAKrvB,OAAO,IAGnD1L,EAAQgJ,QAtlBN,MAslBmB,CAAE+tB,IAAK2D,GAChC,EACA51B,IAAK,WACDjF,KAAKq5B,SAASa,SAClB,EACApB,UAAW,WACP,OAAOxG,EAAQnB,IACnB,IAOAgK,EAAcpzB,EAAMC,OAAO,CAC3BC,KAAM,SAAS2wB,GACX54B,KAAK44B,YAAcA,CACvB,EACAC,YAAa,WACT,OAAO,CACX,EACA3zB,MAAO,SAASpC,EAAGq3B,GACf,IAAIvB,EAAc54B,KAAK44B,YACnBz4B,EAAUy4B,EAAYz4B,QACtBq6B,EAAc5B,EAAY4B,YAE1BA,IACA5B,EAAYwC,aAAaZ,EAAaL,GAClCK,EAAYlE,UACZt2B,KAAKs2B,QAAUkE,EAAYlE,QAC3Bt2B,KAAKq7B,OAASr7B,KAAKs2B,QAAQgF,SAASx4B,KAIvC9C,KAAKq7B,SACNr7B,KAAKq7B,OAASl7B,EAAQo7B,iBAAiBD,SAASx4B,GAC5C9C,KAAKq7B,SACLr7B,KAAKs2B,QAAUn2B,EAAQo7B,mBAI3Bv7B,KAAKs2B,UACAt2B,KAAKs2B,QAAQkF,aAAax7B,KAAKq7B,SAAYl7B,EAAQgJ,QAAQoqB,EAAY,CAAE6C,OAAQp2B,KAAKs2B,QAAQF,OAAQqF,YAAa,MAGpH7C,EAAYlP,WAAa5mB,EACzB81B,EAAY3zB,IAAInC,IAHhB9C,KAAKs2B,QAAQpxB,MAAMpC,GAM/B,EAEAquB,KAAM,SAASruB,GACP9C,KAAKs2B,UACLt2B,KAAKs2B,QAAQnF,KAAKnxB,KAAKq7B,OAAQv4B,GAC3B9C,KAAKs2B,QAAQkF,aAAax7B,KAAKq7B,SAC/Br7B,KAAK44B,YAAYz4B,QAAQgJ,QAAQqqB,EAAM,CAAE4C,OAAQp2B,KAAKs2B,QAAQF,OAAQqF,YAAa,KAG/F,EAEAx2B,IAAK,WACD,IAEI8N,EAFA5S,EAAUH,KAAK44B,YAAYz4B,QAC3Bm2B,EAAUt2B,KAAKs2B,QAGfA,IACKA,EAAQkF,aAAax7B,KAAKq7B,SAAYl7B,EAAQgJ,QAAQsqB,EAAU,CAAE2C,OAAQE,EAAQF,OAAQqF,YAAa,KAMxGnF,EAAQ+B,UALRtlB,EAAOujB,EAAQtsB,SAEX7J,EAAQu7B,gBAAgB5mB,IAAI/B,GAAM,IAO9C/S,KAAKs2B,QAAU5Q,EACf1lB,KAAKq7B,OAAS3V,CAClB,EACAoT,UAAW,SAASh2B,GAChB,OAAO9C,KAAK44B,YAAY4B,YAAcx6B,KAAK44B,YAAY4B,YAAYmB,WAAW74B,GAAKwvB,EAAQC,KAC/F,IAGAqJ,EAAgB7zB,EAAMC,OAAO,CAC7BC,KAAM,SAAS2wB,GACX54B,KAAK44B,YAAcA,CACvB,EACAC,YAAa,SAAS/1B,EAAGq3B,GACrB,IAAIvB,EAAc54B,KAAK44B,YACnBiD,EAAajD,EAAYz4B,QAAQsjB,QAAQoY,WACzCxB,EAAUwB,IAAsC,IAAxBA,EAAWC,SAUvC,OARIzB,IAEIA,EADAwB,EAAW16B,KAAyB,QAAlB06B,EAAW16B,IACnBg5B,EAAK0B,EAAW16B,IAAM,OAEtBo5B,GAAOJ,IAIlBE,IAAYzU,EAAQgT,EAAY4B,eAAiB5U,EAAQgT,EAAY6B,eAChF,EACAv1B,MAAO,SAASpC,GACZ,IAAI3C,EAAUH,KAAK44B,YAAYz4B,QAC/BA,EAAQ02B,WACR12B,EAAQ47B,SAAS72B,MAAMpC,EAC3B,EACAquB,KAAM,SAASruB,GACG9C,KAAK44B,YAAYz4B,QACvB47B,SAAS5K,KAAKruB,EAC1B,EACAmC,IAAK,SAASnC,EAAGq3B,GACb,IAAIh6B,EAAUH,KAAK44B,YAAYz4B,QAASq6B,EAAcx6B,KAAK44B,YAAY4B,YACnE/rB,EAAOtO,EAAQ47B,SAASnkB,SACtB4iB,GAAgBA,EAAYwB,YAAgB7B,EAAKG,SACnDn6B,EAAQ02B,WAEPpoB,EAAKzM,WACN7B,EAAQ87B,WAAWxtB,GAEvBtO,EAAQ47B,SAAS92B,KACrB,EACA6zB,UAAW,WACP,OAAOxG,EAAQC,KACnB,IAGA2J,EAAiBn0B,EAAMC,OAAO,CAC9BC,KAAM,SAAS2wB,GACX54B,KAAK44B,YAAcA,EACnB54B,KAAK2B,KAAO,gBAChB,EACAk3B,YAAa,WACT,OAAO74B,KAAK44B,YAAY8B,iBAC5B,EACAx1B,MAAO,SAASpC,EAAGq3B,GACf,IAAIvB,EAAc54B,KAAK44B,YACnBz4B,EAAUy4B,EAAYz4B,QACtBg8B,EAAYvD,EAAY8B,kBACxBphB,EAAanZ,EAAQi8B,kBAAkB,CAAC,EAAGD,EAAUE,GAAIv5B,GAEzDw5B,GAAQhjB,KAAgBnZ,EAAQgJ,QAAQoqB,EAAY,CAAE6C,OAAQ,GAAIqF,YAAa,CAACniB,GAAaijB,iBAAkB3I,KAAazzB,EAAQqjB,eAAelK,IACnJsf,EAAY4D,wBAAwBljB,EAAY6iB,EAAUE,GAAG/kB,OAAO,GACpEshB,EAAY6D,eACZ7D,EAAYwC,aAAaxC,EAAY8D,iBAAkBvC,GACtC,aAAbA,EAAKx4B,OACLxB,EAAQw8B,mBAAqBR,EAAUvU,UAG3CtO,EAAWlX,OAAO,MAClBw2B,EAAY3zB,IAAInC,GAExB,EAEAquB,KAAM,SAASruB,GACX,IAAI81B,EAAc54B,KAAK44B,YACnBtf,EAAasf,EAAY8D,iBAI7B,OAFApjB,EAAWnR,OAAOrF,GAClB81B,EAAYz4B,QAAQgJ,QAAQqqB,EAAM,CAAE4C,OAAQ,GAAIqF,YAAa,CAACniB,GAAaijB,iBAAkB3I,KACtF,CACX,EAEA3uB,IAAK,SAASnC,GACV,IAKIqF,EALAywB,EAAc54B,KAAK44B,YACnBv0B,EAAIu0B,EAAYz4B,QAChBmZ,EAAasf,EAAY8D,iBACzBlC,EAAc5B,EAAY4B,YAC1B2B,EAAYvD,EAAY8B,kBAExBkC,EAAoBv4B,EAAEs4B,mBAErBrjB,IAKDnR,EADAg0B,GAAaA,EAAUE,IAAM/iB,EAAWujB,gBAC/BV,EAAUE,GACZ7B,GAAeA,aAAuBr6B,EAAQ28B,MAC5CtC,EAAYuC,aAAa7J,IAASsH,EAAYuC,aAAaj6B,GAE3DA,EAGbwW,EAAWnR,OAAOA,GAEb9D,EAAE8E,QAAQsqB,EAAU,CAAE2C,OAAQ,GAAIqF,YAAa,CAACniB,GAAaijB,iBAAkB3I,KAIhFvvB,EAAEwB,OAAOyT,GAAY,GACrBjV,EAAEq3B,gBAAgBnf,QAJlBjD,EAAWsc,cACXvxB,EAAE24B,0BAKNpE,EAAY4D,0BAERI,IACAv4B,EAAE44B,mBAAmBrV,OAAO/hB,OAAO+2B,GACnCv4B,EAAEs4B,mBAAqB,MAE/B,EAEA7D,UAAW,WACP,OAAOxG,EAAQC,KACnB,IAGA2K,EAAqBn1B,EAAMC,OAAO,CAClCC,KAAM,SAAS2wB,GACX54B,KAAK44B,YAAcA,EACnB54B,KAAK2B,KAAO,gBAChB,EAEAk3B,YAAa,SAAS/1B,EAAGq3B,GACrB,IAAIvB,EAAc54B,KAAK44B,YAEnBiD,EADUjD,EAAYz4B,QACDsjB,QAAQoY,WAC7B33B,EAAO00B,EAAY4B,YACnB2C,GAA0B,IAAftB,GACA33B,GAAQA,EAAKsoB,QAAUtoB,EAAK83B,YAAc7B,EAAKG,SAM9D,OAJI6C,IACAn9B,KAAKq8B,GAAKn4B,GAGPi5B,CACX,EAEAj4B,MAAO,SAASpC,EAAGq3B,GACf,IAAIvB,EAAc54B,KAAK44B,YACnBtf,EAAatZ,KAAKq8B,GAEtBzD,EAAYwC,aAAa9hB,EAAY6gB,GAErC,IAEIkB,EAAQh5B,EAFRi0B,EAAUhd,EAAWgd,QAGrBA,IACA+E,EAAS/E,EAAQgF,SAASx4B,GAC1BT,EAAOwxB,EAAawH,IAGpBiB,GAAQhjB,IAAegd,IAAYsC,EAAYz4B,QAAQgJ,QAAQoqB,EAAY,CAAE6C,OAAQ,GAAIqF,YAAa,CAACniB,GAAaijB,iBAAkBl6B,KACtIrC,KAAKq7B,OAASA,EACdr7B,KAAKo9B,WAAa/6B,EAClBi0B,EAAQpxB,MAAMpC,KAEd81B,EAAYlP,WAAa5mB,EACzB81B,EAAY3zB,IAAInC,GAExB,EAEAquB,KAAM,SAASruB,GACX,IAAIwzB,EAAUt2B,KAAKq8B,GAAG/F,QACtB,GAAIgG,GAAQt8B,KAAKq8B,KAAO/F,EAIpB,OAHAA,EAAQnF,KAAKnxB,KAAKq7B,OAAQv4B,GAC1B9C,KAAK44B,YAAYz4B,QAAQgJ,QAAQqqB,EAAM,CAAE4C,OAAQ,GAAIqF,YAAa,CAACz7B,KAAKq8B,IAAKE,iBAAkBv8B,KAAKo9B,cAE7F,CAEf,EAEAn4B,IAAK,SAASnC,GACV,IAAIwW,EAAatZ,KAAKq8B,GAClB/F,EAAUhd,EAAWgd,QAErBn2B,EADcH,KAAK44B,YACGz4B,QAE1B,GAAIm2B,GACIgG,GAAQhjB,GAAa,CACrB,IAAIvG,EAAOujB,EAAQtsB,KAAKlH,GACnB3C,EAAQgJ,QAAQsqB,EAAU,CAAE2C,OAAQ,GAAIqF,YAAa,CAACniB,GAAaijB,iBAAkBv8B,KAAKo9B,aAK3FrqB,EAAK4hB,QAJLx0B,EAAQu7B,gBAAgB5mB,IAAI/B,GAAM,GAClCuG,EAAWsc,cACXz1B,EAAQ68B,yBAIhB,CAER,EAEAlE,UAAW,WACP,OAAOxG,EAAQnB,IACnB,IAGJ,SAASkM,GAAQl8B,EAAKiM,GAClB,OAAOA,EAAIyI,WAAW,IAAM1U,GAAOiM,EAAIkwB,cAAcznB,WAAW,IAAM1U,CAC1E,CAMA,IAAIo8B,GAAcx1B,EAAMC,OAAO,CAC3BC,KAAM,SAAS9H,GACXH,KAAKG,QAAUA,EACfH,KAAKw9B,MAAQ,CACT,IAAIzE,EAAa/4B,MACjB,IAAIk9B,EAAmBl9B,MACvB,IAAIk8B,EAAel8B,MACnB,IAAI47B,EAAc57B,MAClB,IAAIm7B,EAAYn7B,OAGpBA,KAAKy9B,WAAa/X,CACtB,EAEAxgB,MAAO,SAASpC,EAAGq3B,GAYf,OAXAA,EAAO95B,EAAW,CAAC,EAAG85B,GAClBn6B,KAAKy9B,YACLz9B,KAAKy9B,WAAWx4B,IAAInC,EAAGq3B,GAE3Bn6B,KAAK09B,mBAAmB56B,GACxB9C,KAAK29B,cAAc76B,EAAGq3B,GACtBn6B,KAAKy9B,WAAWv4B,MAAMpC,EAAGq3B,GACzBn6B,KAAK49B,cAAc96B,GACnB9C,KAAKG,QAAQ09B,QACb79B,KAAKG,QAAQi5B,OAAO7H,QAAQuM,kBAC5B99B,KAAK0pB,WAAa5mB,GACX,CACX,EAEAquB,KAAM,SAASruB,EAAGq3B,GACdA,EAAO95B,EAAW,CAAC,EAAG85B,GACtB,IAAI4D,GAAgB,EAQpB,OAPI/9B,KAAKy9B,aACLM,EAAgB/9B,KAAKy9B,WAAWtM,KAAKruB,EAAGq3B,IAExC4D,GACA/9B,KAAK09B,mBAAmB56B,GAE5B9C,KAAK49B,cAAc96B,IACZ,CACX,EAEAmC,IAAK,SAASnC,EAAGq3B,GAQb,OAPAA,EAAO95B,EAAW,CAAC,EAAG85B,GAClBn6B,KAAKy9B,YACLz9B,KAAKy9B,WAAWx4B,IAAInC,EAAGq3B,GAE3Bn6B,KAAKG,QAAQi5B,OAAO7H,QAAQyM,iBAC5Bh+B,KAAKy9B,WAAa/X,EAClB1lB,KAAK49B,cAAc96B,IACZ,CACX,EAEAm7B,QAAS,SAAS98B,EAAKg5B,GACnB,IAAIh6B,EAAUH,KAAKG,QAEnB,KADAg6B,EAAO95B,EAAW,CAAEi6B,SAAS,EAAO4D,SAAS,EAAOC,QAAQ,GAAShE,IAC3DG,UAAWH,EAAK+D,SAAa/D,EAAKgE,OA8BrC,IAAY,KAARh9B,GAAsB,IAARA,EAAW,CAChC,IAAIi9B,EAAWp+B,KAAKG,QAAQk+B,eAAel+B,EAAQuyB,UAOnD,OANI0L,EAASn8B,SACTjC,KAAKG,QAAQ0F,OAAOu4B,GAAU,GAC9Bp+B,KAAKG,QAAQm+B,eACbt+B,KAAKG,QAAQo+B,oBAGV,CACX,CAAO,GAAY,KAARp9B,EAIP,OAHAnB,KAAKw+B,wBACLr+B,EAAQ02B,WACR12B,EAAQo+B,mBACD,CACX,KA5CoD,CAChD,GAAIlB,GAAQl8B,EAAK,KAGb,OAFAhB,EAAQs+B,YACRt+B,EAAQo+B,mBACD,EACJ,GAAIlB,GAAQl8B,EAAK,KAGpB,OAFAhB,EAAQw0B,OACRx0B,EAAQo+B,mBACD,EACJ,GAAIlB,GAAQl8B,EAAK,KAGpB,OAFAhB,EAAQ00B,OACR10B,EAAQo+B,mBACD,EACAlB,GAAQl8B,EAAK,MACpBhB,EAAQuY,OACRvY,EAAQo+B,mBACDlB,GAAQl8B,EAAK,MACpBhB,EAAQu+B,MACRv+B,EAAQo+B,mBACDlB,GAAQl8B,EAAK,MACpBhB,EAAQw+B,QACRx+B,EAAQo+B,mBACDlB,GAAQl8B,EAAK,MACpBhB,EAAQq2B,SACRr2B,EAAQo+B,mBACDlB,GAAQl8B,EAAK,OACpBhB,EAAQo+B,kBACRp+B,EAAQuY,OACRvY,EAAQw+B,QAEhB,CAgBJ,EACAC,MAAO,SAAS97B,EAAGq3B,GACf,IAAIh6B,EAAUH,KAAKG,QACfsP,EAAQ0qB,EAAK1qB,MACbovB,EAAI1+B,EAAQwP,OACZ8T,EAAUtjB,EAAQsjB,QAClBqb,EAAWrb,EAAQqb,SACnBC,EAAc,CAAErxB,MAAO5K,EAAGq3B,KAAMA,EAAMxqB,KAAMkvB,GAEhD,IAAI1+B,EAAQgJ,QAp/BH,YAo/BuB41B,GAgBhC,OAZItvB,EAAQ,EACRovB,GAAKC,EAELD,GAAKC,EAGTD,EAAIh/B,EAAM8lB,QAAQE,KAAKjS,MAAMjT,KAAK+I,IAAI+Z,EAAQub,QAASr+B,KAAKgJ,IAAI8Z,EAAQwb,QAASJ,IAAK,GACtFE,EAAYpvB,KAAOkvB,EAEnB1+B,EAAQwP,KAAKkvB,EAAGE,GAChB5+B,EAAQgJ,QAjgCD,UAigCmB41B,IAEnB,CACX,EACAG,QAAS,SAASlG,EAAMpyB,GACpBoyB,EAAKJ,YAAc54B,KACnBA,KAAKw9B,MAAM52B,GAASoyB,CACxB,EAEAoC,aAAc,SAASl3B,EAAMi2B,GACzB,IAAIh6B,EAAUH,KAAKG,QACf07B,EAAa17B,EAAQsjB,QAAQoY,WACjC,GAAIA,IAAe33B,EAAK83B,aAA0C,IAA5B93B,EAAKuf,QAAQoY,WAAsB,CACrE,IAAIsD,EAAiBhF,EAAKG,UAAmC,IAAxBuB,EAAWC,SAChD37B,EAAQuyB,OAAOxuB,EAAM,CAAEi7B,eAAgBA,GAC3C,CACJ,EAEAX,sBAAuB,WACfx+B,KAAKo/B,gBACLp/B,KAAKG,QAAQ0F,OAAO7F,KAAKo/B,eACzBp/B,KAAKo/B,cAAgB1Z,EAE7B,EACAiY,cAAe,SAAS76B,EAAGq3B,GACvB,IAAK,IAAIz3B,EAAI,EAAGA,EAAI1C,KAAKw9B,MAAMv7B,OAAQS,IAAK,CACxC,IAAIs2B,EAAOh5B,KAAKw9B,MAAM96B,GACtB,GAAIs2B,EAAKH,YAAY/1B,EAAGq3B,GAAO,CAC3Bn6B,KAAKy9B,WAAazE,EAClB,KACJ,CACJ,CACJ,EACA4E,cAAe,SAAS96B,GACpB,IAAIkE,EAAUhH,KAAKG,QAAQ6G,QACvBq4B,EAASr/B,KAAKy9B,WAAaz9B,KAAKy9B,WAAW3E,UAAUh2B,GAAM9C,KAAKy6B,eAAiBz6B,KAAKy6B,eAAekB,WAAW74B,GAAM9C,KAAKw6B,YAAcx6B,KAAKw6B,YAAYmB,WAAW74B,GAAKwvB,EAAQC,MAEtLvrB,EAAQs4B,IAAI,CAAED,OAAQA,GAC1B,EACA7C,wBAAyB,SAASljB,EAAYimB,EAAeC,GACzDx/B,KAAK08B,iBAAmBpjB,EACxBtZ,KAAKu/B,cAAgBA,EAEjBv/B,KAAKo/B,cADLI,EACqBx/B,KAAK08B,iBAELhX,CAE7B,EACAgY,mBAAoB,SAAS56B,GACzB,IAAI28B,EAAMz/B,KAAKs7B,SAASx4B,GACpB3C,EAAUH,KAAKG,QAEfs/B,GAAOz/B,KAAKw6B,aAAiBx6B,KAAKu/B,eAAiBE,GAAOz/B,KAAKu/B,gBAC3Dv/B,KAAKw6B,cACLr6B,EAAQgJ,QAzjCN,aAyjC2B,CAAEjF,KAAMlE,KAAKw6B,cAC1Cx6B,KAAKw6B,YAAYnR,QAAO,IAGxBoW,GAAOA,EAAIhc,QAAQkX,QACnBx6B,EAAQgJ,QA/jCN,aA+jC2B,CAAEjF,KAAMu7B,IAErCz/B,KAAKw6B,YAAciF,EACnBz/B,KAAKw6B,YAAYnR,QAAO,IAExBrpB,KAAKw6B,YAAc9U,EAG/B,EACA+W,aAAc,WACNz8B,KAAKw6B,cACLx6B,KAAKw6B,YAAYnR,QAAO,GACxBrpB,KAAKw6B,YAAc9U,EAE3B,EACA4V,SAAU,SAAS5tB,GACf,IAAI+xB,EAAuBv7B,EAAMxB,EAAxB2B,EAAIrE,KAAKG,QAOlB,GAJIH,KAAK06B,oBACL16B,KAAK06B,kBAAkBrR,QAAO,GAC9BrpB,KAAK06B,kBAAoBhV,GAEzBrhB,EAAE44B,mBAAmByC,WACrBD,EAAMp7B,EAAE44B,mBAAmB3B,SAAS5tB,IAEhC,OAAO+xB,EAKf,GADAA,EAAMz/B,KAAKG,QAAQo7B,iBAAiBD,SAAS5tB,GACpC,CAEL,GADA1N,KAAKy6B,eAAiBp2B,EAAEk3B,iBACV,IAAVkE,EAAIz8B,GAAqB,IAAVy8B,EAAIx8B,EACnB,OAEJw8B,EAAM/Z,CACV,MACI1lB,KAAKy6B,eAAiB/U,EAG1B,IAAK1lB,KAAKy9B,YAAuC,mBAAzBz9B,KAAKy9B,WAAW97B,KAA2B,CAC/D,IAAIg+B,EAAsB,GAE1B,IAAKj9B,EAAI,EAAGA,EAAI2B,EAAEu7B,eAAe39B,OAAQS,KACrCwB,EAAOG,EAAEu7B,eAAel9B,cACJvC,EAAQ0/B,YACxBF,EAAoB58B,KAAKmB,GAGjCu7B,EAAMz/B,KAAK8/B,cAAcH,EAAqBjyB,EAClD,CAEA,OAAO+xB,GAAOz/B,KAAK+/B,iBAAiBryB,EACxC,EAEAqyB,iBAAkB,SAASryB,GACvB,IAGI+xB,EAHAt/B,EAAUH,KAAKG,QACf6/B,EAAWhgC,KAAK8/B,cAAc3/B,EAAQi2B,OAAQ1oB,GAC9CuyB,EAAgBjgC,KAAK8/B,cAAc3/B,EAAQs7B,YAAa/tB,GAG5D,KAAM1N,KAAKy9B,YAAsC,kBAAxBz9B,KAAKy9B,WAAW97B,OAA6Bq+B,GAAYC,IA0oC1F,SAAgC3oB,EAAO5J,GAEnC,IADA,IAAIyuB,EAAWl1B,EAAUwH,EAChByxB,EAAM,EAAGA,EAAM5oB,EAAM6oB,WAAWl+B,OAAQi+B,IAK7C,GAHAj5B,GADAk1B,EAAY7kB,EAAM6oB,WAAWD,IACRj5B,YACrBwH,EAAO,IAAI5B,EAAK5F,EAASjE,EAAGiE,EAAShE,IAChC6J,QAAQmmB,EAAmBA,GAC5BxkB,EAAKvI,SAASwH,GACd,OAAOyuB,CAGnB,CArpC4GiE,CAAuBJ,EAAUtyB,GAAQ,CACzI,IAAI2yB,EAAYlgC,EAAQkgC,UAGxBZ,EAFet5B,EAAQ65B,EAASpY,OAAQyY,EAAU9nB,UAC9BpS,EAAQ85B,EAAcrY,OAAQyY,EAAU9nB,UAC3BynB,EAAWC,CAChD,CACA,OAAOR,GAAOO,GAAYC,CAC9B,EAEAH,cAAe,SAASr9B,EAAOiL,GAC3B,IAAIhL,EAAS+8B,EACb,IAAK/8B,EAAID,EAAMR,OAAS,EAAGS,GAAK,EAAGA,IAG/B,GADA+8B,EADOh9B,EAAMC,GACF44B,SAAS5tB,GAEhB,OAAO+xB,CAGnB,IAQAa,GAAuBzgC,EAAMkI,MAAMC,OAAO,CAC1CC,KAAM,WACN,IAcAs4B,GAAyBD,GAAqBt4B,OAAO,CACrDC,KAAM,SAASqR,GAEXgnB,GAAqBnqB,GAAGlO,KAAK5G,KADlBrB,MAEXA,KAAKsZ,WAAaA,CACtB,EAIAknB,QAAS,SAAS19B,GAEd,QADU9C,KAAKygC,YAAY3zB,QAAQmmB,GAC1B/sB,SAASpD,IAGX3C,EAAQ0T,SAASS,mBAAmBxR,EAAG9C,KAAKsZ,WAAWonB,aAAezN,CACjF,EAMAwN,UAAW,WASP,IARA,IAAI79B,EAAS5C,KAAKsZ,WAAWonB,YACzBt9B,EAAIR,EAAO,GACX2P,EAAI3P,EAAOA,EAAOX,OAAS,GAC3BwL,EAAQ9M,KAAK+I,IAAItG,EAAEJ,EAAGuP,EAAEvP,GACxBwK,EAAO7M,KAAKgJ,IAAIvG,EAAEJ,EAAGuP,EAAEvP,GACvBkL,EAAMvN,KAAKgJ,IAAIvG,EAAEH,EAAGsP,EAAEtP,GACtBkL,EAASxN,KAAK+I,IAAItG,EAAEH,EAAGsP,EAAEtP,GAEpBP,EAAI,EAAGA,EAAIE,EAAOX,OAAS,IAAKS,EACrC+K,EAAQ9M,KAAK+I,IAAI+D,EAAO7K,EAAOF,GAAGM,GAClCwK,EAAO7M,KAAKgJ,IAAI6D,EAAM5K,EAAOF,GAAGM,GAChCkL,EAAMvN,KAAKgJ,IAAIuE,EAAKtL,EAAOF,GAAGO,GAC9BkL,EAASxN,KAAK+I,IAAIyE,EAAQvL,EAAOF,GAAGO,GAGxC,OAAO,IAAI4J,EAAKW,EAAMU,EAAKT,EAAQD,EAAMW,EAASD,EACtD,IAQAyyB,GAAiBJ,GAAuBv4B,OAAO,CAC/CC,KAAM,SAASqR,GAEXinB,GAAuBpqB,GAAGlO,KAAK5G,KADpBrB,MAEXA,KAAKsZ,WAAaA,CACtB,EACAsnB,MAAO,WAEP,IAGAC,GAAkBN,GAAuBv4B,OAAO,CAChD84B,yBAA0B,EAE1B74B,KAAM,SAASqR,GAEXinB,GAAuBpqB,GAAGlO,KAAK5G,KADpBrB,MAEXA,KAAKsZ,WAAaA,CACtB,EAEAynB,YAAa,SAAS77B,EAAOD,EAAK43B,EAAiB5G,GAQ/C,OALI4G,GAAmB5G,EACVj2B,KAAKghC,iBAAiB97B,EAAOD,EAAK43B,EAAiB5G,GAEnDj2B,KAAKihC,gBAAgB/7B,EAAOD,EAAK43B,EAGlD,EAEA+D,MAAO,WACH,IAAI/D,EAAkB78B,KAAKsZ,WAAW4nB,yBAClCjL,EAAkBj2B,KAAKsZ,WAAW6nB,yBAClCj8B,EAAQlF,KAAKsZ,WAAW8nB,cACxBn8B,EAAMjF,KAAKsZ,WAAW+nB,cACtBz+B,EAAS5C,KAAK+gC,YAAY77B,EAAOD,EAAK43B,EAAiB5G,GAC3Dj2B,KAAKsZ,WAAW1W,OAAOA,EAC3B,EAEA0+B,gBAAiB,CAAC,CACdj/B,KAAM,MACNk/B,KAAM,IACNC,YAAa,UACbC,cAAe,GAChB,CACCp/B,KAAM,OACNk/B,KAAM,IACNC,YAAa,UACbC,cAAe,GAChB,CACCp/B,KAAM,SACNk/B,KAAM,IACNC,YAAa,cACbC,eAAgB,GACjB,CACCp/B,KAAM,QACNk/B,KAAM,IACNC,YAAa,cACbC,eAAgB,IAGpBC,eAAgB,SAASvF,EAAWkF,GAahC,IAZA,IAQIM,EACAC,EACAL,EACAM,EAXA56B,EAAWk1B,EAAUl1B,WACrB66B,EAAc3F,EAAU7kB,MAAMM,OAAO+b,GACrC/b,EAAS,CACTxJ,QAAS0zB,EAAY1zB,UACrBG,YAAauzB,EAAYvzB,eAEzBwzB,EAAQ/hC,KAAKshC,gBACb33B,EAAMkc,EAAKmc,QAKN9B,EAAM,EAAGA,EAAM6B,EAAM9/B,OAAQi+B,IAElCqB,GADAM,EAAOE,EAAM7B,IACDqB,MACZI,EAAehhC,KAAKiT,MAAMjT,KAAKC,IAAIqG,EAASs6B,GAAQ3pB,EAAOiqB,EAAKL,aAAaD,MAC1D53B,GACfA,EAAMg4B,EACNC,EAAUC,GACHF,IAAiBh4B,IACvB1C,EAASs6B,GAAQF,EAAYE,IAASM,EAAKJ,eAAiBx6B,EAAS26B,EAAQL,MAAQF,EAAYO,EAAQL,OAASK,EAAQH,gBAC3HG,EAAUC,GAGlB,OAAOD,EAAQv/B,IACnB,EAEA4/B,kBAAmB,SAAS9F,GACxB,IAAIvkB,EAASukB,EAAU7kB,MAAMM,OAAO+b,GACpC,OAAOhzB,KAAKgJ,IAAIiO,EAAO1K,MAAO0K,EAAO3K,QAAUjN,KAAK8gC,wBACxD,EAEAE,iBAAkB,SAAS97B,EAAOD,EAAK43B,EAAiB5G,GACpD,IAMIiM,EAAQC,EANRC,EAAsBpiC,KAAK0hC,eAAe7E,EAAiB53B,GAC3Do9B,EAAsBriC,KAAK0hC,eAAezL,EAAiB/wB,GAC3Do9B,EAASr9B,EAAIjC,EAAIkC,EAAMlC,EACvBu/B,EAASt9B,EAAIhC,EAAIiC,EAAMjC,EACvBu/B,EAAmBxiC,KAAKiiC,kBAAkBpF,GAC1Cl2B,EAAS,GAkCb,OA/BIy7B,IAAwBjP,GAAOiP,GAAuB9O,EAClD+O,GAAuBlP,GAAOkP,GAAuB/O,EACjD8O,GAAuBC,GAEnBF,EADAC,GAAuBjP,EACdxyB,KAAKgJ,IAAIzE,EAAMjC,EAAGgC,EAAIhC,GAAKu/B,EAE3B7hC,KAAK+I,IAAIxE,EAAMjC,EAAGgC,EAAIhC,GAAKu/B,EAExC77B,EAAS,CAAC,IAAIpD,EAAM2B,EAAMlC,EAAGm/B,GAAS,IAAI5+B,EAAM0B,EAAIjC,EAAGm/B,KAEvDx7B,EAAS,CAAC,IAAIpD,EAAM2B,EAAMlC,EAAGkC,EAAMjC,EAAIs/B,EAAS,GAAI,IAAIh/B,EAAM0B,EAAIjC,EAAGkC,EAAMjC,EAAIs/B,EAAS,IAG5F57B,EAAS,CAAC,IAAIpD,EAAM2B,EAAMlC,EAAGiC,EAAIhC,IAGjCo/B,GAAuBhP,GAAQgP,GAAuBjP,EAClDgP,GAAuBC,GAEnBH,EADAE,GAAuB/O,EACd1yB,KAAKgJ,IAAIzE,EAAMlC,EAAGiC,EAAIjC,GAAKw/B,EAE3B7hC,KAAK+I,IAAIxE,EAAMlC,EAAGiC,EAAIjC,GAAKw/B,EAExC77B,EAAS,CAAC,IAAIpD,EAAM2+B,EAAQh9B,EAAMjC,GAAI,IAAIM,EAAM2+B,EAAQj9B,EAAIhC,KAE5D0D,EAAS,CAAC,IAAIpD,EAAM2B,EAAMlC,EAAIs/B,EAAS,EAAGp9B,EAAMjC,GAAI,IAAIM,EAAM2B,EAAMlC,EAAIs/B,EAAS,EAAGp9B,EAAMjC,EAAIs/B,IAGlG57B,EAAS,CAAC,IAAIpD,EAAM0B,EAAIjC,EAAGkC,EAAMjC,IAGlC0D,CACX,EAEAs6B,gBAAiB,SAAS/7B,EAAOD,EAAK43B,GAWlC,IAVA,IAMI4F,EACAC,EAPAN,EAAsBvF,EAAkB78B,KAAK0hC,eAAe7E,EAAiB53B,GAAO,KACpF09B,EAAyB3iC,KAAK4iC,iBAAiB19B,EAAOD,EAAKm9B,GAC3Dx/B,EAAS,CAACsC,EAAOA,EAAOD,EAAKA,GAC7Bq9B,EAASr9B,EAAIjC,EAAIkC,EAAMlC,EACvBu/B,EAASt9B,EAAIhC,EAAIiC,EAAMjC,EACvBhB,EAASW,EAAOX,OAKXi+B,EAAM,EAAGA,EAAMj+B,EAAS,IAAKi+B,EAC9ByC,EACIzC,EAAM,GAAM,GACZuC,EAASH,GAAUrgC,EAAS,GAC5BygC,EAAS,IAGTD,EAAS,EACTC,EAASH,IAAWtgC,EAAS,GAAK,IAIlCi+B,EAAM,GAAM,GACZuC,EAAS,EACTC,EAASH,GAAUtgC,EAAS,KAG5BwgC,EAASH,IAAWrgC,EAAS,GAAK,GAClCygC,EAAS,GAGjB9/B,EAAOs9B,GAAO,IAAI38B,EAAMX,EAAOs9B,EAAM,GAAGl9B,EAAIy/B,EAAQ7/B,EAAOs9B,EAAM,GAAGj9B,EAAIy/B,GAU5E,OAPAxC,IAEIt9B,EAAOX,EAAS,GADf0gC,GAA2BzC,EAAM,GAAM,IAASyC,GAA2BzC,EAAM,GAAM,EACnE,IAAI38B,EAAMX,EAAOX,EAAS,GAAGe,EAAGJ,EAAOX,EAAS,GAAGgB,GAEnD,IAAIM,EAAMX,EAAOX,EAAS,GAAGe,EAAGJ,EAAOX,EAAS,GAAGgB,GAGrE,CAACL,EAAO,GAAIA,EAAO,GAC9B,EAEAggC,iBAAkB,SAAS19B,EAAOD,EAAK49B,GAQnC,OANmB,OAAfA,IAAwBA,IAAezP,GAASyP,IAAexP,IAGlD1yB,KAAKC,IAAIsE,EAAMlC,EAAIiC,EAAIjC,GAAKrC,KAAKC,IAAIsE,EAAMjC,EAAIgC,EAAIhC,EAIxE,IAKA6/B,GAAc/6B,EAAMC,OAAO,CAC3BC,KAAM,SAAS9H,EAASsjB,GACpB,IAAItL,EAAOnY,KACXmY,EAAKhY,QAAUA,EACfgY,EAAKsL,QAAUpjB,EAAW,CAAC,EAAG8X,EAAKsL,QAASA,GAC5CtL,EAAKyP,OAAS,IAAIoH,EAClB7W,EAAKhY,QAAQ4iC,UAAUhgC,KAAKoV,EAChC,EACAue,QAAS,WAET,IAGAsM,GAAwBF,GAAY96B,OAAO,CAC3CC,KAAM,SAASqR,EAAYmK,GACvB,IAAiBtjB,EAAbgY,EAAOnY,KACXmY,EAAKmB,WAAaA,EAClBnZ,EAAUgY,EAAKmB,WAAWnZ,QAC1BgY,EAAK8qB,IAAM9iC,EAAQy4B,YACnBkK,GAAY3sB,GAAGlO,KAAK5G,KAAK8W,EAAMhY,EAASsjB,GACxC,IAAIyf,EAAK/qB,EAAKmB,WAAW8nB,cACrB+B,EAAKhrB,EAAKmB,WAAW+nB,cACzBlpB,EAAKirB,SAAW,IAAIzW,EAAOtsB,EAAW8X,EAAKsL,QAAQ4f,QAAS,CAAEr+B,OAAQk+B,KACtE/qB,EAAKmrB,SAAW,IAAI3W,EAAOtsB,EAAW8X,EAAKsL,QAAQ4f,QAAS,CAAEr+B,OAAQm+B,KACtEhrB,EAAKyP,OAAOyG,OAAOlW,EAAKirB,UACxBjrB,EAAKyP,OAAOyG,OAAOlW,EAAKmrB,SAC5B,EAEA7f,QAAS,CACL4f,QAAS,CAAC,GAGd1H,WAAY,WACR,OAAOrJ,EAAQnB,IACnB,EAEAjsB,MAAO,SAASpC,GAKZ,OAJA9C,KAAKq7B,OAASr7B,KAAKs7B,SAASx4B,GAC5B9C,KAAK0pB,WAAa5mB,EAClB9C,KAAKujC,eAAiBvjC,KAAKsZ,WAAWlX,SACtCpC,KAAKwjC,eAAiBxjC,KAAKsZ,WAAWnR,SAC9BnI,KAAKq7B,QACT,KAAM,EACEr7B,KAAKsZ,WAAW2c,iBAChBj2B,KAAKijC,IAAIzG,wBAAwBx8B,KAAKsZ,WAAYtZ,KAAKsZ,WAAW2c,gBAAgB3e,OAEtF,MACJ,KAAK,EACGtX,KAAKsZ,WAAWujB,iBAChB78B,KAAKijC,IAAIzG,wBAAwBx8B,KAAKsZ,WAAYtZ,KAAKsZ,WAAWujB,gBAAgBvlB,OAIlG,EAEA6Z,KAAM,SAASkK,EAAQv4B,GACnB,OAAQu4B,GACJ,KAAM,EACFr7B,KAAKsZ,WAAWlX,OAAOU,GACvB,MACJ,KAAK,EACD9C,KAAKsZ,WAAWnR,OAAOrF,GACvB,MACJ,QACI,IAAI2M,EAAQ3M,EAAE6I,MAAM3L,KAAK0pB,YACzB1pB,KAAK0pB,WAAa5mB,EACb9C,KAAKsZ,WAAWujB,iBACjB78B,KAAKsZ,WAAWlX,OAAOpC,KAAKsZ,WAAW8nB,cAAc11B,KAAK+D,IAEzDzP,KAAKsZ,WAAW2c,iBACjBj2B,KAAKsZ,WAAWnR,OAAOnI,KAAKsZ,WAAW+nB,cAAc31B,KAAK+D,IAKtE,OADAzP,KAAK02B,WACE,CACX,EAEA1sB,KAAM,SAASlH,GACX,IAA0DqF,EAAtDs7B,EAAKzjC,KAAKG,QAAQy4B,YAAa10B,EAAOu/B,EAAGjJ,YAiB7C,OAfIryB,EADAs7B,EAAG/I,kBACM+I,EAAG/I,kBAAkB2B,GACvBn4B,GAAQA,aAAgB/D,EAAQ28B,MAC9B54B,EAAK64B,aAAa7J,IAAShvB,EAAK64B,aAAaj6B,GAE7CA,GAGQ,IAAjB9C,KAAKq7B,OACLr7B,KAAKsZ,WAAWlX,OAAO+F,GACA,IAAhBnI,KAAKq7B,QACZr7B,KAAKsZ,WAAWnR,OAAOA,GAG3BnI,KAAKq7B,OAAS3V,EACd1lB,KAAKijC,IAAIzG,0BACF,IAAI3G,EAAuB71B,KAAKsZ,WAAYtZ,KAAKujC,eAAgBvjC,KAAKwjC,eACjF,EAEAlI,SAAU,SAAS5tB,GACf,IAAI0zB,EAAcphC,KAAKsZ,WAAW8nB,cAC9BC,EAAcrhC,KAAKsZ,WAAW+nB,cAC9BqC,EAAU1jC,KAAKyjB,QAAQ4f,QAAQn2B,MAAQ,EAAI+lB,EAC3C0Q,EAAU3jC,KAAKyjB,QAAQ4f,QAAQp2B,OAAS,EAAIgmB,EAC5C2Q,EAAsBxC,EAAYyC,WAAWn2B,GAC7Co2B,EAAsBzC,EAAYwC,WAAWn2B,GAC7Cq2B,EAAe,IAAIl3B,EAAKu0B,EAAYp+B,EAAGo+B,EAAYn+B,GAAG6J,QAAQ42B,EAASC,GAASz9B,SAASwH,GACzFs2B,EAAe,IAAIn3B,EAAKw0B,EAAYr+B,EAAGq+B,EAAYp+B,GAAG6J,QAAQ42B,EAASC,GAASz9B,SAASwH,GACzF2tB,EAAS,EAQb,OANI0I,KAAkBC,GAAgBJ,EAAsBE,GACxDzI,GAAU,EACH2I,KAAkBD,GAAgBD,EAAsBF,KAC/DvI,EAAS,GAGNA,CACX,EAEA3E,QAAS,WACL12B,KAAKojC,SAASla,OAAO,CAAElkB,OAAQhF,KAAKG,QAAQ8jC,aAAajkC,KAAKsZ,WAAW8nB,iBACzEphC,KAAKsjC,SAASpa,OAAO,CAAElkB,OAAQhF,KAAKG,QAAQ8jC,aAAajkC,KAAKsZ,WAAW+nB,gBAC7E,IAGA6C,GAAoBpB,GAAY96B,OAAO,CACvCC,KAAM,SAAS9H,EAASsjB,GACpB,IAAItL,EAAOnY,KACX8iC,GAAY3sB,GAAGlO,KAAK5G,KAAK8W,EAAMhY,EAASsjB,GACxCtL,EAAKgsB,gBAAkB,SAAS5xB,GACxBA,EAAErO,MAAQiU,EAAKb,OACfa,EAAKue,SAEb,CACJ,EAEAvM,KAAM,SAAS7S,GACX,IAAiBhL,EAAK5J,EAAG0hC,EAArBjsB,EAAOnY,KAOX,IANAmY,EAAKunB,UAAW,EAChBvnB,EAAKb,MAAQA,EACba,EAAKhY,QAAQ63B,KAAKtE,EAAkBvb,EAAKgsB,iBACzC73B,EAAMgL,EAAM6oB,WAAWl+B,OACvBkW,EAAKgoB,WAAa,GAClBhoB,EAAKksB,eACA3hC,EAAI,EAAGA,EAAI4J,EAAK5J,IACjB0hC,EAAM,IAAIE,GAAgBhtB,EAAM6oB,WAAWz9B,IAC3CyV,EAAKgoB,WAAWp9B,KAAKqhC,GACrBjsB,EAAKyP,OAAOyG,OAAO+V,EAAIxc,QAE3BzP,EAAKyP,OAAOoB,SAAQ,GACpB7Q,EAAKue,SACT,EAEA2N,aAAc,WACV,IAAIlsB,EAAOnY,KACPmY,EAAKhY,QAAQw8B,mBACbxkB,EAAKosB,yBAELpsB,EAAKyP,OAAOzgB,OAEpB,EAEAo9B,uBAAwB,WAKpB,IAJA,IAAIpsB,EAAOnY,KACPwkC,EAAiBrsB,EAAKyP,OAAOrP,SAC7BksB,EAAgBD,EAAeviC,OAC/B2E,EAAQT,EAAQgS,EAAKhY,QAAQw8B,mBAAoB6H,GAC5C9hC,EAAI+hC,EAAgB,EAAG/hC,GAAK,EAAGA,IAChCA,GAAKkE,GAGTuR,EAAKyP,OAAO/hB,OAAO2+B,EAAe9hC,GAE1C,EAEAqvB,QAAS,WACL,IAAI5Z,EAAOnY,KACXmY,EAAKhY,QAAQukC,OAAOhR,EAAkBvb,EAAKgsB,iBAC3ChsB,EAAKb,MAAQoO,EACbvN,EAAKunB,SAAWha,EAChBvN,EAAKyP,OAAOoB,SAAQ,EACxB,EAEAsS,SAAU,SAASx4B,GACf,IAAIshC,EAAK1hC,EACT,IAAKA,EAAI,EAAGA,EAAI1C,KAAKmgC,WAAWl+B,OAAQS,IAEpC,IADA0hC,EAAMpkC,KAAKmgC,WAAWz9B,IACd44B,SAASx4B,GAAI,CACjBshC,EAAI/a,QAAO,GACXrpB,KAAKG,QAAQy4B,YAAY8B,kBAAoB0J,EAC7C,KACJ,CAER,EAEA1N,QAAS,WACL,GAAI12B,KAAKsX,MAAO,CACZ,IAAIM,EAAS5X,KAAKsX,MAAMM,SACpBA,EAAS5X,KAAKG,QAAQ8jC,aAAarsB,GACvC5X,KAAK4nB,OAAO3gB,SAAS2Q,EAAOxJ,WAC5BnO,EAAE0kC,KAAK3kC,KAAKmgC,YAAY,WACpBngC,KAAK02B,SACT,GACJ,CACJ,IA2BJ,IAAIkO,GAAkB9B,GAAY96B,OAAO,CACrCC,KAAM,SAAS9H,EAASsjB,GACpB,IAAItL,EAAOnY,KACX8iC,GAAY3sB,GAAGlO,KAAK5G,KAAK8W,EAAMhY,EAASsjB,GACxCtL,EAAK0sB,eAAgB,EACrB1sB,EAAK9M,IAAM,GACX8M,EAAKie,OAAS,GAEdje,EAAK2sB,iBACL3sB,EAAK4sB,iBACL5sB,EAAK+Q,SACL/Q,EAAKhY,QAAQ63B,KAAK,UAAU,SAASzlB,GACjC4F,EAAKsf,YAAYllB,EAAEyyB,SACvB,IAEA7sB,EAAKgsB,gBAAkB,WACdhsB,EAAK8sB,kBACN9sB,EAAKse,gBACLte,EAAKue,UAEb,EAEAve,EAAK+sB,gBAAkB,WACO,GAAtB/sB,EAAKie,OAAOn0B,SACZkW,EAAKof,OAASpf,EAAKie,OAAO,GAAGnnB,SAASN,OAE1CwJ,EAAKgsB,iBACT,EAEAhsB,EAAKhY,QAAQ63B,KAAKtE,EAAkBvb,EAAKgsB,iBAAiBnM,KAlqDjD,aAkqDkE7f,EAAK+sB,iBAChF/sB,EAAKse,gBACLte,EAAKue,SACT,EAEAjT,QAAS,CACL4f,QAAS,CACLhgB,KAAM,CACFY,MAAO,QAEX6F,OAAQ,CACJ7F,MAAO,WAEXhX,OAAQ,EACRC,MAAO,EACPkd,MAAO,CACH/G,KAAM,CACFY,MAAO,WAEX6F,OAAQ,CACJ7F,MAAO,aAInB4X,WAAY,CACR/R,OAAQ,CACJ7F,MAAO,UACP/W,MAAO,EACPod,SAAU,QAEdjH,KAAM,CACFY,MAAO6B,IAGfla,OAAQ,IAGZk5B,eAAgB,WACZ,IAAI3sB,EAAOnY,KAEP67B,EADU1jB,EAAKhY,QACMsjB,QAAQoY,WAC7BpY,EAAUpjB,EAAW,CAAC,EAAG8X,EAAKsL,QAAQoY,WAAYA,GACtD1jB,EAAK1J,KAAO,IAAIid,EAAUjI,GAC1BtL,EAAKyP,OAAOyG,OAAOlW,EAAK1J,KAC5B,EAEA02B,WAAY,WACR,OAAOnlC,KAAKyjB,QAAQ2hB,WAA6C,IAAjCplC,KAAKyjB,QAAQ2hB,SAASC,MAC1D,EAEAC,eAAgB,WACZ,OAAQtlC,KAAKyjB,QAAQ2hB,SAASC,QAAU,CAAC,GAAGhC,SAAWrjC,KAAKyjB,QAAQ4f,OACxE,EAEA0B,eAAgB,WACZ,IAAI1B,EAASn/B,EAAMjB,EAAGD,EAEtB,GAAIhD,KAAKmlC,aAEL,IADA9B,EAAUrjC,KAAKslC,iBACVtiC,GAAK,EAAGA,GAAK,EAAGA,IACjB,IAAKC,GAAK,EAAGA,GAAK,EAAGA,IACN,IAAND,GAAmB,IAANC,KACdiB,EAAO,IAAIwnB,EAAU2X,IAChBla,eAAeE,OAASrpB,KAAKqpB,OAAO2O,KAAKh4B,MAC9CA,KAAKqL,IAAItI,KAAK,CAAEC,EAAGA,EAAGC,EAAGA,EAAG2kB,OAAQ1jB,IACpClE,KAAK4nB,OAAOyG,OAAOnqB,GAKvC,EAEA0T,OAAQ,SAASpV,GACb,IAAIA,EAIA,OAAOxC,KAAKulC,QAHZvlC,KAAKw3B,aAAeh1B,EAAMiJ,QAC1BzL,KAAKulC,QAAUvlC,KAAKG,QAAQ8jC,aAAazhC,GAAOsK,QAAQ9M,KAAKyjB,QAAQ7X,OAAQ5L,KAAKyjB,QAAQ7X,OAIlG,EAEA0vB,SAAU,SAASx4B,GACf,IACIJ,EAAG+8B,EAAK+F,EAA8CnK,EADtD8H,EAAKnjC,KAAKG,QAAQ8jC,aAAanhC,GACT2iC,EAAezlC,KAAKqL,IAAIpJ,OAMlD,GAJIjC,KAAKu3B,SACL4L,EAAKA,EAAG13B,QAAQwD,OAAOjP,KAAKu3B,OAAQv3B,KAAKulC,QAAQvgC,WAGjDhF,KAAKmlC,aACL,IAAKziC,EAAI,EAAGA,EAAI+iC,EAAc/iC,IAK1B,GAJA24B,EAASr7B,KAAKqL,IAAI3I,GAClB+8B,EAAM,IAAIl8B,EAAM83B,EAAOr4B,EAAGq4B,EAAOp4B,IACjCuiC,EAAexlC,KAAK0lC,iBAAiBjG,IACxB7zB,OAAO5L,KAAKulC,QAAQviC,EAAGhD,KAAKulC,QAAQtiC,GAC7CuiC,EAAat/B,SAASi9B,GACtB,OAAO1D,EAKnB,GAAIz/B,KAAKulC,QAAQr/B,SAASi9B,GACtB,OAAO,IAAI5/B,EAAM,EAAG,EAE5B,EAEAmiC,iBAAkB,SAAS5iC,GACvB,GAAI9C,KAAKmlC,aAAc,CACnB,IAAI9B,EAAUrjC,KAAKslC,iBACfprB,EAAImpB,EAAQn2B,MACZhE,EAAIm6B,EAAQp2B,OACZY,EAAI,IAAIhB,EAAK,EAAG,EAAGqN,EAAGhR,GAgB1B,OAdIpG,EAAEE,EAAI,EACN6K,EAAE7K,GAAMkX,EAAI,EACG,IAARpX,EAAEE,EACT6K,EAAE7K,EAAIrC,KAAKiD,MAAM5D,KAAKulC,QAAQr4B,MAAQ,GAAKgN,EAAI,EACxCpX,EAAEE,EAAI,IACb6K,EAAE7K,EAAIhD,KAAKulC,QAAQr4B,MAAQ,EAAMgN,EAAI,GACnCpX,EAAEG,EAAI,EACR4K,EAAE5K,GAAMiG,EAAI,EACG,IAARpG,EAAEG,EACT4K,EAAE5K,EAAItC,KAAKiD,MAAM5D,KAAKulC,QAAQt4B,OAAS,GAAK/D,EAAI,EACzCpG,EAAEG,EAAI,IACb4K,EAAE5K,EAAIjD,KAAKulC,QAAQt4B,OAAS,EAAM/D,EAAI,GAGnC2E,CACX,CACJ,EAEA8tB,WAAY,SAASjuB,GACjB,IAAI+xB,EAAMz/B,KAAKs7B,SAAS5tB,GACxB,GAAI+xB,GAAQA,EAAIz8B,IAAM,GAAOy8B,EAAIz8B,GAAK,GAAOy8B,EAAIx8B,IAAM,GAAOw8B,EAAIx8B,GAAK,GAAMjD,KAAKmlC,aAAc,CAC5F,IAAIx2B,EAAQ3O,KAAKu3B,OAMjB,GALI5oB,IACA8wB,EAAIxwB,OAAON,EAAO,IAAIpL,EAAM,EAAG,IAC/Bk8B,EAAM,IAAIl8B,EAAM5C,KAAKiT,MAAM6rB,EAAIz8B,GAAIrC,KAAKiT,MAAM6rB,EAAIx8B,MAGxC,GAAVw8B,EAAIz8B,IAAqB,GAAVy8B,EAAIx8B,EACnB,MAAO,YAEX,GAAa,GAATw8B,EAAIz8B,GAAmB,GAATy8B,EAAIx8B,EAClB,MAAO,YAEX,IAAc,GAAVw8B,EAAIz8B,GAAoB,GAATy8B,EAAIx8B,EACnB,MAAO,YAEX,GAAa,GAATw8B,EAAIz8B,IAAoB,GAAVy8B,EAAIx8B,EAClB,MAAO,YAEX,GAAc,IAAVw8B,EAAIz8B,IAAqB,GAAVy8B,EAAIx8B,EACnB,MAAO,WAEX,GAAc,IAAVw8B,EAAIz8B,GAAoB,GAATy8B,EAAIx8B,EACnB,MAAO,WAEX,GAAa,GAATw8B,EAAIz8B,GAAoB,IAAVy8B,EAAIx8B,EAClB,MAAO,WAEX,IAAc,GAAVw8B,EAAIz8B,GAAqB,IAAVy8B,EAAIx8B,EACnB,MAAO,UAEf,CACA,OAAOjD,KAAK6kC,cAAgBvS,EAAQnB,KAAOmB,EAAQI,MACvD,EAEA+E,YAAa,WACT,IAAiB/0B,EAAGwB,EAAhBiU,EAAOnY,KACP23B,EAAQxf,EAAKhY,QAAQuyB,SAGzB,IADAva,EAAKie,OAAS,GACT1zB,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,KAC1BwB,EAAOyzB,EAAMj1B,cACOvC,EAAQ28B,QACxB3kB,EAAKie,OAAOrzB,KAAKmB,GACjBA,EAAKyhC,gBAAkB,IAAIpiC,GAInC4U,EAAKof,OAA+B,GAAtBpf,EAAKie,OAAOn0B,OAAckW,EAAKie,OAAO,GAAGnnB,SAASN,MAAQ,EACxEwJ,EAAKytB,YAAcztB,EAAKof,OACxBpf,EAAK0tB,WACL1tB,EAAK2tB,aACL3tB,EAAKse,gBACLte,EAAKue,UACLve,EAAK+Q,QACT,EAEA2c,SAAU,WACN,IAAiBnjC,EAAG4U,EAAhBa,EAAOnY,KAEX,IADAmY,EAAK4tB,eAAiB,GACjBrjC,EAAI,EAAGA,EAAIyV,EAAKie,OAAOn0B,OAAQS,IAChC4U,EAAQa,EAAKie,OAAO1zB,GACpByV,EAAK4tB,eAAehjC,KAAKuU,EAAMrI,SAASN,MAEhD,EAEAm3B,WAAY,WACR,IAAiBpjC,EAAG4U,EAAhBa,EAAOnY,KAEX,IADAmY,EAAK6tB,cAAgB,GAChBtjC,EAAI,EAAGA,EAAIyV,EAAKie,OAAOn0B,OAAQS,IAChC4U,EAAQa,EAAKie,OAAO1zB,GACpByV,EAAK6tB,cAAcjjC,KAAKuU,EAAMM,SAEtC,EAEAyR,OAAQ,SAAS7mB,EAAOwE,GACpB,GAAIhH,KAAKmlC,aAAc,CACnB,IAAIc,EAAgBjmC,KAAKslC,iBACrBlb,EAAQ6b,EAAc7b,MACtBN,EAASmc,EAAcnc,OACvBzG,EAAO4iB,EAAc5iB,KAErB7gB,GAAShC,EAAMK,UAAUupB,EAAMN,UAC/BA,EAASzpB,EAAW,CAAC,EAAGypB,EAAQM,EAAMN,SAGtCtnB,GAAShC,EAAMK,UAAUupB,EAAM/G,QAC/BA,EAAO+G,EAAM/G,MAEjBrc,EAAQ8iB,OAAOA,EAAO7F,MAAO6F,EAAO5c,MAAO4c,EAAOC,SAClD/iB,EAAQqc,KAAKA,EAAKY,MAAOZ,EAAK0G,QAClC,CACJ,EAEA7kB,MAAO,SAASpC,GACZ9C,KAAKkmC,IAAMpjC,EACX9C,KAAKmmC,IAAMrjC,EACX9C,KAAKomC,IAAMtjC,EACX9C,KAAK6kC,eAAgB,EACrB7kC,KAAKilC,iBAAkB,EACvBjlC,KAAKqmC,YAAc,GACnB,IAAK,IAAI3jC,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB1C,KAAKqmC,YAAYtjC,KAAKuU,EAAMM,SAChC,CACJ,EAEAsR,OAAQ,WACJ,IAAIxmB,EACA4jC,EAAiBtmC,KAAKmlC,aAE1B,IAAKziC,EAAI,EAAGA,EAAI1C,KAAKqL,IAAIpJ,OAAQS,IACpB1C,KAAKqL,IAAI3I,GACXklB,OAAOoB,QAAQsd,EAE9B,EAEA33B,MAAO,SAASnM,GAKZ,OAJIojB,EAAQpjB,KACRxC,KAAKu3B,OAAS/0B,GAGXxC,KAAKu3B,MAChB,EAEAtoB,OAAQ,WACJ,IAAIjK,EAAShF,KAAKw3B,aAAaxyB,SAC3BuhC,EAAevmC,KAAK2O,QACxB3O,KAAKilC,iBAAkB,EACvB,IAAK,IAAIviC,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CACzC,IAAI4U,EAAQtX,KAAKo2B,OAAO1zB,GACxB6jC,GAAgBA,EAAevmC,KAAK+lC,eAAerjC,GAAK1C,KAAK4lC,aAAe,IAC5EtuB,EAAMrI,OAAOs3B,EAAcvhC,EAC/B,CACAhF,KAAK02B,SACT,EAEAvF,KAAM,SAASkK,EAAQv4B,GACnB,IAAI2M,EAAO+2B,EAGP5uB,EAAQ5S,EAAQsS,EAChB5U,EAAGiM,EAAO83B,EACGC,EACbt3B,EAAQC,EALRs3B,EAAM,IAAIpjC,EACVqjC,EAAM,IAAIrjC,EAGVsjC,EAAU,EAGd,IAAkB,IAAdxL,EAAOp4B,IAA0B,IAAdo4B,EAAOr4B,EAAU,CAGpC,IAFAgC,EAAShF,KAAKw3B,aAAaxyB,SAC3BhF,KAAKu3B,OAASv3B,KAAK8mC,eAAetmC,EAAMuE,UAAUC,EAAQlC,IACrDJ,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAChC4U,EAAQtX,KAAKo2B,OAAO1zB,GACpBiM,GAAS3O,KAAKu3B,OAASv3B,KAAK+lC,eAAerjC,GAAK1C,KAAK4lC,aAAe,IACpEtuB,EAAMrI,OAAON,EAAO3J,GAChBsS,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,GAEjBtX,KAAK+mC,WAAY,EAErB/mC,KAAK02B,SACT,KAAO,CACH,GAAI12B,KAAKgnC,aAAc,CACnB,IAAIC,EAAMjnC,KAAKknC,kBAAkBpkC,EAAE6I,MAAM3L,KAAKomC,MAE9C,GAAc,IAAVa,EAAIjkC,GAAqB,IAAVikC,EAAIhkC,EAEnB,YADAjD,KAAKmmC,IAAMrjC,GAGf2M,EAAQw3B,EACRjnC,KAAKomC,IAAM,IAAI7iC,EAAMvD,KAAKomC,IAAIpjC,EAAIikC,EAAIjkC,EAAGhD,KAAKomC,IAAInjC,EAAIgkC,EAAIhkC,EAC9D,MACIwM,EAAQ3M,EAAE6I,MAAM3L,KAAKmmC,KA4BzB,IAzBInmC,KAAKw7B,aAAaH,IAClBuL,EAAMD,EAAMl3B,EACZ+2B,GAAW,IAEPxmC,KAAKu3B,QACL9nB,EAAMR,OAAOjP,KAAKu3B,OAAQ,IAAIh0B,EAAM,EAAG,KAE1B,GAAb83B,EAAOr4B,EACP2jC,EAAI3jC,EAAIyM,EAAMzM,EACK,GAAZq4B,EAAOr4B,IACd4jC,EAAI5jC,EAAIyM,EAAMzM,IAED,GAAbq4B,EAAOp4B,EACP0jC,EAAI1jC,EAAIwM,EAAMxM,EACK,GAAZo4B,EAAOp4B,IACd2jC,EAAI3jC,EAAIwM,EAAMxM,IAIjBujC,IACDE,EA3XhB,SAA2BjH,EAAK7nB,GAC5B,IAAIjR,EAoBJ,OAlBc,GAAV84B,EAAIz8B,IAAqB,GAAVy8B,EAAIx8B,EACnB0D,EAASiR,EAAOrJ,cACA,GAATkxB,EAAIz8B,GAAmB,GAATy8B,EAAIx8B,EACzB0D,EAASiR,EAAOxJ,WACC,GAAVqxB,EAAIz8B,GAAoB,GAATy8B,EAAIx8B,EAC1B0D,EAASiR,EAAOvJ,WACA,GAAToxB,EAAIz8B,IAAoB,GAAVy8B,EAAIx8B,EACzB0D,EAASiR,EAAOtJ,aACC,IAAVmxB,EAAIz8B,IAAqB,GAAVy8B,EAAIx8B,EAC1B0D,EAASiR,EAAOzJ,SACC,IAAVsxB,EAAIz8B,GAAoB,GAATy8B,EAAIx8B,EAC1B0D,EAASiR,EAAO1J,MACA,GAATuxB,EAAIz8B,GAAoB,IAAVy8B,EAAIx8B,EACzB0D,EAASiR,EAAOpK,QACC,GAAViyB,EAAIz8B,GAAqB,IAAVy8B,EAAIx8B,IAC1B0D,EAASiR,EAAOnK,SAGb9G,CACX,CAqW8BwgC,CAAkB9L,EAAQr7B,KAAKw3B,cAC7CpoB,GAAUpP,KAAKw3B,aAAatqB,MAAQuC,EAAMzM,EAAIq4B,EAAOr4B,GAAKhD,KAAKw3B,aAAatqB,MAC5EmC,GAAUrP,KAAKw3B,aAAavqB,OAASwC,EAAMxM,EAAIo4B,EAAOp4B,GAAKjD,KAAKw3B,aAAavqB,QAG5EvK,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CAGrC,GADAkV,GADAN,EAAQtX,KAAKo2B,OAAO1zB,IACLkV,SACX4uB,EAAU,CACV,IAAKlK,GAAQhlB,GACT,SAEJmvB,EAAYzmC,KAAKonC,gBAAgBxvB,EAAQ+uB,EAAKC,EAAKJ,EACvD,KAAO,EACHC,EAAY7uB,EAAOnM,SACT0D,MAAMC,EAAQC,EAAQq3B,EAAa1mC,KAAKw3B,aAAaxyB,SAAUsS,EAAMrI,SAASN,OACxF,IAAI04B,EAAYZ,EAAUzhC,SAC1BqiC,EAAUp4B,QAAQjP,KAAKu3B,OAAQ3f,EAAO5S,UACtCyhC,EAAY,IAAI55B,EAAKw6B,EAAUrkC,EAAIyjC,EAAUv5B,MAAQ,EAAGm6B,EAAUpkC,EAAIwjC,EAAUx5B,OAAS,EAAGw5B,EAAUv5B,MAAOu5B,EAAUx5B,OAC3H,CACA,GAAIw5B,EAAUv5B,OAASoK,EAAMmM,QAAQ6jB,UAAYb,EAAUx5B,QAAUqK,EAAMmM,QAAQ8jB,UAAW,CAC1F,IAAIC,EAAY5vB,EAChBN,EAAMM,OAAO6uB,GACTnvB,EAAMlW,eAAe,WACrBkW,EAAMkf,OAAOlf,EAAOkwB,EAAWf,GAE/Be,EAAUt6B,QAAUu5B,EAAUv5B,OAASs6B,EAAUv6B,SAAWw5B,EAAUx5B,QACtEqK,EAAMrI,OAAOqI,EAAMrI,SAASN,OAEhCk4B,GAAW,CACf,CACJ,CAEIA,IACIA,GAAWnkC,GACX+jC,EAAYzmC,KAAKonC,gBAAgBpnC,KAAKw3B,aAAcmP,EAAKC,EAAKJ,GAC9DxmC,KAAK4X,OAAO6uB,IAEZzmC,KAAKy2B,gBAETz2B,KAAK02B,WAGT12B,KAAK8lC,YACT,CAEA9lC,KAAKmmC,IAAMrjC,CACf,EAEA04B,aAAc,SAASH,GACnB,OAAoB,IAAbA,EAAOr4B,GAAwB,IAAbq4B,EAAOp4B,CACpC,EAEAo1B,OAAQ,WAGJ,IAFA,IAAIjC,EAASp2B,KAAKo2B,OACdqR,EAASznC,KAAKqmC,YACTnG,EAAM,EAAGA,EAAM9J,EAAOn0B,OAAQi+B,IACnC9J,EAAO8J,GAAKtoB,OAAO6vB,EAAOvH,IAE9BlgC,KAAKy2B,gBACLz2B,KAAK02B,UACL12B,KAAK6kC,cAAgBnf,EACrB1lB,KAAKilC,gBAAkBvf,EACvB1lB,KAAK+mC,UAAYrhB,CACrB,EAEAgiB,0BAA2B,SAAS9vB,GAChC,OAAI5X,KAAKG,QAAQwnC,MACN3nC,KAAKG,QAAQwnC,MAAMC,yBAAyBhwB,GAEhDA,CACX,EAEAiwB,sBAAuB,SAASjwB,GAC5B,OAAI5X,KAAKG,QAAQwnC,MACN3nC,KAAKG,QAAQwnC,MAAMG,qBAAqBlwB,GAE5CA,CACX,EAEAkvB,eAAgB,SAASniC,GACrB,IAAIojC,EAAO/nC,KAAKgoC,cACZC,EAAYtnC,KAAK+I,IAAIq+B,EAAKp5B,OA9jEb,GAOJ,GAwjEb,OAAOo5B,EAAOpnC,KAAKiD,MAAOe,EAAI,IAAOsjC,GAAaA,EAAatjC,EAAI,GACvE,EAEAuiC,kBAAmB,SAAS7iC,GACxB,GAAIA,aAAalE,EAAQoD,MACrB,OAAO,IAAIpD,EAAQoD,MAAMvD,KAAKknC,kBAAkB7iC,EAAErB,GAAIhD,KAAKknC,kBAAkB7iC,EAAEpB,IAE/E,IAAI8kC,EAAO/nC,KAAKgoC,eAAiB,CAAC,EAC9BE,EAAWvnC,KAAK+I,IAAIq+B,EAAKxlC,MAxkEjB,GAOJ,GAkkER,OAAOwlC,EAAOpnC,KAAKiD,MAAMS,EAAI6jC,GAAYA,EAAW7jC,CAE5D,EAEA2jC,YAAa,WAGT,QAFehoC,KAAKG,QAAQsjB,QAAQ2hB,UACX,CAAC,GAAG+C,MAAQ,CAAC,GAAGJ,MAAQ,CAAC,CAEtD,EAEAf,WAAY,WACR,IAAI5B,EAAWplC,KAAKG,QAAQsjB,QAAQ2hB,SAChC+C,GAAQ/C,GAAY,CAAC,GAAG+C,KACxBJ,GAAQI,GAAQ,CAAC,GAAGJ,KACxB,OAAoB,IAAb3C,IAA+B,IAAT+C,IAA2B,IAATJ,CACnD,EAEAX,gBAAiB,SAASxvB,EAAQ+uB,EAAKC,EAAKJ,GACxC,IAGIa,EAHAx4B,EAAK+I,EAAOxJ,UAAU1C,KAAKi7B,GAC3B53B,EAAK6I,EAAOrJ,cAAc7C,KAAKk7B,GAC/BH,EAAY55B,EAAK4D,WAAW5B,EAAIE,GAOpC,OALKy3B,KACDa,EAAYZ,EAAUzhC,UACZiK,OAAO2I,EAAO5S,UAAWhF,KAAKu3B,QACxCkP,EAAY,IAAI55B,EAAKw6B,EAAUrkC,EAAIyjC,EAAUv5B,MAAQ,EAAGm6B,EAAUpkC,EAAIwjC,EAAUx5B,OAAS,EAAGw5B,EAAUv5B,MAAOu5B,EAAUx5B,SAEpHw5B,CACX,EAEAz8B,KAAM,WACF,IAAI+I,EAAMrQ,EAAG4U,EACb,GAAItX,KAAKmmC,KAAOnmC,KAAKkmC,IACjB,GAAIlmC,KAAK+mC,UACLh0B,EAAO,IAAIokB,EAAWn3B,KAAMA,KAAKo2B,OAAQp2B,KAAK+lC,gBAC9C/lC,KAAK+mC,WAAY,OACd,GAAI/mC,KAAKooC,cAAe,CAC3B,GAAIpoC,KAAKG,QAAQwnC,MACb,IAAKjlC,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,IAAK,CAErC,IAAIkV,GADJN,EAAQtX,KAAKo2B,OAAO1zB,IACDkV,SACnBA,EAAS5X,KAAK6nC,sBAAsB7nC,KAAK0nC,0BAA0B9vB,IACnEN,EAAMM,OAAOA,GACb5X,KAAKy2B,gBACLz2B,KAAK02B,SACT,CAEJ,IAAKh0B,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,KAChC4U,EAAQtX,KAAKo2B,OAAO1zB,IACdkzB,cAEV7iB,EAAO,IAAIojB,EAAcn2B,KAAKo2B,OAAQp2B,KAAKqmC,YAAarmC,MACxDA,KAAKG,QAAQkoC,mBACjB,CAMJ,OAHAroC,KAAK6kC,cAAgBnf,EACrB1lB,KAAKilC,gBAAkBvf,EACvB1lB,KAAK+mC,UAAYrhB,EACV3S,CACX,EAEAq1B,YAAa,WAGT,IAFA,IAAIhS,EAASp2B,KAAKo2B,OACdqR,EAASznC,KAAKqmC,YACTnG,EAAM,EAAGA,EAAM9J,EAAOn0B,OAAQi+B,IACnC,IAAK9J,EAAO8J,GAAKtoB,SAASpJ,OAAOi5B,EAAOvH,IACpC,OAAO,EAGf,OAAO,CACX,EAEAzJ,cAAe,WACX,IAAI7e,EAA+B,GAAtB5X,KAAKo2B,OAAOn0B,OACrBjC,KAAKo2B,OAAO,GAAGxe,SAASnM,QACxBzL,KAAKG,QAAQswB,YAAYzwB,KAAKo2B,QAAQ,GAE1Cp2B,KAAK4X,OAAOA,EAChB,EAEA8e,QAAS,WACL,IAAiBnyB,EAAGqT,EAAhBO,EAAOnY,KACX,GAAIA,KAAKo2B,OAAOn0B,OAAS,EAAG,CACxB2V,EAAS5X,KAAK4X,SACd5X,KAAK4nB,OAAOoB,SAAQ,GACpBhpB,KAAK4nB,OAAO3gB,SAAS2Q,EAAOxJ,WAC5BnO,EAAE0kC,KAAK3kC,KAAKqL,KAAK,WACb9G,EAAI4T,EAAKutB,iBAAiB,IAAIniC,EAAMvD,KAAKgD,EAAGhD,KAAKiD,IACjDjD,KAAK4nB,OAAO3gB,SAAS1C,EAAE6J,UAC3B,IACApO,KAAK4nB,OAAO3gB,SAAS2Q,EAAOxJ,WAE5B,IAAIpJ,EAAS,IAAIzB,EAAMqU,EAAO1K,MAAQ,EAAG0K,EAAO3K,OAAS,GAGzD,GAFAjN,KAAK4nB,OAAO3Y,OAAOjP,KAAKu3B,OAAQvyB,GAChChF,KAAKyO,KAAKya,OAAO,CAAEhc,MAAO0K,EAAO1K,MAAOD,OAAQ2K,EAAO3K,SACnDjN,KAAKsoC,cAAe,CACpB,IAAIC,EAAQvoC,KAAKyjB,QAAQ2hB,SAASn2B,OAAOs5B,MACzCvoC,KAAKwoC,qBAAuB,IAAI37B,EAAK+K,EAAO5S,SAAShC,EAAG4U,EAAO3U,EAAIslC,EAAMtlC,EAAG,EAAG,GAAG6J,QAAQy7B,EAAMr7B,OAChGlN,KAAKsoC,cAAcpf,OAAO,CAAElmB,EAAG4U,EAAO1K,MAAQ,EAAIq7B,EAAMr7B,MAAQ,GACpE,CACJ,MACIlN,KAAK4nB,OAAOoB,SAAQ,EAE5B,IAGAyf,GAAW1gC,EAAMC,OAAO,CACxBC,KAAM,SAAS9H,GACX,IAAI07B,EAAa17B,EAAQsjB,QAAQoY,WACjC77B,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAASoY,GAE5C77B,KAAK4nB,OAAS,IAAI8D,EAAU1rB,KAAKyjB,SACjCzjB,KAAKG,QAAUA,CACnB,EACAsjB,QAAS,CACLqG,OAAQ,CACJ7F,MAAO,UACP/W,MAAO,EACPod,SAAU,QAEdjH,KAAM,CACFY,MAAO6B,IAGf5gB,MAAO,SAASpC,GACZ9C,KAAKkmC,IAAMlmC,KAAK0oC,IAAM5lC,EACtB9C,KAAK02B,UACL12B,KAAKG,QAAQwoC,OAAO3oC,MAAM,EAC9B,EACAiF,IAAK,WACDjF,KAAKkmC,IAAMlmC,KAAK0oC,IAAMhjB,EACtB1lB,KAAKG,QAAQwoC,OAAO3oC,MAAM,EAC9B,EACA4X,OAAQ,SAASpV,GAIb,OAHIA,IACAxC,KAAKulC,QAAU/iC,GAEZxC,KAAKulC,OAChB,EACApU,KAAM,SAASruB,GACX9C,KAAK0oC,IAAM5lC,EACX9C,KAAK02B,SACT,EACAA,QAAS,WACL,GAAI12B,KAAKkmC,IAAK,CACV,IAAI0C,EAAe/7B,EAAK4D,WAAWzQ,KAAKG,QAAQ8jC,aAAajkC,KAAKkmC,KAAMlmC,KAAKG,QAAQ8jC,aAAajkC,KAAK0oC,MACvG1oC,KAAK4X,OAAO/K,EAAK4D,WAAWzQ,KAAKkmC,IAAKlmC,KAAK0oC,MAC3C1oC,KAAK4nB,OAAO3gB,SAAS2hC,EAAax6B,WAClCpO,KAAK4nB,OAAOsB,OAAO,CAAEjc,OAAQ27B,EAAa37B,OAAS,EAAGC,MAAO07B,EAAa17B,MAAQ,GACtF,CACJ,IAGAo3B,GAAkBv8B,EAAMC,OAAO,CAC/BC,KAAM,SAASk0B,GACXn8B,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAG87B,EAAU1Y,SACxCzjB,KAAKq8B,GAAKF,EACVn8B,KAAK4nB,OAAS,IAAI+E,EAAO3sB,KAAKyjB,SAC9BzjB,KAAK02B,SACT,EACArN,OAAQ,SAAS7mB,GACb,IAAIihB,EAAUzjB,KAAKyjB,QACf2G,EAAQ3G,EAAQ2G,MAChBN,EAASrG,EAAQqG,OACjBzG,EAAOI,EAAQJ,KAEf7gB,GAAShC,EAAMK,UAAUupB,EAAMN,UAC/BA,EAASzpB,EAAW,CAAC,EAAGypB,EAAQM,EAAMN,SAGtCtnB,GAAShC,EAAMK,UAAUupB,EAAM/G,QAC/BA,EAAO+G,EAAM/G,MAGjBrjB,KAAK4nB,OAAOsB,OAAO,CACfY,OAAQA,EACRzG,KAAMA,GAEd,EACAqT,QAAS,WACL,IAAI5zB,EAAI9C,KAAKq8B,GAAG/kB,MAAMnX,QAAQ0oC,YAAY7oC,KAAKq8B,GAAGp1B,YAC9C6hC,EAAWhmC,EAAE6I,MAAM3L,KAAKq8B,GAAG/kB,MAAMM,OAAO,eAAexJ,WACvD5L,EAAQ,IAAIqK,EAAK/J,EAAEE,EAAGF,EAAEG,EAAG,EAAG,GAClCT,EAAMsK,QAAQ9M,KAAKyjB,QAAQvW,MAAQ,EAAGlN,KAAKyjB,QAAQxW,OAAS,GAC5DjN,KAAK+oC,cAAgBvmC,EACrBxC,KAAK4nB,OAAOsB,OAAO,CAAElkB,OAAQ,IAAIzB,EAAMulC,EAAS9lC,EAAG8lC,EAAS7lC,IAChE,EACAq4B,SAAU,SAASx4B,GACf,IAAIqgC,EAAKnjC,KAAKq8B,GAAG/kB,MAAMnX,QAAQ0oC,YAAY/lC,GAC3C,OAAO9C,KAAK+oC,cAAc7iC,SAASi9B,EACvC,IAGJ,SAAS7G,GAAQt1B,GACb,IAAIo+B,EAAWp+B,EAAQyc,QAAQ2hB,SAC/B,OAAOA,IAA8B,IAAlBA,EAAS+C,IAChC,CAeA,SAAS5N,GAAOJ,GACZ,OAAwB,IAAjBA,EAAKG,UAAqC,IAAhBH,EAAKgE,SAAsC,IAAlBhE,EAAK6O,QACnE,CAEA3oC,EAAWF,EAAS,CAChB80B,cAAeA,EACfkB,cAAeA,EACfW,YAAaA,EACbF,aAAcA,EACdD,kBAAmBA,EACnBT,gBAAiBA,EACjBF,qBAAsBA,EACtBgN,sBAAuBA,GACvB9G,eAAgBA,EAChBoI,gBAAiBA,GACjBvM,gBAAiBA,EACjB6M,gBAAiBA,GACjB6D,SAAUA,GACVlL,YAAaA,GACb2G,kBAAmBA,GACnB9P,eAAgBA,EAChBgB,mBAAoBA,EACpBsC,YAAaA,EACbI,WAAYA,EACZwI,qBAAsBA,GACtBK,eAAgBA,GAChBE,gBAAiBA,GACjBjF,cAAeA,EACf7C,aAAcA,EACdoC,YAAaA,EACb+B,mBAAoBA,EACpB/F,WAAYA,GAEvB,CAv2ED,CAu2EGj3B,OAAOL,MAAMqL,QAEhB,SAAUjL,GACN,IAAIJ,EAAQK,OAAOL,MACfM,EAAUN,EAAMO,QAAQD,QACxBqa,EAAQra,EAAQqa,MAChBnD,EAAOlX,EAAQkX,KACfgC,EAAOlZ,EAAQkZ,KACfhZ,EAAaR,EAAMQ,WACnByP,EAAO3P,EAAQ2P,KACfjD,EAAO1M,EAAQ0M,KACfmJ,EAAa7V,EAAQ6V,WACrBiB,EAAM9W,EAAQ8W,IACdgyB,EAAY9oC,EAAQqa,MACpBha,EAAQL,EAAQK,MAChB+C,EAAQpD,EAAQoD,MAChB2lC,EAAU,KACVC,EAAaxoC,KAAK6D,GAAK,IACvB0B,EAAW1F,EAAM0F,SACjB+C,EAAOhJ,EAAEgJ,KAMTmgC,EAAavpC,EAAMkI,MAAMC,OAAO,CAChCqhC,eAAgB,CACZ1nC,KAAM,OACN2nC,QAAS,OACTC,MAAO,KACPhV,SAAS,EAKThQ,aAAa,EAIb0U,SAAU,GAIVuQ,aAAc,GAIdC,WAAY,IAKZC,qBAAsB,GAItBC,mBAAoB,GAMpBC,4BAA6B,GAI7BC,2BAA4B,GAI5BC,6BAA8B,GAK9BC,KAAM,CAIF78B,MAAO,KAIP88B,QAAS,GAITC,QAAS,GAITC,kBAAmB,GAInBC,kBAAmB,IAOvBC,gBAAiB,GAIjBC,kBAAmB,EAInBC,iBAAkB,EAIlBC,eAAgB,IAIhBC,iBAAkB,IAIlBC,2BAA4B,IAI5BC,iCAAiC,EAIjCC,kBAAkB,EAClBC,yBAAyB,EACzBC,iBAAiB,EACjBC,oBAAoB,GAExB7iC,KAAM,WACN,EAOA8iC,qBAAsB,SAASnvB,GAC3B,IAAKA,EACD,KAAM,0BAIVpb,EAAM+E,QAAQqW,GAAY,SAAShX,GAC/BA,EAAEqX,YACN,IAGAL,EAAWtU,MAAK,SAAS3C,EAAGJ,GACxB,OAAOA,EAAEqT,OAAO1K,MAAQvI,EAAEiT,OAAO1K,KACrC,IAcA,IAZA,IAQIxK,EARAsoC,EAAWhrC,KAAKyjB,QAAQsmB,KAAK78B,MAC7B88B,EAAUhqC,KAAKyjB,QAAQsmB,KAAKG,kBAC5BD,EAAUjqC,KAAKyjB,QAAQsmB,KAAKI,kBAC5Bl9B,EAAS,EACTg+B,EAASjrC,KAAKyjB,QAAQsmB,KAAKC,QAE3BhnC,EAAIioC,EACJhoC,EAFSjD,KAAKyjB,QAAQsmB,KAAKE,QAI3BiB,EAAgB,GAChBC,EAAgB,GAEbvvB,EAAW3Z,OAAS,GAAG,CACtBe,GAAKgoC,IAELhoC,EAAIioC,EACJhoC,GAAKgK,EAASg9B,EAEdh9B,EAAS,GAEb,IAAI2S,EAAYhE,EAAWW,MAE3B,IADAvc,KAAKorC,aAAaxrB,EAAW,IAAIrc,EAAMP,EAAGC,IACrCP,EAAI,EAAGA,EAAIkd,EAAUlF,MAAMzY,OAAQS,IACpCyoC,EAAcpoC,KAAK6c,EAAUlF,MAAMhY,IAEvC,IAAKA,EAAI,EAAGA,EAAIkd,EAAUrI,MAAMtV,OAAQS,IACpCwoC,EAAcnoC,KAAK6c,EAAUrI,MAAM7U,IAEvC,IAAI2oC,EAAezrB,EAAUhI,OACzB0zB,EAAgBD,EAAap+B,QAC7Bq+B,GAAiB,GAAKzpC,MAAMypC,MAC5BA,EAAgB,GAEpB,IAAIC,EAAeF,EAAan+B,OAC5Bq+B,GAAgB,GAAK1pC,MAAM0pC,MAC3BA,EAAe,GAGfD,GAAiBr+B,IACjBA,EAASq+B,GAEbtoC,GAAKuoC,EAAevB,CACxB,CAEA,MAAO,CACHtvB,MAAOywB,EACP5zB,MAAO2zB,EAEf,EAEAE,aAAc,SAASxrB,EAAW9c,GAC9B,IAAIJ,EAAGqI,EACH6M,EAASgI,EAAUhI,OACnB4zB,EAAS1oC,EAAEE,EAAI4U,EAAO5U,EACtByoC,EAAS3oC,EAAEG,EAAI2U,EAAO3U,EAE1B,IAAKP,EAAI,EAAGA,EAAIkd,EAAUlF,MAAMzY,OAAQS,IAAK,CACzC,IAAIwV,EAAO0H,EAAUlF,MAAMhY,GACvBgpC,EAAaxzB,EAAKN,SACG,IAArB8zB,EAAWx+B,OAAqC,IAAtBw+B,EAAWz+B,QAAiC,IAAjBy+B,EAAW1oC,GAA4B,IAAjB0oC,EAAWzoC,IACtFyoC,EAAa,IAAI7+B,EAAK,EAAG,EAAG,EAAG,IAEnC6+B,EAAW1oC,GAAKwoC,EAChBE,EAAWzoC,GAAKwoC,EAChBvzB,EAAKN,OAAO8zB,EAChB,CACA,IAAKhpC,EAAI,EAAGA,EAAIkd,EAAUrI,MAAMtV,OAAQS,IAAK,CACzC,IAAI0V,EAAOwH,EAAUrI,MAAM7U,GAC3B,GAAI0V,EAAKxV,OAAQ,CACb,IAAI+oC,EAAY,GACZ/oC,EAASwV,EAAKxV,OAClB,IAAKmI,EAAI,EAAGA,EAAInI,EAAOX,OAAQ8I,IAAK,CAChC,IAAI6gC,EAAKhpC,EAAOmI,GAChB6gC,EAAG5oC,GAAKwoC,EACRI,EAAG3oC,GAAKwoC,EACRE,EAAU5oC,KAAK6oC,EACnB,CACAxzB,EAAKxV,OAAS+oC,CAClB,CACJ,CAEA,OADA3rC,KAAK6rC,yBAA2Bj0B,EAAO1K,MAAQlN,KAAKyjB,QAAQsmB,KAAKC,QAC1D,IAAIzmC,EAAMioC,EAAQC,EAC7B,EAEAK,gBAAiB,SAASroB,GAItBzjB,KAAKyjB,QAAU5jB,EAAMQ,WAAW,CAAC,EAAGL,KAAKqpC,gBACrC7oC,EAAMO,YAAY0iB,KAItBzjB,KAAKyjB,QAAU5jB,EAAMQ,WAAWL,KAAKyjB,QAASA,GAAW,CAAC,GAC9D,IAuBAsoB,EAA4BlsC,EAAMkI,MAAMC,OAAO,CAC/CC,KAAM,SAAS9H,GAMXH,KAAKwe,QAAU,IAAIxI,EAMnBhW,KAAKgsC,SAAW,IAAIh2B,EAMpBhW,KAAK0a,MAAQ,GAMb1a,KAAKisC,MAAQ,GAIbjsC,KAAKksC,QAAU,IAAIl2B,EAMnBhW,KAAKmsC,WAAa,GAMlBnsC,KAAKosC,WAAa,GAMlBpsC,KAAKqsC,mBAAqB,GAM1BrsC,KAAKssC,cAAgB,GAMrBtsC,KAAKusC,SAAW,IAAIv2B,EAOpBhW,KAAKwsC,UAAY,IAAIhyB,EAOrBxa,KAAKysC,WAAa,KAElBzsC,KAAKG,QAAUA,CACnB,EAYAusC,QAAS,SAASjpB,GAEd,GAAIjjB,EAAMO,YAAYf,KAAKG,SACvB,KAAM,yBA6BV,OA1BAH,KAAKyjB,QAAU5jB,EAAMQ,WAAW,CACxBwqC,iBAAiB,EACjBF,kBAAkB,EAClBC,yBAAyB,GAE7BnnB,GAAW,CAAC,GAGhBzjB,KAAKmH,QAELnH,KAAK2sC,qBAGL3sC,KAAK4sC,0BAGL5sC,KAAKmsC,WAAa,IAAIn2B,EAAWhW,KAAK0a,OACtC1a,KAAKosC,WAAa,IAAIp2B,EAAWhW,KAAKisC,OAEtCjsC,KAAKysC,WAAa,IAAIjyB,EACtBxa,KAAKmsC,WAAW5mC,SAAQ,SAASgC,GAC7BvH,KAAKysC,WAAWlvB,QAAQhW,EAC5B,GAAGvH,MACHA,KAAKosC,WAAW7mC,SAAQ,SAASsnC,GAC7B7sC,KAAKysC,WAAWrvB,gBAAgByvB,EACpC,GAAG7sC,MACIA,KAAKysC,UAChB,EAOAK,cAAe,SAASxzB,GACpB,OAAOtZ,KAAKksC,QAAQl3B,IAAIsE,EAAWxD,GACvC,EAOAi3B,SAAU,SAASz1B,GACf,OAAOtX,KAAKwe,QAAQxJ,IAAIsC,EAAMxB,GAClC,EAOAk3B,QAAS,SAASroC,EAAGJ,GACjB,OAAO/D,EAAMqG,MAAMlC,EAAE4S,OAAO,SAASa,GACjC,OAAOA,EAAKC,cAAc1T,KAAOJ,CACrC,GACJ,EAKA4C,MAAO,WACHnH,KAAKysC,WAAa,KAClBzsC,KAAKwsC,WAAcxsC,KAAKyjB,QAAQknB,kBAAoB3qC,KAAKyjB,QAAQmnB,wBAA2B,IAAI3B,EAAc,KAC9GjpC,KAAKusC,UAAavsC,KAAKyjB,QAAQknB,kBAAoB3qC,KAAKyjB,QAAQmnB,wBAA2B,IAAI50B,EAAe,KAC9GhW,KAAKwe,QAAU,IAAIxI,EACnBhW,KAAKgsC,SAAW,IAAIh2B,EACpBhW,KAAK0a,MAAQ,GACb1a,KAAKisC,MAAQ,GACbjsC,KAAKksC,QAAU,IAAIl2B,EACnBhW,KAAKqsC,mBAAqB,GAC1BrsC,KAAKssC,cAAgB,GACrBtsC,KAAKmsC,WAAa,GAClBnsC,KAAKosC,WAAa,EACtB,EAOAa,WAAY,SAASC,GACjB,IAAI7mC,EAAO,GACPjD,EAAI8pC,EAAe97B,UACvB,IAAKhO,EACD,OAAOiD,EAGX,IADAA,EAAKtD,KAAKK,GACHA,EAAE+pC,iBACL/pC,EAAIA,EAAE+pC,gBACN9mC,EAAKtD,KAAKK,GAGd,OADAiD,EAAKgE,UACEhE,CACX,EAEA+mC,2BAA4B,SAAS91B,GAEjC,OAAIA,EAAM+1B,cAAgBrtC,KAAKstC,iBAAiBh2B,GACrCA,EAEHA,EAAM61B,gBAAyBntC,KAAKotC,2BAA2B91B,EAAM61B,iBAA7C,IACpC,EACAI,sBAAuB,SAAS5oC,EAAGJ,GAC/B,SAAII,EAAE0oC,cAAertC,KAAKwtC,eAAe7oC,EAAGJ,KAGrCA,EAAE8oC,aAAertC,KAAKwtC,eAAejpC,EAAGI,EACnD,EASA6oC,eAAgB,SAASC,EAAO9oC,GAC5B,IAAK8oC,EAAMJ,YACP,KAAM,yBAEV,GAAII,IAAU9oC,EACV,OAAO,EAEX,GAAIuB,EAASunC,EAAMl1B,SAAU5T,GACzB,OAAO,EAGX,IADA,IAAI+oC,EAAa,GACRhrC,EAAI,EAAG4J,EAAMmhC,EAAMl1B,SAAStW,OAAQS,EAAI4J,EAAK5J,IAAK,CACvD,IAAIkC,EAAI6oC,EAAMl1B,SAAS7V,GACnBkC,EAAEyoC,aAAertC,KAAKwtC,eAAe5oC,EAAGD,IACxC+oC,EAAW3qC,KAAK6B,EAExB,CAEA,OAAO8oC,EAAWzrC,OAAS,CAC/B,EACA0rC,gBAAiB,SAASr2B,GACtB,OAAItX,KAAKyjB,QAAQonB,kBACTvzB,EAAMs2B,cAAe5tC,KAAK6tC,WAAWv2B,QAGpCA,EAAMs2B,aAAe5tC,KAAK6tC,WAAWv2B,IAMnCA,EAAMs2B,cAAgB5tC,KAAK8tC,OAAOx2B,EAEjD,EAQAy2B,cAAe,SAASz2B,GACpB,OAAOA,EAAMs2B,cAAgB5tC,KAAK6tC,WAAWv2B,KAAWtX,KAAK8tC,OAAOx2B,EACxE,EAEA02B,oBAAqB,SAASrpC,EAAGJ,GAC7B,IAAKI,EACD,KAAM,gCAEV,IAAKJ,EACD,KAAM,gCAGV,IAAKvE,KAAKwsC,UACN,KAAM,0BAEV,IAAIyB,EAAKjuC,KAAKitC,WAAWtoC,GACrBqK,EAAKhP,KAAKitC,WAAW1oC,GACrB+W,EAAQ,KACZ,GAAI9a,EAAMwB,QAAQisC,IAAOztC,EAAMwB,QAAQgN,GACnC,OAAOhP,KAAKwsC,UAAUnxB,KAAKxD,KAK/B,IAHA,IAAIq2B,EAAKD,EAAG,GACRE,EAAKn/B,EAAG,GACRtM,EAAI,EACDwrC,IAAOC,IACV7yB,EAAQ2yB,EAAGvrC,OACXA,GACSurC,EAAGhsC,QAAUS,GAAKsM,EAAG/M,UAG9BisC,EAAKD,EAAGvrC,GACRyrC,EAAKn/B,EAAGtM,GAEZ,OAAK4Y,EAIMrS,EAAKjJ,KAAKwsC,UAAU9xB,OAAO,SAASnT,GACvC,OAAOA,EAAEsQ,KAAKzG,YAAckK,CAChC,IALOtb,KAAKwsC,UAAUnxB,KAAKxD,IAOnC,EAOAi2B,OAAQ,SAAS5pC,GACb,OAAQA,EAAKipC,eACjB,EASAU,WAAY,SAASv2B,GAEjB,QAAKA,EAAM0R,YAGH1R,EAAM61B,gBAAoCntC,KAAK6tC,WAAWv2B,EAAM61B,iBAAxC71B,EAAM0R,UAC1C,EAEAolB,aAAc,SAAS92B,GAEnB,SAAIA,EAAM+1B,cAAe/1B,EAAMs2B,cAGxBt2B,EAAM61B,iBAAmBntC,KAAKouC,aAAa92B,EAAM61B,gBAC5D,EAMAR,mBAAoB,WAEhB,IAAI3sC,KAAKyjB,QAAQknB,iBAkBb,KAAM,oDAjBN,IAAK,IAAIjoC,EAAI,EAAG4J,EAAMtM,KAAKG,QAAQi2B,OAAOn0B,OAAQS,EAAI4J,EAAK5J,IAAK,CAC5D,IAAI4U,EAAQtX,KAAKG,QAAQi2B,OAAO1zB,GAGhC,GAAK1C,KAAKyjB,QAAQonB,kBAAoB7qC,KAAK6tC,WAAWv2B,IAAWA,EAAM+1B,YACnErtC,KAAKssC,cAAcvpC,KAAKuU,OAD5B,CAIA,IAAIY,EAAO,IAAIb,EAAKC,EAAMxB,GAAIwB,GAC9BY,EAAKH,WAAY,EAGjB/X,KAAKwe,QAAQ1J,IAAIwC,EAAMxB,GAAIoC,GAC3BlY,KAAK0a,MAAM3X,KAAKmV,EANhB,CAOJ,CAKR,EAMA00B,wBAAyB,WACrB,GAAwC,IAApC5sC,KAAKG,QAAQs7B,YAAYx5B,OAG7B,IAAK,IAAIS,EAAI,EAAG4J,EAAMtM,KAAKG,QAAQs7B,YAAYx5B,OAAQS,EAAI4J,EAAK5J,IAAK,CACjE,IAAIqyB,EAAO/0B,KAAKG,QAAQs7B,YAAY/4B,GAEpC,GAAI1C,KAAK2tC,gBAAgB5Y,GACrB/0B,KAAKqsC,mBAAmBtpC,KAAKgyB,OADjC,CAKA,IAAI3yB,EAAU2yB,EAAK8H,gBAAyB9H,EAAK8H,gBAAgBvlB,MAA5B,KACjC+2B,EAAQtZ,EAAKkB,gBAAyBlB,EAAKkB,gBAAgB3e,MAA5B,KAGnC,GAAKlV,GAAWisC,EAKhB,IAAInoC,EAASlG,KAAKssC,cAAelqC,IAAYpC,KAAKgsC,SAAS72B,YAAY/S,GAIvE,IAAI8D,EAASlG,KAAKssC,cAAe+B,IAAUruC,KAAKgsC,SAAS72B,YAAYk5B,GAArE,CAMIruC,KAAKgsC,SAAS72B,YAAY/S,KAC1BA,EAASpC,KAAKgsC,SAAS5pC,IAEvBpC,KAAKgsC,SAAS72B,YAAYk5B,KAC1BA,EAAOruC,KAAKgsC,SAASqC,IAGzB,IAAIC,EAAatuC,KAAK+sC,SAAS3qC,GAC3BmsC,EAAWvuC,KAAK+sC,SAASsB,GAC7B,GAAKC,IAAeC,GAAavuC,KAAKwuC,oBAAoBF,EAAYC,GAClEvuC,KAAKqsC,mBAAmBtpC,KAAKgyB,OADjC,CAKA,GAAmB,OAAfuZ,GAAoC,OAAbC,EACvB,KAAM,oCAEV,IAAIvuC,KAAKyjB,QAAQknB,iBAYb,KAAM,oDAVN,GAAI2D,EAAWv2B,WAAaw2B,EAASx2B,UACjC/X,KAAKqsC,mBAAmBtpC,KAAKgyB,OADjC,CAIA,IAAI0Z,EAAU,IAAIp1B,EAAKi1B,EAAYC,EAAUxZ,EAAKjf,GAAIif,GAEtD/0B,KAAKksC,QAAQp3B,IAAIigB,EAAKjf,GAAI24B,GAC1BzuC,KAAKisC,MAAMlpC,KAAK0rC,EAJhB,CAVJ,CAfA,MAFIzuC,KAAKqsC,mBAAmBtpC,KAAKgyB,QAJ7B/0B,KAAKqsC,mBAAmBtpC,KAAKgyB,QAL7B/0B,KAAKqsC,mBAAmBtpC,KAAKgyB,EAPjC,CAoDJ,CACJ,EAEAyZ,oBAAqB,SAASjnC,EAAGnD,GAC7B,OAAO5D,EAAMmF,IAAI3F,KAAKisC,OAAO,SAASY,GAClC,OAAOA,EAAEzqC,SAAWmF,GAAKslC,EAAE1kC,SAAW/D,GAAKyoC,EAAEzqC,SAAWgC,GAAKyoC,EAAE1kC,SAAWZ,CAC9E,GACJ,IAwCA8c,EAAe+kB,EAAWphC,OAAO,CACjCC,KAAM,SAAS9H,GAGX,GADAipC,EAAWjzB,GAAGlO,KAAK5G,KADRrB,MAEPQ,EAAMO,YAAYZ,GAClB,KAAM,4BAEVH,KAAKG,QAAUA,CACnB,EAEAq2B,OAAQ,SAAS/S,GAEbzjB,KAAK8rC,gBAAgBroB,GAErB,IACIX,EADU,IAAIipB,EAA0B/rC,KAAKG,SAC7BusC,QAAQjpB,GAC5B,IAAIX,EAAM9gB,UAAV,CAIA,IAAI4Z,EAAakH,EAAMvH,yBACvB,IAAI/a,EAAMwB,QAAQ4Z,GAAlB,CAGA,IAAK,IAAIlZ,EAAI,EAAGA,EAAIkZ,EAAW3Z,OAAQS,IAAK,CACxC,IAAIkd,EAAYhE,EAAWlZ,GAC3B1C,KAAKskB,YAAY1E,EAAW6D,EAChC,CACA,IAAIirB,EAAe1uC,KAAK+qC,qBAAqBnvB,GAC7C,OAAO,IAAIzb,EAAQwuC,YAAY3uC,KAAKG,QAASuuC,EAN7C,CALA,CAYJ,EAEApqB,YAAa,SAASxB,EAAOW,GAErBjjB,EAAMK,UAAU4iB,IAChBzjB,KAAK8rC,gBAAgBroB,GAEzBzjB,KAAK8iB,MAAQA,EAEb,IAAI8rB,EAAiD,EAA5B5uC,KAAKyjB,QAAQ+lB,aACtCxpC,KAAK6uC,YAAcD,EAEnB,IAAIE,EAAc9uC,KAAK+uC,kBACvB/uC,KAAKkN,MAAQ4hC,EAAY5hC,MACzBlN,KAAKiN,OAAS6hC,EAAY7hC,OAE1B,IAAK,IAAIpC,EAAO,EAAGA,EAAO7K,KAAKyjB,QAAQgmB,WAAY5+B,IAC/C7K,KAAKgvC,YAAcnkC,GAAkC,EAA1B7K,KAAKyjB,QAAQgmB,WAAiB,EACzDzpC,KAAKoI,OAELpI,KAAK6uC,YAAc7uC,KAAKgvC,YACpBJ,EAAqB,GACrBA,GAAsB,EAAI/jC,GAAQ,EAAI7K,KAAKyjB,QAAQgmB,YAE/D,EAKArhC,KAAM,WACF,IAAI1F,EAEJ,IAAKA,EAAI,EAAGA,EAAI1C,KAAK8iB,MAAMpI,MAAMzY,OAAQS,IACrC1C,KAAKivC,WAAWjvC,KAAK8iB,MAAMpI,MAAMhY,IAIrC,IAAKA,EAAI,EAAGA,EAAI1C,KAAK8iB,MAAMvL,MAAMtV,OAAQS,IACrC1C,KAAKkvC,YAAYlvC,KAAK8iB,MAAMvL,MAAM7U,IAGtC,IAAKA,EAAI,EAAGA,EAAI1C,KAAK8iB,MAAMpI,MAAMzY,OAAQS,IAAK,CAC1C,IAAIwV,EAAOlY,KAAK8iB,MAAMpI,MAAMhY,GACxBkJ,EAASjL,KAAK+D,KAAKwT,EAAKvK,GAAKuK,EAAKvK,GAAKuK,EAAKtK,GAAKsK,EAAKtK,IAC1D,GAAe,IAAXhC,EACA,OAEJsM,EAAKlV,GAAKrC,KAAKgJ,IAAIiC,EAAQ5L,KAAK6uC,aAAe32B,EAAKvK,GAAK/B,EACzDsM,EAAKjV,GAAKtC,KAAKgJ,IAAIiC,EAAQ5L,KAAK6uC,aAAe32B,EAAKtK,GAAKhC,EACrD5L,KAAKyjB,QAAQc,cACbrM,EAAKlV,EAAIrC,KAAKgJ,IAAI3J,KAAKkN,MAAOvM,KAAK+I,IAAIwO,EAAKhL,MAAQ,EAAGgL,EAAKlV,IAC5DkV,EAAKjV,EAAItC,KAAKgJ,IAAI3J,KAAKiN,OAAQtM,KAAK+I,IAAIwO,EAAKjL,OAAS,EAAGiL,EAAKjV,IAEtE,CACJ,EAOAksC,OAAQ,SAASj3B,GAEb,IAAIk3B,EAAMzuC,KAAKkD,SAAW7D,KAAKyjB,QAAQ+lB,aAAe,EAClD6F,EAAwB,EAAhB1uC,KAAKkD,SAAelD,KAAK6D,GACrC0T,EAAKlV,GAAKosC,EAAMzuC,KAAKkH,IAAIwnC,GACzBn3B,EAAKjV,GAAKmsC,EAAMzuC,KAAKsS,IAAIo8B,EAC7B,EAWAC,oBAAqB,SAASjrC,EAAGkD,EAAGnD,GAChC,IAAIklB,EACJ,GAAKtpB,KAAKgvC,YAGL,CACD,IAAIxD,EAASjkC,EAAEvE,EAAIoB,EAAEpB,EACjByoC,EAASlkC,EAAEtE,EAAImB,EAAEnB,EAEjBssC,EAAKhoC,EAAE2F,MAAQ,EACfsiC,EAAKjoC,EAAE0F,OAAS,EAChBwiC,EAAKrrC,EAAE8I,MAAQ,EACfwiC,EAAKtrC,EAAE6I,OAAS,EAEpBqc,EAAS3oB,KAAKgvC,IAAInE,EAAQ,GAAK7qC,KAAKgvC,IAAIJ,EAAKE,EAAKzvC,KAAKyjB,QAAQ+lB,aAAc,GAAO7oC,KAAKgvC,IAAIlE,EAAQ,GAAK9qC,KAAKgvC,IAAIH,EAAKE,EAAK1vC,KAAKyjB,QAAQ+lB,aAAc,EAC5J,MAZIlgB,EAAQ3oB,KAAKgvC,IAAItrC,EAAG,GAAK1D,KAAKgvC,IAAI3vC,KAAKyjB,QAAQ+lB,aAAc,GAajE,OAAe,EAARlgB,EAAY,CACvB,EAUAsmB,aAAc,SAASvrC,EAAGkD,EAAGnD,GACzB,OAAO,EAAIpE,KAAKsvC,oBAAoBjrC,EAAGkD,EAAGnD,EAC9C,EAEA6qC,WAAY,SAAS1nC,GACjBA,EAAEoG,GAAK,EACPpG,EAAEqG,GAAK,EACPpN,EAAM+E,QAAQvF,KAAK8iB,MAAMpI,OAAO,SAAStW,GACrC,GAAIA,IAAMmD,EAAV,CAGA,KAAOA,EAAEvE,IAAMoB,EAAEpB,GAAKuE,EAAEtE,IAAMmB,EAAEnB,GAC5BjD,KAAKmvC,OAAO/qC,GAEhB,IAAI8P,EAAK3M,EAAEvE,EAAIoB,EAAEpB,EACbmR,EAAK5M,EAAEtE,EAAImB,EAAEnB,EACb4sC,EAAWlvC,KAAK+D,KAAKwP,EAAKA,EAAKC,EAAKA,GACpCtG,EAAwC,EAApC7N,KAAK4vC,aAAaC,EAAUtoC,EAAGnD,GACvCmD,EAAEoG,IAAOuG,EAAK27B,EAAYhiC,EAC1BtG,EAAEqG,IAAOuG,EAAK07B,EAAYhiC,CAT1B,CAUJ,GAAG7N,KACP,EACAkvC,YAAa,SAAS92B,GAClB,IAAIuF,EAAIvF,EAAKjQ,OACT/E,EAAIgV,EAAKhW,OACb,GAAIgB,IAAMua,EAAV,CAIA,KAAOva,EAAEJ,IAAM2a,EAAE3a,GAAKI,EAAEH,IAAM0a,EAAE1a,GAC5BjD,KAAKmvC,OAAOxxB,GAGhB,IAAIzJ,EAAK9Q,EAAEJ,EAAI2a,EAAE3a,EACbmR,EAAK/Q,EAAEH,EAAI0a,EAAE1a,EACb4sC,EAAWlvC,KAAK+D,KAAKwP,EAAKA,EAAKC,EAAKA,GAEpCxP,EAA+C,EAA3C3E,KAAKsvC,oBAAoBO,EAAUzsC,EAAGua,GAC1ChQ,EAAMuG,EAAK27B,EAAYlrC,EACvBiJ,EAAMuG,EAAK07B,EAAYlrC,EAC3BgZ,EAAEhQ,IAAMA,EACRgQ,EAAE/P,IAAMA,EACRxK,EAAEuK,IAAMA,EACRvK,EAAEwK,IAAMA,CAfR,CAgBJ,EAOAmhC,gBAAiB,WAEb,IAAIxsC,EAAM+d,EAAItgB,KAAK8iB,MAAMpI,MAAMzY,OAC/B,GAAU,IAANqe,EACA,OAAO/d,EAUX,IACIutC,GATJvtC,EAAO/B,EAAM4F,KAAKpG,KAAK8iB,MAAMpI,OAAO,SAAStX,EAAG8U,GAC5C,IAAI63B,EAAO73B,EAAKhL,MAAQgL,EAAKjL,OAC7B,OAAI8iC,EAAO,EACP3sC,GAAKzC,KAAK+D,KAAKqrC,GAGZ,CACX,GAAG,EAAG/vC,OACUsgB,EACM3f,KAAKqvC,KAAKrvC,KAAK+D,KAAK4b,IAG1C,MAAO,CAAEpT,MAhBmF,GAchF4iC,EAAanvC,KAAK+D,KAd4C,MAgBtCuI,OAhBwD,GAe/E6iC,EAAanvC,KAAK+D,KAf2C,MAiB9E,IAIAurC,EAAsBpwC,EAAMkI,MAAMC,OAAO,CAEzCC,KAAM,SAASwb,GACXzjB,KAAKgF,OAAS,KACdhF,KAAKyjB,QAAUA,CACnB,EACA+S,OAAQ,SAAS0Z,EAAW70B,GAExB,GADArb,KAAK8iB,MAAQotB,EACRlwC,KAAK8iB,MAAMpI,OAAqC,IAA5B1a,KAAK8iB,MAAMpI,MAAMzY,OAA1C,CAIA,IAAKiE,EAASlG,KAAK8iB,MAAMpI,MAAOW,GAC5B,KAAM,sCAGVrb,KAAKgF,OAASqW,EACdrb,KAAK8iB,MAAMhI,qBAkBX9a,KAAKmwC,cAzBL,CA6BJ,EAEAC,WAAY,SAAS5iC,GACjBxN,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,QAAQ,GAC/ChF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/C,IAAkB/B,EAAGP,EAAGwV,EAApBhP,EAAI,EAAGgR,EAAI,EACf,IAAKxX,EAAI,EAAGA,EAAI8K,EAAKvL,OAAQS,IAAK,EAC9BwV,EAAO1K,EAAK9K,IACP6tC,cAAgB,OACrB,IAAIntC,EAAIpD,KAAKwwC,QAAQt4B,EAAMpI,EAAKQ,OAChC4J,EAAIvZ,KAAK+I,IAAIwQ,EAAG9W,EAAEqtC,OAClBvnC,GAAK9F,EAAE6J,OAASjN,KAAKyjB,QAAQkmB,kBACjC,CAEAzgC,GAAKlJ,KAAKyjB,QAAQkmB,mBAClB,IAAI3mC,EAAIhD,KAAKgF,OAAOhC,EAAIhD,KAAKyjB,QAAQimB,qBAErC,IADAzmC,EAAIjD,KAAKgF,OAAO/B,GAAMjD,KAAKgF,OAAOiI,OAAS/D,GAAK,EAC3CxG,EAAI,EAAGA,EAAI8K,EAAKvL,OAAQS,IAAK,CAC9BwV,EAAO1K,EAAK9K,GACZ,IAAII,EAAI,IAAIS,EAAMP,EAAIkV,EAAKpI,KAAK5C,MAAOjK,GAEvCjD,KAAK0wC,QAAQx4B,EAAMpV,GACnBG,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQkmB,kBACzC,CACJ,EAEAgH,YAAa,SAASljC,GAClBzN,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,SAAS,GAChDhF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/C,IAAkB/B,EAAGP,EAAGwV,EAApBhP,EAAI,EAAGgR,EAAI,EACf,IAAKxX,EAAI,EAAGA,EAAI+K,EAAMxL,OAAQS,IAAK,EAC/BwV,EAAOzK,EAAM/K,IACR6tC,cAAgB,QACrB,IAAIntC,EAAIpD,KAAKwwC,QAAQt4B,EAAMpI,EAAKQ,OAChC4J,EAAIvZ,KAAK+I,IAAIwQ,EAAG9W,EAAEqtC,OAClBvnC,GAAK9F,EAAE6J,OAASjN,KAAKyjB,QAAQkmB,kBACjC,CAEAzgC,GAAKlJ,KAAKyjB,QAAQkmB,mBAClB,IAAI3mC,EAAIhD,KAAKgF,OAAOhC,EAAIhD,KAAKyjB,QAAQimB,qBAAuB1pC,KAAKgF,OAAOkI,MAExE,IADAjK,EAAIjD,KAAKgF,OAAO/B,GAAMjD,KAAKgF,OAAOiI,OAAS/D,GAAK,EAC3CxG,EAAI,EAAGA,EAAI+K,EAAMxL,OAAQS,IAAK,CAC/BwV,EAAOzK,EAAM/K,GACb,IAAII,EAAI,IAAIS,EAAMP,EAAGC,GACrBjD,KAAK0wC,QAAQx4B,EAAMpV,GACnBG,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQkmB,kBACzC,CACJ,EAEAiH,SAAU,SAASC,GACf7wC,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,MAAM,GAC7ChF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/C,IAAW/B,EAAGiV,EAAMxV,EAAhBwX,EAAI,EACR,IAAKxX,EAAI,EAAGA,EAAImuC,EAAG5uC,OAAQS,IAAK,EAC5BwV,EAAO24B,EAAGnuC,IACL6tC,cAAgB,KAErBr2B,GADQla,KAAKwwC,QAAQt4B,EAAMpI,EAAKQ,OACzBpD,MAAQlN,KAAKyjB,QAAQimB,oBAChC,CAEAxvB,GAAKla,KAAKyjB,QAAQimB,qBAClB,IAAI1mC,EAAIhD,KAAKgF,OAAOhC,EAAKhD,KAAKgF,OAAOkI,MAAQ,EAAMgN,EAAI,EAGvD,IAAKxX,EAAI,EAAGA,EAAImuC,EAAG5uC,OAAQS,IAAK,CAC5BwV,EAAO24B,EAAGnuC,GACVO,EAAIjD,KAAKgF,OAAO/B,EAAIjD,KAAKyjB,QAAQkmB,mBAAqBzxB,EAAKpI,KAAK7C,OAChE,IAAInK,EAAI,IAAIS,EAAMP,EAAGC,GACrBjD,KAAK0wC,QAAQx4B,EAAMpV,GACnBE,GAAKkV,EAAKpI,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,oBACxC,CACJ,EAEAoH,WAAY,SAASC,GACjB,IAAI74B,EAAMxV,EACV1C,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,QAAQ,GAC/ChF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/C,IAAW/B,EAAPiX,EAAI,EACR,IAAKxX,EAAI,EAAGA,EAAIquC,EAAK9uC,OAAQS,IAAK,EAC9BwV,EAAO64B,EAAKruC,IACPsuC,cAAgB,OAErB92B,GADQla,KAAKwwC,QAAQt4B,EAAMpI,EAAKQ,OACzBpD,MAAQlN,KAAKyjB,QAAQimB,oBAChC,CAEAxvB,GAAKla,KAAKyjB,QAAQimB,qBAClB,IAAI1mC,EAAIhD,KAAKgF,OAAOhC,EAAKhD,KAAKgF,OAAOkI,MAAQ,EAAMgN,EAAI,EAEvD,IADAjX,EAAIjD,KAAKgF,OAAO/B,EAAIjD,KAAKyjB,QAAQkmB,mBAAqB3pC,KAAKgF,OAAOiI,OAC7DvK,EAAI,EAAGA,EAAIquC,EAAK9uC,OAAQS,IAAK,CAC9BwV,EAAO64B,EAAKruC,GACZ,IAAII,EAAI,IAAIS,EAAMP,EAAGC,GACrBjD,KAAK0wC,QAAQx4B,EAAMpV,GACnBE,GAAKkV,EAAKpI,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,oBACxC,CACJ,EAEAuH,iBAAkB,WAEdjxC,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,UAAU,GACjDhF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/ChF,KAAKkxC,aAAe,KACpB,IAAIC,EAAanxC,KAAKyjB,QAAQ6mB,iBAAmBnB,EAC7CiI,EAAWpxC,KAAKyjB,QAAQ8mB,eAAiBpB,EAC7C,GAAIiI,GAAYD,EACZ,KAAM,uDAGVnxC,KAAKqxC,SAAW,EAChBrxC,KAAKmK,OAAS,IAAI5G,EAAMvD,KAAKgF,OAAOhC,EAAGhD,KAAKgF,OAAO/B,GACnDjD,KAAKsxC,sBAAsBtxC,KAAKgF,OAAQ,GAGpChF,KAAKqxC,SAAW,GAChBrxC,KAAKuxC,aAAavxC,KAAKgF,OAAQhF,KAAKyjB,QAAQgnB,2BAA4B0G,EAAYC,GAIxFpxC,KAAKgF,OAAOwsC,MAAQJ,EAAWD,CACnC,EAEAM,YAAa,SAASV,EAAMW,GACpBlxC,EAAMO,YAAY2wC,KAClBA,EAAiB,GAGrB1xC,KAAKqwC,qBAAqBrwC,KAAKgF,OAAQ,QAAQ,GAC/ChF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,WAAW,GAC/ChF,KAAKswC,kBAAkBtwC,KAAKgF,OAAQ,cAAc,EAAO0sC,GACzD,IAAWzuC,EAAGiV,EAAMxV,EAAhBwX,EAAI,EACR,IAAKxX,EAAI,EAAGA,EAAIquC,EAAK9uC,OAAQS,IAAK,EAC9BwV,EAAO64B,EAAKruC,IAGP6tC,cAAgB,OAErBr2B,GADQla,KAAKwwC,QAAQt4B,EAAMpI,EAAKQ,OACzBpD,MAAQlN,KAAKyjB,QAAQimB,oBAChC,CAEAxvB,GAAKla,KAAKyjB,QAAQimB,qBAGlBxvB,GAAK62B,EAAKA,EAAK9uC,OAAS,GAAGiL,MAC3BgN,GAAK62B,EAAKA,EAAK9uC,OAAS,GAAG0V,gBAAgBC,SAAS1K,MAEpD,IAAIlK,EAAIhD,KAAKgF,OAAOhC,EAAKhD,KAAKgF,OAAOkI,MAAQ,EAAMgN,EAAI,EAEvD,IADAjX,EAAIjD,KAAKgF,OAAO/B,EAAIjD,KAAKyjB,QAAQkmB,mBAAqB3pC,KAAKgF,OAAOiI,OAC7DvK,EAAI,EAAGA,EAAIquC,EAAK9uC,OAAQS,IAAK,CAC9BwV,EAAO64B,EAAKruC,GAEZ,IAAII,EAAI,IAAIS,EAAMP,EAAGC,GACrBjD,KAAK0wC,QAAQx4B,EAAMpV,GACnBE,GAAKkV,EAAKpI,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,oBACxC,CAUJ,EACA4H,sBAAuB,SAAS/pC,EAAGlD,GAC3BA,EAAIrE,KAAKqxC,WACTrxC,KAAKqxC,SAAWhtC,GAGpB,IAAIstC,EAAK,EAAuBC,EAAiB,IAANvtC,EAAU,EAAI1D,KAAK+D,KAAK,KAAqBL,EAExF,GAAIkD,EAAEgR,SAAStW,OAAS,EAAG,CAEvB,IAAK,IAAIS,EAAI,EAAG4J,EAAM/E,EAAEgR,SAAStW,OAAQS,EAAI4J,EAAK5J,IAAK,CACnD,IAAI0Y,EAAQ7T,EAAEgR,SAAS7V,GACvBivC,GAAM3xC,KAAKsxC,sBAAsBl2B,EAAO/W,EAAI,EAChD,CACAstC,EAAKhxC,KAAK+I,IAAIkoC,EAAUD,EAC5B,MAEIA,EAAKC,EAIT,OADArqC,EAAEsqC,YAAcF,EACTA,CACX,EACAG,aAAc,SAASvqC,GACnB,IAAmB7E,EAAfqvC,EAAY,EAGhB,GAAIxqC,EAAEkR,QAAQxW,OAAS,EACnB,KAAM,8BAEV,IAAIa,EAAIyE,EAAEkR,QAAQ,GAClB,GAAI3V,EAAG,CACH,IAAIkvC,EAAK,IAAIzuC,EAAMT,EAAEE,EAAGF,EAAEG,GACtBgvC,EAAK,IAAI1uC,EAAMgE,EAAEvE,EAAGuE,EAAEtE,GAC1B8uC,EAAY/xC,KAAKkyC,eAAevxC,KAAK2D,MAAM0tC,EAAG/uC,EAAIgvC,EAAGhvC,EAAG+uC,EAAGhvC,EAAIivC,EAAGjvC,GACtE,CAEA,IAAI01B,EAAQnxB,EAAEgR,SAAStW,OACvB,GAAc,IAAVy2B,EACA,OAAO,KAGX,IAAI/pB,EAAQ,GACRuxB,EAAM,GAEV,IAAKx9B,EAAI,EAAGA,EAAIg2B,IAASh2B,EAAG,CACxB,IAAIkC,EAAI2C,EAAEgR,SAAS7V,GACfmqC,EAAI,IAAItpC,EAAMqB,EAAE5B,EAAG4B,EAAE3B,GACzBi9B,EAAIx9B,GAAKA,EACTiM,EAAMjM,GAAK1C,KAAKkyC,gBAAgBH,EAAYpxC,KAAK2D,MAAMuoC,EAAE5pC,EAAI4pC,EAAE5pC,EAAG4pC,EAAE7pC,EAAI6pC,EAAE7pC,GAC9E,CAEAxC,EAAM4G,OAAOuH,EAAOuxB,GACpB,IAAIiS,EAAM,GACN55B,EAAWhR,EAAEgR,SACjB,IAAK7V,EAAI,EAAGA,EAAIg2B,IAASh2B,EACrByvC,EAAIpvC,KAAKwV,EAAS2nB,EAAIx9B,KAG1B,OAAOyvC,CACX,EAEAD,eAAgB,SAASvjC,GACrB,KAAOA,EAAkB,EAAVhO,KAAK6D,IAChBmK,GAAS,EAAIhO,KAAK6D,GAEtB,KAAOmK,EAAQ,GACXA,GAAmB,EAAVhO,KAAK6D,GAElB,OAAOmK,CACX,EACA4iC,aAAc,SAASr5B,EAAMkL,EAAQ+tB,EAAYC,GAM7C,IALA,IAAIgB,EAAahB,EAAWD,EACxBkB,EAAiBD,EAAa,EAC9BE,EAAep6B,EAAK25B,YACpBU,EAAW,EACXC,EAASxyC,KAAK8xC,aAAa55B,GACtBxV,EAAI,EAAG4J,EAAMkmC,EAAOvwC,OAAQS,EAAI4J,EAAK5J,IAAK,CAC/C,IAAI+vC,EAAYD,EAAO9vC,GACnBgwC,EAAKD,EACLE,EAAqBD,EAAGb,YAAcS,EACtCG,EAAUl6B,SAAStW,OAAS,GAC5BjC,KAAKuxC,aAAakB,EACdrvB,EAASpjB,KAAKyjB,QAAQ+mB,iBACtB2G,EAAcoB,EAAWH,EACzBjB,GAAeoB,EAAWI,GAAsBP,GAGxDpyC,KAAK4yC,iBAAiBH,EAAWrvB,EAAQ+tB,EAAcoB,EAAWH,EAAeO,EAAqBN,GACtGK,EAAG/jC,MAAQgkC,EAAqBP,EAChCG,GAAYI,CAChB,CACJ,EACAC,iBAAkB,SAAS16B,EAAMkL,EAAQzU,GACrCuJ,EAAKlV,EAAIhD,KAAKmK,OAAOnH,EAAKogB,EAASziB,KAAKkH,IAAI8G,GAC5CuJ,EAAKjV,EAAIjD,KAAKmK,OAAOlH,EAAKmgB,EAASziB,KAAKsS,IAAItE,GAC5CuJ,EAAK26B,kBAAoB,IAAIhmC,EAAKqL,EAAKlV,EAAGkV,EAAKjV,EAAGiV,EAAKhL,MAAOgL,EAAKjL,OACvE,EAQAojC,qBAAsB,SAASn4B,EAAM46B,EAAWC,GAC5C,IAAIC,EAAgB96B,EAAK84B,cACzBhxC,KAAK8iB,MAAM9D,oBAAoB9G,GAAM,SAAS3Q,GAC1CA,EAAEypC,cAAgB8B,CACtB,IACKC,IACD76B,EAAK84B,cAAgBgC,EAE7B,EASA1C,kBAAmB,SAASp4B,EAAMse,EAAQuc,EAAcrB,GAChDlxC,EAAMO,YAAY2wC,KAClBA,EAAiB,GAErB,IAAIuB,EAAa/6B,EAAKg7B,eAClBxB,EAAiB,GAEjB1xC,KAAK8iB,MAAM9H,aAAa9C,GAGxBlY,KAAK8iB,MAAM9D,oBACP9G,GAAM,SAAS9U,GACPA,EAAE+X,OAASu2B,EAAiB,IAC5BtuC,EAAE8vC,eAAiB1c,EAE3B,MAIJx2B,KAAK8iB,MAAM9D,oBAAoB9G,GAAM,SAAS9U,GAC1CA,EAAE8vC,eAAiB1c,CACvB,IAGKuc,IACD76B,EAAKg7B,eAAiBD,GAGlC,EAQAzC,QAAS,SAASt4B,EAAMi7B,GACpB,IAAkB/vC,EAAd8W,EAAI,EAAGhR,EAAI,EACXvC,EAAS,IAAImJ,EAAK,EAAG,GACzB,IAAKoI,EACD,KAAM,GAEV,IAAI3T,EAAI2T,EAAKP,gBAAgBC,SACzBw7B,EAAa7uC,EAAE2I,MACfmmC,EAAc9uC,EAAE0I,OACpB,GAA4B,IAAxBiL,EAAKO,QAAQxW,OACb,KAAM,+BAGV,IAAI2iB,EAAS1M,EAAKO,QAAQ,GAK1B,GAJ2B,cAAvBP,EAAK84B,gBACL94B,EAAK84B,cAAgBpsB,EAAOosB,eAG5BxwC,EAAMwB,QAAQkW,EAAKK,UACnB5R,EAAS,IAAImJ,EACTnP,KAAKC,IAAIwyC,GAAclK,EAAU,GAAKkK,EACtCzyC,KAAKC,IAAIyyC,GAAenK,EAAU,GAAKmK,QAE1C,GAA6B,IAAzBn7B,EAAKK,SAAStW,OAAc,CACjC,OAAQiW,EAAK84B,eACT,IAAK,SACD5tC,EAAIpD,KAAKwwC,QAAQt4B,EAAKK,SAAS,GAAI46B,GACnCj5B,EAAIk5B,EAAcpzC,KAAKyjB,QAAQ+mB,iBAAmB7pC,KAAKkH,IAAIqQ,EAAKo7B,eAAkBlwC,EAAE8J,MACpFhE,EAAImqC,EAAc1yC,KAAKC,IAAIZ,KAAKyjB,QAAQ+mB,iBAAmB7pC,KAAKsS,IAAIiF,EAAKo7B,gBAAkBlwC,EAAE6J,OAC7F,MACJ,IAAK,OACL,IAAK,QACD,OAAQiL,EAAKg7B,gBAET,IAAK,uBAGL,IAAK,0BACD,MAEJ,IAAK,aAEDh5B,EAAIk5B,GADJhwC,EAAIpD,KAAKwwC,QAAQt4B,EAAKK,SAAS,GAAI46B,IAChBjmC,MAAQlN,KAAKyjB,QAAQomB,2BACxC3gC,EAAImqC,EAAcrzC,KAAKyjB,QAAQmmB,4BAA8BxmC,EAAE6J,OAC/D,MAEJ,IAAK,UACD7J,EAAIpD,KAAKwwC,QAAQt4B,EAAKK,SAAS,GAAI46B,GACnCj5B,EAAIk5B,EAAapzC,KAAKyjB,QAAQimB,qBAAuBtmC,EAAE8J,MACvDhE,EAAIvI,KAAK+I,IAAI2pC,EAAajwC,EAAE6J,QAC5B,MAEJ,QACI,KAAM,0DAEd,MACJ,IAAK,KACL,IAAK,OACD,OAAQiL,EAAKg7B,gBAET,IAAK,uBACL,IAAK,0BACD,MAEJ,IAAK,aACD9vC,EAAIpD,KAAKwwC,QAAQt4B,EAAKK,SAAS,GAAI46B,GACnCj5B,EAAIvZ,KAAK+I,IAAI0pC,EAAYhwC,EAAE8J,MAAQlN,KAAKyjB,QAAQomB,4BAChD3gC,EAAImqC,EAAcrzC,KAAKyjB,QAAQmmB,4BAA8BxmC,EAAE6J,OAC/D,MAEJ,IAAK,UACD7J,EAAIpD,KAAKwwC,QAAQt4B,EAAKK,SAAS,GAAI46B,GACnCjqC,EAAImqC,EAAcrzC,KAAKyjB,QAAQkmB,mBAAqBvmC,EAAE6J,OACtDiN,EAAIvZ,KAAK+I,IAAI0pC,EAAYhwC,EAAE8J,OAC3B,MAEJ,QACI,KAAM,wDAEd,MACJ,QACI,KAAM,mDAGdvG,EAAS,IAAImJ,EAAKoK,EAAGhR,EACzB,KACK,CACD,IAAIxG,EAAG+vC,EACP,OAAQv6B,EAAK84B,eACT,IAAK,OACL,IAAK,QACD,OAAQ94B,EAAKg7B,gBAET,IAAK,uBACL,IAAK,0BACD,MAEJ,IAAK,aAGD,IAFAh5B,EAAIk5B,EACJlqC,EAAImqC,EAAcrzC,KAAKyjB,QAAQmmB,4BAC1BlnC,EAAI,EAAGA,EAAIwV,EAAKK,SAAStW,OAAQS,IAClC+vC,EAAYv6B,EAAKK,SAAS7V,GAC1BU,EAAIpD,KAAKwwC,QAAQiC,EAAWU,GAC5Bj5B,EAAIvZ,KAAK+I,IAAIwQ,EAAG9W,EAAE8J,MAAQlN,KAAKyjB,QAAQomB,4BACvC3gC,GAAK9F,EAAE6J,OAASjN,KAAKyjB,QAAQqmB,6BAGjC5gC,GAAKlJ,KAAKyjB,QAAQqmB,6BAClB,MAEJ,IAAK,UAGD,IAFA5vB,EAAIk5B,EACJlqC,EAAI,EACCxG,EAAI,EAAGA,EAAIwV,EAAKK,SAAStW,OAAQS,IAClC+vC,EAAYv6B,EAAKK,SAAS7V,GAC1BU,EAAIpD,KAAKwwC,QAAQiC,EAAWU,GAC5Bj5B,EAAIvZ,KAAK+I,IAAIwQ,EAAGk5B,EAAapzC,KAAKyjB,QAAQimB,qBAAuBtmC,EAAE8J,OACnEhE,GAAK9F,EAAE6J,OAASjN,KAAKyjB,QAAQkmB,mBAEjCzgC,GAAKlJ,KAAKyjB,QAAQkmB,mBAClB,MAEJ,QACI,KAAM,yDAGd,MACJ,IAAK,KACL,IAAK,OAED,OAAQzxB,EAAKg7B,gBAET,IAAK,uBACL,IAAK,0BACD,MAEJ,IAAK,aAGD,IAFAh5B,EAAIk5B,EACJlqC,EAAImqC,EAAcrzC,KAAKyjB,QAAQmmB,4BAC1BlnC,EAAI,EAAGA,EAAIwV,EAAKK,SAAStW,OAAQS,IAClC+vC,EAAYv6B,EAAKK,SAAS7V,GAC1BU,EAAIpD,KAAKwwC,QAAQiC,EAAWU,GAC5Bj5B,EAAIvZ,KAAK+I,IAAIwQ,EAAG9W,EAAE8J,MAAQlN,KAAKyjB,QAAQomB,4BACvC3gC,GAAK9F,EAAE6J,OAASjN,KAAKyjB,QAAQqmB,6BAGjC5gC,GAAKlJ,KAAKyjB,QAAQqmB,6BAClB,MAEJ,IAAK,UAGD,IAFA5vB,EAAI,EACJhR,EAAI,EACCxG,EAAI,EAAGA,EAAIwV,EAAKK,SAAStW,OAAQS,IAClC+vC,EAAYv6B,EAAKK,SAAS7V,GAE1BwX,IADA9W,EAAIpD,KAAKwwC,QAAQiC,EAAWU,IACrBjmC,MAAQlN,KAAKyjB,QAAQimB,qBAC5BxgC,EAAIvI,KAAK+I,IAAIR,EAAG9F,EAAE6J,OAASjN,KAAKyjB,QAAQkmB,mBAAqB0J,GAGjEn5B,GAAKla,KAAKyjB,QAAQimB,qBAClB,MAEJ,QACI,KAAM,wDAGd,MACJ,QACI,KAAM,mDAGd/iC,EAAS,IAAImJ,EAAKoK,EAAGhR,EACzB,CAIA,OAFAgP,EAAKq7B,YAAc5yC,KAAK+D,KAAMwV,EAAIA,EAAI,EAAMhR,EAAIA,EAAI,GACpDgP,EAAKpI,KAAOnJ,EACLA,CACX,EACA+pC,QAAS,SAASnpC,EAAGzE,GACjB,IAAIJ,EAAG8wC,EAAWt7B,EAAMu7B,EAShBzwC,EAAGC,EACHywC,EAV+BnvC,EAAIgD,EAAEoQ,gBAAgBC,SACzDw7B,EAAa7uC,EAAE2I,MACfmmC,EAAc9uC,EAAE0I,OACpB,GAAIzM,EAAMwB,QAAQuF,EAAEgR,UAChBhR,EAAEvE,EAAIF,EAAEE,EACRuE,EAAEtE,EAAIH,EAAEG,EACRsE,EAAEsrC,kBAAoB,IAAIhmC,EAAK/J,EAAEE,EAAGF,EAAEG,EAAGmwC,EAAYC,QAKrD,OAAQ9rC,EAAEypC,eACN,IAAK,OACD,OAAQzpC,EAAE2rC,gBACN,IAAK,uBACL,IAAK,0BACD,MAEJ,IAAK,aAMD,IALAQ,EAAe5wC,EACfyE,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QACpDhK,EAAIH,EAAEG,EAAIowC,EAAcrzC,KAAKyjB,QAAQmmB,4BAChClnC,EAAI,EAAGA,EAAIwV,EAAKK,SAAStW,OAAQS,IAClCwV,EAAOA,EAAKK,SAAS7V,GACrBM,EAAI0wC,EAAa1wC,EAAIkV,EAAKP,gBAAgBzK,MAAQlN,KAAKyjB,QAAQomB,2BAC/D2J,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBvwC,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQqmB,6BAEzC,MAEJ,IAAK,UAOD,IANA4J,EAAe,IAAInwC,EAAMT,EAAEE,EAAIuE,EAAEuI,KAAK5C,MAAQkmC,EAAYtwC,EAAEG,GAAMsE,EAAEuI,KAAK7C,OAASomC,GAAe,GACjG9rC,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QACpDjK,EAAI0wC,EAAa1wC,EAAIhD,KAAKyjB,QAAQimB,qBAClCzmC,EAAIH,EAAEG,EACDP,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClB8wC,EAAK,IAAIjwC,EAAMP,EAAIkV,EAAKpI,KAAK5C,MAAOjK,GACpCjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBvwC,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQkmB,mBAEzC,MAEJ,QACI,KAAM,4BAGd,MACJ,IAAK,QACD,OAAQpiC,EAAE2rC,gBACN,IAAK,uBACL,IAAK,0BACD,MAEJ,IAAK,aASD,IARAQ,EAAe5wC,EACfyE,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QACpDjK,EAAIF,EAAEE,EAAIowC,EAAapzC,KAAKyjB,QAAQomB,2BAGpC5mC,EAAIH,EAAEG,EAAIowC,EAAcrzC,KAAKyjB,QAAQmmB,4BAChClnC,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClB8wC,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBvwC,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQqmB,6BAGzC,MAEJ,IAAK,UAOD,IANA4J,EAAe,IAAInwC,EAAMT,EAAEE,EAAGF,EAAEG,GAAMsE,EAAEuI,KAAK7C,OAASomC,GAAe,GACrE9rC,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QACpDjK,EAAIF,EAAEE,EAAIowC,EAAapzC,KAAKyjB,QAAQimB,qBACpCzmC,EAAIH,EAAEG,EACDP,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClB8wC,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBvwC,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQkmB,mBAEzC,MAEJ,QACI,KAAM,4BAGd,MACJ,IAAK,KAKD,GAJA+J,EAAe,IAAInwC,EAAMT,EAAEE,GAAMuE,EAAEuI,KAAK5C,MAAQkmC,GAAc,EAAItwC,EAAEG,EAAIsE,EAAEuI,KAAK7C,OAASomC,GACxF9rC,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QAChDtM,KAAKC,IAAI8yC,EAAa1wC,EAAIF,EAAEE,GAAKkmC,EAAS,CAG1C,IAFAuK,EAAgB,EAEX/wC,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAE/B+wC,GADQlsC,EAAEgR,SAAS7V,GACIoN,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,qBAErD+J,GAAiBzzC,KAAKyjB,QAAQimB,qBAC9B1mC,EAAIF,EAAEE,GAAMowC,EAAaK,GAAiB,CAC9C,MAEIzwC,EAAIF,EAAEE,EAGV,IAAKN,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClBO,EAAIywC,EAAazwC,EAAIjD,KAAKyjB,QAAQkmB,mBAAqBzxB,EAAKpI,KAAK7C,OACjEumC,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBxwC,GAAKkV,EAAKpI,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,qBAExC,MAEJ,IAAK,OAED,OAAQniC,EAAE2rC,gBACN,IAAK,uBACL,IAAK,0BACD,MACJ,IAAK,aAOD,IANAQ,EAAe5wC,EACfyE,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QACpDjK,EAAIF,EAAEE,EAAIhD,KAAKyjB,QAAQomB,2BACvB5mC,EAAIH,EAAEG,EAAIowC,EAAcrzC,KAAKyjB,QAAQmmB,4BAChClnC,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClB8wC,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBvwC,GAAKiV,EAAKpI,KAAK7C,OAASjN,KAAKyjB,QAAQqmB,6BAEzC,MAEJ,IAAK,UAKD,GAJA4J,EAAe,IAAInwC,EAAMT,EAAEE,GAAMuE,EAAEuI,KAAK5C,MAAQkmC,GAAc,EAAItwC,EAAEG,GACpEsE,EAAEvE,EAAI0wC,EAAa1wC,EACnBuE,EAAEtE,EAAIywC,EAAazwC,EACnBsE,EAAEsrC,kBAAoB,IAAIhmC,EAAKtF,EAAEvE,EAAGuE,EAAEtE,EAAGsE,EAAE2F,MAAO3F,EAAE0F,QAChDtM,KAAKC,IAAI8yC,EAAa1wC,EAAIF,EAAEE,GAAKkmC,EAAS,CAG1C,IAFAuK,EAAgB,EAEX/wC,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAE/B+wC,GADQlsC,EAAEgR,SAAS7V,GACIoN,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,qBAGrD+J,GAAiBzzC,KAAKyjB,QAAQimB,qBAC9B1mC,EAAIF,EAAEE,GAAMowC,EAAaK,GAAiB,CAC9C,MAEIzwC,EAAIF,EAAEE,EAGV,IAAKN,EAAI,EAAGA,EAAI6E,EAAEgR,SAAStW,OAAQS,IAC/BwV,EAAO3Q,EAAEgR,SAAS7V,GAClBO,EAAIywC,EAAazwC,EAAIjD,KAAKyjB,QAAQkmB,mBAAqB0J,EACvDG,EAAK,IAAIjwC,EAAMP,EAAGC,GAClBjD,KAAK0wC,QAAQx4B,EAAMs7B,GACnBxwC,GAAKkV,EAAKpI,KAAK5C,MAAQlN,KAAKyjB,QAAQimB,qBAExC,MAEJ,QACI,KAAM,4BAEd,MAEJ,IAAK,OACD,MAEJ,QACI,KAAM,4BAGtB,EACAyG,aAAc,WACV,GAAKnwC,KAAKgF,SAINxE,EAAMwB,QAAQhC,KAAKgF,OAAOuT,UAA9B,CAIA,IAIIo7B,EAAQC,EAAMC,EAAQC,EAJtBnyC,EAAO3B,KAAKyjB,QAAQ6lB,QACpB9oC,EAAMO,YAAYY,KAClBA,EAAO,QAGX,IAAI4W,EAAWvY,KAAKgF,OAAOuT,SAC3B,OAAQ5W,EAAK8P,eACT,IAAK,SACL,IAAK,aACDzR,KAAKixC,mBACL,MAEJ,IAAK,oBACL,IAAK,UACD0C,EAAS3zC,KAAKgF,OAAOuT,SAEe,IAAhCvY,KAAKgF,OAAOuT,SAAStW,OACrBjC,KAAK2wC,YAAYgD,IAIjBG,EAAYv7B,EAAStW,OAAS,EAC9B2xC,EAAO3qC,EAAKjJ,KAAKgF,OAAOuT,UAAU,SAAShR,GACvC,OAAO/G,EAAMwF,QAAQuS,EAAUhR,GAAKusC,CACxC,IACAD,EAAS5qC,EAAKjJ,KAAKgF,OAAOuT,UAAU,SAAShR,GACzC,OAAO/G,EAAMwF,QAAQuS,EAAUhR,IAAMusC,CACzC,IAEA9zC,KAAKowC,WAAWwD,GAChB5zC,KAAK2wC,YAAYkD,IAErB,MAEJ,IAAK,kBACDF,EAAS3zC,KAAKgF,OAAOuT,SAEe,IAAhCvY,KAAKgF,OAAOuT,SAAStW,OACrBjC,KAAK8wC,WAAW6C,IAIhBG,EAAYv7B,EAAStW,OAAS,EAC9B2xC,EAAO3qC,EAAKjJ,KAAKgF,OAAOuT,UAAU,SAAShR,GACvC,OAAO/G,EAAMwF,QAAQuS,EAAUhR,GAAKusC,CACxC,IACAD,EAAS5qC,EAAKjJ,KAAKgF,OAAOuT,UAAU,SAAShR,GACzC,OAAO/G,EAAMwF,QAAQuS,EAAUhR,IAAMusC,CACzC,IACA9zC,KAAK4wC,SAASgD,GACd5zC,KAAK8wC,WAAW+C,IAEpB,MAEJ,IAAK,QACD7zC,KAAK2wC,YAAY3wC,KAAKgF,OAAOuT,UAC7B,MAEJ,IAAK,OACDvY,KAAKowC,WAAWpwC,KAAKgF,OAAOuT,UAC5B,MAEJ,IAAK,KACL,IAAK,SACDvY,KAAK4wC,SAAS5wC,KAAKgF,OAAOuT,UAC1B,MAEJ,IAAK,OACL,IAAK,MACDvY,KAAK8wC,WAAW9wC,KAAKgF,OAAOuT,UAC5B,MAEJ,IAAK,UACL,IAAK,cACD,GAAIvY,KAAKyjB,QAAQswB,sBAAwB,EACrC,KAAM,mDAEV/zC,KAAKyxC,YAAYzxC,KAAKgF,OAAOuT,SAAUvY,KAAKyjB,QAAQswB,uBA/E5D,CAsFJ,IAOAC,EAAa5K,EAAWphC,OAAO,CAC/BC,KAAM,SAAS9H,GAGX,GADAipC,EAAWjzB,GAAGlO,KAAK5G,KADRrB,MAEPQ,EAAMO,YAAYZ,GAClB,KAAM,wBAEVH,KAAKG,QAAUA,CACnB,EAKAq2B,OAAQ,SAAS/S,GAEbzjB,KAAK8rC,gBAAgBroB,GAGrB,IAAIwwB,EAAU,IAAIlI,EAA0B/rC,KAAKG,SAMjDH,KAAK8iB,MAAQmxB,EAAQvH,UAErB,IAAIgC,EAAe1uC,KAAKk0C,mBAIxB,OAAO,IAAI/zC,EAAQwuC,YAAY3uC,KAAKG,QAASuuC,EACjD,EAEAwF,iBAAkB,WACd,IAAIl0C,KAAK8iB,MAAM9gB,UAAf,CAKA,IAAI4Z,EAAa5b,KAAK8iB,MAAMvH,yBAC5B,IAAI/a,EAAMwB,QAAQ4Z,GAAlB,CAOA,IAHA,IAAI4a,EAAS,IAAIyZ,EAAoBjwC,KAAKyjB,SACtCnB,EAAQ,GAEH5f,EAAI,EAAGA,EAAIkZ,EAAW3Z,OAAQS,IAAK,CACxC,IAAIkd,EAAYhE,EAAWlZ,GAEvBwtC,EAAYlwC,KAAKm0C,QAAQv0B,GAC7B,IAAKswB,EACD,KAAM,oDAEV,IAAI70B,EAAO60B,EAAU70B,KACjBc,EAAO+zB,EAAU/zB,KACrBqa,EAAOA,OAAOra,EAAMd,GAEpBiH,EAAMvf,KAAKoZ,EACf,CAEA,OAAOnc,KAAK+qC,qBAAqBzoB,EAnBjC,CANA,CA2BJ,EAQA6xB,QAAS,SAASrxB,GACd,IAAIzH,EAAO,KACX,GAAIrb,KAAKyjB,QAAQ8lB,OAASvpC,KAAKyjB,QAAQ8lB,MAAMtnC,OAAS,EAClD,IAAK,IAAIS,EAAI,EAAG4J,EAAMwW,EAAMpI,MAAMzY,OAAQS,EAAI4J,EAAK5J,IAE/C,IADA,IAAIwV,EAAO4K,EAAMpI,MAAMhY,GACdqI,EAAI,EAAGA,EAAI/K,KAAKyjB,QAAQ8lB,MAAMtnC,OAAQ8I,IAAK,CAEhD,GADqB/K,KAAKyjB,QAAQ8lB,MAAMx+B,KACjBmN,EAAKP,gBAAiB,CACzC0D,EAAOnD,EACP,KACJ,CACJ,CAGR,IAAKmD,KAEDA,EAAOyH,EAAMzH,QAGT,KAAM,sCAGd,OAAOrb,KAAKo0C,eAAetxB,EAAOzH,EACtC,EAEA+4B,eAAgB,SAAStxB,EAAOzH,GAE5B,IAAIc,EAAO2G,EAAM5G,gBAAgBb,GACjC,OAAI7a,EAAMO,YAAYob,IAASA,EAAKna,UACzB,KAEJ,CACHma,KAAMA,EACNd,KAAMc,EAAKd,KAEnB,IAQAg5B,EAAgBjL,EAAWphC,OAAO,CAClCC,KAAM,SAAS9H,GAGX,GADAipC,EAAWjzB,GAAGlO,KAAK5G,KADRrB,MAEPQ,EAAMO,YAAYZ,GAClB,KAAM,4BAEVH,KAAKG,QAAUA,CACnB,EAEAq2B,OAAQ,SAAS/S,GAEbzjB,KAAK8rC,gBAAgBroB,GAErB,IACIX,EADU,IAAIipB,EAA0B/rC,KAAKG,SAC7BusC,QAAQjpB,GAC5B,IAAIX,EAAM9gB,UAAV,CAIA,IAAI4Z,EAAakH,EAAMvH,yBACvB,IAAI/a,EAAMwB,QAAQ4Z,GAAlB,CAGA,IAAK,IAAIlZ,EAAI,EAAGA,EAAIkZ,EAAW3Z,OAAQS,IAAK,CACxC,IAAIkd,EAAYhE,EAAWlZ,GAC3B1C,KAAKskB,YAAY1E,EAAW6D,EAChC,CACA,IAAIirB,EAAe1uC,KAAK+qC,qBAAqBnvB,GAC7C,OAAO,IAAIzb,EAAQwuC,YAAY3uC,KAAKG,QAASuuC,EAN7C,CALA,CAaJ,EAMA4F,uBAAwB,WACpB,IAAK,IAAItpC,EAAI,EAAGA,EAAIhL,KAAK8iB,MAAMpI,MAAMzY,OAAQ+I,IAAK,CAC9C,IAAIkN,EAAOlY,KAAK8iB,MAAMpI,MAAM1P,GAC5BkN,EAAKq8B,OAAS,EACdr8B,EAAKs8B,oBAAsB,EAC3Bt8B,EAAKu8B,kBAAoB,EAEzBv8B,EAAKH,WAAY,EAEjBG,EAAKw8B,YAAc,EACnBx8B,EAAKy8B,YAAc,EAEnBz8B,EAAK08B,iBAAmB,EACxB18B,EAAK28B,mBAAqB,EAE1B38B,EAAK48B,aAAe,CACxB,CACJ,EACAC,SAAU,SAASjyB,GACf,IAAkBpgB,EAAGmqC,EAAGz0B,EAKpB48B,EAAal+B,EAAM3O,EALnB6O,EAAU,GAGVi+B,EAAW,IAAIj/B,EACfk/B,EAAa,EAUjB,IAPA10C,EAAM+E,QAAQud,EAAMpI,OAAO,SAASxC,GACH,IAAzBA,EAAKT,SAASxV,SACdgzC,EAAS//B,IAAIgD,EAAM,GACnBlB,EAAQjU,KAAKmV,GAErB,IAEOlB,EAAQ/U,OAAS,GAEpB,IADA6U,EAAOE,EAAQm+B,QACVzyC,EAAI,EAAGA,EAAIoU,EAAKU,SAASvV,OAAQS,IAElCyF,GADAiQ,EAAOtB,EAAKU,SAAS9U,IACPyF,OAGV6sC,EADAC,EAAS9/B,YAAYhN,GACPxH,KAAK+I,IAAIurC,EAASjgC,IAAI8B,GAAQ,EAAGm+B,EAASjgC,IAAI7M,IAE9C8sC,EAASjgC,IAAI8B,GAAQ,EAEvCm+B,EAAS//B,IAAI/M,EAAQ6sC,GACjBA,EAAcE,IACdA,EAAaF,GAGZ9uC,EAAS8Q,EAAS7O,IACnB6O,EAAQjU,KAAKoF,GAKzB,IA2BIosC,EA3BAa,EAAcH,EAASx+B,OAE3B2+B,EAAY9tC,MAAK,SAASoF,EAAI2oC,GAC1B,IAAIC,EAAUL,EAASjgC,IAAItI,GACvB6oC,EAAUN,EAASjgC,IAAIqgC,GAC3B,OAAO70C,EAAMqE,KAAK0wC,EAAUD,EAChC,IAEA,IAAK,IAAI/tC,EAAI,EAAGA,EAAI6tC,EAAYnzC,SAAUsF,EAAG,CACzC,IAAI2Q,EAAOk9B,EAAY7tC,GACnBiuC,EAAWhhC,OAAOC,UAEtB,GAA6B,IAAzByD,EAAKV,SAASvV,OAAlB,CAIA,IAAK4qC,EAAI,EAAGA,EAAI30B,EAAKV,SAASvV,SAAU4qC,EACpCz0B,EAAOF,EAAKV,SAASq1B,GACrB2I,EAAW70C,KAAKgJ,IAAI6rC,EAAUP,EAASjgC,IAAIoD,EAAKjQ,SAGhDqtC,EAAW,GACXP,EAAS//B,IAAIgD,EAAMs9B,EAAW,EARlC,CAUJ,CAIA,IAFAx1C,KAAKy1C,OAAS,GAET/yC,EAAI,EAAGA,EAAIwyC,EAAa,EAAGxyC,KAC5B6xC,EAAQ,IACFmB,QAAU,CAAC,EACjB11C,KAAKy1C,OAAO1yC,KAAKwxC,GASrB,IANAU,EAAS1vC,SAAQ,SAAS2S,EAAMq8B,GAC5Br8B,EAAKq8B,MAAQA,EACbv0C,KAAKy1C,OAAOlB,GAAOxxC,KAAKmV,EAC5B,GAAGlY,MAGE6sC,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,OAAQ4qC,IAEhC,IADA0H,EAAQv0C,KAAKy1C,OAAO5I,GACfnqC,EAAI,EAAGA,EAAI6xC,EAAMtyC,OAAQS,IAC1B6xC,EAAM7xC,GAAGoyC,aAAepyC,CAGpC,EAIA4hB,YAAa,SAASxB,EAAOW,GACzB,GAAIjjB,EAAMO,YAAY+hB,GAClB,KAAM,0DAENtiB,EAAMK,UAAU4iB,IAChBzjB,KAAK8rC,gBAAgBroB,GAEzBzjB,KAAK8iB,MAAQA,EAGbA,EAAMrH,iBAGN,IAAIiG,EAAgBoB,EAAM3C,cAG1BngB,KAAKs0C,yBAELt0C,KAAK+0C,SAASjyB,EAAOW,GAErBzjB,KAAK21C,WAEL31C,KAAK41C,qBAEL51C,KAAK61C,aAEL71C,KAAK81C,eAEL91C,KAAK+1C,oBAEL/1C,KAAKg2C,aAGLx1C,EAAM+E,QAAQmc,GAAe,SAASnP,GAC9BA,EAAE3P,QACF2P,EAAE3P,OAAOyH,SAEjB,GACJ,EAEA4rC,WAAY,SAAS7xC,EAAGmD,EAAG2uC,GACvB,IAAIrJ,EAAIzoC,EAAEmwC,MACN7xC,EAAI0B,EAAE+xC,WACVn2C,KAAKo2C,aAAavJ,GAAGnqC,GAAKwzC,CAC9B,EAEAG,WAAY,SAASjyC,EAAGmD,GAQpB,IAPA,IAAI+uC,EAAO,EACPC,EAAKnyC,EAAE+xC,WACPK,EAAKjvC,EAAE4uC,WACPtJ,EAAIzoC,EAAEmwC,MACN5qC,EAAMhJ,KAAKgJ,IAAI4sC,EAAIC,GACnB9sC,EAAM/I,KAAK+I,IAAI6sC,EAAIC,GAEdxrC,EAAIrB,EAAKqB,EAAItB,IAAOsB,EACzBsrC,GAAQt2C,KAAKo2C,aAAavJ,GAAG7hC,GAEjC,OAAOsrC,CACX,EAEAG,iBAAkB,SAASC,GAEvB,IADA,IAAgCnvC,EAAG2Q,EAA/By+B,EAAU,IAAI3gC,EACTpR,EAAI,EAAGA,EAAI5E,KAAKy1C,OAAOxzC,SAAU2C,EAAG,CACzC,IAAIgyC,EAAaF,EAAY9xC,GAC7B,GAAKgyC,EAAL,CAIA,IAAKrvC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAC/B2Q,EAAO0+B,EAAWrvC,GACbovC,EAAQxhC,YAAY+C,IACrBlY,KAAK62C,UAAU3+B,EAAMy+B,EAAS/xC,GAKtC,IAAIP,EAAImQ,OAAOsiC,kBACf,IAAKvvC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAAK,CACpC2Q,EAAO0+B,EAAWrvC,GAClB,IAAIwvC,EAAe/2C,KAAK+2C,aAAa7+B,GACjC6+B,GAAgB/2C,KAAKg3C,cAAchiC,IAAI+hC,KAAkBnyC,IACzDP,EAAI1D,KAAKgJ,IAAItF,EAAGsyC,EAAQ3hC,IAAI+hC,GAAgBJ,EAAQ3hC,IAAIkD,GAAQlY,KAAKq2C,WAAWn+B,EAAM6+B,IAE9F,CACA,GAAI1yC,IAAMmQ,OAAOsiC,kBAAmB,CAChC,IAAIG,EAAI,GACR,IAAK1vC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAAK,CACpC2Q,EAAO0+B,EAAWrvC,GAClB,IAAI6R,EAAY,GAChB5Y,EAAMgH,SAAS4R,EAAWpZ,KAAKk3C,QAAQliC,IAAIkD,IAC3C1X,EAAMgH,SAAS4R,EAAWpZ,KAAKm3C,UAAUniC,IAAIkD,IAE7C,IAAK,IAAI3F,EAAI,EAAGA,EAAI6G,EAAUnX,OAAQsQ,IAAK,CACvC,IAAI6kC,EAAWh+B,EAAU7G,GACrBvS,KAAKg3C,cAAchiC,IAAIoiC,GAAYxyC,GACnCqyC,EAAEl0C,KAAK4zC,EAAQ3hC,IAAIoiC,GAAYT,EAAQ3hC,IAAIkD,GAEnD,CACJ,CACA++B,EAAE3vC,OAEEjD,EADa,IAAb4yC,EAAEh1C,OACE,EAECg1C,EAAEh1C,OAAS,GAAM,EAClBg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,KAGvBg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,GAAK,GAAKg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,KAAO,CAE9E,CACA,IAAKsF,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAC/B2Q,EAAO0+B,EAAWrvC,GAClBovC,EAAQzhC,IAAIgD,EAAMy+B,EAAQ3hC,IAAIkD,GAAQ7T,EA9C1C,CAgDJ,CACA,OAAOsyC,CACX,EAEAW,iBAAkB,SAASC,GAEvB,IADA,IAAiChwC,EAAG2Q,EAAhCs/B,EAAW,IAAIxhC,EACVpR,EAAI,EAAGA,EAAI5E,KAAKy1C,OAAOxzC,SAAU2C,EAAG,CACzC,IAAIgyC,EAAaW,EAAa3yC,GAC9B,GAAKgyC,EAAL,CAIA,IAAKrvC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAC/B2Q,EAAO0+B,EAAWrvC,GACbiwC,EAASriC,YAAY+C,IACtBlY,KAAKy3C,WAAWv/B,EAAMs/B,EAAU5yC,GAKxC,IAAIP,EAAImQ,OAAOkjC,kBACf,IAAKnwC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAAK,CACpC2Q,EAAO0+B,EAAWrvC,GAClB,IAAIowC,EAAc33C,KAAK23C,YAAYz/B,GAC/By/B,GAAe33C,KAAK43C,eAAe5iC,IAAI2iC,KAAiB/yC,IACxDP,EAAI1D,KAAK+I,IAAIrF,EAAGmzC,EAASxiC,IAAI2iC,GAAeH,EAASxiC,IAAIkD,GAAQlY,KAAKq2C,WAAWsB,EAAaz/B,IAEtG,CACA,GAAI7T,IAAMmQ,OAAOkjC,kBAAmB,CAChC,IAAIT,EAAI,GACR,IAAK1vC,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAAK,CACpC2Q,EAAO0+B,EAAWrvC,GAClB,IAAI6R,EAAY,GAChB5Y,EAAMgH,SAAS4R,EAAWpZ,KAAKk3C,QAAQliC,IAAIkD,IAC3C1X,EAAMgH,SAAS4R,EAAWpZ,KAAKm3C,UAAUniC,IAAIkD,IAE7C,IAAK,IAAI3F,EAAI,EAAGA,EAAI6G,EAAUnX,OAAQsQ,IAAK,CACvC,IAAI6kC,EAAWh+B,EAAU7G,GACrBvS,KAAK43C,eAAe5iC,IAAIoiC,GAAYxyC,GACpCqyC,EAAEl0C,KAAKy0C,EAASxiC,IAAIkD,GAAQs/B,EAASxiC,IAAIoiC,GAEjD,CACJ,CACAH,EAAE3vC,OAEEjD,EADa,IAAb4yC,EAAEh1C,OACE,EAECg1C,EAAEh1C,OAAS,GAAM,EAClBg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,KAGvBg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,GAAK,GAAKg1C,EAAEj3C,KAAKq3C,OAAOJ,EAAEh1C,OAAQ,KAAO,CAE9E,CACA,IAAKsF,EAAI,EAAGA,EAAIqvC,EAAW30C,OAAQsF,IAC/B2Q,EAAO0+B,EAAWrvC,GAClBiwC,EAAStiC,IAAIgD,EAAMs/B,EAASxiC,IAAIkD,GAAQ7T,EA9C5C,CAgDJ,CACA,OAAOmzC,CACX,EAEAK,aAAc,WACV,IAAIC,EAAW,CAAEt1C,MAAO,MACpBmE,EAAS3G,KAAK+3C,eAAeD,EAAU,GAE3C,OADA93C,KAAKg3C,cAAgBc,EAASt1C,MACvBmE,CACX,EAEAqxC,cAAe,WACX,IAAIC,EAAY,CAAEz1C,MAAO,MACrBmE,EAAS3G,KAAK+3C,eAAeE,GAAY,GAE7C,OADAj4C,KAAK43C,eAAiBK,EAAUz1C,MACzBmE,CACX,EAEAoxC,eAAgB,SAASG,EAAU7zC,GAI/B,IAHA,IAAI8zC,EAAc,EACdC,EAAOF,EAAS11C,MAAQ,IAAIwT,EAEvB62B,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,SAAU4qC,EAAG,CACzCsL,EAActL,EAGd,IADA,IAAI0H,EAAQv0C,KAAKy1C,OAAO5I,GACftlC,EAAU,IAANlD,EAAU,EAAIkwC,EAAMtyC,OAAS,EAAGsF,GAAK,GAAKA,EAAIgtC,EAAMtyC,OAAQsF,GAAKlD,EAAG,CAC7E,IAAI6T,EAAOq8B,EAAMhtC,GACjB,GAAK6wC,EAAKjjC,YAAY+C,GAWlBigC,EAAcC,EAAKpjC,IAAIkD,QATvB,GADAkgC,EAAKljC,IAAIgD,EAAMigC,GACXjgC,EAAKH,UAEL,IADA,IAAIsgC,EAASr4C,KAAKs4C,aAAapgC,GACtBuJ,EAAK,EAAGA,EAAK42B,EAAOp2C,OAAQwf,IAAM,CACvC,IAAI82B,EAAQF,EAAO52B,GACnB22B,EAAKljC,IAAIqjC,EAAOJ,EACpB,CAMZ,CACJ,CAGA,IADA,IAAIK,EAAQ,GACH91C,EAAI,EAAGA,EAAI1C,KAAKy1C,OAAOxzC,OAAQS,IACpC81C,EAAMz1C,KAAK,MASf,OAPAq1C,EAAK7yC,SAAQ,SAAS2S,EAAMugC,GACE,OAAtBD,EAAMC,KACND,EAAMC,GAAc,IAExBD,EAAMC,GAAY11C,KAAKmV,EAC3B,IAEOsgC,CACX,EACAE,kBAAmB,WACf,MAA8C,OAAvC14C,KAAKyjB,QAAQ6lB,QAAQ73B,eAAiE,SAAvCzR,KAAKyjB,QAAQ6lB,QAAQ73B,eAAmE,aAAvCzR,KAAKyjB,QAAQ6lB,QAAQ73B,aAChI,EAEAknC,oBAAqB,WACjB,MAA8C,UAAvC34C,KAAKyjB,QAAQ6lB,QAAQ73B,eAAoE,SAAvCzR,KAAKyjB,QAAQ6lB,QAAQ73B,eAAmE,eAAvCzR,KAAKyjB,QAAQ6lB,QAAQ73B,aACnI,EACAmnC,oBAAqB,WAEjB,MAA8C,UAAvC54C,KAAKyjB,QAAQ6lB,QAAQ73B,eAAoE,SAAvCzR,KAAKyjB,QAAQ6lB,QAAQ73B,aAClF,EACAskC,kBAAmB,WACf,IAAIrzC,EAAGmqC,EAAG30B,EAAMq8B,EAAOhtC,EAAG2S,EAE1B,IAAK2yB,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,SAAU4qC,GAClC0H,EAAQv0C,KAAKy1C,OAAO5I,IACdvlC,KAAKtH,KAAK64C,uBAIpB,IADA74C,KAAKo2C,aAAe,GACfvJ,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,SAAU4qC,EAGlC,IAFA0H,EAAQv0C,KAAKy1C,OAAO5I,GACpB7sC,KAAKo2C,aAAavJ,GAAK,GAClBtlC,EAAI,EAAGA,EAAIgtC,EAAMtyC,SAAUsF,GAC5B2Q,EAAOq8B,EAAMhtC,IACR4uC,WAAa5uC,EAClBvH,KAAKo2C,aAAavJ,GAAGtlC,GAAKvH,KAAKyjB,QAAQ+lB,aACnCjiC,EAAIgtC,EAAMtyC,OAAS,IACfjC,KAAK04C,oBACL14C,KAAKo2C,aAAavJ,GAAGtlC,KAAO2Q,EAAKhL,MAAQqnC,EAAMhtC,EAAI,GAAG2F,OAAS,EAG/DlN,KAAKo2C,aAAavJ,GAAGtlC,KAAO2Q,EAAKjL,OAASsnC,EAAMhtC,EAAI,GAAG0F,QAAU,GAkCjF,IA5BAjN,KAAKm3C,UAAY,IAAInhC,EACrBhW,KAAKk3C,QAAU,IAAIlhC,EACnBxV,EAAM+E,QAAQvF,KAAK8iB,MAAMpI,OAAO,SAASxC,GACrClY,KAAKm3C,UAAUjiC,IAAIgD,EAAM,IACzBlY,KAAKk3C,QAAQhiC,IAAIgD,EAAM,GAC3B,GAAGlY,MACHQ,EAAM+E,QAAQvF,KAAK8iB,MAAMvL,OAAO,SAASa,GACrC,IAAIjO,EAASiO,EAAKhW,OACd02C,EAAO1gC,EAAKjQ,OACZ4oC,EAAO,KAAMF,EAAK,KAClB1mC,EAAOoqC,MAAQuE,EAAKvE,OACpBxD,EAAO34B,EAAKhW,OACZyuC,EAAKz4B,EAAKjQ,SAGV0oC,EAAKz4B,EAAKhW,OACV2uC,EAAO34B,EAAKjQ,QAEhBnI,KAAKm3C,UAAUniC,IAAI67B,GAAI9tC,KAAKguC,GAC5B/wC,KAAKk3C,QAAQliC,IAAI+7B,GAAMhuC,KAAK8tC,EAChC,GAAG7wC,MACHA,KAAKm3C,UAAU5gC,cAAa,SAASlQ,GACjCA,EAAKiB,KAAKtH,KAAK64C,sBACnB,GAAG74C,MACHA,KAAKk3C,QAAQ3gC,cAAa,SAASlQ,GAC/BA,EAAKiB,KAAKtH,KAAK64C,sBACnB,GAAG74C,MAEE6sC,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,OAAS,IAAK4qC,EAEtC,IADA0H,EAAQv0C,KAAKy1C,OAAO5I,GACf3yB,EAAI,EAAGA,EAAIq6B,EAAMtyC,OAAS,EAAGiY,IAAK,CACnC,IAAI6+B,EAAcxE,EAAMr6B,GACxB,GAAK6+B,EAAYhhC,UAAjB,CAIA,IAAIihC,EAAWh5C,KAAKm3C,UAAUniC,IAAI+jC,GAAa,GAC/C,GAAKC,EAASjhC,UAId,IAAKxQ,EAAI2S,EAAI,EAAG3S,EAAIgtC,EAAMtyC,SAAUsF,EAEhC,IADA2Q,EAAOq8B,EAAMhtC,IACHwQ,UAAV,CAIA,IAAIkhC,EAAWj5C,KAAKm3C,UAAUniC,IAAIkD,GAAM,GACxC,GAAK+gC,EAASlhC,WAIVihC,EAASlE,aAAemE,EAASnE,aAAc,CAC/C,IAAIltC,EAAMoxC,EAASlE,aACnBkE,EAASlE,aAAemE,EAASnE,aACjCmE,EAASnE,aAAeltC,EACxB,IAAI2uC,EAAKyC,EAAS7C,WACdK,EAAKyC,EAAS9C,WAClBn2C,KAAKy1C,OAAO5I,EAAI,GAAG0J,GAAM0C,EACzBj5C,KAAKy1C,OAAO5I,EAAI,GAAG2J,GAAMwC,EACzBA,EAAS7C,WAAaK,EACtByC,EAAS9C,WAAaI,CAC1B,CAjBA,CAXJ,CA8BJ,CAIJ,IAAIG,EAAc12C,KAAK63C,eACnBN,EAAev3C,KAAKg4C,gBAGpBrB,EAAU32C,KAAKy2C,iBAAiBC,GAChCc,EAAWx3C,KAAKs3C,iBAAiBC,GACjCv0C,EAAI,IAAIgT,EACZxV,EAAM+E,QAAQvF,KAAK8iB,MAAMpI,OAAO,SAASxC,GACrClV,EAAEkS,IAAIgD,GAAOy+B,EAAQ3hC,IAAIkD,GAAQs/B,EAASxiC,IAAIkD,IAAS,EAC3D,IAGA,IAAIghC,EAAQ,IAAIljC,EACZmjC,EAAS,IAAInjC,EACjB,IAAK62B,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,SAAU4qC,EAAG,CACrC0H,EAAQv0C,KAAKy1C,OAAO5I,GACpB,IAAIuM,GAAiB,EACrB,IAAK7xC,EAAI,EAAGA,EAAIgtC,EAAMtyC,SAAUsF,EAC5B2Q,EAAOq8B,EAAMhtC,GACb2xC,EAAMhkC,IAAIgD,EAAM,GAChBihC,EAAOjkC,IAAIgD,GAAM,GACbA,EAAKH,aACkB,IAAnBqhC,GAGKA,IAAkB7xC,EAAI,IAK3B2xC,EAAMhkC,IAAIq/B,EAAM6E,GAAgB,GAC5Bp2C,EAAEgS,IAAIkD,GAAQlV,EAAEgS,IAAIu/B,EAAM6E,MAAoBp5C,KAAKq2C,WAAW9B,EAAM6E,GAAgBlhC,GACpFihC,EAAOjkC,IAAIq/B,EAAM6E,IAAgB,GAGjCD,EAAOjkC,IAAIq/B,EAAM6E,IAAgB,IAZrCA,EAAgB7xC,EAkBhC,CAEA/G,EAAM+E,QADW,CAAC,GAAI,IACI,SAASlB,GAE/B,IADA,IACSwoC,EADS,IAANxoC,EAAU,EAAIrE,KAAKy1C,OAAOxzC,OAAS,EAC3B4qC,GAAK,GAAKA,EAAI7sC,KAAKy1C,OAAOxzC,OAAQ4qC,GAAKxoC,EAAG,CAC1D,IAAIkwC,EAAQv0C,KAAKy1C,OAAO5I,GACpBwM,EAAoBr5C,KAAKs5C,kBAAkB/E,GAC3CgF,EAAe,KACfC,EAAW,KACf,IAA2B,IAAvBH,EAGA,IAFAE,EAAehF,EAAM8E,GACrBG,EAAW,GACN92C,EAAI,EAAGA,EAAI22C,EAAmB32C,IAC/B82C,EAASz2C,KAAKwxC,EAAM7xC,SAIxB62C,EAAe,KACfC,EAAWjF,EAEf,GAAIiF,EAASv3C,OAAS,EAAG,CAErB,IADAjC,KAAKy5C,WAAWz2C,EAAG,KAAMu2C,EAAcl1C,EAAGm1C,GACrC92C,EAAI,EAAGA,EAAI82C,EAASv3C,OAAS,IAAKS,EACnC1C,KAAKi2C,WAAWuD,EAAS92C,GAAI82C,EAAS92C,EAAI,GAAIM,EAAEgS,IAAIwkC,EAAS92C,EAAI,IAAMM,EAAEgS,IAAIwkC,EAAS92C,KAEtF62C,GACAv5C,KAAKi2C,WAAWuD,EAASA,EAASv3C,OAAS,GAAIs3C,EAAcv2C,EAAEgS,IAAIukC,GAAgBv2C,EAAEgS,IAAIwkC,EAASA,EAASv3C,OAAS,IAE5H,CAEA,KAAOs3C,GAAc,CACjB,IAAIG,EAAa15C,KAAK25C,gBAAgBpF,EAAOgF,GAC7C,GAAKG,GAcA,GAAIR,EAAMlkC,IAAIukC,KAAkBl1C,EAAG,CACpCg1C,EAAoBE,EAAapD,WACjC,IAAIyD,EAAkBF,EAAWvD,WAEjC,IADAqD,EAAW,GACN92C,EAAI22C,EAAoB,EAAG32C,EAAIk3C,EAAiBl3C,IACjD82C,EAASz2C,KAAKwxC,EAAM7xC,IAEpB82C,EAASv3C,OAAS,GAClBjC,KAAKy5C,WAAWz2C,EAAGu2C,EAAcG,EAAYr1C,EAAGm1C,GAEpDL,EAAOjkC,IAAIqkC,GAAc,EAC7B,MAzBiB,CAGb,IAFAF,EAAoBE,EAAapD,WACjCqD,EAAW,GACN92C,EAAI22C,EAAoB,EAAG32C,EAAI6xC,EAAMtyC,OAAQS,IAC9C82C,EAASz2C,KAAKwxC,EAAM7xC,IAExB,GAAI82C,EAASv3C,OAAS,EAAG,CAErB,IADAjC,KAAKy5C,WAAWz2C,EAAGu2C,EAAc,KAAMl1C,EAAGm1C,GACrC92C,EAAI,EAAGA,EAAI82C,EAASv3C,OAAS,IAAKS,EACnC1C,KAAKi2C,WAAWuD,EAAS92C,GAAI82C,EAAS92C,EAAI,GAAIM,EAAEgS,IAAIwkC,EAAS92C,EAAI,IAAMM,EAAEgS,IAAIwkC,EAAS92C,KAE1F1C,KAAKi2C,WAAWsD,EAAcC,EAAS,GAAIx2C,EAAEgS,IAAIwkC,EAAS,IAAMx2C,EAAEgS,IAAIukC,GAC1E,CACJ,CAaAA,EAAeG,CACnB,CACA15C,KAAK65C,iBAAiBhN,EAAGxoC,EAAG60C,EAAOC,EACvC,CACJ,GAAGn5C,MAGH,IACsCgL,EAAG8uC,EADrCC,EAAiB/5C,KAAK44C,sBAAwB,EAAI54C,KAAKy1C,OAAOxzC,OAAS,EASvE+3C,EAAiBh6C,KAAK44C,sBAAwB,GAAM,EAAGhtC,EAAS,EAKpE,SAASquC,EAAc1F,EAAOuF,GAE1B,IADA,IAAI7sC,EAASuH,OAAO0lC,UACX3yC,EAAI,EAAGA,EAAIgtC,EAAMtyC,SAAUsF,EAAG,CACnC,IAAI2Q,EAAOq8B,EAAMhtC,GAEb0F,EADA6sC,EAAIpB,oBACK/3C,KAAK+I,IAAIuD,EAAQiL,EAAKjL,QAGtBtM,KAAK+I,IAAIuD,EAAQiL,EAAKhL,MAEvC,CACA,OAAOD,CACX,CAEA,IAAKvK,EAAIq3C,EA3B6B/uC,EA2BUtI,GA3BPo3C,EA2BU95C,MA1BvC44C,sBACG5tC,EAAI8uC,EAAIrE,OAAOxzC,OAGf+I,GAAK,EAsBsCtI,GAAKs3C,EAAgB,CAE3E,IAAI/sC,EAASgtC,EADb1F,EAAQv0C,KAAKy1C,OAAO/yC,GACc1C,MAElC,IAAKuH,EAAI,EAAGA,EAAIgtC,EAAMtyC,SAAUsF,EAC5B2Q,EAAOq8B,EAAMhtC,GACTvH,KAAK04C,qBACLxgC,EAAKlV,EAAIA,EAAEgS,IAAIkD,GACfA,EAAKjV,EAAI2I,EAASqB,EAAS,IAG3BiL,EAAKlV,EAAI4I,EAASqB,EAAS,EAC3BiL,EAAKjV,EAAID,EAAEgS,IAAIkD,IAIvBtM,GAAU5L,KAAKyjB,QAAQ2mB,gBAAkBn9B,CAC7C,CACJ,EAEA4sC,iBAAkB,SAAShN,EAAGxoC,EAAG60C,EAAOC,GACpC,KAAItM,EAAIxoC,EAAI,GAAKwoC,EAAIxoC,GAAKrE,KAAKy1C,OAAOxzC,QAMtC,IAFA,IAAIk4C,EAAa,KAAMC,EAAmB,KACtC7F,EAAQv0C,KAAKy1C,OAAO5I,EAAIxoC,GACnBkD,EAAI,EAAGA,EAAIgtC,EAAMtyC,SAAUsF,EAAG,CACnC,IAAI8yC,EAAa9F,EAAMhtC,GACvB,GAAI8yC,EAAWtiC,UAAW,CACtB,IAAIuiC,EAAmBt6C,KAAKu6C,mBAAmBF,EAAYxN,GAC3D,GAAIyN,EAAiBviC,UAAW,CAC5B,GAAIoiC,EAAY,CAKZ,IAJA,IAAIr3C,EAAIq2C,EAAOnkC,IAAIolC,GACfI,EAASx6C,KAAKy1C,OAAO5I,GACrB0J,EAAK6D,EAAiBjE,WACtBK,EAAK8D,EAAiBnE,WACjBzzC,EAAI6zC,EAAK,EAAG7zC,EAAI8zC,IAAM9zC,EACvB83C,EAAO93C,GAAGqV,YACVjV,EAAIA,GAAKq2C,EAAOnkC,IAAIwlC,EAAO93C,KAGnC,GAAII,EAAG,CACHo2C,EAAMhkC,IAAIilC,EAAY91C,GAGtB,IAFA,IAAIo2C,EAAKN,EAAWhE,WAChBuE,EAAKL,EAAWlE,WACXprC,EAAI0vC,EAAK,EAAG1vC,EAAI2vC,IAAM3vC,EACvBwpC,EAAMxpC,GAAGgN,WACTmhC,EAAMhkC,IAAIq/B,EAAMxpC,GAAI1G,EAGhC,CACJ,CACA81C,EAAaE,EACbD,EAAmBE,CACvB,CACJ,CACJ,CACJ,EAEAC,mBAAoB,SAASriC,EAAM20B,GAC/B,IAAIuK,EAAWp3C,KAAKk3C,QAAQliC,IAAIkD,GAAM,GACtC,OAAIk/B,EAAS7C,QAAU1H,IAGvBuK,EAAWp3C,KAAKm3C,UAAUniC,IAAIkD,GAAM,IACvBq8B,QAAU1H,EAHZuK,EAMJ,IACX,EAEAqC,WAAY,SAASz2C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,GAKnD,GAJwB,IAApBA,EAASv3C,QACTjC,KAAK46C,gBAAgB53C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,EAAS,IAGhEA,EAASv3C,OAAS,EAAG,CACrB,IAAI4L,EAAI2rC,EAASv3C,OAAQ0b,EAAI3d,KAAKq3C,OAAOxpC,EAAG,GAC5C7N,KAAKy5C,WAAWz2C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,EAASlsC,MAAM,EAAGqQ,IACpE3d,KAAKy5C,WAAWz2C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,EAASlsC,MAAMqQ,IACjE3d,KAAK66C,iBAAiB73C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,EAC5D,CACJ,EAEAoB,gBAAiB,SAAS53C,EAAGu2C,EAAcG,EAAYiB,EAAKziC,GACxD,IAAIkB,GAAqB,IAATuhC,EAAa36C,KAAKm3C,UAAUniC,IAAIkD,GAAQlY,KAAKk3C,QAAQliC,IAAIkD,GAErE3Q,EAAI6R,EAAUnX,OACR,IAANsF,IACIA,EAAI,GAAM,EACVvE,EAAEkS,IAAIgD,EAAMlV,EAAEgS,IAAIoE,EAAUpZ,KAAKq3C,OAAO9vC,EAAG,MAG3CvE,EAAEkS,IAAIgD,GAAOlV,EAAEgS,IAAIoE,EAAUpZ,KAAKq3C,OAAO9vC,EAAG,GAAK,IAAMvE,EAAEgS,IAAIoE,EAAUpZ,KAAKq3C,OAAO9vC,EAAG,MAAQ,GAG9FgyC,GACAv2C,EAAEkS,IAAIgD,EAAMvX,KAAK+I,IAAI1G,EAAEgS,IAAIkD,GAAOlV,EAAEgS,IAAIukC,GAAgBv5C,KAAKq2C,WAAWkD,EAAcrhC,KAEtFwhC,GACA12C,EAAEkS,IAAIgD,EAAMvX,KAAKgJ,IAAI3G,EAAEgS,IAAIkD,GAAOlV,EAAEgS,IAAI0kC,GAAc15C,KAAKq2C,WAAWn+B,EAAMwhC,KAGxF,EAEAmB,iBAAkB,SAAS73C,EAAGu2C,EAAcG,EAAYiB,EAAKnB,GACzD,IAGmB92C,EAAGkC,EAAG2C,EAAG6R,EAAWg+B,EAAU0D,EAH7CjtC,EAAI2rC,EAASv3C,OAAQ0b,EAAI3d,KAAKq3C,OAAOxpC,EAAG,GAGxCktC,EAAW,GACf,IAAKr4C,EAAI,EAAGA,EAAIib,IAAKjb,EAAG,CAGpB,IAFAkC,EAAI,EACJwU,GAAqB,IAATuhC,EAAa36C,KAAKm3C,UAAUniC,IAAIwkC,EAAS92C,IAAM1C,KAAKk3C,QAAQliC,IAAIwkC,EAAS92C,IAChF6E,EAAI,EAAGA,EAAI6R,EAAUnX,SAAUsF,EAChC6vC,EAAWh+B,EAAU7R,GACjBvE,EAAEgS,IAAIoiC,IAAap0C,EAAEgS,IAAIwkC,EAAS92C,IAClCkC,KAGAA,IACAm2C,EAASh4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAIoiC,GAAYp3C,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,EAAI,IAAKta,EAAG,KAG/F03C,EAASh4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAIwkC,EAAS92C,IAAM1C,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,EAAI,IAAKta,EAAGuB,GAC9F,CACI20C,GACAwB,EAASh4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAIukC,GAAgBv5C,KAAKq2C,WAAWkD,EAAcC,EAAS77B,EAAI,IAAKta,EAAGmR,OAAOC,YAEvGsmC,EAASzzC,KAAKtH,KAAKg7C,6BAGnB,IAAIC,EAAY,GAChB,IAAKv4C,EAAIib,EAAGjb,EAAImL,IAAKnL,EAAG,CAGpB,IAFAkC,EAAI,EACJwU,GAAqB,IAATuhC,EAAa36C,KAAKm3C,UAAUniC,IAAIwkC,EAAS92C,IAAM1C,KAAKk3C,QAAQliC,IAAIwkC,EAAS92C,IAChF6E,EAAI,EAAGA,EAAI6R,EAAUnX,SAAUsF,EAChC6vC,EAAWh+B,EAAU7R,GACjBvE,EAAEgS,IAAIoiC,IAAap0C,EAAEgS,IAAIwkC,EAAS92C,IAClCkC,KAGAA,IACAq2C,EAAUl4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAIoiC,GAAYp3C,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,IAAKta,EAAG,KAG5F43C,EAAUl4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAIwkC,EAAS92C,IAAM1C,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,IAAKta,EAAGuB,GAC3F,CACI80C,GACAuB,EAAUl4C,KAAK,CAAEiI,EAAGhI,EAAEgS,IAAI0kC,GAAc15C,KAAKq2C,WAAWqD,EAAYF,EAAS77B,IAAKta,EAAGmR,OAAOC,YAEhGwmC,EAAU3zC,KAAKtH,KAAKk7C,4BAIpB,IAFA,IAAIC,EAAU,EAAGC,EAAW,EACxBh3C,EAAIpE,KAAKq2C,WAAWmD,EAAS77B,EAAI,GAAI67B,EAAS77B,IAC3C3a,EAAEgS,IAAIwkC,EAAS77B,IAAM3a,EAAEgS,IAAIwkC,EAAS77B,EAAI,IAAMvZ,GACjD,GAAI+2C,EAAUC,EAAU,CACpB,GAAwB,IAApBL,EAAS94C,OAAc,CACvBe,EAAEkS,IAAIskC,EAAS77B,EAAI,GAAI3a,EAAEgS,IAAIwkC,EAAS77B,IAAMvZ,GAC5C,KACJ,CAGI+2C,IADAL,EAAOC,EAAS5F,SACS9xC,EACzBL,EAAEkS,IAAIskC,EAAS77B,EAAI,GAAIm9B,EAAK9vC,GAC5BhI,EAAEkS,IAAIskC,EAAS77B,EAAI,GAAIhd,KAAK+I,IAAI1G,EAAEgS,IAAIwkC,EAAS77B,EAAI,IAAK3a,EAAEgS,IAAIwkC,EAAS77B,IAAMvZ,GAErF,KACK,CACD,GAAyB,IAArB62C,EAAUh5C,OAAc,CACxBe,EAAEkS,IAAIskC,EAAS77B,GAAI3a,EAAEgS,IAAIwkC,EAAS77B,EAAI,IAAMvZ,GAC5C,KACJ,CAGIg3C,IADAN,EAAOG,EAAU9F,SACU9xC,EAC3BL,EAAEkS,IAAIskC,EAAS77B,GAAIm9B,EAAK9vC,GACxBhI,EAAEkS,IAAIskC,EAAS77B,GAAIhd,KAAKgJ,IAAI3G,EAAEgS,IAAIwkC,EAAS77B,IAAK3a,EAAEgS,IAAIwkC,EAAS77B,EAAI,IAAMvZ,GAEjF,CAEJ,IAAK1B,EAAIib,EAAI,EAAGjb,GAAK,EAAGA,IACpBM,EAAEkS,IAAIskC,EAAS92C,GAAI/B,KAAKgJ,IAAI3G,EAAEgS,IAAIwkC,EAAS92C,IAAKM,EAAEgS,IAAIwkC,EAAS77B,EAAI,IAAM3d,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,EAAI,MAEvH,IAAKjb,EAAIib,EAAI,EAAGjb,EAAImL,EAAGnL,IACnBM,EAAEkS,IAAIskC,EAAS92C,GAAI/B,KAAK+I,IAAI1G,EAAEgS,IAAIwkC,EAAS92C,IAAKM,EAAEgS,IAAIwkC,EAAS77B,IAAM3d,KAAKq2C,WAAWmD,EAAS92C,GAAI82C,EAAS77B,KAEnH,EAEAk5B,UAAW,SAAS3+B,EAAMy+B,EAAS0E,GAC/B,IAAIzzC,EAAM4M,OAAOkjC,kBACjBl3C,EAAM+E,QAAQvF,KAAKs7C,cAAcpjC,IAAO,SAAS7U,GAC7C,IAAIs0C,EAAc33C,KAAK23C,YAAYt0C,GAC/Bs0C,GAAe33C,KAAKg3C,cAAchiC,IAAI2iC,KAAiB33C,KAAKg3C,cAAchiC,IAAI3R,KACzEszC,EAAQxhC,YAAYwiC,IACrB33C,KAAK62C,UAAUc,EAAahB,EAAS0E,GAEzCzzC,EAAMjH,KAAK+I,IAAI9B,EAAK+uC,EAAQ3hC,IAAI2iC,GAAe33C,KAAKq2C,WAAWsB,EAAat0C,IAEpF,GAAGrD,MACC4H,IAAQ4M,OAAOkjC,oBACf9vC,EAAM,GAEVpH,EAAM+E,QAAQvF,KAAKs7C,cAAcpjC,IAAO,SAAS7U,GAC7CszC,EAAQzhC,IAAI7R,EAAGuE,EACnB,GACJ,EAEA6vC,WAAY,SAASv/B,EAAMs/B,EAAU+D,GACjC,IAAI3zC,EAAM4M,OAAOsiC,kBACjBt2C,EAAM+E,QAAQvF,KAAKs7C,cAAcpjC,IAAO,SAAS7U,GAC7C,IAAI0zC,EAAe/2C,KAAK+2C,aAAa1zC,GACjC0zC,GAAgB/2C,KAAK43C,eAAe5iC,IAAI+hC,KAAkB/2C,KAAK43C,eAAe5iC,IAAI3R,KAC7Em0C,EAASriC,YAAY4hC,IACtB/2C,KAAKy3C,WAAWV,EAAcS,EAAU+D,GAE5C3zC,EAAMjH,KAAKgJ,IAAI/B,EAAK4vC,EAASxiC,IAAI+hC,GAAgB/2C,KAAKq2C,WAAWhzC,EAAG0zC,IAE5E,GAAG/2C,MACC4H,IAAQ4M,OAAOsiC,oBACflvC,EAAM,GAEVpH,EAAM+E,QAAQvF,KAAKs7C,cAAcpjC,IAAO,SAAS7U,GAC7Cm0C,EAAStiC,IAAI7R,EAAGuE,EACpB,GACJ,EAEA+vC,YAAa,SAASz/B,GAClB,IAAIq8B,EAAQv0C,KAAKy1C,OAAOv9B,EAAKq8B,OACzB4B,EAAaj+B,EAAKi+B,WACtB,OAAsB,IAAfA,EAAmB,KAAO5B,EAAM4B,EAAa,EACxD,EAEAY,aAAc,SAAS7+B,GACnB,IAAIq8B,EAAQv0C,KAAKy1C,OAAOv9B,EAAKq8B,OACzB4B,EAAaj+B,EAAKi+B,WACtB,OAAOA,IAAe5B,EAAMtyC,OAAS,EAAI,KAAOsyC,EAAM4B,EAAa,EAEvE,EAEAmF,cAAe,SAASpjC,GACpB,OAAOA,EAAKH,UAAY/X,KAAKs4C,aAAapgC,GAAQ,CAACA,EACvD,EAEA49B,aAAc,WACV,IAAIpzC,EAAGmqC,EAAGrwB,EAAI+3B,EAAOr8B,EAErB,IAAK20B,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,OAAQ4qC,IAGhC,IAFA0H,EAAQv0C,KAAKy1C,OAAO5I,GAEfrwB,EAAK,EAAGA,EAAK+3B,EAAMtyC,OAAQua,KAC5BtE,EAAOq8B,EAAM/3B,IACRo4B,iBAAmB18B,EAAKu8B,kBAC7Bv8B,EAAK28B,mBAAqB38B,EAAKs8B,oBAQvC,IADA,IACSgH,EAAK,EAAGA,EADS,EACiBA,IAAM,CAC7C,IAAK94C,EAAI1C,KAAKy1C,OAAOxzC,OAAS,EAAGS,GAAK,EAAGA,IACrC1C,KAAKy7C,aAAY,EAAO/4C,GAG5B,IAAKA,EAAI,EAAGA,EAAI1C,KAAKy1C,OAAOxzC,OAAS,EAAGS,IACpC1C,KAAKy7C,aAAY,EAAM/4C,EAE/B,CAGA,IAAIg5C,EAAUlnC,OAAOC,UACrB,IAAKo4B,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,OAAQ4qC,IAGhC,IAFA0H,EAAQv0C,KAAKy1C,OAAO5I,GAEfrwB,EAAK,EAAGA,EAAK+3B,EAAMtyC,OAAQua,IAC5BtE,EAAOq8B,EAAM/3B,GACbk/B,EAAU/6C,KAAKgJ,IAAI+xC,EAASxjC,EAAK48B,cAIzC,GAAI4G,EAAU,EACV,IAAK7O,EAAI,EAAGA,EAAI7sC,KAAKy1C,OAAOxzC,OAAQ4qC,IAGhC,IAFA0H,EAAQv0C,KAAKy1C,OAAO5I,GAEfrwB,EAAK,EAAGA,EAAK+3B,EAAMtyC,OAAQua,KAC5BtE,EAAOq8B,EAAM/3B,IACRs4B,aAAe58B,EAAK48B,aAAe4G,CAIxD,EAQAD,YAAa,SAAS1K,EAAMwD,GACxB,IAAIoH,EACAC,EAGAA,EADA7K,EACa/wC,KAAKy1C,OAAOkG,EAAcpH,EAAQ,GAGlCv0C,KAAKy1C,OAAOkG,EAAcpH,EAAQ,GAKnD,IADA,IAAI/B,EAAS,GACJjrC,EAAI,EAAGA,EAAIq0C,EAAW35C,OAAQsF,IACnCirC,EAAOzvC,KAAK64C,EAAWr0C,IAE3BirC,EAAOlrC,MAAK,SAAS2W,EAAIC,GACrB,IAAI29B,GAAc59B,EAAG22B,iBAAmB32B,EAAG42B,oBAAsB,EAC7DiH,GAAc59B,EAAG02B,iBAAmB12B,EAAG22B,oBAAsB,EAEjE,OAAIl0C,KAAKC,IAAIi7C,EAAaC,GAAc,KAC7B,EAEPD,EAAaC,EACN,GAEH,CACZ,IAGAt7C,EAAM+E,QAAQitC,GAAQ,SAASt6B,GAC3B,IAAI6jC,EAAc7jC,EAAK48B,aACnBkH,EAAiBh8C,KAAKi8C,eAAe/jC,GACrCgkC,GAAgBhkC,EAAK08B,iBAAmB18B,EAAK28B,oBAAsB,EAEvE,KAAIl0C,KAAKC,IAAIm7C,EAAcC,GAAkB,MAKzCr7C,KAAKC,IAAIm7C,EAAcC,GAAkB,OAK7C,GAAID,EAAcC,EAGd,KAAOD,EAAcC,GACZh8C,KAAKm8C,UAAUjkC,EAAM0jC,EAAYM,IAItCH,EAAc7jC,EAAK48B,kBAMvB,KAAOiH,EAAcC,GACZh8C,KAAKo8C,SAASlkC,EAAM0jC,EAAYM,IAIrCH,EAAc7jC,EAAK48B,YAG/B,GAAG90C,MAIC27C,EAAc,GACd37C,KAAKq8C,aAAaV,EAAc,GAEhCA,EAAc37C,KAAKy1C,OAAOxzC,OAAS,GACnCjC,KAAKs8C,WAAWX,EAAc,EAEtC,EAQAQ,UAAW,SAASjkC,EAAMq8B,EAAOgI,GAC7B,IAAI31C,EAAQpG,EAAMwF,QAAQuuC,EAAOr8B,GACjC,GAAItR,IAAU2tC,EAAMtyC,OAAS,EAGzB,OADAiW,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,EAGX,IAAI0H,EAAYjI,EAAM3tC,EAAQ,GAC1B61C,GAAqBD,EAAU5H,iBAAmB4H,EAAU3H,oBAAsB,EAGtF,OAAI2H,EAAU1H,aAAe58B,EAAK48B,aAAe,GAC7C58B,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,KAIP2H,EAAoBF,GACpB57C,KAAKC,IAAI67C,EAAoBF,GAAY,UAKzCv8C,KAAKm8C,UAAUK,EAAWjI,EAAOgI,KACjCrkC,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,GAIf,EAQAsH,SAAU,SAASlkC,EAAMq8B,EAAOgI,GAC5B,IAAI31C,EAAQpG,EAAMwF,QAAQuuC,EAAOr8B,GACjC,GAAc,IAAVtR,EAGA,OADAsR,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,EAGX,IAAI4H,EAAWnI,EAAM3tC,EAAQ,GACzB+1C,GAAoBD,EAAS9H,iBAAmB8H,EAAS7H,oBAAsB,EAGnF,OAAI6H,EAAS5H,aAAe58B,EAAK48B,aAAe,GAC5C58B,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,KAIP6H,EAAmBJ,GACnB57C,KAAKC,IAAI+7C,EAAmBJ,GAAY,UAKxCv8C,KAAKo8C,SAASM,EAAUnI,EAAOgI,KAC/BrkC,EAAK48B,aAAe58B,EAAK48B,aAAe,IACjC,GAIf,EAEA8H,eAAgB,SAAS1kC,EAAME,GAC3BpY,KAAK68C,cAAc3nC,IAAIgD,EAAME,GACxBpY,KAAK88C,cAAc3nC,YAAYiD,IAChCpY,KAAK88C,cAAc5nC,IAAIkD,EAAM,IAEjCpY,KAAK88C,cAAc9nC,IAAIoD,GAAMrV,KAAKmV,EACtC,EAEAogC,aAAc,SAASpgC,GACnB,OAAOlY,KAAK88C,cAAc9nC,IAAIhV,KAAK68C,cAAc7nC,IAAIkD,GACzD,EAKAy9B,SAAU,WACN31C,KAAK88C,cAAgB,IAAI9mC,EACzBhW,KAAK68C,cAAgB,IAAI7mC,EAEzB,IAAIu+B,EAAO3sC,EAAKwW,EAASlG,EAAMrK,EAAG6O,EAASha,EAAGmqC,EAAGt1B,EAAQvX,KAAK8iB,MAAMvL,MAAMjK,MAAM,GAC5EmoC,EAASz1C,KAAKy1C,OAEdsH,EAAuB,SAASC,EAASC,EAAW7kC,GACpDq9B,EAAOuH,GAAStH,QAAQuH,GAAaxH,EAAOuH,GAAStH,QAAQuH,IAAc,GAC3ExH,EAAOuH,GAAStH,QAAQuH,GAAWl6C,KAAKqV,EAC5C,EAEA,IAAKy0B,EAAI,EAAGA,EAAIt1B,EAAMtV,OAAQ4qC,IAAK,CAC/B,IAAIz0B,EAAOb,EAAMs1B,GACbqQ,EAAI9kC,EAAKhW,OACTiC,EAAI+T,EAAKjQ,OAETg1C,EAASD,EAAE3I,MACX6I,EAAS/4C,EAAEkwC,MACX8I,EAAOH,EAAEpI,aACTwI,EAAOj5C,EAAEywC,aAETjqC,GAAQyyC,EAAOD,GAAQ18C,KAAKC,IAAIw8C,EAASD,GAEzCr6C,EAAIo6C,EACR,GAAIC,EAASC,EAAS,EAAG,CACrB,IAAK16C,EAAIy6C,EAAS,EAAGz6C,EAAI06C,EAAQ16C,IAAK,CAmClC,KAlCA0b,EAAU,IAAI/G,GACNrU,EAAIk6C,EAAEl6C,EACdob,EAAQnb,EAAIi6C,EAAEj6C,EACdmb,EAAQlR,MAAQgwC,EAAEhwC,MAAQ,IAC1BkR,EAAQnR,OAASiwC,EAAEjwC,OAAS,KAG5BrF,GAAOlF,EAAI06C,GAAUvyC,EAAOwyC,IAD5B9I,EAAQkB,EAAO/yC,IAECT,SACZ2F,EAAM2sC,EAAMtyC,QAIZo7C,GAAQ5H,EAAO0H,GAAQl7C,OAAS,GAChCq7C,GAAQ7H,EAAO2H,GAAQn7C,OAAS,EAChC2F,EAAM2sC,EAAMtyC,OAIE,IAATo7C,GAAuB,IAATC,IACnB11C,EAAM,GAGVwW,EAAQm2B,MAAQ7xC,EAChB0b,EAAQs2B,YAAc,EACtBt2B,EAAQu2B,YAAc,EACtBv2B,EAAQq2B,kBAAoB,EAC5Br2B,EAAQo2B,oBAAsB,EAC9Bp2B,EAAQ02B,aAAeltC,EACvBwW,EAAQrG,WAAY,EAEpBvX,EAAMuG,OAAOwtC,EAAOn2B,EAASxW,GAGxBiG,EAAIjG,EAAM,EAAGiG,EAAI0mC,EAAMtyC,OAAQ4L,KAChCqK,EAAOq8B,EAAM1mC,IACRinC,aAAe58B,EAAK48B,aAAe,GAG5Cp4B,EAAU,IAAIrD,EAAKvW,EAAGsb,IACdm/B,iBAAmB,EAE3BR,EAAqBr6C,EAAI,EAAGA,EAAGga,GAE/B5Z,EAAIsb,EAGJpe,KAAK8iB,MAAMzG,SAAS+B,GACpBpe,KAAK8iB,MAAMnG,QAAQD,GAEnB0B,EAAQxX,MAAQ5G,KAAK8iB,MAAMpI,MAAMzY,OAAS,EAC1CjC,KAAK48C,eAAex+B,EAAShG,EACjC,CAGA2kC,EAAqBK,EAAS,EAAGA,EAAQ1gC,GACzCtE,EAAK2B,aAAajX,GAClBsV,EAAKmlC,iBAAmBJ,EAASC,EAAS,CAC9C,MAAO,GAAID,EAASC,GAAU,EAAG,CAC7B,IAAK16C,EAAIy6C,EAAS,EAAGz6C,EAAI06C,EAAQ16C,IAAK,CAoClC,KAnCA0b,EAAU,IAAI/G,GACNrU,EAAIk6C,EAAEl6C,EACdob,EAAQnb,EAAIi6C,EAAEj6C,EACdmb,EAAQlR,MAAQgwC,EAAEhwC,MAAQ,IAC1BkR,EAAQnR,OAASiwC,EAAEjwC,OAAS,KAG5BrF,GAAOlF,EAAIy6C,GAAUtyC,EAAOwyC,IAD5B9I,EAAQkB,EAAO/yC,IAECT,SACZ2F,EAAM2sC,EAAMtyC,QAIZo7C,GAAQ5H,EAAO0H,GAAQl7C,OAAS,GAChCq7C,GAAQ7H,EAAO2H,GAAQn7C,OAAS,EAChC2F,EAAM2sC,EAAMtyC,OAIE,IAATo7C,GAAuB,IAATC,IACnB11C,EAAM,GAGVwW,EAAQm2B,MAAQ7xC,EAChB0b,EAAQs2B,YAAc,EACtBt2B,EAAQu2B,YAAc,EACtBv2B,EAAQq2B,kBAAoB,EAC5Br2B,EAAQo2B,oBAAsB,EAC9Bp2B,EAAQ02B,aAAeltC,EACvBwW,EAAQrG,WAAY,EAEpBnQ,GAAOA,EACPpH,EAAMuG,OAAOwtC,EAAOn2B,EAASxW,GAGxBiG,EAAIjG,EAAM,EAAGiG,EAAI0mC,EAAMtyC,OAAQ4L,KAChCqK,EAAOq8B,EAAM1mC,IACRinC,aAAe58B,EAAK48B,aAAe,GAG5Cp4B,EAAU,IAAIrD,EAAKvW,EAAGsb,IACdm/B,iBAAmB,EAC3BR,EAAqBr6C,EAAI,EAAGA,EAAGga,GAE/B5Z,EAAIsb,EAGJpe,KAAK8iB,MAAMzG,SAAS+B,GACpBpe,KAAK8iB,MAAMnG,QAAQD,GAEnB0B,EAAQxX,MAAQ5G,KAAK8iB,MAAMpI,MAAMzY,OAAS,EAC1CjC,KAAK48C,eAAex+B,EAAShG,EACjC,CACA2kC,EAAqBK,EAAS,EAAGA,EAAQhlC,GAGzCA,EAAK2B,aAAajX,GAClBsV,EAAKmlC,iBAAmBH,EAASD,EAAS,CAC9C,MACIJ,EAAqBI,EAAQC,EAAQhlC,EAE7C,CACJ,EAMA49B,WAAY,WAER,IADA,IAAIwH,GAAQ,EACLA,GAAO,CACVA,GAAQ,EAER,IAAK,IAAI3Q,EAAI,EAAGA,EAAI7sC,KAAK8iB,MAAMvL,MAAMtV,OAAQ4qC,IAAK,CAC9C,IAAIz0B,EAAOpY,KAAK8iB,MAAMvL,MAAMs1B,GAC5B,GAAKz0B,EAAKmlC,iBAAV,CAIA,IAAI36C,EAAS,GAGbA,EAAOoe,QAAQ,CAAEhe,EAAGoV,EAAKjQ,OAAOnF,EAAGC,EAAGmV,EAAKjQ,OAAOlF,IAClDL,EAAOoe,QAAQ,CAAEhe,EAAGoV,EAAKhW,OAAOY,EAAGC,EAAGmV,EAAKhW,OAAOa,IAKlD,IAFA,IAAIwJ,EAAO2L,EACPmlC,EAAmBnlC,EAAKmlC,iBACnBl5C,EAAI,EAAGA,EAAIk5C,EAAkBl5C,IAAK,CACvC,IACIo5C,EADOhxC,EAAKrK,OACIqV,SAAS,GAE7B7U,EAAOoe,QAAQ,CAAEhe,EAAGy6C,EAASr7C,OAAOY,EAAGC,EAAGw6C,EAASr7C,OAAOa,IAE1DwJ,EAAOgxC,CACX,CAGArlC,EAAK2B,aAAatN,EAAKrK,QAGvBgW,EAAKmlC,iBAAmB,EAGpB36C,EAAOX,OAAS,GAEhBW,EAAOqD,OAAO,EAAG,GACjBrD,EAAOqD,OAAOrD,EAAOX,OAAS,GAC9BmW,EAAKxV,OAASA,GAGdwV,EAAKxV,OAAS,GAMlB46C,GAAQ,EACR,KAzCA,CA0CJ,CACJ,CACJ,EAKA5H,mBAAoB,WAKhB,IAJA,IAAgBlzC,EAAZg7C,GAAS,EAETC,EAAO,EAEM,IAAVD,KACCC,IAJY,IAGA,CAOhB,IAFAD,EAAQ,EAEHh7C,EAAI1C,KAAKy1C,OAAOxzC,OAAS,EAAGS,GAAK,EAAGA,IACrCg7C,GAAS19C,KAAK49C,wBAAuB,EAAOl7C,GAGhD,IAAKA,EAAI,EAAGA,EAAI1C,KAAKy1C,OAAOxzC,OAAS,EAAGS,IACpCg7C,GAAS19C,KAAK49C,wBAAuB,EAAMl7C,EAEnD,CACJ,EAEA45C,WAAY,SAAS/H,GACjB,GAAc,IAAVA,EAAJ,CAIA,IAAqC7xC,EAAGmqC,EAAGz0B,EAAvCwjC,EAAa57C,KAAKy1C,OAAOlB,GACzByI,EAAU,IAAI/lC,EACdxK,EAAOzM,KAAKy1C,OAAOlB,EAAQ,GAC/B,IAAK7xC,EAAI,EAAGA,EAAI+J,EAAKxK,OAAQS,IACzBs6C,EAAQloC,IAAIrI,EAAK/J,IAGrB,IAAKA,EAAI,EAAGA,EAAIk5C,EAAW35C,OAAQS,IAAK,CACpC,IAAIwV,EAAO0jC,EAAWl5C,GAGlBm7C,EAAM,EACNC,EAAQ,EAEZ,IAAKjR,EAAI,EAAGA,EAAI30B,EAAKT,SAASxV,OAAQ4qC,IAClCz0B,EAAOF,EAAKT,SAASo1B,GACjBmQ,EAAQ92C,SAASkS,EAAKhW,UACtB07C,IACAD,GAAOzlC,EAAKhW,OAAO0yC,cAI3B,IAAKjI,EAAI,EAAGA,EAAI30B,EAAKV,SAASvV,OAAQ4qC,IAClCz0B,EAAOF,EAAKV,SAASq1B,GACjBmQ,EAAQ92C,SAASkS,EAAKjQ,UACtB21C,IACAD,GAAOzlC,EAAKjQ,OAAO2sC,cAIvBgJ,EAAQ,GACR5lC,EAAKw8B,YAAcmJ,EAAMC,EACzB5lC,EAAKu8B,kBAAoBqJ,IAGzB5lC,EAAKw8B,YAAchyC,EACnBwV,EAAKu8B,kBAAoB,EAEjC,CAxCA,CAyCJ,EAEA4H,aAAc,SAAS9H,GACnB,GAAIA,IAAUv0C,KAAKy1C,OAAOxzC,OAAS,EAAnC,CAIA,IAAqCS,EAAImqC,EAAGz0B,EAAxCwjC,EAAa57C,KAAKy1C,OAAOlB,GACzB0I,EAAY,IAAIhmC,EAChBxK,EAAOzM,KAAKy1C,OAAOlB,EAAQ,GAC/B,IAAK7xC,EAAI,EAAGA,EAAI+J,EAAKxK,OAAQS,IACzBu6C,EAAUnoC,IAAIrI,EAAK/J,IAGvB,IAAKA,EAAI,EAAGA,EAAIk5C,EAAW35C,OAAQS,IAAK,CACpC,IAAIwV,EAAO0jC,EAAWl5C,GAGlBm7C,EAAM,EACNC,EAAQ,EAEZ,IAAKjR,EAAI,EAAGA,EAAI30B,EAAKT,SAASxV,OAAQ4qC,IAClCz0B,EAAOF,EAAKT,SAASo1B,GACjBoQ,EAAU/2C,SAASkS,EAAKhW,UACxB07C,IACAD,GAAOzlC,EAAKhW,OAAO0yC,cAI3B,IAAKjI,EAAI,EAAGA,EAAI30B,EAAKV,SAASvV,OAAQ4qC,IAClCz0B,EAAOF,EAAKV,SAASq1B,GACjBoQ,EAAU/2C,SAASkS,EAAKjQ,UACxB21C,IACAD,GAAOzlC,EAAKjQ,OAAO2sC,cAIvBgJ,EAAQ,GACR5lC,EAAKy8B,YAAckJ,EAAMC,EACzB5lC,EAAKs8B,oBAAsBsJ,IAG3B5lC,EAAKy8B,YAAcjyC,EACnBwV,EAAKs8B,oBAAsB,EAEnC,CAxCA,CAyCJ,EAUAoJ,uBAAwB,SAAS7M,EAAMwD,GACnC,IAAIoH,EACAC,EAUAmC,GAPAnC,EADA7K,EACa/wC,KAAKy1C,OAAOkG,EAAcpH,EAAQ,GAGlCv0C,KAAKy1C,OAAOkG,EAAcpH,EAAQ,IAIxBjnC,MAAM,GAG7ByjC,EACA/wC,KAAKs8C,WAAWX,GAGhB37C,KAAKq8C,aAAaV,GAGtB,IAAIxjC,EAAOnY,KAEX47C,EAAWt0C,MAAK,SAAS2W,EAAIC,GACzB,IAAI8/B,EAAe7lC,EAAK8jC,eAAeh+B,GACnCggC,EAAe9lC,EAAK8jC,eAAe/9B,GACvC,GAAIvd,KAAKC,IAAIo9C,EAAeC,GAAgB,KAExC,OAAIhgC,EAAGjF,WAAakF,EAAGlF,SACZb,EAAK+lC,eAAejgC,EAAIC,GAE1BD,EAAGjF,SAAWkF,EAAGlF,SACf,GAEH,EAEZ,IAAImlC,EAA+C,KAA/BF,EAAeD,GACnC,OAAIG,EAAe,GACP,EAEHA,EAAe,EACb,EAEJhmC,EAAK+lC,eAAejgC,EAAIC,EACnC,IAGA,IAAIxb,EAAGg7C,EAAQ,EACf,IAAKh7C,EAAI,EAAGA,EAAIk5C,EAAW35C,OAAQS,IAC3Bk5C,EAAWl5C,KAAOq7C,EAAUr7C,IAC5Bg7C,IAIR,GAAIA,EAAQ,EAAG,CAEX,IAAIU,EAAQ,EACZ,IAAK17C,EAAI,EAAGA,EAAIk5C,EAAW35C,OAAQS,IAAK,CACzBk5C,EAAWl5C,GACjBoyC,aAAesJ,GACxB,CACJ,CAEA,OAAOV,CACX,EAOA7H,WAAY,WAIR,IAHA,IAAIwI,EAAgBr+C,KAAKyjB,QAAQ4mB,kBAC7BsT,EAAO,IAGHA,IAASU,IAOb,IAHA,IAAIC,EAAaX,EAAO,GAAK,EACzBY,EAAcZ,EAAO,GAAM,EAEtB9Q,EAAKyR,EAAY,EAAIt+C,KAAKy1C,OAAOxzC,OAAS,EAC9Cq8C,EAAYzR,GAAK7sC,KAAKy1C,OAAOxzC,OAAS,EAAI4qC,GAAK,EAAGA,GAAMyR,EAAY,GAAK,EAAI,CAS9E,IARA,IAAI/J,EAAQv0C,KAAKy1C,OAAO5I,GACpB2R,GAAa,EAIbC,GAAgB,EAChBC,EAAe,EAEVn3C,EAAI,EAAGA,EAAIgtC,EAAMtyC,OAAS,EAAGsF,IAAK,CAEvC,IAAIspC,EAAK,EACLE,EAAO,EACP4N,EAAc,EAsBlB,GApBIF,GACU,IAAN5R,IACAgE,EAAK7wC,KAAK4+C,mCAAmC/R,EAAI,EAAGA,IAEpDA,IAAM7sC,KAAKy1C,OAAOxzC,OAAS,IAC3B8uC,EAAO/wC,KAAK4+C,mCAAmC/R,EAAGA,EAAI,IAEtDyR,EACAzN,GAAM,EAGNE,GAAQ,EAGZ4N,EAAc9N,EAAKE,GAGnB4N,EAAcD,EAGE,IAAhBC,EAAJ,CAKA,IAAIE,EAAQtK,EAAMhtC,GACdu3C,EAAQvK,EAAMhtC,EAAI,GAElBw3C,EAAeF,EAAM/J,aACrBkK,EAAeF,EAAMhK,aACzBP,EAAMhtC,GAAKu3C,EACXvK,EAAMhtC,EAAI,GAAKs3C,EACfA,EAAM/J,aAAekK,EACrBF,EAAMhK,aAAeiK,EAGrBlO,EAAK,EACK,IAANhE,IACAgE,EAAK7wC,KAAK4+C,mCAAmC/R,EAAI,EAAGA,IAExDkE,EAAO,EACHlE,IAAM7sC,KAAKy1C,OAAOxzC,OAAS,IAC3B8uC,EAAO/wC,KAAK4+C,mCAAmC/R,EAAGA,EAAI,IAEtDyR,EACAzN,GAAM,EAGNE,GAAQ,EAEZ,IAAIkO,EAAapO,EAAKE,GAGlBwN,EACSU,GAAcN,EAGdM,EAAaN,IAItBE,EAAQtK,EAAMhtC,GACdu3C,EAAQvK,EAAMhtC,EAAI,GAElBw3C,EAAeF,EAAM/J,aACrBkK,EAAeF,EAAMhK,aACrBP,EAAMhtC,GAAKu3C,EACXvK,EAAMhtC,EAAI,GAAKs3C,EACfA,EAAM/J,aAAekK,EACrBF,EAAMhK,aAAeiK,EAIrBL,EAAeC,EACfF,GAAgB,IAGhBD,GAAa,EACbC,GAAgB,EAxDpB,CA0DJ,CAEID,IACI3R,IAAM7sC,KAAKy1C,OAAOxzC,OAAS,GAC3BjC,KAAKs8C,WAAWzP,EAAI,GAEd,IAANA,GACA7sC,KAAKq8C,aAAaxP,EAAI,GAGlC,CAER,EAQA+R,mCAAoC,SAASM,EAAQC,GACjD,IACIC,EAAOC,EAAOC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EADtCpoC,EAAQvX,KAAKy1C,OAAOyJ,GAAQxJ,QAAQyJ,GAEpCS,EAAY,EACZ39C,EAASsV,EAAMtV,OAEnB,IAAKy9C,EAAK,EAAGA,EAAKz9C,EAAQy9C,IAEtB,IADAN,EAAQ7nC,EAAMmoC,GACTC,EAAKD,EAAK,EAAGC,EAAK19C,EAAQ09C,IAAM,CAEjCN,EAAQ9nC,EAAMooC,GAEVP,EAAMj3C,OAAOosC,QAAU4K,GACvBG,EAAMF,EAAMh9C,OACZm9C,EAAMH,EAAMj3C,SAGZm3C,EAAMF,EAAMj3C,OACZo3C,EAAMH,EAAMh9C,QAGZi9C,EAAMl3C,OAAOosC,QAAU4K,GACvBK,EAAMH,EAAMj9C,OACZq9C,EAAMJ,EAAMl3C,SAGZq3C,EAAMH,EAAMl3C,OACZs3C,EAAMJ,EAAMj9C,QAGhB,IAAIy9C,EAAQP,EAAIxK,aACZgL,EAAQP,EAAIzK,cAIX+K,EAHOL,EAAI1K,eAGOgL,EAFXL,EAAI3K,cAEwB,GACpC8K,GAER,CAGJ,OAAOA,CACX,EAEA3D,eAAgB,SAAS/jC,GACrB,IAAIu8B,EAAoBv8B,EAAKu8B,kBACzBD,EAAsBt8B,EAAKs8B,oBAC3BE,EAAcx8B,EAAKw8B,YACnBC,EAAcz8B,EAAKy8B,YAEvB,OAAIF,EAAoB,GAAKD,EAAsB,GACvCE,EAAcC,GAAe,EAErCF,EAAoB,EACbC,EAEPF,EAAsB,EACfG,EAGJ,CACX,EAEAkE,sBAAuB,SAAS71C,EAAGC,GAC/B,OAAID,EAAE8xC,aAAe7xC,EAAE6xC,cACX,EAER9xC,EAAE8xC,aAAe7xC,EAAE6xC,aACZ,EAEJ,CACX,EAEAoG,2BAA4B,SAASl4C,EAAGC,GACpC,OAAOD,EAAEgI,EAAI/H,EAAE+H,GAAK,EAAIhI,EAAEgI,EAAI/H,EAAE+H,EAAI,EAAI,CAC5C,EAEAgwC,4BAA6B,SAASh4C,EAAGC,GACrC,OAAOD,EAAEgI,EAAI/H,EAAE+H,EAAI,EAAIhI,EAAEgI,EAAI/H,EAAE+H,GAAK,EAAI,CAC5C,EAEAsuC,kBAAmB,SAAS/E,GACxB,IAAK,IAAI3vC,EAAI,EAAGA,EAAI2vC,EAAMtyC,OAAQ2C,IAC9B,GAAI2vC,EAAM3vC,GAAGmT,UACT,OAAOnT,EAGf,OAAQ,CACZ,EAEAs5C,eAAgB,SAASxxC,EAAI2oC,GACzB,IAAIkB,EAAK7pC,EAAG9F,MACR4vC,EAAKnB,EAAGzuC,MAEZ,OAAI2vC,EAAKC,EACE,EAGPD,EAAKC,GACG,EAGL,CACX,EAEAa,OAAQ,SAAS0I,EAAWC,GACxB,OAAQD,EAAYA,EAAYC,GAAeA,CACnD,EAEArG,gBAAiB,SAASpF,EAAOr8B,GAE7B,IADA,IACSxV,EADOwV,EAAKi+B,WACI,EAAGzzC,EAAI6xC,EAAMtyC,SAAUS,EAC5C,GAAI6xC,EAAM7xC,GAAGqV,UACT,OAAOw8B,EAAM7xC,GAGrB,OAAO,IACX,IAQAisC,EAAc9uC,EAAMkI,MAAMC,OAAO,CACjCC,KAAM,SAAS9H,EAAS8/C,GACpB,GAAIz/C,EAAMO,YAAYZ,GAClB,KAAM,mBAEVH,KAAKG,QAAUA,EACfH,KAAKwe,QAAU,IAAIxI,EACnBhW,KAAKye,QAAU,IAAIzI,EACnBhW,KAAKkgD,QAAQD,GAA8B9/C,EAC/C,EAUA+/C,QAAS,SAASC,GACd,IAAIjoC,EACAwC,EACApD,EACA5U,EACAqyB,EACA3c,EACAb,EAEJ,GAAI4oC,aAAiChgD,EAAQqa,MAAO,CAEhD,IAAK9X,EAAI,EAAGA,EAAIy9C,EAAsBzlC,MAAMzY,OAAQS,IAEhD4U,GADAY,EAAOioC,EAAsBzlC,MAAMhY,IACtBiV,gBAEb3X,KAAKwe,QAAQtJ,IAAIoC,EAAMsQ,OAAO9R,GAAI,IAAIjJ,EAAKqL,EAAKlV,EAAGkV,EAAKjV,EAAGiV,EAAKhL,MAAOgL,EAAKjL,SAEhF,IAAKvK,EAAI,EAAGA,EAAIy9C,EAAsB5oC,MAAMtV,OAAQS,IAEhDqyB,GADA3c,EAAO+nC,EAAsB5oC,MAAM7U,IACvB+W,qBACZzZ,KAAKye,QAAQvJ,IAAI6f,EAAKnN,OAAO9R,GAAIsC,EAAKxV,SAE9C,MACK,GAAIu9C,aAAiC5/C,MAEtC,IADAma,EAAQylC,EACHz9C,EAAI,EAAGA,EAAIgY,EAAMzY,OAAQS,KAE1B4U,GADAY,EAAOwC,EAAMhY,IACAiV,kBAET3X,KAAKwe,QAAQtJ,IAAIoC,EAAMsQ,OAAO9R,GAAI,IAAIjJ,EAAKqL,EAAKlV,EAAGkV,EAAKjV,EAAGiV,EAAKhL,MAAOgL,EAAKjL,cAInF,GAAIkzC,EAAsB/+C,eAAe,UAAY++C,EAAsB/+C,eAAe,SAAU,CAGrG,IAFAsZ,EAAQylC,EAAsBzlC,MAC9BnD,EAAQ4oC,EAAsB5oC,MACzB7U,EAAI,EAAGA,EAAIgY,EAAMzY,OAAQS,KAE1B4U,GADAY,EAAOwC,EAAMhY,IACAiV,kBAET3X,KAAKwe,QAAQtJ,IAAIoC,EAAMsQ,OAAO9R,GAAI,IAAIjJ,EAAKqL,EAAKlV,EAAGkV,EAAKjV,EAAGiV,EAAKhL,MAAOgL,EAAKjL,SAGpF,IAAKvK,EAAI,EAAGA,EAAI6U,EAAMtV,OAAQS,KAE1BqyB,GADA3c,EAAOb,EAAM7U,IACD+W,uBAERzZ,KAAKye,QAAQvJ,IAAI6f,EAAKnN,OAAO9R,GAAIsC,EAAKxV,OAGlD,KACK,CACD,IAAIwzB,EAASp2B,KAAKG,QAAQi2B,OACtBqF,EAAcz7B,KAAKG,QAAQs7B,YAC/B,IAAK/4B,EAAI,EAAGA,EAAI0zB,EAAOn0B,OAAQS,IAC3B4U,EAAQ8e,EAAO1zB,GACf1C,KAAKwe,QAAQtJ,IAAIoC,EAAMsQ,OAAO9R,GAAIwB,EAAMM,UAE5C,IAAKlV,EAAI,EAAGA,EAAI+4B,EAAYx5B,OAAQS,IAChCqyB,EAAO0G,EAAY/4B,GACnB1C,KAAKye,QAAQvJ,IAAI6f,EAAKnN,OAAO9R,GAAIif,EAAKnyB,SAE9C,CACJ,IAGJvC,EAAWF,EAAS,CAChB8H,KAAM,SAASjB,GACXnH,EAAMoI,KAAKjB,EAAS7G,EAAQwK,GAChC,EACA0Z,aAAcA,EACd2vB,WAAYA,EACZoM,aAAcrU,EACdsI,cAAeA,EACfjL,WAAYA,EACZuF,YAAaA,GAEpB,CA/oHD,CA+oHGzuC,OAAOL,MAAMqL,QAEhB,SAAUjL,EAAGylB,GAEL,IAAItlB,EAAUP,MAAMO,QAChByxB,EAAOhyB,MAAM8lB,QACb06B,EAAOxgD,MAAMsL,SACbhL,EAAUC,EAAQD,QAClBmgD,EAASzgD,MAAM8K,GAAG21C,OAClBv4C,EAAQlI,MAAMkI,MACd1H,EAAaR,MAAMQ,WACnBkgD,EAAa1gD,MAAM2gD,YACnBC,EAAc5gD,MAAM6gD,aACpB14C,EAAS/H,EAAE+H,OACX24C,EAAyB9gD,MAAMgY,KAAK8oC,uBACpCrvB,EAASnxB,EAAQmxB,OACjBtC,EAAQ7uB,EAAQ6uB,MAChBtD,EAAYvrB,EAAQurB,UACpBiB,EAASxsB,EAAQwsB,OACjBnF,EAAqBrnB,EAAQqnB,mBAC7B3a,EAAO1M,EAAQ0M,KACfif,EAAO3rB,EAAQ2rB,KACfoK,EAAkB/1B,EAAQ+1B,gBAC1BF,EAAuB71B,EAAQ61B,qBAC/BpL,EAAYzqB,EAAQyqB,UACpB8E,EAAQvvB,EAAQuvB,MAChBnsB,EAAQpD,EAAQoD,MAChBmN,EAAYvQ,EAAQuQ,UACpBsyB,EAAwB7iC,EAAQ6iC,sBAChCjL,EAAkB53B,EAAQ43B,gBAC1BwF,EAAcp9B,EAAQo9B,YACtBkL,EAAWtoC,EAAQsoC,SACnB7D,EAAkBzkC,EAAQykC,gBAC1BV,EAAoB/jC,EAAQ+jC,kBAC5B5R,EAAUnyB,EAAQmyB,QAClB9xB,EAAQL,EAAQK,MAChByV,EAAapW,MAAMoW,WACnB6hB,EAAa33B,EAAQ23B,WACrBJ,EAAcv3B,EAAQu3B,YACtBiJ,EAAiBxgC,EAAQwgC,eACzBE,EAAkB1gC,EAAQ0gC,gBAC1B9/B,EAAcP,EAAMO,YACpBF,EAAYL,EAAMK,UAClB+kB,EAAUiM,EAAKhM,KAAKD,QACpBtlB,EAAUC,MAAMD,QAChB8K,EAAavL,MAAMuL,WACnB9J,EAAWd,EAAMc,SACjBs/C,EAAgB3gD,EAAE2gD,cAElBC,EAAOlgD,KAGPmgD,EAAK,gBACLC,EAAY,YACZrtB,EAAmB,mBACnBstB,EAAS,SACTC,EAAQ,QAMRC,EAAQ,QACRhuB,EAAO,OAKPiuB,GAAS,iBACTC,GAAS,SACTC,GAAa,aACbC,GAAM,MACNC,GAAa,YACbC,GAAW,UACXC,GAAO,OAUPhtC,GAAYD,OAAOC,UACnBylC,IAAa1lC,OAAOC,UAEpBitC,GAAc,cACd/tB,GAAU,UAMVguB,GAAgB,iBAAmBb,EAAK,cAAgBA,EAGxDc,GAAkB,EAAGC,YAAWC,OAAMC,aAAY52B,UAC9CtrB,MAAMmiD,KAAKC,aAAa,kBAAkBJ,eAAuB12B,aAAiB,CAC9E22B,KAAMA,EACNC,eAIZ5hD,EAAQ+hD,kBAAoB,CAAC,CACzB7/C,KAzCM,OA0CP,CACCA,KAxCS,UAyCV,CACCA,KA3CO,QA4CR,CACCA,KA9CQ,SA+CT,CACCA,KAAM6wB,EACNjsB,SAAU,SAASqQ,GACf,OAAOA,EAAM6qC,YAAY,SAC7B,IAGJ,IAAIC,GAAiB,CACjB/pB,OAAQ,CACJlN,KAAM,SACN22B,KAAM,iBACND,UAAW,oBAEft3C,OAAQ,CACJ4gB,KAAM,OACNk3B,WAAY,OACZR,UAAW,mBACXC,KAAM,OACNC,WAAY,YA8CpB,SAASO,GAAgBnmB,GACrB,OAAOA,EAAU1Y,QAAQphB,KAAKoP,gBAAkByhB,EAAKzhB,aACzD,CAEA,SAAS8wC,GAAiB70C,EAAOyyB,GAE7B,IADA,IAA8BqiB,EAAQrmB,EAAlCsmB,EAAkBtB,GACbz+C,EAAI,EAAGA,EAAIy9B,EAAWl+B,OAAQS,IAEnC,IAAK4/C,GADLnmB,EAAYgE,EAAWz9B,IACU,CAC7B,IAAI4zC,EAAO5oC,EAAMm2B,WAAW1H,EAAUl1B,YAClCqvC,EAAOmM,IACPA,EAAkBnM,EAClBkM,EAASrmB,EAEjB,CAEJ,OAAOqmB,CACX,CAEA,SAASE,GAAepyB,EAAOJ,GAC3B,IAAIxtB,EAAiBklB,EAAdpI,EAAU,GACbjH,EAAW+X,EAAMrH,mBAAmB1Q,SACpCtW,EAASsW,EAAStW,OACtB,IAAKS,EAAI,EAAGA,EAAIwtB,EAAQjuB,OAAQS,IAAK,CACjCklB,EAASsI,EAAQxtB,GACjB,IAAK,IAAIqI,EAAI,EAAGA,EAAI9I,EAAQ8I,IACxB,GAAIwN,EAASxN,IAAM6c,EAAOqB,mBAAoB,CAC1CzJ,EAAQzc,KAAKgI,GACb,KACJ,CAER,CACA,OAAOyU,CACX,CA3EArf,EAAQgjB,cAAgB,SAASw/B,GAC7B,IAAIC,EAAW,CACXjhD,KA3DiB,YA4DjB6qB,KAAM,GACN9D,UAAU,EACVd,OAAQ,KACR5kB,EA1DqB,EA2DrBC,EA3DqB,EA4DrBqkC,SA9DqB,GA+DrBC,UA9DsB,GA+DtBr6B,MAlEkB,IAmElBD,OAlEmB,IAmEnBmd,MAAO,CAAC,EACRgb,SAAU,CACN1hB,SAAS,EACT8Z,MAAO,IAEX2C,WAAYhgC,EAAQ+hD,kBACpBlvC,SAAU,CACNrE,MAAO,IAMf,OAFAnO,EAAM0B,aAAa0gD,EAAUD,GAEtBC,CACX,EAmDA,IAAIC,GAAiB5sC,EAAWjO,OAAO,CACnCC,KAAM,SAASwb,GACX,IAAItL,EAAOnY,KACXmY,EAAK2qC,UAAYr/B,GAAW,CAAC,GAAGq/B,SAChC7sC,EAAWE,GAAGlO,KAAK5G,KAAK8W,GACxBA,EAAKsL,QAAUpjB,EAAW,CAAEyV,GAAI3V,EAAQsT,YAAc0E,EAAKsL,QAASA,GACpEtL,EAAK6jB,YAAa,EAClB7jB,EAAKyP,OAAS,IAAIoH,EAAM,CACpBlZ,GAAIqC,EAAKsL,QAAQ3N,GACjB4S,SAAUvQ,EAAKsL,QAAQiF,WAE3BvQ,EAAKrC,GAAKqC,EAAKsL,QAAQ3N,GACvBqC,EAAK4qC,WACT,EAEAt/B,QAAS,CACL2G,MAAO,CAAC,EACRiV,OAAQ/M,EAAQE,KAChBlhB,QAAS,CACLD,MAAO,iBAEXwqB,YAAY,EACZmnB,cAAc,EACdroB,QAAQ,GAGZgB,WAAY,SAASjuB,GACjB,OAAI1N,KAAKs2B,QACEt2B,KAAKs2B,QAAQqF,WAAWjuB,GAE5B1N,KAAKyjB,QAAQ4b,MACxB,EAEArW,QAAS,SAASxmB,GACd,GAAIzB,EAAYyB,GACZ,OAAOxC,KAAK4nB,OAAOoB,UAEnBhpB,KAAK4nB,OAAOoB,QAAQxmB,EAE5B,EAEAoV,OAAQ,WACR,EAEA8e,QAAS,WACL12B,KAAK4nB,OAAOsB,QAChB,EAEAjiB,SAAU,SAASyG,GACf1N,KAAKyjB,QAAQzgB,EAAI0K,EAAM1K,EACvBhD,KAAKyjB,QAAQxgB,EAAIyK,EAAMzK,EACvBjD,KAAK4nB,OAAO3gB,SAASyG,EACzB,EAEAlM,SAAU,WACN,OAAOxB,KAAKyjB,QAAQ3N,EACxB,EAEAmtC,UAAW,WAEP,IAAIC,EAAO7iD,EAAW,CAAC,EAAG,CAAEojB,QAASzjB,KAAKyjB,UAI1C,OAHIzjB,KAAK8iD,WACLI,EAAKJ,SAAW9iD,KAAK8iD,SAASthD,YAE3B0hD,CACX,EAEAC,SAAU,SAAS7xC,GACf,GAAIA,IAAYoU,EAAa,CACzB,IAAIjC,EAAUzjB,KAAKyjB,QAEftjB,EAAQK,MAAMc,SAASgQ,GACvBmS,EAAQnS,QAAQ6Z,KAAO7Z,EAEvBjR,EAAWojB,EAAQnS,QAASA,GAGhC,IAAI8xC,EAAiB3/B,EAAQnS,QACTtR,KAAKqjD,eAKrBrjD,KAAKsjD,qBAAqBF,GAF1BpjD,KAAKujD,qBAAqBH,EAIlC,CAEA,OAAOpjD,KAAKyjB,QAAQnS,QAAQ6Z,IAChC,EAEAo4B,qBAAsB,SAAS9/B,GACvBA,EAAQ0H,OACRnrB,KAAKqjD,eAAiB,IAAIz4B,EAAUnH,GACpCzjB,KAAKqjD,eAAe1yB,gBAAiB,EACrC3wB,KAAK4nB,OAAOyG,OAAOruB,KAAKqjD,gBAEhC,EAEAC,qBAAsB,SAAS7/B,GAC3BzjB,KAAKqjD,eAAen6B,OAAOzF,EAC/B,EAEA6X,SAAU,SAAS5tB,GACf,IAAIkK,EAAS5X,KAAK4X,SAClB,OAAO5X,KAAKgpB,WAAapR,EAAO1R,SAASwH,IAAU1N,KAAKyjB,QAAQkX,MACpE,EAEAooB,UAAW,WACP,IAAI5qC,EAAOnY,KACX,GAAImY,EAAKsL,QAAQnS,QAAQkyC,SAAU,CAC/B,IAAI3rC,EAAOM,EAAK2qC,UAAY,CAAC,EACzBW,EAAkB5jD,MAAM2jD,SAASrrC,EAAKsL,QAAQnS,QAAQkyC,SAAU,CAC5DE,UAAW,aAGnBvrC,EAAKsL,QAAQnS,QAAQ6Z,KAAOs4B,EAAgB5rC,EAChD,CACJ,EAEA8rC,WAAY,WACR,OAAmC,IAA5B3jD,KAAKyjB,QAAQoY,UACxB,EAEA+nB,OAAQ,WACJ,MAAO,CACH9tC,GAAI9V,KAAKyjB,QAAQ3N,GAEzB,IAGA+tC,GAAY97C,EAAMC,OAAO,CACzBC,KAAM,SAASqP,EAAOmM,GAClBzjB,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAASA,GAC5CzjB,KAAKy7B,YAAc,GACnBz7B,KAAKsX,MAAQA,CACjB,EACAmM,QAAS,CACLvW,MAAO,EACPD,OAAQ,EACRoW,KAAM,CACFY,MA5QwB,UA8Q5BmG,MAAO,CAAC,GAEZnjB,SAAU,WACN,OAAIjH,KAAKyjB,QAAQxc,SACNjH,KAAKyjB,QAAQxc,SAASjH,KAAKsX,OAE3BtX,KAAKsX,MAAM6qC,YAAYniD,KAAKyjB,QAAQphB,KAEnD,EACAuhD,OAAQ,WACJ,MAAO,CACHE,QAAS9jD,KAAKsX,MAAM9V,WACpB26B,UAAWn8B,KAAKyjB,QAAQphB,KAEhC,IAGJwhD,GAAU12C,MAAQ,SAAShN,EAASiN,GAKhC,IAJA,IAAI22C,EAAU32C,EAAI9J,MAAM,KACpBwS,EAAKiuC,EAAQ,GACb1hD,EAAO0hD,EAAQ,IAAM7wB,EAEhBxwB,EAAI,EAAGA,EAAIvC,EAAQi2B,OAAOn0B,OAAQS,IAAK,CAC5C,IAAI4U,EAAQnX,EAAQi2B,OAAO1zB,GAC3B,GAAI4U,EAAMmM,QAAQ3N,IAAMA,EACpB,OAAOwB,EAAMylB,aAAa16B,EAAKgR,OAEvC,CACJ,EAEA,IAAIypB,GAAQ+lB,GAAe76C,OAAO,CAC9BC,KAAM,SAASwb,EAAStjB,GACpB,IAAIgY,EAAOnY,KACX6iD,GAAe1sC,GAAGlO,KAAK5G,KAAK8W,EAAMsL,GAClCzjB,KAAKG,QAAUA,EACfH,KAAKgkD,yBACLvgC,EAAUtL,EAAKsL,QACftL,EAAKgoB,WAAa,GAClBhoB,EAAKxW,KAAO8hB,EAAQ9hB,KACpBwW,EAAK8rC,oBACL9rC,EAAK+rC,eACL/rC,EAAK7G,QAAQ6G,EAAK7G,WAElB6G,EAAKgsC,mBACT,EAEA1gC,QAAStjB,EAAQgjB,gBAEjBihC,qBAAsB,SAASC,GAC3B,IAAIC,EAAeC,GAAoBF,GAASrkD,KAAK8iD,UACrD9iD,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAS6gC,GAE5CtkD,KAAKwkD,cACT,EAEAR,uBAAwB,SAASK,EAAO39B,GACpC,GAAI1mB,KAAKG,SAAWH,KAAKG,QAAQskD,YAAa,CAC1C,IAAIH,EAAeC,GAAoBF,GAASrkD,KAAK8iD,UAErD,GAAIuB,GAAS39B,EACT,GAAKtmB,EAAQ+F,QAAQugB,EAAO,CAAC,IAAK,IAAK,QAAS,WAYzC,CACH,IAAI9O,EAAS5X,KAAK4X,SAClBA,EAAO8O,GAAS29B,EAAM39B,GACtB1mB,KAAK4X,OAAOA,EAChB,MAfQ5X,KAAKyjB,QAAQmE,OACb5nB,KAAK0kD,gBACEJ,EAAa3iD,OACpB3B,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAS6gC,GAC5CtkD,KAAK0kD,iBAGL1kD,KAAKyjB,QAAQnS,UACbtR,KAAK+iD,YACL/iD,KAAKsR,QAAQtR,KAAKyjB,QAAQnS,eAQlCtR,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAS6gC,EAEpD,CACJ,EAEAI,cAAe,WACX1kD,KAAK4nB,OAAOzgB,QACZnH,KAAKqjD,eAAiB,KACtBrjD,KAAKyjB,QAAQq/B,SAAW9iD,KAAK8iD,SAC7B9iD,KAAKikD,oBACLjkD,KAAKkkD,cACT,EAEAM,aAAc,WACVxkD,KAAK0kD,gBACD1kD,KAAKyjB,QAAQnS,UACbtR,KAAK+iD,YACL/iD,KAAKsR,QAAQtR,KAAKyjB,QAAQnS,SAElC,EAEAskB,YAAa,SAAS+uB,GAClB,IAAIxkD,EAAUH,KAAKG,QACnB,GAAIA,GAAWA,EAAQskD,YAAa,CAChC,IAAI7sC,EAAS5X,KAAKulC,QACd8e,EAAQrkD,KAAK8iD,SAEbuB,IACAlkD,EAAQykD,uBACJh/B,EAAQy+B,EAAMrhD,IAAM4U,EAAO5U,IAAMqhD,EAAMrhD,GACvCqhD,EAAMnvC,IAAI,IAAK0C,EAAO5U,GAGtB4iB,EAAQy+B,EAAMphD,IAAM2U,EAAO3U,IAAMohD,EAAMphD,GACvCohD,EAAMnvC,IAAI,IAAK0C,EAAO3U,GAGtB2iB,EAAQy+B,EAAMn3C,QAAU0K,EAAO1K,QAAUm3C,EAAMn3C,OAC/Cm3C,EAAMnvC,IAAI,QAAS0C,EAAO1K,OAG1B0Y,EAAQy+B,EAAMp3C,SAAW2K,EAAO3K,SAAWo3C,EAAMp3C,QACjDo3C,EAAMnvC,IAAI,SAAU0C,EAAO3K,QAG/BjN,KAAK8iD,SAAWuB,EAChBlkD,EAAQ0kD,sBAEJF,GACAxkD,EAAQkoC,oBAGpB,CACJ,EAEA6b,aAAc,WACV,IAAItsC,EAAS5X,KAAK4nB,OAAOe,UAAS,GAC9BlF,EAAUzjB,KAAKyjB,QACnBzjB,KAAK4X,OAAO,IAAI/K,EAAK4W,EAAQzgB,EAAGygB,EAAQxgB,EAAG2U,EAAO1K,MAAO0K,EAAO3K,SAChEjN,KAAK8kD,UACL9kD,KAAK+kD,eACT,EAEAzzC,QAAS,SAASA,GACd,IAAI3K,EAAS3G,KAAKmjD,SAAS7xC,GAI3B,OAFAtR,KAAK+kD,gBAEEp+C,CACX,EAEAo+C,cAAe,WACX,IAAI3B,EAAiBpjD,KAAKyjB,QAAQnS,SAAW,CAAC,EAC1C0zC,EAAgBhlD,KAAKqjD,eACzB,GAAI2B,GAAiB5B,EAAe/xC,MAAO,CACvC,IAAI4zC,EAAgBjlD,KAAK4nB,OAAOe,WAC5Bu8B,EAAU,IAAI/kD,EAAQgR,UAAU8zC,GAChCE,EAAgBH,EAAc77B,eAAei8B,KAAK,MAElDC,EAAc,IAAIx4C,EAAK,EAAG,EAAGs4C,EAAcj4C,QAASi4C,EAAcl4C,UAClEq4C,EAAgBJ,EAAQ7zC,MAAMg0C,EAAajC,EAAe/xC,OAE9D2zC,EAAc/9C,SAASq+C,EAAcl3C,UACzC,CACJ,EAEA+1C,kBAAmB,WACf,IAGIhoB,EAAWz5B,EAHX+gB,EAAUzjB,KAAKyjB,QACfxhB,EAASwhB,EAAQ0c,WAAWl+B,OAC5BsjD,EAAoB9hC,EAAQ8hC,kBAGhC,IAAK7iD,EAAI,EAAGA,EAAIT,EAAQS,IACpBy5B,EAAY,IAAI0nB,GACZ7jD,KAAMK,EAAW,CAAC,EACdklD,EACA9hC,EAAQ0c,WAAWz9B,KAG3B1C,KAAKmgC,WAAWp9B,KAAKo5B,EAE7B,EAEAvkB,OAAQ,SAASpV,GACb,IAAIoV,EAEJ,GAAIpV,EACA,GAAIlB,EAASkB,GACT,OAAQA,GACJ,KAAKk/C,GACD9pC,EAAS5X,KAAKwlD,qBACd,MACJ,IAzcL,WA0cS5tC,EAAS5X,KAAKwlD,qBACd,IAAItuB,EAAMl3B,KAAKG,QAAQ+6B,KACvBtjB,EAAO5U,GAAKk0B,EAAIl0B,EAChB4U,EAAO3U,GAAKi0B,EAAIj0B,EAChB,MACJ,KAAK0wB,GACD/b,EAAS5X,KAAKylD,iBACd,MACJ,QACI7tC,EAAS5X,KAAKulC,aAGtBvlC,KAAK0lD,WAAWljD,GAChBxC,KAAK2lD,uBACC3lD,KAAKG,SAAWH,KAAKG,QAAQylD,YAC/B5lD,KAAK6lD,0BAIbjuC,EAAS5X,KAAKulC,QAGlB,OAAO3tB,CACX,EAEA8tC,WAAY,SAASj3C,GACjB,IAAIgV,EAAUzjB,KAAKyjB,QACfrV,EAAUK,EAAKL,UACfpL,EAAIygB,EAAQzgB,EAAIoL,EAAQpL,EACxBC,EAAIwgB,EAAQxgB,EAAImL,EAAQnL,EACxBiK,EAAQuW,EAAQvW,MAAQ2zC,EAAKn3C,IAAI+E,EAAKvB,MAAOuW,EAAQ6jB,UACrDr6B,EAASwW,EAAQxW,OAAS4zC,EAAKn3C,IAAI+E,EAAKxB,OAAQwW,EAAQ8jB,WAE5DvnC,KAAKulC,QAAU,IAAI14B,EAAK7J,EAAGC,EAAGiK,EAAOD,GAErCjN,KAAK4nB,OAAOsB,OAAO,CACflmB,EAAGA,EACHC,EAAGA,EACHiK,MAAOA,EACPD,OAAQA,GAEhB,EAEAhG,SAAU,SAASyG,GACf,IAAIA,EAGA,OAAO1N,KAAKulC,QAAQn3B,UAFpBpO,KAAK4X,OAAO,IAAI/K,EAAKa,EAAM1K,EAAG0K,EAAMzK,EAAGjD,KAAKulC,QAAQr4B,MAAOlN,KAAKulC,QAAQt4B,QAIhF,EAKAxB,MAAO,WACH,IAAIy3C,EAAOljD,KAAKijD,YAQhB,OANAC,EAAKz/B,QAAQ3N,GAAK3V,EAAQsT,WAEtBzT,KAAKG,SAAWH,KAAKG,QAAQskD,aAAe7+B,EAAQ5lB,KAAK8iD,YACzDI,EAAKz/B,QAAQq/B,SAAWgD,GAAc9lD,KAAK8iD,WAGxC,IAAIhmB,GAAMomB,EAAKz/B,QAC1B,EAEAiP,OAAQ,SAASlwB,GACb,IAA4BwiC,EAAU+gB,EAAlC5lD,EAAUH,KAAKG,QAKnB,GAJIY,EAAYyB,KACZA,GAAQ,GAGRxC,KAAK2jD,cACD3jD,KAAKg8B,YAAcx5B,EAgBnB,OAfAwiC,EAAW,GACX+gB,EAAa,GACb/lD,KAAKg8B,WAAax5B,EACdxC,KAAKg8B,YACL77B,EAAQy/B,eAAe78B,KAAK/C,MAC5BglC,EAASjiC,KAAK/C,QAEdQ,EAAMqF,OAAO1F,EAAQy/B,eAAgB5/B,MACrC+lD,EAAWhjD,KAAK/C,OAGfG,EAAQ6lD,oBACT7lD,EAAQ8lD,kBAAkBjhB,EAAU+gB,IAGjC,CAGnB,EAEA92C,OAAQ,SAASN,EAAO3J,EAAQse,GAC5B,IAAIrU,EAASjP,KAAK4nB,OAAO3Y,SACzB,GAAIN,IAAU+W,EAAa,EACN,IAAbpC,GAAsBtjB,KAAKG,SAAWH,KAAKG,QAAQu7B,iBAAmB/sB,IAAUM,EAAON,OACvF3O,KAAKG,QAAQu7B,gBAAgB5mB,IACzB,IAAI3U,EAAQg3B,WAAWn3B,KAAKG,QAAQo7B,iBAAkB,CAACv7B,MAAO,CAACiP,EAAON,SAAS,GAGvF,IAEIu3C,EACAC,EAHA5hD,EAAIvE,KAAK4X,SACTwuC,EAAK,IAAI7iD,EAAMgB,EAAE2I,MAAQ,EAAG3I,EAAE0I,OAAS,GAIvCjI,IACAkhD,EAAav3C,EAAQM,EAAON,MAC5Bw3C,EAAc5hD,EAAES,SAASiK,OAAOi3C,EAAYlhD,GAAQ2G,MAAMy6C,GAC1DpmD,KAAK2lC,gBAAkB3lC,KAAK2lC,gBAAgBj6B,KAAKy6C,EAAYx6C,MAAMpH,EAAE6J,YACrEpO,KAAKiH,SAASk/C,IAGlBnmD,KAAK4nB,OAAO3Y,OAAON,EAAOy3C,GAC1BpmD,KAAKyjB,QAAQzQ,SAASrE,MAAQA,EAE1B3O,KAAKG,SAAWH,KAAKG,QAAQ88B,oBAC7Bj9B,KAAKG,QAAQ88B,mBAAmBvG,UAGpC12B,KAAK6lD,qBAED7lD,KAAKG,SACLH,KAAKG,QAAQgJ,QAAQk4C,GAAY,CAAEn9C,KAAMlE,MAEjD,CAEA,OAAOiP,CACX,EAEAwsB,YAAa,SAAS95B,GAClB,IAAiBe,EAAGqI,EAAGs7C,EAAKC,EAAxB3/C,EAAS,GAEb,IAAKjE,EAAI,EAAGA,EAAI1C,KAAKmgC,WAAWl+B,OAAQS,IAGpC,IADA4jD,EADMtmD,KAAKmgC,WAAWz9B,GACX+4B,YACN1wB,EAAI,EAASA,EAAIu7C,EAAKrkD,OAAQ8I,IAE/B,GADAs7C,EAAMC,EAAKv7C,GACC,OAARpJ,EAAe,CACf,IAAIS,EAASikD,EAAIjkD,SACbA,EAAOkV,OAASlV,EAAOkV,OAAStX,MAChC2G,EAAO5D,KAAKsjD,EAEpB,MAAO,GAAY,MAAR1kD,EAAc,CACrB,IAAIwG,EAASk+C,EAAIl+C,SACbA,EAAOmP,OAASnP,EAAOmP,OAAStX,MAChC2G,EAAO5D,KAAKsjD,EAEpB,MACI1/C,EAAO5D,KAAKsjD,GAKxB,OAAO1/C,CACX,EAEAk/C,mBAAoB,WAChB5lD,EAAE0kC,KAAK3kC,KAAKy7B,eAAe,WACvBz7B,KAAK02B,SACT,GACJ,EAOAqG,aAAc,SAASwpB,GACnB,IAAI7jD,EAAG0hC,EACP,IAAI9iC,EAASilD,GAQN,OAAIA,aAAuBhjD,EACvBg/C,GAAiBgE,EAAavmD,KAAKmgC,YAEnCngC,KAAKmgC,WAAWl+B,OAASjC,KAAKmgC,WAAW,GAAK,KATrD,IADAomB,EAAcA,EAAYC,oBACrB9jD,EAAI,EAAGA,EAAI1C,KAAKmgC,WAAWl+B,OAAQS,IAEpC,IADA0hC,EAAMpkC,KAAKmgC,WAAWz9B,IACd+gB,QAAQphB,KAAKmkD,qBAAuBD,EACxC,OAAOniB,CAQvB,EAEA+d,YAAa,SAAStgB,GAClB,IAAIt9B,EAAIvE,KAAK4X,SACT6uC,EAAS5kB,EAAKluB,OAAO,GAAGlC,cAAgBowB,EAAKv0B,MAAM,GAEvD,OAAIlC,EAAW7G,EAAEkiD,IACNzmD,KAAK0mD,gBAAgBniD,EAAEkiD,MAG3BliD,EAAES,QACb,EAEAkkB,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACT,IACIkjC,EADAC,EAAe5mD,KAAKyjB,QAGxBzjB,KAAK6mD,YAAY39B,OAAOlpB,KAAK8mD,eAAerjC,IAExCzjB,KAAK6oB,oBAAoBpF,EAAS,CAlpBtC,QACC,SACL,IACA,QAgpBQzjB,KAAK4X,OAAO,IAAI/K,EAAK+5C,EAAa5jD,EAAG4jD,EAAa3jD,EAAG2jD,EAAa15C,MAAO05C,EAAa35C,SACtF05C,GAAe,GAGfljC,EAAQ0c,aACRymB,EAAazmB,WAAa1c,EAAQ0c,WAClCngC,KAAK+mD,qBAGTH,EAAevmD,EAAWumD,EAAcnjC,IAEpCA,EAAQzQ,UAAY2zC,IACpB3mD,KAAK8kD,UAGL8B,EAAat1C,SACbtR,KAAKsR,QAAQs1C,EAAat1C,QAElC,CACJ,EAEAy1C,kBAAmB,WACf,IAGIztC,EACAlX,EACA+F,EALAszB,EAAcz7B,KAAKy7B,cACvBz7B,KAAKmgC,WAAa,GAClBngC,KAAKmkD,oBAKL,IAAK,IAAIjkB,EAAM,EAAGA,EAAMzE,EAAYx5B,OAAQi+B,IAExC99B,GADAkX,EAAamiB,EAAYyE,IACL99B,SACpB+F,EAASmR,EAAWnR,SAChB/F,EAAOkV,OAASlV,EAAOkV,QAAUtX,KACjCsZ,EAAWlX,OAAOpC,KAAK+8B,aAAa36B,EAAOqhB,QAAQphB,OAAS,MACrD8F,EAAOmP,OAASnP,EAAOmP,QAAUtX,MACxCsZ,EAAWnR,OAAOnI,KAAK+8B,aAAa50B,EAAOsb,QAAQphB,OAAS,MAEhEiX,EAAWsc,aAEnB,EAEA/M,oBAAqB1oB,EAAQqmB,mBAE7BsgC,eAAgB,SAASrjC,GACrB,MAAO,CACH5L,KAAM4L,EAAQ+I,KACdpqB,OAAQqhB,EAAQrhB,OAChBgoB,MAAO3G,EAAQ2G,MACf/G,KAAMI,EAAQJ,KACdyG,OAAQrG,EAAQqG,OAExB,EAEA67B,qBAAsB,WACd3lD,KAAKG,SACLH,KAAKG,QAAQgJ,QAAQuqB,EAAkB,CAAExvB,KAAMlE,KAAM4X,OAAQ5X,KAAKulC,QAAQ95B,SAElF,EAEAi7C,gBAAiB,SAASh5C,GACtB,IAAIuB,EAASjP,KAAKiP,SAEdJ,EADS7O,KAAK4X,SACFxJ,UAMhB,OAJIa,EAAON,OACPjB,EAAMuB,OAAOA,EAAON,MAAOM,EAAOjK,SAAS0G,KAAKmD,IAG7CnB,CACX,EAEA83C,mBAAoB,WAChB,IAAI5tC,EAAS5X,KAAK4X,SACd/I,EAAK+I,EAAOxJ,UACZW,EAAK6I,EAAOrJ,cAEhB,OAAO1B,EAAK4D,WAAWzQ,KAAKG,QAAQ0oC,YAAYh6B,GAAK7O,KAAKG,QAAQ0oC,YAAY95B,GAClF,EAEA02C,eAAgB,WACZ,IAAI7tC,EAAS5X,KAAK4X,SAASlJ,cAAc1O,KAAKiP,SAASN,OACnDE,EAAK+I,EAAOxJ,UACZW,EAAK6I,EAAOrJ,cAEhB,OAAO1B,EAAK4D,WAAW5B,EAAIE,EAC/B,EAEA+1C,QAAS,WACL,IAAI9xC,EAAWhT,KAAKyjB,QAAQzQ,SAExBA,GAAYA,EAASrE,OACrB3O,KAAKiP,OAAO+D,EAASrE,OAGzB3O,KAAK2lC,gBAAkB,IAAIpiC,CAC/B,EAEA8lB,OAAQ,SAAS7mB,GACb,IAAIihB,EAAUzjB,KAAKyjB,QACf2G,EAAQ3G,EAAQ2G,MAChBN,EAASrG,EAAQqG,OACjBzG,EAAOI,EAAQJ,KAEf7gB,GAAS3B,EAAUupB,EAAMN,UACzBA,EAASzpB,EAAW,CAAC,EAAGypB,EAAQM,EAAMN,SAGtCtnB,GAAS3B,EAAUupB,EAAM/G,QACzBA,EAAO+G,EAAM/G,MAGjBrjB,KAAK6mD,YAAY39B,OAAO,CACpBY,OAAQA,EACRzG,KAAMA,IAGNI,EAAQ2hB,UAAY3hB,EAAQ2hB,SAAS1hB,SACrC1jB,KAAKG,QAAQ6mD,gBAAgBhnD,KAAMwC,EAE3C,EAEA84B,SAAU,SAAS94B,GACf,GAAIxC,KAAKgpB,UAAW,CAChB,IAA4Bi+B,EAAxBrvC,EAAS5X,KAAK4X,SACdjJ,EAAQ3O,KAAKiP,SAASN,MAE1B,GAAInM,EAAMR,UAAYQ,EAAMR,UACxB,OAAO0O,EAAUI,MAAMtO,EAAOoV,EAAQjJ,GAAgB,GAGtD,GADAs4C,EAAezkD,EAAMiJ,QAAQwD,OAAON,EAAOiJ,EAAO5S,UAC9C4S,EAAO1R,SAAS+gD,GAChB,OAAOjnD,IAGnB,CACJ,EAEA4jD,OAAQ,WACJ,MAAO,CACHE,QAAS9jD,KAAKyjB,QAAQ3N,GAE9B,EAEAmuC,kBAAmB,WACf,IAII4C,EAkvIej/B,EACnBw9B,EAvvII3hC,EAAUzjB,KAAKyjB,QACfyjC,EAAgBlnD,KAAK8mD,eAAerjC,GACpC0jC,EAAiB1jC,EAAQmE,OACzBjmB,GAAQ8hB,EAAQ9hB,KAAO,IAAI6kD,oBAG/BU,EAAch6C,MAAQuW,EAAQvW,MAC9Bg6C,EAAcj6C,OAASwW,EAAQxW,OAE3B7B,EAAW+7C,GACXN,EAAcM,EAAe9lD,KAAKrB,KAAMyjB,GACjCyjC,EAAcrvC,MACrBgvC,EAAc,IAAI/6B,EAAKo7B,GA4uIT,KADlB9B,GADmBx9B,EAzuIGi/B,GA0uIR59B,mBAAmB2H,YAAY,OACxCzmB,OAAOnH,GAA6B,IAAlBoiD,EAAKj7C,OAAOlH,GACnC2kB,EAAO3gB,UAAUm+C,EAAKj7C,OAAOnH,GAAIoiD,EAAKj7C,OAAOlH,IA1uIzC4jD,EADe,aAARllD,EACO,IAAI+pB,EAAUw7B,GACb,UAARvlD,EACO,IAAIgrB,EAAOu6B,GACV,QAARvlD,EACO,IAAIipB,EAAUs8B,GACb,SAARvlD,EACO,IAAI+tB,EAAMw3B,GAEV,IAAIp7B,EAAKo7B,GAG3BlnD,KAAK6mD,YAAcA,EACnB7mD,KAAK4nB,OAAOyG,OAAOruB,KAAK6mD,YAC5B,IAMAhnB,GAAagjB,GAAe76C,OAAO,CACnCC,KAAM,SAASwB,EAAMF,EAAIka,GACrB,IAAItL,EAAOnY,KACX6iD,GAAe1sC,GAAGlO,KAAK5G,KAAK8W,EAAMsL,GAClCzjB,KAAKgkD,yBACLhkD,KAAKonD,cACLjvC,EAAKqU,KAAO,IAAIrsB,EAAQkvB,SAASlX,EAAKsL,SACtCtL,EAAKqU,KAAKnJ,KA90BA,eA+0BVlL,EAAKyP,OAAOyG,OAAOlW,EAAKqU,MACxBrU,EAAKkvC,aAAelvC,EAAKmvC,aAAe,IAAI/jD,EAC5C4U,EAAKovC,WAAW99C,GAChB0O,EAAKqvC,WAAWj+C,GAChB4O,EAAK7G,QAAQ6G,EAAKsL,QAAQnS,SAC1B6G,EAAKsvC,SAAW,GACZ7hC,EAAQnC,IAAYA,EAAQ7gB,QAC5BuV,EAAKvV,OAAO6gB,EAAQ7gB,OAE5B,EAEA6gB,QAAS,CACL2G,MAAO,CACHN,OAAQ,CAAC,GAEb+D,SAAU4zB,GACV3zB,OAAQ2zB,GACR7+C,OAAQ,GACRi5B,YAAY,EACZ6rB,cAAex0B,EACfy0B,YAAaz0B,GAGjBkxB,qBAAsB,SAASC,GAC3BrkD,KAAKgkD,uBAAuBK,GAASrkD,KAAK8iD,SAC9C,EAEAkB,uBAAwB,SAASK,GAC7B,GAAIrkD,KAAKG,SAAWH,KAAKG,QAAQskD,YAAa,CAC1C,IAAImD,EAAU5nD,KAAKG,QAAQ0nD,SACvBpkC,EAixGhB,SAAkCq/B,GAC9B,IAAIn8C,EAAS,CAAC,EAIVif,GAFJk9B,EAAWA,GAAY,CAAC,GAEH33B,OAA2B,OAAlB23B,EAAS33B,OACnCxkB,EAAO2K,QAAUwxC,EAAS33B,MAG1BvF,EAAQk9B,EAASnhD,OAA2B,OAAlBmhD,EAASnhD,OACnCgF,EAAOhF,KAAOmhD,EAASnhD,MAGvBikB,EAAQk9B,EAASr5C,OAA2B,OAAlBq5C,EAASr5C,OACnC9C,EAAO8C,KAAOq5C,EAASr5C,MAGvBmc,EAAQk9B,EAAS4E,gBAA6C,OAA3B5E,EAAS4E,gBAC5C/gD,EAAO+gD,cAAgB5E,EAAS4E,eAGhC9hC,EAAQk9B,EAASgF,QAA6B,OAAnBhF,EAASgF,QACpCnhD,EAAOmhD,MAAQhF,EAASgF,OAGxBliC,EAAQk9B,EAASiF,QAA6B,OAAnBjF,EAASiF,QACpCphD,EAAOohD,MAAQjF,EAASiF,OAGxBniC,EAAQk9B,EAASv5C,KAAuB,OAAhBu5C,EAASv5C,KACjC5C,EAAO4C,GAAKu5C,EAASv5C,IAGrBqc,EAAQk9B,EAAS6E,cAAyC,OAAzB7E,EAAS6E,cAC1ChhD,EAAOghD,YAAc7E,EAAS6E,aAG9B/hC,EAAQk9B,EAASkF,MAAyB,OAAjBlF,EAASkF,MAClCrhD,EAAOqhD,IAAMlF,EAASkF,KAGtBpiC,EAAQk9B,EAASmF,MAAyB,OAAjBnF,EAASmF,MAClCthD,EAAOshD,IAAMnF,EAASmF,KAG1B,OAAOthD,CACX,CA/zG0BuhD,CAAyB7D,GAASrkD,KAAK8iD,UAErD,GAAIuB,EAAO,CACP,GAAIz+B,EAAQnC,EAAQha,MAAO,CACvB,IAAIA,EAAOm+C,EAAQnkC,EAAQha,MACvBA,GAAQmc,EAAQnC,EAAQikC,iBACzBj+C,EAAOA,EAAKszB,aAAatZ,EAAQikC,gBAEpC1nD,KAAKoC,OAAOqH,EAChB,MAAWmc,EAAQnC,EAAQqkC,QAAUliC,EAAQnC,EAAQskC,QACjD/nD,KAAKoC,OAAO,IAAImB,EAAMkgB,EAAQqkC,MAAOrkC,EAAQskC,QAGjD,GAAIniC,EAAQnC,EAAQla,IAAK,CACrB,IAAIA,EAAKq+C,EAAQnkC,EAAQla,IACrBA,GAAMqc,EAAQnC,EAAQkkC,eACtBp+C,EAAKA,EAAGwzB,aAAatZ,EAAQkkC,cAEjC3nD,KAAKmI,OAAOoB,EAChB,MAAWqc,EAAQnC,EAAQukC,MAAQpiC,EAAQnC,EAAQwkC,MAC/CjoD,KAAKmI,OAAO,IAAI5E,EAAMkgB,EAAQukC,IAAKvkC,EAAQwkC,MAG3CriC,EAAQnC,EAAQ9hB,OAAS3B,KAAK2B,SAAW8hB,EAAQ9hB,OACjD3B,KAAK4C,OAAO,IACZ5C,KAAK2B,KAAK8hB,EAAQ9hB,OAGtB3B,KAAK8iD,SAAWuB,EAEhBrkD,KAAK+iD,YACL/iD,KAAKkpB,OAAOlpB,KAAKyjB,QACrB,MACIzjB,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGojB,EAASzjB,KAAKyjB,QAEpD,CACJ,EAEAmS,YAAa,SAAS+uB,GAClB,GAAI3kD,KAAKG,SAAWH,KAAKG,QAAQskD,aACzBzkD,KAAKG,QAAQgoD,sBAAuB,CACpC,IAAI9D,EAAQrkD,KAAKG,QAAQgoD,sBAAsBC,SAASpoD,KAAK8iD,SAASuF,KAElEhE,IACArkD,KAAKG,QAAQykD,uBACTh/B,EAAQ5lB,KAAKyjB,QAAQqkC,QAAiC,OAAvB9nD,KAAKyjB,QAAQqkC,OAC5CQ,GAAW,OAAQjE,GACnBiE,GAAW,gBAAiBjE,GAC5BA,EAAMnvC,IAAI,QAASlV,KAAKyjB,QAAQqkC,OAChCzD,EAAMnvC,IAAI,QAASlV,KAAKyjB,QAAQskC,SAEhC1D,EAAMnvC,IAAI,OAAQlV,KAAKyjB,QAAQha,MAC3Bmc,EAAQy+B,EAAMqD,gBACdrD,EAAMnvC,IAAI,gBAAiBlV,KAAK68B,gBAAkB78B,KAAK68B,gBAAgBpZ,QAAQphB,KAAO,MAE1FimD,GAAW,QAASjE,GACpBiE,GAAW,QAASjE,IAGpBz+B,EAAQ5lB,KAAKyjB,QAAQukC,MAA6B,OAArBhoD,KAAKyjB,QAAQukC,KAC1CM,GAAW,KAAMjE,GACjBiE,GAAW,cAAejE,GAC1BA,EAAMnvC,IAAI,MAAOlV,KAAKyjB,QAAQukC,KAC9B3D,EAAMnvC,IAAI,MAAOlV,KAAKyjB,QAAQwkC,OAE9B5D,EAAMnvC,IAAI,KAAMlV,KAAKyjB,QAAQla,IACzBqc,EAAQy+B,EAAMsD,cACdtD,EAAMnvC,IAAI,cAAelV,KAAKi2B,gBAAkBj2B,KAAKi2B,gBAAgBxS,QAAQphB,KAAO,MAExFimD,GAAW,MAAOjE,GAClBiE,GAAW,MAAOjE,IAGlBz+B,EAAQ5lB,KAAKyjB,QAAQ9hB,OAASikB,EAAQy+B,EAAM1iD,OAC5C0iD,EAAMnvC,IAAI,OAAQlV,KAAKyjB,QAAQ9hB,MAGnC3B,KAAK8iD,SAAWuB,EAChBrkD,KAAKG,QAAQ0kD,sBAETF,GACA3kD,KAAKG,QAAQ68B,yBAGzB,CAER,EAOAoE,YAAa,WACT,OAAOphC,KAAKkhC,yBAA2BlhC,KAAKkhC,yBAAyBj6B,WAAajH,KAAKqnD,YAC3F,EAEAE,WAAY,SAASnlD,GACjB,IAEI0gD,EAFAyF,EAAcnmD,aAAkB06B,GAChC0rB,EAAmBxoD,KAAKyjB,QAAQikC,eAAiBx0B,EAEjDq1B,IAAgBnmD,EAAO26B,aAAayrB,KAIpCpmD,IAAWsjB,IACX1lB,KAAKyJ,KAAOrH,GAGhBpC,KAAKyoD,6BAEU,OAAXrmD,EACIpC,KAAK68B,kBACL78B,KAAKqnD,cAAgBrnD,KAAKkhC,0BAA4BlhC,KAAK68B,iBAAiB51B,WAC5EjH,KAAK0oD,wBACL1oD,KAAK2oD,gBAAgB,KAAM3oD,KAAKqnD,eAE7BjlD,aAAkByhD,KACzBf,EAAW1gD,EAAOkV,MAAMwrC,WAEpB9iD,KAAK2oD,gBAAgB7F,EAAShtC,IAElC9V,KAAK68B,gBAAkBz6B,EACvBpC,KAAK68B,gBAAgBpB,YAAY14B,KAAK/C,OAC/BoC,aAAkBmB,GACzBvD,KAAK2oD,gBAAgB,KAAMvmD,GAC3BpC,KAAKqnD,aAAejlD,EAChBpC,KAAK68B,iBACL78B,KAAK0oD,yBAGFH,KACPzF,EAAW1gD,EAAO0gD,WAEd9iD,KAAK2oD,gBAAgB7F,EAAShtC,IAGlC9V,KAAK68B,gBAAkBz6B,EAAO26B,aAAayrB,GAC3CxoD,KAAK68B,gBAAgBpB,YAAY14B,KAAK/C,OAE9C,EAEAoC,OAAQ,SAASA,EAAQkhB,GAQrB,OAPIziB,EAAUuB,KACNkhB,GAAYtjB,KAAKG,SACjBH,KAAKG,QAAQu7B,gBAAgBjD,iBAAiB,IAAIt4B,EAAQi1B,mBAAmBp1B,KAAMoC,IAEvFpC,KAAKunD,WAAWnlD,GAChBpC,KAAK02B,WAEF12B,KAAK68B,gBAAkB78B,KAAK68B,gBAAkB78B,KAAKqnD,YAC9D,EAEAsB,gBAAiB,SAASl/C,EAAMm/C,GAC5B5oD,KAAKyjB,QAAQha,KAAOA,EAChBm/C,GACA5oD,KAAKyjB,QAAQqkC,MAAQc,EAAU5lD,EAC/BhD,KAAKyjB,QAAQskC,MAAQa,EAAU3lD,IAE/BjD,KAAKyjB,QAAQqkC,MAAQ,KACrB9nD,KAAKyjB,QAAQskC,MAAQ,KAE7B,EAQAc,cAAe,SAASrmD,GACpB,IAAIA,EAYA,OAHKxC,KAAK8oD,iBACN9oD,KAAK8oD,eAAiB,IAAI3oD,EAAQoN,YAAYvN,KAAKohC,cAAe,KAAM,OAErEphC,KAAK8oD,eAXZ,KAAItmD,aAAiBrC,EAAQoN,aAKzB,KAAM,+CAJN/K,EAAMgL,KAAO,KACbxN,KAAK8oD,eAAiBtmD,EACtBxC,KAAKoC,OAAOI,EAAMkL,MAU9B,EAKA2zB,YAAa,WACT,OAAOrhC,KAAKmhC,yBAA2BnhC,KAAKmhC,yBAAyBl6B,WAAajH,KAAKsnD,YAC3F,EAEAE,WAAY,SAASr/C,GACjB,IAEI26C,EAFAiG,EAAc5gD,aAAkB20B,GAChC0rB,EAAmBxoD,KAAKyjB,QAAQkkC,aAAez0B,EAG/C61B,IAAgB5gD,EAAO40B,aAAayrB,KAIpCrgD,IAAWud,IACX1lB,KAAKuJ,GAAKpB,GAGdnI,KAAKgpD,6BAEU,OAAX7gD,EACInI,KAAKi2B,kBACLj2B,KAAKsnD,cAAgBtnD,KAAKmhC,0BAA4BnhC,KAAKi2B,iBAAiBhvB,WAC5EjH,KAAKipD,wBACLjpD,KAAKkpD,cAAc,KAAMlpD,KAAKsnD,eAE3Bn/C,aAAkB07C,KACzBf,EAAW36C,EAAOmP,MAAMwrC,WAEpB9iD,KAAKkpD,cAAcpG,EAAShtC,IAEhC9V,KAAKi2B,gBAAkB9tB,EACvBnI,KAAKi2B,gBAAgBwF,YAAY14B,KAAK/C,OAC/BmI,aAAkB5E,GACzBvD,KAAKkpD,cAAc,KAAM/gD,GACzBnI,KAAKsnD,aAAen/C,EAChBnI,KAAKi2B,iBACLj2B,KAAKipD,yBAEFF,KACPjG,EAAW36C,EAAO26C,WAEd9iD,KAAKkpD,cAAcpG,EAAShtC,IAEhC9V,KAAKi2B,gBAAkB9tB,EAAO40B,aAAayrB,GAC3CxoD,KAAKi2B,gBAAgBwF,YAAY14B,KAAK/C,OAE9C,EAEAmI,OAAQ,SAASA,EAAQmb,GASrB,OARIziB,EAAUsH,KACNmb,GAAYtjB,KAAKG,SACjBH,KAAKG,QAAQu7B,gBAAgBjD,iBAAiB,IAAIt4B,EAAQi1B,mBAAmBp1B,KAAM0lB,EAAavd,IAEpGnI,KAAKwnD,WAAWr/C,GAEhBnI,KAAK02B,WAEF12B,KAAKi2B,gBAAkBj2B,KAAKi2B,gBAAkBj2B,KAAKsnD,YAC9D,EAEA4B,cAAe,SAAS3/C,EAAI4/C,GACxBnpD,KAAKyjB,QAAQla,GAAKA,EACd4/C,GACAnpD,KAAKyjB,QAAQukC,IAAMmB,EAAQnmD,EAC3BhD,KAAKyjB,QAAQwkC,IAAMkB,EAAQlmD,IAE3BjD,KAAKyjB,QAAQukC,IAAM,KACnBhoD,KAAKyjB,QAAQwkC,IAAM,KAE3B,EAQAmB,cAAe,SAAS5mD,GACpB,IAAIA,EAYA,OAHKxC,KAAKqpD,iBACNrpD,KAAKqpD,eAAiB,IAAIlpD,EAAQoN,YAAYvN,KAAKqhC,cAAe,KAAM,OAErErhC,KAAKqpD,eAXZ,KAAI7mD,aAAiBrC,EAAQoN,aAKzB,KAAM,+CAJN/K,EAAMiL,MAAQ,KACdzN,KAAKqpD,eAAiB7mD,EACtBxC,KAAKmI,OAAO3F,EAAMkL,MAU9B,EAEAq5C,kBAAmB,WACf/mD,KAAK21B,iBAAiB31B,KAAKoC,SAAU,UACrCpC,KAAK21B,iBAAiB31B,KAAKmI,SAAU,SACzC,EAEAwtB,iBAAkB,SAAS2zB,EAAUjnD,GACjC,IAAI8V,EAAOnY,KACPG,EAAUgY,EAAKhY,QACnB,GAAImpD,aAAoBzF,KAAc1jD,EAAQg0B,aAAam1B,EAAShyC,MAAMxB,IAAK,CAC3E,IAAIgtC,EAAWwG,EAAShyC,MAAMwrC,SAC1ByG,EAAgBD,EAAS7lC,QAAQphB,KACjCmnD,EAAe,WACf,IAAIlyC,EAAQnX,EAAQ0nD,SAAS/E,EAAShtC,IACtCwzC,EAAWhyC,EAAMylB,aAAawsB,GAC9BpxC,EAAK9V,GAAMinD,GAAU,GACrBnxC,EAAKyd,aACT,EACA,GAAIz1B,EAAQ0nD,SAAS/E,EAAShtC,IAC3B0zC,QACI,CACH,IAAIC,EAAetpD,EAAQupD,oBAAoBtB,SAAStF,EAASuF,KAC7DoB,GACAtpD,EAAQwpD,2BAA2B5mD,KAAK0mD,EAAaG,WAAWJ,GAExE,CACJ,MACIrxC,EAAK9V,GAAMinD,GAAU,EAE7B,EAEAh4C,QAAS,SAASA,GACd,IAAI3K,EAAS3G,KAAKmjD,SAAS7xC,GAI3B,OAHIsU,EAAQtU,IACRtR,KAAK+kD,gBAEFp+C,CACX,EAEA48C,qBAAsB,SAAS9/B,GAC3B,IAAImE,EAaJ,OAZIxc,EAAWqY,EAAQmE,QACnBA,EAASnE,EAAQmE,OAAOvmB,KAAKrB,KAAMyjB,GAC5BA,EAAQ0H,OACfvD,EAAS,IAAIgD,EAAUnH,IAGvBmE,IACA5nB,KAAKqjD,eAAiBz7B,EACtBA,EAAO+I,gBAAiB,EACxB3wB,KAAK4nB,OAAOyG,OAAOzG,IAGhBA,CACX,EAEA07B,qBAAsB,SAAS7/B,GACvBrY,EAAWqY,EAAQmE,SACnB5nB,KAAK4nB,OAAO/hB,OAAO7F,KAAKqjD,gBACxBrjD,KAAKujD,qBAAqB9/B,IAE1BzjB,KAAKqjD,eAAen6B,OAAOzF,EAEnC,EAEAshC,cAAe,WACX,GAAI/kD,KAAKqjD,eAAgB,CAMrB,IALA,IAAIz3C,EA9rCgB,EA+rChBhJ,EAAS5C,KAAK0gC,YACdmpB,EAAShJ,EAAKj9C,MAAMhB,EAAOX,OAAS,GACpC6nD,EAAWD,EAAS,EAEjBC,EAAW,GAAKlnD,EAAOknD,GAAUt7C,OAAO5L,EAAOinD,KAClDC,IACAD,IAGJ,IAeIn8C,EAfAyf,EAAWvqB,EAAOinD,GAClBngC,EAAa9mB,EAAOknD,GAEpBr5B,EAAczwB,KAAKqjD,eAAe16B,WAClCzb,EAAQujB,EAAYvjB,MACpBD,EAASwjB,EAAYxjB,OACrB88C,EAAcnnD,EAAOX,OAAS,GAAM,EACpC4tC,EAAWnmB,EAAWma,WAAW1W,GAUrC,GARI48B,GAAennD,EAAOX,OAAS,GAAK4tC,EAAW,IAC7CnmB,EAAWzmB,IAAMkqB,EAASlqB,GAAK4sC,EAAW3iC,GAAWwc,EAAW1mB,IAAMmqB,EAASnqB,GAAK6sC,EAAW5iC,KACjG88C,GAAc,EACdn+C,EAAS,GAKTm+C,EAAa,CACb,IAAIp7C,EAAQkjB,EAAKhM,KAAKqH,IAAI2zB,EAAKv8C,MAAM6oB,EAASlqB,EAAIymB,EAAWzmB,EAAGkqB,EAASnqB,EAAI0mB,EAAW1mB,IACxF0K,EAAQ,IAAInK,GAAO4pB,EAASnqB,EAAI0mB,EAAW1mB,GAAK,EAAI0mB,EAAW1mB,GAAImqB,EAASlqB,EAAIymB,EAAWzmB,GAAK,EAAIymB,EAAWzmB,GAEvF,KAApB49C,EAAKjgD,IAAI+N,IACTjB,EAAM1K,GAAK4I,EACX8B,EAAMzK,GAAKgK,EAAS,GACb0B,EAAQ,KAAQ,GACvBjB,EAAM1K,GAAKkK,EAAQ,EACnBQ,EAAMzK,GAAKgK,EAASrB,GACb+C,GAAS,IAAO,EAAIA,GAASA,EAAQ,GAC5CjB,EAAMzK,GAAKgK,GACJ0B,EAAQ,GAAKA,EAAQ,MAC5BjB,EAAM1K,GAAKkK,EACXQ,EAAMzK,GAAKgK,EAEnB,KAAO,CACH,IAAI+8C,EAASnJ,EAAKj9C,MAAMhB,EAAOX,OAAS,GACxCyL,EAAQ9K,EAAOonD,GAAQv+C,QACvBie,EAAa9mB,EAAOonD,EAAS,GAC7B78B,EAAWvqB,EAAOonD,EAAS,GAE3B,IAAIhgB,EAAUtgB,EAAW1mB,GAAK0K,EAAM1K,GAAKmqB,EAASnqB,GAAK0K,EAAM1K,EAAI4I,GAAU6kB,EAAYvjB,MAAQtB,EAC3Fq+B,EAAUvgB,EAAWzmB,GAAKyK,EAAMzK,GAAKkqB,EAASlqB,GAAKyK,EAAMzK,EAAI2I,GAAU6kB,EAAYxjB,OAASrB,EAEhG8B,EAAM1K,GAAKgnC,EACXt8B,EAAMzK,GAAKgnC,CACf,CAEAjqC,KAAKqjD,eAAep8C,SAASyG,EACjC,CACJ,EAMAglB,OAAQ,SAASlwB,GACb,IAA4BwiC,EAAU+gB,EAAlC5lD,EAAUH,KAAKG,QACnB,GAAIH,KAAK2jD,cACD3jD,KAAKg8B,aAAex5B,EAyBpB,OAxBAxC,KAAKg8B,WAAax5B,EAClBwiC,EAAW,GACX+gB,EAAa,GACT/lD,KAAKg8B,YACLh8B,KAAKs2B,QAAU,IAAI0M,EAAsBhjC,KAAMA,KAAKyjB,QAAQwmC,WAC5D9pD,EAAQwoC,OAAO3oC,KAAKs2B,SAAS,GAC7Bn2B,EAAQy/B,eAAe78B,KAAK/C,MAC5BglC,EAASjiC,KAAK/C,OAEVA,KAAKs2B,UACLn2B,EAAQwoC,OAAO3oC,KAAKs2B,SAAS,GAC7B91B,EAAMqF,OAAO1F,EAAQy/B,eAAgB5/B,MACrCA,KAAKs2B,QAAU5Q,EACfqgC,EAAWhjD,KAAK/C,OAIpBA,KAAKs2B,SACLt2B,KAAKs2B,QAAQI,UAGZv2B,EAAQ6lD,oBACT7lD,EAAQ8lD,kBAAkBjhB,EAAU+gB,IAEjC,CAGnB,EAOAnuC,OAAQ,SAASpV,GACb,IAAIA,GAAUlB,EAASkB,GAGnB,OAAOxC,KAAKulC,QAFZvlC,KAAKulC,QAAU/iC,CAIvB,EAMAb,KAAM,SAASa,GACX,IAAIihB,EAAUzjB,KAAKyjB,QACnB,IAAIjhB,EAOA,OAAOihB,EAAQ9hB,KANXa,IAAUihB,EAAQ9hB,OAClB8hB,EAAQ9hB,KAAOa,EACfxC,KAAKonD,cACLpnD,KAAK02B,UAKjB,EAEA0wB,YAAa,WACT,IAAIzlD,GAAQ3B,KAAKyjB,QAAQ9hB,MAAQ,IAAI8P,cAEjCzR,KAAKkqD,QADLvoD,GAAQo/C,EACO,IAAIlgB,EAAgB7gC,MAEpB,IAAI2gC,EAAe3gC,KAE1C,EAQA4C,OAAQ,SAASJ,GACb,IAAIA,EAaG,CACH,IAAI2nD,EAAM,GACV,GAAItpD,EAAUb,KAAKynD,UACf,IAAK,IAAIz8C,EAAI,EAAGA,EAAIhL,KAAKynD,SAASxlD,OAAQ+I,IACtCm/C,EAAIpnD,KAAK/C,KAAKynD,SAASz8C,GAAG0C,OAGlC,OAAOy8C,CACX,CApBInqD,KAAKynD,SAAW,GAChB,IAAK,IAAI/kD,EAAI,EAAGA,EAAIF,EAAMP,OAAQS,IAAK,CACnC,IAAI0nD,EAAa5nD,EAAME,GACvB,GAAI0nD,aAAsBjqD,EAAQoD,MAC9BvD,KAAKynD,SAAS1kD,KAAK,IAAI5C,EAAQoN,YAAY68C,QACxC,KAAIA,EAAWhpD,eAAe,OAAQgpD,EAAWhpD,eAAe,KAGnE,KAAM,+EAFNpB,KAAKynD,SAAS1kD,KAAK,IAAI5C,EAAQoN,YAAY,IAAIhK,EAAM6mD,EAAWpnD,EAAGonD,EAAWnnD,IAGlF,CACJ,CAWR,EAKAy9B,UAAW,WACP,IAAIypB,EAAM,CAACnqD,KAAKohC,eAChB,GAAIphC,KAAKynD,SACL,IAAK,IAAIz8C,EAAI,EAAGA,EAAIhL,KAAKynD,SAASxlD,OAAQ+I,IACtCm/C,EAAIpnD,KAAK/C,KAAKynD,SAASz8C,GAAG0C,OAIlC,OADAy8C,EAAIpnD,KAAK/C,KAAKqhC,eACP8oB,CACX,EAEAzzB,QAAS,WACL12B,KAAKqqD,qBACLrqD,KAAKsqD,eACLtqD,KAAK+kD,gBAED/kD,KAAKs2B,SACLt2B,KAAKs2B,QAAQI,SAErB,EAEA2zB,mBAAoB,WAChB,IACIjpB,EAAaC,EACbkpB,EAAkBC,EAFlBlxC,EAAatZ,KAGboC,EAASkX,EAAWlX,SACpB+F,EAASmR,EAAWnR,SAEpB/F,aAAkBmB,EAClB69B,EAAch/B,EACPA,aAAkByhD,KAErB0G,EADAjI,GAAgBlgD,GACGA,EAAOkV,MAAM6oB,WAEb,CAAC/9B,IAIxB+F,aAAkB5E,EAClB89B,EAAcl5B,EACPA,aAAkB07C,KAErB2G,EADAlI,GAAgBn6C,GACGA,EAAOmP,MAAM6oB,WAEb,CAACh4B,IAIxBi5B,EACIopB,IACAlxC,EAAW6nB,yBAA2BohB,GAAiBnhB,EAAaopB,IAEjED,IACHlpB,EACA/nB,EAAW4nB,yBAA2BqhB,GAAiBlhB,EAAakpB,GAC7DC,GACPxqD,KAAKyqD,uBAAuBF,EAAkBC,GAG1D,EAEAC,uBAAwB,SAASF,EAAkBC,GAC/C,IAEIE,EAAsBC,EACtBvpB,EAAaC,EACbupB,EAAWC,EACXhuB,EAAiB5G,EACjB60B,EAAWC,EACXzU,EAPA0U,EAAiB7J,GACjBjL,EAAUiL,GAQd,IAAK2J,EAAY,EAAGA,EAAYP,EAAiBtoD,OAAQ6oD,IAErD,IAAKxI,GADLzlB,EAAkB0tB,EAAiBO,IAI/B,IAFA1pB,EAAcvE,EAAgB51B,WAEzB8jD,EAAY,EAAGA,EAAYP,EAAiBvoD,OAAQ8oD,IAEhDzI,GADLrsB,EAAkBu0B,EAAiBO,MAE/B1pB,EAAcpL,EAAgBhvB,YAC9BqvC,EAAOuK,EAAKjtC,MAAMwtB,EAAYyC,WAAWxC,KAE9B2pB,GAAkBhrD,KAAKG,SAAWH,KAAKirD,iBAAiB7pB,EAAaC,EAAaxE,EAAiB5G,KAC1G+0B,EAAiB1U,EACjBoU,EAAuB7tB,EACvB8tB,EAAuB10B,GAGvBqgB,EAAOJ,IACP0U,EAAY/tB,EACZguB,EAAY50B,EACZigB,EAAUI,IAO1BoU,IACAE,EAAYF,EACZG,EAAYF,GAGhB3qD,KAAKkhC,yBAA2B0pB,EAChC5qD,KAAKmhC,yBAA2B0pB,CACpC,EAEAI,iBAAkB,SAAS7pB,EAAaC,EAAaxE,EAAiB5G,GAClE,IAAIi1B,EAASlrD,KAAKkqD,QACdiB,GAAY,EAChB,GAAID,aAAkBrqB,EAAiB,CACnC,IACI37B,EAAOD,EACNwJ,EAAM28C,EAFPxoD,EAASsoD,EAAOnqB,YAAYK,EAAaC,EAAaxE,EAAiB5G,GAI3Em1B,EAAUprD,KAAKqrD,iBAAiBjqB,EAAaC,EAAaxE,EAAgBvlB,MAAO2e,EAAgB3e,OACjG1U,EAAOoe,QAAQogB,GACfx+B,EAAOG,KAAKs+B,GAGZ,IAAK,IAAInB,EAAM,EAAGA,EAAMt9B,EAAOX,OAAQi+B,IAcnC,GAbAh7B,EAAQtC,EAAOs9B,EAAM,GACrBj7B,EAAMrC,EAAOs9B,IACbzxB,EAAO,IAAI5B,EAAKg0C,EAAKl3C,IAAIzE,EAAMlC,EAAGiC,EAAIjC,GAAI69C,EAAKl3C,IAAIzE,EAAMjC,EAAGgC,EAAIhC,GAChD49C,EAAKjgD,IAAIsE,EAAMlC,EAAIiC,EAAIjC,GAAI69C,EAAKjgD,IAAIsE,EAAMjC,EAAIgC,EAAIhC,KACzDiK,MAAQ,IACbuB,EAAKzL,IACLyL,EAAKvB,OAAS,GAEduB,EAAKxB,OAAS,IACdwB,EAAKxL,IACLwL,EAAKxB,QAAU,IAGdwB,EAAKzM,WAAahC,KAAKG,QAAQmrD,gBAAgBC,YAAY98C,EAAM28C,GAAU,CAC5ED,GAAY,EACZ,KACJ,CAER,CACA,OAAOA,CACX,EAEAE,iBAAkB,SAASjqB,EAAaC,EAAald,EAAaC,GAC9D,IAAIgnC,EAAU,GAOd,OANIprD,KAAKwrD,oBAAoBpqB,EAAajd,IACtCinC,EAAQroD,KAAKohB,GAEbnkB,KAAKwrD,oBAAoBnqB,EAAajd,IACtCgnC,EAAQroD,KAAKqhB,GAEVgnC,CACX,EAEAI,oBAAqB,SAAS99C,EAAO4J,GACjC,IAA6B2vC,EAEzB/kB,EAAQC,EAFRvqB,EAASN,EAAMM,SACfjJ,EAAQ2I,EAAMrI,SAASN,MAEvB88C,EAAU7zC,EAAO5U,EACjB0oD,EAAU9zC,EAAO3U,EAKrB,OAFAi/B,GADA+kB,EAAev5C,EAAMjC,QAAQwD,OAAON,EAAOiJ,EAAO5S,WAC5BhC,EACtBm/B,EAAS8kB,EAAahkD,EACfi/B,EAASupB,GAAWvpB,EAAUupB,EAAU7zC,EAAO1K,OAAUi1B,EAASupB,GAAWvpB,EAAUupB,EAAU9zC,EAAO3K,MACnH,EAEAic,OAAQ,SAASzF,GACb,GAAIA,EAAS,CACTzjB,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAASA,GAE5C,IAAI7gB,EAAS5C,KAAKyjB,QAAQ7gB,OAEtBgjB,EAAQhjB,IAAWA,EAAOX,OAAS,IACnCjC,KAAK4C,OAAOA,GACZ5C,KAAKsqD,iBAGJ7mC,GAAWA,EAAQnS,SAAYmS,EAAQ0H,OACxCnrB,KAAKsR,QAAQmS,EAAQnS,SAGzBtR,KAAKwsB,KAAKtD,OAAO,CACb7F,KAAMI,EAAQJ,KACdyG,OAAQrG,EAAQqG,OAChB+D,SAAUpK,EAAQoK,SAClBC,OAAQrK,EAAQqK,QAExB,CACJ,EAKAriB,MAAO,WACH,IAAIy3C,EAAOljD,KAAKijD,YAMhB,OAJIjjD,KAAKG,SAAWH,KAAKG,QAAQskD,aAAe7+B,EAAQ5lB,KAAK8iD,YACzDI,EAAKz/B,QAAQq/B,SAAWgD,GAAc9lD,KAAK8iD,WAGxC,IAAIjjB,GAAW7/B,KAAKyJ,KAAMzJ,KAAKuJ,GAAI25C,EAAKz/B,QACnD,EAKAw/B,UAAW,WACP,IAAIx5C,EAAOzJ,KAAKyJ,KAAKm6C,OAAS5jD,KAAKyJ,KAAKm6C,OAAS5jD,KAAKyJ,KAAKjI,WACvD+H,EAAKvJ,KAAKuJ,GAAGq6C,OAAS5jD,KAAKuJ,GAAGq6C,OAAS5jD,KAAKuJ,GAAG/H,WAE/C0hD,EAAO7iD,EAAW,CAAC,EAAG,CACtBojB,QAASzjB,KAAKyjB,QACdha,KAAMA,EACNF,GAAIA,IAQR,OALIqc,EAAQ5lB,KAAK8iD,YACbI,EAAKJ,SAAW9iD,KAAK8iD,SAASthD,YAGlC0hD,EAAKz/B,QAAQ7gB,OAAS5C,KAAK4C,SACpBsgD,CACX,EAQA5nB,SAAU,SAAS94B,GACf,GAAIxC,KAAKgpB,UAAW,CAChB,IAAIlmB,EAAI,IAAIS,EAAMf,EAAMQ,EAAGR,EAAMS,GAAIwG,EAAOzJ,KAAKohC,cAAe73B,EAAKvJ,KAAKqhC,cAC1E,GAAI7+B,EAAMR,UAAYQ,EAAMR,WAAaQ,EAAM0D,SAASuD,IAASjH,EAAM0D,SAASqD,GAC5E,OAAOvJ,KAEX,GAAIA,KAAKkqD,QAAQ1pB,QAAQ19B,GACrB,OAAO9C,IAEf,CACJ,EAEAqpB,OAAQ,SAAS7mB,GACb,IAAIyhB,GAASjkB,KAAKyjB,QAAQqG,QAAU,CAAC,GAAG7F,MAEpCzhB,GAAS3B,EAAUb,KAAKyjB,QAAQ2G,MAAMN,OAAO7F,SAC7CA,EAAQjkB,KAAKyjB,QAAQ2G,MAAMN,OAAO7F,OAGtCjkB,KAAKwsB,KAAKtD,OAAO,CACbY,OAAQ,CACJ7F,MAAOA,IAGnB,EAEAqmC,aAAc,WACL1kC,EAAQ5lB,KAAKwsB,QAGlBxsB,KAAK6rB,YACL7rB,KAAK4X,OAAO5X,KAAKkqD,QAAQzpB,aAC7B,EAEA5U,UAAW,WACH7rB,KAAKkqD,SACLlqD,KAAKkqD,QAAQtpB,QAEjB,IAAIx+B,EAASpC,KAAKohC,cACdj5B,EAASnI,KAAKqhC,cACdz+B,EAAS5C,KAAK4C,SAElB5C,KAAKwsB,KAAKtD,OAAO,CACbtmB,OAAQ,CAACR,GAAQmf,OAAO3e,EAAQ,CAACuF,KAEzC,EAEAugD,sBAAuB,WACnB1oD,KAAK68B,gBAAkBnX,EACvB1lB,KAAKkhC,yBAA2Bxb,CACpC,EAEAujC,sBAAuB,WACnBjpD,KAAKi2B,gBAAkBvQ,EACvB1lB,KAAKmhC,yBAA2Bzb,CACpC,EAEA+iC,2BAA4B,WACpBzoD,KAAK68B,iBACLr8B,EAAMqF,OAAO7F,KAAK68B,gBAAgBpB,YAAaz7B,KAEvD,EAEAgpD,2BAA4B,WACpBhpD,KAAKi2B,iBACLz1B,EAAMqF,OAAO7F,KAAKi2B,gBAAgBwF,YAAaz7B,KAEvD,EAEA4jD,OAAQ,WACJ,IACcl2C,EADV4L,EAAatZ,KAsBjB,MAAO,CACHyJ,KArBA6P,EAAW7P,MAAQ6P,EAAW7P,KAAKm6C,OAC5BtqC,EAAW7P,KAAKm6C,SAGhB,CACH5gD,GAFJ0K,EAAQ4L,EAAW+tC,cAENrkD,EACTC,EAAGyK,EAAMzK,GAgBbsG,GAZA+P,EAAW/P,IAAM+P,EAAW/P,GAAGq6C,OAC1BtqC,EAAW/P,GAAGq6C,SAGd,CACD5gD,GAFJ0K,EAAQ4L,EAAWguC,cAENtkD,EACTC,EAAGyK,EAAMzK,GAQrB,IAGA0oD,GAAUrL,EAAOt4C,OAAO,CACxBC,KAAM,SAASjB,EAAS4kD,GACpB,IAAIzzC,EAAOnY,KAEXH,MAAMkyB,QAAQ/qB,GACds5C,EAAOnqC,GAAGlO,KAAK5G,KAAK8W,EAAMnR,EAAS4kD,GAEnCzzC,EAAK0zC,aAEL1zC,EAAK2zC,gBACL3zC,EAAK4zC,qBAAqB5zC,EAAKsL,SAC/BtL,EAAK6zC,cAAcJ,GACnBzzC,EAAK8zC,uBAEL9zC,EAAK+zC,cAEL/zC,EAAKkoB,UAAY,IAAIrR,EAAM,CACvBlZ,GAAI,eAERqC,EAAKihB,OAAO/K,OAAOlW,EAAKkoB,WAExBloB,EAAKmzC,gBAAkB,IAAIa,GAAeh0C,GAE1CA,EAAK+iB,KAAO,IAAI33B,EAChB4U,EAAK4qB,UAAY,GACjB5qB,EAAKi0C,aAAe,IAAIp9B,EAAM,CAC1BlZ,GAAI,kBAERqC,EAAKihB,OAAO/K,OAAOlW,EAAKi0C,cAExBj0C,EAAKk0C,kBAELl0C,EAAKsf,cAELtf,EAAKojB,iBAAmB,IAAIqJ,EAAgBzsB,EAAM,CAAEitB,SAAUjtB,EAAKsL,QAAQ2hB,WAC3EjtB,EAAK8kB,mBAAqB,IAAIiH,EAAkB/rB,GAEhDA,EAAKwwB,OAAOxwB,EAAKojB,kBAAkB,GACnCpjB,EAAKwwB,OAAOxwB,EAAK8kB,oBAAoB,GAErC9kB,EAAK4jB,SAAW,IAAI0M,EAAStwB,GAE7BA,EAAKm0C,WAAa,GAElBn0C,EAAKo0C,oBAAqB,EAE1Bp0C,EAAKq0C,kBAELr0C,EAAKs0C,uBAELt0C,EAAKu0C,wBAELv0C,EAAKxI,KAAKwI,EAAKsL,QAAQ9T,MAEvBwI,EAAKihB,OAAOvH,MAChB,EAEApO,QAAS,CACLphB,KAAM,UACNsqD,MAAO,OACPn2B,OAAQ,GACRsI,SAAU,GACVnvB,KAAM,EACNqvB,QAAS,EACTC,QAAS,EACT2tB,WAAY,CAAC,EACbC,WAAW,EACXrJ,SAAU,GACVsJ,UAAU,EACV1nB,SAAU,CACNn2B,OAAQ,CAAC,EACTo2B,OAAQ,CAAC,EACTla,MAAM,EACNqS,MAAO,GACP2K,KAAM,CACFJ,KAAM,CACFxlC,KAAM,GACNoM,MAAO,KAGf9I,QAAQ,GAEZu0B,SAAU,CAAC,EACXyB,WAAY,CACR16B,IAAK,QAET4rD,QAAS,CAAE1yB,SAAS,EAAMtT,OAAQ,OAClCrO,KAAM,CACF2hB,SAAS,EACT2P,QAAS,GACTC,QAAS,IAEb9mB,cAAehjB,EAAQgjB,cAAc,CAAEG,UAAU,IACjD0pC,mBAAoB,CAChB5nB,SAAU,CACN5H,MAAO,IAEX77B,KAAMo/C,GAEV3qB,OAAQ,GACRqF,YAAa,IAGjBxD,OAAQ,CACJupB,GACAD,GACAD,GAAKF,GACLC,GACA3tB,EACAstB,EACAC,EA10DU,aACA,aA40DV,eACA,OACA,SACA,OACA,SACA,MACA,YAp1DS,YAFN,OACI,WA21DXtpB,MAAO,WACH,OAAO13B,GACX,EAEAwsD,qBAAsB,WAClB,IAAIrnB,EAAWplC,KAAKyjB,QAAQ2hB,SAC5B,GAAIA,EAAU,CACV,IAAI5H,EAAQ4H,EAAS5H,OACjBx9B,KAAKykD,cAAyB,IAAVjnB,GAAqBA,GAA0B,IAAjBA,EAAMv7B,SACxDu7B,EAAQ,CAAC,cAAe,OAAQ,OAAQ,kBAAmB,wBAG3DA,GAASA,EAAMv7B,SACfjC,KAAKitD,QAAU,IAAIC,GAAeltD,KAAM,CACpCw9B,MAAOA,GAAS,CAAC,EACjB2vB,MAAOntD,KAAKotD,cAAcp1B,KAAKh4B,MAC/BqtD,OAAO,IAGXrtD,KAAKitD,QAAQjmD,QAAQs4B,IAAI,CACrBguB,UAAW,SAGfttD,KAAKgH,QAAQumD,QAAQvtD,KAAKitD,QAAQjmD,SAClChH,KAAKwtD,UAEb,CACJ,EAEAC,YAAa,WACT,GAAKztD,KAAK0tD,QAAU1tD,KAAK0tD,OAAOzoD,QAAWjF,KAAK0tD,OAAQ,CACpD,IAAId,EAAa5sD,KAAK4sD,WAElBhmD,GADOgmD,EAAWe,QAAU,IACf1rD,OACboiD,EAAQuJ,GAAYhB,EAAY,CAAC,GACjCt1C,EAAQtX,KAAK6tD,aAAaxJ,EAAO,CAAC,GAEtC,IAAKrkD,KAAKmJ,QAAQ,MAAO,CAAEmO,MAAOA,IAC9Bs1C,EAAW7lD,OAAOH,EAAOy9C,GACNrkD,KAAK0pD,oBAAoBtB,SAAS/D,EAAMgE,KAC9CrhD,QAAUsQ,EACvBtX,KAAK8tD,KAAKx2C,EAElB,CACJ,EAEAu2C,aAAc,SAAS/K,EAAUr/B,GAI7B,OAHAA,EAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAQN,cAAeM,IAC7Cq/B,SAAWA,EACP,IAAIhmB,GAAMrZ,EAASzjB,KAEnC,EAEA+tD,iBAAkB,WACd,GAAM/tD,KAAK0tD,QAAU1tD,KAAK0tD,OAAOzoD,QAAWjF,KAAK0tD,OAAS,CACtD,IAAIvF,EAAwBnoD,KAAKmoD,sBAE7BvhD,GADOuhD,EAAsBwF,QAAU,IAC1B1rD,OACboiD,EAAQuJ,GAAYzF,EAAuB,CAAC,GAC5C7uC,EAAatZ,KAAKo8B,kBAAkBioB,GACnCrkD,KAAKmJ,QAAQ,MAAO,CAAEmQ,WAAYA,MACnCtZ,KAAKguD,oBAAoB3J,EAAMgE,KAAO/uC,EACtC6uC,EAAsBphD,OAAOH,EAAOy9C,GACpCrkD,KAAKiuD,cAAc30C,GAAY,GAC/BtZ,KAAK8tD,KAAKx0C,GAElB,CACJ,EAEA8iB,kBAAmB,SAAS0mB,EAAU1gD,EAAQ+F,GAC1C,IAAIsb,EAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAQupC,oBAK1C,OAJAvpC,EAAQq/B,SAAWA,EAEF,IAAIjjB,GAAWz9B,GAAU,IAAImB,EAAS4E,GAAU,IAAI5E,EAASkgB,EAGlF,EAEAyqC,UAAW,SAASpL,EAAUqL,GAE1B,IAAIC,EAAS5K,EADbxjD,KAAKquD,aAEL,IAAIjpB,EAAWplC,KAAKyjB,QAAQ2hB,SAE5B,GAAkB,SAAd+oB,EACAC,EAAUhpB,EAASkpB,aACnB9K,EAAWpe,EAASmpB,kBACjB,IAAkB,cAAdJ,EAKP,OAJA,IAAIK,EAA4BC,GAAmBz2B,KAAKh4B,MACxDouD,EAAU/tD,EAAW,CAAC,EAAG,CAAEoJ,KAAM+kD,EAA2BjlD,GAAIilD,GAA6BppB,EAASspB,mBACtGlL,EAAWpe,EAASupB,kBAGxB,CAEA3uD,KAAK0tD,OAAS,IAAIkB,GAAY5uD,KAAKgH,QAAS,CACxCuD,OAAQvK,KAAK6uD,QAAQ72B,KAAKh4B,MAC1Bq4B,OAAQr4B,KAAK8uD,QAAQ92B,KAAKh4B,MAC1BqkD,MAAOvB,EACPnhD,KAAMwsD,EACNhmD,OAAQnI,KACRouD,QAASA,EACT5K,SAAUA,IAGdxjD,KAAKmJ,QAAQ,OAAQnJ,KAAK+uD,YAC9B,EAEAjB,KAAM,SAAS5pD,GACX,GAAIA,EAAK4+C,SAAU,CACf,IAAIqL,EAAajqD,aAAgB44B,GAAQ,QAAU,aACnD98B,KAAKkuD,UAAUhqD,EAAK4+C,SAAUqL,EAClC,CACJ,EAEAE,WAAY,WACJruD,KAAK0tD,SACL1tD,KAAKgvD,qBAAqBC,cAAcjvD,KAAK0tD,OAAOrJ,OAEpDrkD,KAAKkvD,iBAEb,EAEAC,SAAU,WACFnvD,KAAK0tD,QAAU1tD,KAAK0tD,OAAOzoD,QAC1BjF,KAAKmJ,QAAQ,OAAQnJ,KAAK+uD,cAC3B/uD,KAAKgvD,qBAAqBI,MAElC,EAEAP,QAAS,WACD7uD,KAAK0tD,QAAU1tD,KAAK0tD,OAAOzoD,QAC1BjF,KAAKmJ,QAAQ,OAAQnJ,KAAK+uD,eAC3B/uD,KAAKgvD,qBAAqBI,OAC1BpvD,KAAKkvD,iBAEb,EAEAJ,QAAS,WACL,GAAI9uD,KAAK0tD,SAAW1tD,KAAKmJ,QAAQ,SAAUnJ,KAAK+uD,aAAc,CAC1D,IAAI1K,EAAQrkD,KAAK0tD,OAAOrJ,MACxBrkD,KAAKgvD,qBAAqBC,cAAc5K,GACxC,IAAIr9C,EAAUhH,KAAKguD,oBAAoB3J,EAAMgE,MAAQroD,KAAK6nD,SAASxD,EAAMvuC,IACrE9O,GACAA,EAAQo9C,qBAAqBC,GAEjCrkD,KAAKkvD,gBACT,CACJ,EAEAF,mBAAoB,WAChB,MAAoC,UAA7BhvD,KAAK0tD,OAAOjqC,QAAQ9hB,KAAmB3B,KAAK4sD,WAAa5sD,KAAKmoD,qBACzE,EAEA4G,UAAW,WACP,IAAIpoD,EAAS,CAAEyK,UAAWpR,KAAK0tD,OAAO2B,SAEtC,OADA1oD,EAAO3G,KAAK0tD,OAAOjqC,QAAQ9hB,MAAQ3B,KAAK0tD,OAAOrJ,MACxC19C,CACX,EAEAuoD,eAAgB,WACRlvD,KAAK0tD,SACL1tD,KAAK0tD,OAAO4B,QACZtvD,KAAK0tD,OAAS,KAEtB,EAEA5B,cAAe,WACX9rD,KAAKqvD,QAAUrvD,KAAKgH,QAAQwJ,QACvB8uB,IAAI,WAAY,YAChBiwB,KAAK,WAAY,GACjBC,SAAS,sBAEdxvD,KAAKs5B,WAAar5B,EAAE,WAAWwvD,SAASzvD,KAAKgH,QACjD,EAEAglD,cAAe,SAASJ,GACpB,IAAInoC,EAAUzjB,KAAKyjB,QACf2hB,EAAW3hB,EAAQ2hB,SACnBjiB,EAAgBM,EAAQN,cACxB6pC,EAAqBvpC,EAAQupC,mBAC7B0C,GAAqB9D,GAAe,CAAC,GAAGzoC,eAC3B,IAAbiiB,GACAjiB,EAAciiB,UAAW,EACzB4nB,EAAmB5nB,UAAW,IAE9BuqB,GAAmBvqB,EAAUjiB,EAAciiB,SAAU,CAAC,OAAQ,SAAU,YACxEuqB,GAAmBvqB,EAAU4nB,EAAmB5nB,SAAU,CAAC,OAAQ,YAGnEsqB,GAAqBA,EAAkBvvB,aACvC1c,EAAQN,cAAcgd,WAAauvB,EAAkBvvB,WAE7D,EAEA8rB,qBAAsB,WAClB,IAAIxoC,EAAUzjB,KAAKyjB,QACfoY,EAAapY,EAAQoY,WACrBzB,EAAW3W,EAAQ2W,SACnBw1B,EAAS/vD,MAAMq5B,QAAQC,SAEvB0C,IAAejW,EAAQiW,EAAWC,YAClCrY,EAAQoY,WAAax7B,EAAW,CAC5By7B,UAAU8zB,GACXnsC,EAAQoY,aAGXzB,IAAaxU,EAAQwU,EAASj5B,OAC9BsiB,EAAQ2W,SAAW/5B,EAAW,CAC1Bc,IAAKyuD,EAAS,OAAS,QACxBnsC,EAAQ2W,UAEnB,EAEA8xB,YAAa,WACT,IAAI2D,EAAkB5vD,EAAE,+BAA+BwvD,SAASzvD,KAAKs5B,YAAY,GAC7Ew2B,EAAW9vD,KAAK+vD,WACpB/vD,KAAKo5B,OAAS,IAAI9H,EAAOu+B,EAAiB,CACtC3iD,MAAO4iD,EAAS5iD,OAniED,IAoiEfD,OAAQ6iD,EAAS7iD,QAniED,KAqiExB,EAEAo/C,gBAAiB,WACb,IAAIl0C,EAAOnY,KACGmY,EAAKnR,QAEXgpD,GAAGrO,GAAexpC,EAAK83C,OAAOj4B,KAAK7f,IAC1C63C,GAAG,UAAYlP,EAAI3oC,EAAK+3C,SAASl4B,KAAK7f,IAEvCA,EAAKg4C,YAAc,IAAItwD,MAAMuwD,WAAWpwD,KAAKs5B,WAAY,CACrD+2B,YAAY,EACZC,SAAS,EACTC,IAAKp4C,EAAKq4C,KAAKx4B,KAAK7f,GACpBjT,MAAOiT,EAAKs4C,WAAWz4B,KAAK7f,GAC5BgZ,KAAMhZ,EAAKu4C,MAAM14B,KAAK7f,GACtBlT,IAAKkT,EAAKw4C,SAAS34B,KAAK7f,GACxBy4C,aAAcz4C,EAAK04C,cAAc74B,KAAK7f,GACtC24C,cAAe34C,EAAK44C,eAAe/4B,KAAK7f,GACxC64C,WAAY74C,EAAK84C,YAAYj5B,KAAK7f,GAClC+4C,UAAW/4C,EAAKg5C,WAAWn5B,KAAK7f,GAChCi5C,kBAAkB,IAGtBj5C,EAAKygB,YAAc,IAAI2E,EAAYplB,GAEnCnY,KAAKs5B,WACA02B,GAAG,YAAclP,EAAI3oC,EAAKk5C,WAAWr5B,KAAK7f,IAC1C63C,GAAG,WAAalP,EAAI3oC,EAAKm5C,UAAUt5B,KAAK7f,IACxC63C,GAAG,YAAclP,EAAI3oC,EAAKo5C,WAAWv5B,KAAK7f,IAC1C63C,GAAG,YAAclP,EAAI3oC,EAAKq5C,WAAWx5B,KAAK7f,IAC1C63C,GAAG,UAAYlP,EAAI3oC,EAAKs5C,SAASz5B,KAAK7f,IAE3CnY,KAAK0xD,aAAev5C,EAAKmmB,aAAatG,KAAK7f,GAE3CA,EAAKw5C,eAAiBx5C,EAAKktB,OAAOrN,KAAK7f,GAAM,GAC7CtY,MAAM+xD,SAASz5C,EAAKw5C,gBAEpB3xD,KAAKg4B,KAAKupB,GAAYppC,EAAKomB,gBAAgBvG,KAAK7f,IAChDnY,KAAKg4B,KAAKspB,GAAKnpC,EAAKomB,gBAAgBvG,KAAK7f,GAC7C,EAEAs4C,WAAY,SAASl+C,GACjBvS,KAAK6xD,qBAAsB,EAC3B,IAAInkD,EAAQ1N,KAAK8xD,gBAAgBv/C,GAAG,GAEhCw/C,EAAQx/C,EAAEw/C,MACV/xD,KAAK44B,YAAY1zB,MAAMwI,EAAO1N,KAAKgyD,MAAMD,MACzC/xD,KAAKu+B,kBACLwzB,EAAME,iBAEd,EAEAvB,MAAO,SAASn+C,GACZ,IAAIzP,EAAI9C,KAAK8xD,gBAAgBv/C,GACzBw/C,EAAQx/C,EAAEw/C,MACV/xD,KAAK44B,YAAYzH,KAAKruB,EAAG9C,KAAKgyD,MAAMD,KACpCA,EAAME,gBAEd,EAEAtB,SAAU,SAASp+C,GACfvS,KAAK6xD,qBAAsB,EAC3B,IAAI/uD,EAAI9C,KAAK8xD,gBAAgBv/C,GACzBw/C,EAAQx/C,EAAEw/C,MACV/xD,KAAK44B,YAAY3zB,IAAInC,EAAG9C,KAAKgyD,MAAMD,MACnC/xD,KAAKkyD,iBACLH,EAAME,iBAEd,EAEAV,WAAY,SAASh/C,GACjB,IAAKvS,KAAK6xD,oBAAqB,CAC3B,IAAI/uD,EAAI9C,KAAK8xD,gBAAgBv/C,GAC7BvS,KAAK44B,YAAY8E,mBAAmB56B,GACpC9C,KAAK44B,YAAYgF,cAAc96B,EACnC,CACJ,EAEA0uD,WAAY,WACRxxD,KAAK6xD,qBAAsB,CAC/B,EAEAJ,SAAU,WACNzxD,KAAK6xD,qBAAsB,CAC/B,EAEArB,KAAM,SAASj+C,GACX,IAAIqmB,EAAc54B,KAAK44B,YACnBiD,EAAa77B,KAAKyjB,QAAQoY,WAC1BnuB,EAAQ1N,KAAK8xD,gBAAgBv/C,GAC7B4/C,EAAUnyD,KAAK69B,QAInB,GAFAjF,EAAY8E,mBAAmBhwB,GAE3BkrB,EAAY4B,YAAa,CACzB,IAAIt2B,EAAO00B,EAAY4B,YAQvB,GANAx6B,KAAKmJ,QAAQ,QAAS,CAClBjF,KAAMA,EACNwJ,MAAOA,EACPysB,KAAMn6B,KAAKgyD,MAAMz/C,EAAEw/C,SAGnBl2B,IAA0C,IAA5B33B,EAAKuf,QAAQoY,WAAsB,CACjD,IAAIC,GAAmC,IAAxBD,EAAWC,SACtBs2B,EAAcvyD,MAAMq5B,QAAQC,UAAYn5B,KAAKgyD,MAAMz/C,EAAEw/C,OAAOz3B,QAE5Dp2B,EAAK83B,WACDo2B,GACApyD,KAAKu+B,kBACLr6B,EAAKwuB,QAAO,IAEZ1yB,KAAKkyD,eAAeC,IAGxBnyD,KAAKu+B,kBACLv+B,KAAK0yB,OAAOxuB,EAAM,CACdi7B,eAAgBrD,GAAYs2B,IAEhCpyD,KAAKkyD,eAAeC,GAE5B,CACJ,MAAWt2B,IACP77B,KAAKu+B,kBACLv+B,KAAK62B,WAEb,EAEAq5B,SAAU,SAAS39C,GACXvS,KAAK44B,YAAYqF,QAAQ1rB,EAAE8/C,QAASryD,KAAKgyD,MAAMz/C,KAC/CA,EAAE0/C,gBAEV,EAEAhC,OAAQ,SAAS19C,GACb,IAAI9C,EAtlEZ,SAAiB8C,GACb,IAAI+/C,EAAY//C,EAAEggD,cACd9iD,EAAQ,EASZ,OAPI6iD,EAAUE,WAEV/iD,GADAA,GAAS6iD,EAAUE,WAAa,IAChB,EAAI3R,EAAK7Q,KAAKvgC,GAASoxC,EAAKj9C,MAAM6L,GAC3C6iD,EAAUG,SACjBhjD,EAAQ6iD,EAAUG,QAGfhjD,CACX,CA0kEoBijD,CAAQngD,GAChBzP,EAAI9C,KAAK8xD,gBAAgBv/C,GACzB4nB,EAAO95B,EAAWL,KAAKgyD,MAAMz/C,GAAI,CAAE9C,MAAOA,IAE1CzP,KAAK44B,YAAYgG,MAAM97B,EAAGq3B,IAC1B5nB,EAAE0/C,gBAEV,EAEAD,MAAO,SAASz/C,GACZ,MAAO,CAAE+nB,QAAS/nB,EAAE+nB,QAAS4D,QAAS3rB,EAAE2rB,QAASC,OAAQ5rB,EAAE4rB,OAAQ6K,SAAUz2B,EAAEy2B,SAAUrnC,KAAM4Q,EAAE5Q,KACrG,EAEAmwD,gBAAiB,SAASv/C,EAAGrN,GACzB,IAAIwI,EACJ,GAAI6E,EAAEogD,MAAO,CACT,IAAIjsC,EAAQxhB,EAAQ,gBAAkB,WACtCwI,EAAQ,IAAInK,EAAMgP,EAAEvP,EAAE0jB,GAAQnU,EAAEtP,EAAEyjB,GACtC,KAAO,CACH,IAAIqrC,EAAQx/C,EAAEggD,cACd7kD,EAAQ,IAAInK,EAAMwuD,EAAMa,MAAOb,EAAMc,MACzC,CAEA,OAAO7yD,KAAK8yD,gBAAgBplD,EAChC,EAEAmjD,cAAe,SAASt+C,GACpBvS,KAAKu+B,kBACLv+B,KAAKq5B,SAASa,UACd,IAAI64B,EAAgB/yD,KAAK8yD,gBAAgB,IAAIvvD,EAAMgP,EAAEvN,OAAOhC,EAAGuP,EAAEvN,OAAO/B,IACpE+vD,EAAY,CACZtlD,MAAOqlD,EACPpjD,KAAM3P,KAAK2P,QAGX3P,KAAKmJ,QAAQo4C,GAAYyR,KAI7BhzD,KAAKizD,SAAW1gD,EAChBvS,KAAKkzD,eAAiBH,EAC1B,EAEAhC,eAAgB,SAASx+C,GACrB,IAAI4gD,EAAkBnzD,KAAKizD,SACvBF,EAAgB/yD,KAAKkzD,eACrBluD,EAAShF,KAAKozD,eAAe,IAAI7vD,EAAMgP,EAAEvN,OAAOhC,EAAGuP,EAAEvN,OAAO/B,IAC5DowD,EAAa9gD,EAAEs9B,SAAWsjB,EAAgBtjB,SAC1ClgC,EAAO3P,KAAKszD,MACZC,GAAa,EAEb1S,EAAKjgD,IAAIyyD,EAAa,IA5sEX,MA6sEXrzD,KAAKszD,MAAQ3jD,EAAO3P,KAAKwzD,cAAc7jD,EAAO0jD,GAC9CrzD,KAAKyjB,QAAQ9T,KAAOA,EACpB3P,KAAKizD,SAAW1gD,EAChBghD,GAAa,GAGjB,IAAIE,EAAcV,EAAclnD,MAAM8D,GAClCunB,EAAMlyB,EAAO2G,MAAM8nD,IACnBF,GAAcvzD,KAAKk7B,KAAK2I,WAAW3M,IAptErB,KAqtEdl3B,KAAK0zD,cAAcx8B,GACnBl3B,KAAK2zD,mBAGTphD,EAAE0/C,gBACN,EAEAd,WAAY,SAAS5+C,GACjB,IAAIpS,EAAUH,KACV4zD,EAAgB5zD,KAAK8xD,gBAAgBv/C,GACrCkR,EAAUtjB,EAAQsjB,QAClBqb,EAAWrb,EAAQqb,SACnBnvB,EAAOxP,EAAQwP,OAASmvB,EAExBC,EAAc,CAAErxB,MAAOkmD,EAAez5B,KAD/Bn6B,KAAKgyD,MAAMz/C,GACgC5C,KAAMA,GAGxDxP,EAAQgJ,QAAQo4C,GAAYxiB,KAIhCpvB,EAAO9P,MAAM8lB,QAAQE,KAAKjS,MAAMjT,KAAK+I,IAAI+Z,EAAQub,QAASr+B,KAAKgJ,IAAI8Z,EAAQwb,QAAStvB,IAAQ,GAC5FovB,EAAYpvB,KAAOA,EAEnBxP,EAAQwP,KAAKA,EAAMovB,GACnB5+B,EAAQgJ,QAAQq4C,GAAUziB,GAC9B,EAEAkyB,YAAa,YACqB,IAA1BjxD,KAAKyjB,QAAQ2W,UACbp6B,KAAKq5B,SAASsB,SAElB36B,KAAKmJ,QAAQq4C,GAAU,CACnB9zC,MAAO1N,KAAKkzD,eACZvjD,KAAM3P,KAAK2P,QAEnB,EAEA69C,QAAS,WACL,IAAIuC,EAAW/vD,KAAK+vD,WAChB/vD,KAAKo5B,QACLp5B,KAAKo5B,OAAO72B,KAAKwtD,GAGjB/vD,KAAKs5B,YAAct5B,KAAKitD,SACxBjtD,KAAKs5B,WAAWrsB,OAAO8iD,EAAS9iD,OAExC,EAEAokD,WAAY,SAAS9+C,GACjB,IAAI2F,EAAO3F,EAAEpK,OAAO0rD,WAChB37C,GAAQA,EAAK47C,WAAWzqC,QACxBnR,EAAK47C,WAAWzqC,QAAO,EAAMnR,EAAK47C,WAE1C,EAEAxC,UAAW,SAAS/+C,GAChB,IAAI2F,EAAO3F,EAAEpK,OAAO0rD,WAChB37C,GAAQA,EAAK47C,WAAWzqC,QACxBnR,EAAK47C,WAAWzqC,QAAO,EAAOnR,EAAK47C,WAE3C,EAEAjI,WAAY,WACR,IAGIkI,EAHA57C,EAAOnY,KACPg0D,IAAc77C,EAAKsL,SAAW,CAAC,GAAGkpC,OAAS,IAAIl7C,cAC/CwiD,EAAS7zD,EAAQuK,GAAGspD,QAAU,CAAC,EAI/BF,GAD2C,GAA3C3zD,EAAQ8zD,YAAYluD,QAAQguD,GACb5zD,EAAQ+zD,YAAYh0D,SAGnB8zD,EAAOD,IAAc,CAAC,GAAG7zD,QAG7CgY,EAAKsL,QAAUpjB,EAAW,CAAC,EAAG0zD,EAAc57C,EAAKsL,UACnB,IAA1BtL,EAAKsL,QAAQ2hB,UACb/kC,EAAW8X,EAAKsL,QAAS,CACrB2hB,UAAW2uB,GAAgB,CAAC,GAAG3uB,UAG3C,EAEAsnB,sBAAuB,WACnB,IAAIjpC,EAAUzjB,KAAKyjB,QACf2wC,EAAe3wC,EAAQ2S,OAAOn0B,OAE9BmyD,GACAp0D,KAAKq0D,gBAGL5wC,EAAQgY,YAAYx5B,QACpBjC,KAAKs0D,qBAGLF,GAAgB3wC,EAAQ+S,QACxBx2B,KAAKw2B,OAAO/S,EAAQ+S,OAE5B,EAEA69B,cAAe,WACX,IAGI/8C,EAAO5U,EADP0zB,EAFOp2B,KACQyjB,QACE2S,OAGrB,IAAK1zB,EAAI,EAAGA,EAAI0zB,EAAOn0B,OAAQS,IAC3B4U,EAAQ8e,EAAO1zB,GANR1C,KAOFujB,SAASjM,EAEtB,EAEAg9C,mBAAoB,WAChB,IAIIv/B,EAAM3yB,EAAQ+F,EAAQzF,EAJtBvC,EAAUH,KACVyjB,EAAUtjB,EAAQsjB,QAClBm/B,EAAWn/B,EAAQupC,mBACnBvxB,EAAchY,EAAQgY,YAG1B,IAAK/4B,EAAI,EAAGA,EAAI+4B,EAAYx5B,OAAQS,IAChCqyB,EAAO0G,EAAY/4B,GACnBN,EAASjC,EAAQo0D,sBAAsBx/B,EAAKtrB,MAC5CtB,EAAShI,EAAQo0D,sBAAsBx/B,EAAKxrB,IAE5CpJ,EAAQujB,QAAQthB,EAAQ+F,EAAQ9H,EAAW,CAAC,EAAGuiD,EAAU7tB,GAEjE,EAEAw/B,sBAAuB,SAAS9wC,GAE5B,IAEItb,EADA27C,EAAUxiD,EAFdmiB,EAAUA,GAAW,CAAC,GAEYA,EAAUA,EAAQqgC,SAAWrgC,EAAQ3N,GAWvE,OATIguC,GACA37C,EAJUnI,KAIOm0B,aAAa2vB,GAC1BrgC,EAAQ0Y,YACRh0B,EAASA,EAAO40B,aAAatZ,EAAQ0Y,aAGzCh0B,EAAS,IAAI5E,EAAMkgB,EAAQzgB,GAAK,EAAGygB,EAAQxgB,GAAK,GAG7CkF,CACX,EAEA4pB,QAAS,WACL,IAAI5Z,EAAOnY,KACXsgD,EAAOnqC,GAAG4b,QAAQ1wB,KAAK8W,GAEnBnY,KAAKmwD,aACLnwD,KAAKmwD,YAAYp+B,UAGrBlyB,MAAM20D,aAAar8C,EAAKw5C,gBAExBx5C,EAAKhR,QACLgR,EAAKnR,QAAQytD,IAAI3T,GACjB3oC,EAAKkhB,SAASg2B,QAAQoF,IAAI3T,GAC1B3oC,EAAKihB,OAAOrH,SAAQ,GACpB5Z,EAAKihB,OAAS1T,EAEdvN,EAAK+2C,iBACL/2C,EAAKu8C,kBACLv8C,EAAKw8C,wBACLx8C,EAAKomB,iBACT,EAEAm2B,gBAAiB,WACb,IAAIr7B,EAAWr5B,KAAKq5B,SAEfA,IAILA,EAAStH,UACTsH,EAASryB,QAAQnB,SACjB7F,KAAKq5B,SAAW,KACpB,EAEA9a,KAAM,WACF,IAII7b,EAAG4W,EAAYhC,EAJf4rC,EAAO,CACP9sB,OAAQ,GACRqF,YAAa,IAIjB,IAAK/4B,EAAI,EAAGA,EAAI1C,KAAKo2B,OAAOn0B,OAAQS,KAChC4U,EAAQtX,KAAKo2B,OAAO1zB,IACV+gB,QAAQu/B,cACdE,EAAK9sB,OAAOrzB,KAAKuU,EAAMmM,SAI/B,IAAK/gB,EAAI,EAAGA,EAAI1C,KAAKy7B,YAAYx5B,OAAQS,IACrC4W,EAAatZ,KAAKy7B,YAAY/4B,GAE9BwgD,EAAKznB,YAAY14B,KAAK1C,EAAW,CAAC,EAAGiZ,EAAWmK,QAASnK,EAAWsqC,WAGxE,OAAOV,CACX,EAEArlB,MAAO,WACH,IAAK79B,KAAKgH,QAAQ4tD,GAAG/0D,MAAMg1D,kBAAmB,CAC1C,IAKInyD,EALAsE,EAAUhH,KAAKgH,QACf8tD,EAAkB9tD,EAAQ,GAC1B0mC,EAAa,GACbqnB,EAAU,GACVC,EAAkBC,SAASD,gBAG/B,IACIF,EAAkBA,EAAgBI,YAEdC,aAAeL,EAAgB/wC,eAC/C2pB,EAAW3qC,KAAK+xD,GAChBC,EAAQhyD,KAAK+xD,EAAgB/5B,kBAE5B+5B,GAAmBE,GAI5B,IAFAhuD,EAAQmC,QAAQ,SAEXzG,EAAI,EAAGA,EAAIgrC,EAAWzrC,OAAQS,IAC/BgrC,EAAWhrC,GAAGq4B,UAAYg6B,EAAQryD,GAEtC,OAAO,CACX,CACJ,EAEA0yD,KAAM,SAAS3xC,GACXzjB,KAAKmH,QAELnH,KAAKq1D,WAAW5xC,GAChBzjB,KAAKq0D,gBACLr0D,KAAKs0D,oBACT,EAEAe,WAAY,SAAS5xC,GACjBpjB,EAAWL,KAAKyjB,QAASA,EAC7B,EAEAtc,MAAO,WACH,IAAIgR,EAAOnY,KAEXmY,EAAKua,QAAO,GACZva,EAAKkoB,UAAUl5B,QACfgR,EAAKmzC,gBAAgBnkD,QACrBgR,EAAKsf,aACT,EAQA/T,QAAS,SAASthB,EAAQ+F,EAAQsb,GAC9B,IAAInK,EACJ,GAAItZ,KAAKmoD,uBAAyBnoD,KAAKykD,YAAa,CAChD,IAAI3B,EAAW9iD,KAAKmoD,sBAAsBrzC,IAAI,CAAC,IAC/CwE,EAAatZ,KAAKguD,oBAAoBlL,EAASuF,MACpCjmD,OAAOA,GAClBkX,EAAWnR,OAAOA,GAClBmR,EAAW4P,OAAOzF,GAClBnK,EAAWsc,aACf,MACItc,EAAa,IAAIumB,GAAWz9B,EAAQ+F,EAChC9H,EAAW,CAAE,EAAGL,KAAKyjB,QAAQupC,mBAAoBvpC,IAErDzjB,KAAKiuD,cAAc30C,GAGvB,OAAOA,CACX,EAOAoG,UAAW,SAAStd,EAAQ+F,GACxB,IAAK,IAAIzF,EAAI,EAAGA,EAAI1C,KAAKy7B,YAAYx5B,OAAQS,IAAK,CAC9C,IAAIkC,EAAI5E,KAAKy7B,YAAY/4B,GACzB,GAAIkC,EAAE6E,MAAQrH,GAAUwC,EAAE2E,IAAMpB,EAC5B,OAAO,CAEf,CAEA,OAAO,CACX,EAOA8lD,cAAe,SAAS30C,EAAYgK,GAiBhC,OAhBiB,IAAbA,GACAtjB,KAAK07B,gBAAgB5mB,IACjB,IAAI3U,EAAQw2B,kBAAkBrd,EAAYtZ,OAAO,GAGzDsZ,EAAWnZ,QAAUH,KACrBsZ,EAAW8qC,uBACX9qC,EAAWod,UACX12B,KAAKqgC,UAAUhS,OAAO/U,EAAWsO,QACjC5nB,KAAKy7B,YAAY14B,KAAKuW,GAEtBtZ,KAAKmJ,QAAQ63C,EAAQ,CACjBsU,MAAO,CAACh8C,GACRi8C,QAAS,KAGNj8C,CACX,EAEAkK,eAAgB,SAASlK,EAAYgK,GACjC,IACIw/B,EADAqF,EAAwBnoD,KAAKmoD,sBAEjC,GAAIA,GAAyBnoD,KAAKykD,aAK9B,GAJA3B,EAAW8K,GAAYzF,EAAuBrC,GAAcxsC,EAAWwpC,WACvExpC,EAAWwpC,SAAWA,EACtBxpC,EAAWsc,eAEN51B,KAAKmJ,QAAQ,MAAO,CAAEmQ,WAAYA,IAOnC,OANAtZ,KAAKguD,oBAAoBlL,EAASuF,KAAO/uC,EAEzC6uC,EAAsBrzC,IAAIguC,GAC1B9iD,KAAKiuD,cAAc30C,EAAYgK,GAC/BhK,EAAWytC,oBAEJztC,OAER,IAAKtZ,KAAKmJ,QAAQ,MAAO,CAAEmQ,WAAYA,IAG1C,OAFAtZ,KAAKiuD,cAAc30C,EAAYgK,GAC/BhK,EAAWytC,oBACJztC,CAEf,EAQAiK,SAAU,SAASrf,EAAMof,GACrB,IAAIhM,EACA6L,EAAgBnjB,KAAKyjB,QAAQN,cAEjC,GAAIjf,aAAgB44B,GAChBxlB,EAAQpT,EACRlE,KAAKw1D,aAAal+C,EAAMM,cACrB,IAAM1T,aAAgBrE,MAAMkI,MAK/B,OAJAob,EAAgB9iB,EAAW,CAAC,EAAG8iB,EAAejf,GAAQ,CAAC,GACvDoT,EAAQ,IAAIwlB,GAAM3Z,EAAenjB,MACjCA,KAAKw1D,aAAal+C,EAAMM,SAG5B,CAkBA,OAhBiB,IAAb0L,GACAtjB,KAAK07B,gBAAgB5mB,IAAI,IAAI3U,EAAQy2B,aAAatf,EAAOtX,OAAO,GAGpEA,KAAKo2B,OAAOrzB,KAAKuU,GACbA,EAAMnX,UAAYH,OAClBA,KAAKsrD,gBAAgBvkD,OAAOuQ,GAC5BA,EAAMnX,QAAUH,MAEpBA,KAAKqgC,UAAUhS,OAAO/W,EAAMsQ,QAE5B5nB,KAAKmJ,QAAQ63C,EAAQ,CACjBsU,MAAO,CAACh+C,GACRi+C,QAAS,KAGNj+C,CACX,EAEA2L,UAAW,SAAS3L,EAAOgM,GACvB,IAEIw/B,EADA8J,EADO5sD,KACW4sD,WAEtB,GAAIA,GAAc5sD,KAAKykD,aAKnB,GAJA3B,EAAW8K,GAAYhB,EAAY9G,GAAcxuC,EAAMwrC,WACvDxrC,EAAMwrC,SAAWA,EACjBxrC,EAAMse,eAED51B,KAAKmJ,QAAQ,MAAO,CAAEmO,MAAOA,IAAU,CACxCtX,KAAK4sD,WAAW93C,IAAIguC,GACpB,IAAI2G,EAAezpD,KAAK0pD,oBAAoBtB,SAAStF,EAASuF,KAG9D,OAFAoB,EAAaziD,QAAUsQ,EACvBmyC,EAAanmC,SAAWA,EACjBhM,CACX,OACG,IAAKtX,KAAKmJ,QAAQ,MAAO,CAAEmO,MAAOA,IACrC,OAAOtX,KAAKujB,SAASjM,EAAOgM,EAEpC,EAEAkyC,aAAc,SAAS59C,GACnBA,EAAO5U,EAAwB,iBAAb4U,EAAQ,EAAgB9V,WAAW8V,EAAO5U,GAAK4U,EAAO5U,EACxE4U,EAAO3U,EAAwB,iBAAb2U,EAAQ,EAAgB9V,WAAW8V,EAAO3U,GAAK2U,EAAO3U,CAC5E,EAOD4C,OAAQ,SAAS8xB,EAAOrU,GAEnB,IAGI5gB,EAHAwpB,EAAWupC,GADf99B,EAAQr3B,EAAQq3B,GAASA,EAAMrqB,MAAM,GAAK,CAACqqB,IAEvCvB,EAASlK,EAASkK,OAClBqF,EAAcvP,EAASuP,YAY3B,IATK7V,EAAQtC,KACTA,GAAW,GAGXA,GACAtjB,KAAK07B,gBAAgBvD,QAGzBn4B,KAAK4kD,uBACAliD,EAAI0zB,EAAOn0B,OAAS,EAAGS,GAAK,EAAGA,IACjC1C,KAAK01D,YAAYt/B,EAAO1zB,GAAI4gB,EAAUmY,GAGzC,IAAK/4B,EAAI+4B,EAAYx5B,OAAS,EAAGS,GAAK,EAAGA,IACrC1C,KAAK01D,YAAYj6B,EAAY/4B,GAAI4gB,GAGrCtjB,KAAK6kD,sBAEDvhC,GACAtjB,KAAK07B,gBAAgBpD,QAAO,GAGhCt4B,KAAKmJ,QAAQ63C,EAAQ,CACjBsU,MAAO,GACPC,QAAS59B,GAEjB,EAEAg+B,qBAAsB,SAASzxD,GACvBlE,KAAKykD,cACLzkD,KAAK4sD,WAAW/mD,OAAO3B,EAAK4+C,iBACrB9iD,KAAK6nD,SAAS3jD,EAAK4+C,SAAShtC,IAE3C,EAEA8/C,0BAA2B,SAAS1xD,GAC5BlE,KAAKykD,cACLzkD,KAAKmoD,sBAAsBtiD,OAAO3B,EAAK4+C,iBAChC9iD,KAAKguD,oBAAoB9pD,EAAK4+C,SAASuF,KAEtD,EAEAhqB,eAAgB,SAAS1G,GAIrB,IAHA,IACIzzB,EAAM02B,EAAMwK,EADZhH,EAAW,GAGN8B,EAAM,EAAGA,EAAMvI,EAAM11B,OAAQi+B,IAElCkF,GADAlhC,EAAOyzB,EAAMuI,IACGzc,QAAQ2hB,SAEpBxK,EADA12B,aAAgB44B,GACT,CAAExlB,MAAOpT,GAET,CAAEoV,WAAYpV,GAErBkhC,IAAgC,IAApBA,EAASv/B,SAAqB7F,KAAKmJ,QAAQ,SAAUyxB,IACjEwD,EAASr7B,KAAKmB,GAGtB,OAAOk6B,CACX,EAKAzJ,KAAM,WACF30B,KAAK07B,gBAAgB/G,MACzB,EAIAE,KAAM,WACF70B,KAAK07B,gBAAgB7G,MACzB,EAOAnC,OAAQ,SAASxuB,EAAMuf,GACnB,IAAI5iB,EAAUqD,GA+BV,OAAOlE,KAAK4/B,eA5BZ,IAGIl9B,EAAGsE,EAFH2wB,EAAQ,GACRqN,EAAW,GAef,KAnBAvhB,EAAUpjB,EAAW,CAAE8+B,gBAAgB,GAAS1b,IAEnB0b,gBAMzBn/B,KAAK62B,WAGT72B,KAAKgmD,oBAAqB,EAEtB9hD,aAAgB3D,MAChBo3B,EAAQzzB,EACDA,aAAgB2+C,KACvBlrB,EAAQ,CAAEzzB,IAGTxB,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,KAC1BsE,EAAU2wB,EAAMj1B,IACJgwB,QAAO,IACfsS,EAASjiC,KAAKiE,GAItBhH,KAAKimD,kBAAkBjhB,EAAU,IAEjChlC,KAAKgmD,oBAAqB,CAIlC,EAEAvnB,UAAW,WACPz+B,KAAK0yB,OAAO1yB,KAAKo2B,OAAO7U,OAAOvhB,KAAKy7B,aACxC,EAEAQ,WAAY,SAASxtB,GACjB,IAAI/L,EAAGi1B,EAAOzzB,EACdlE,KAAKgmD,oBAAqB,EAC1B,IAAIhhB,EAAW,GACf,GAAIv2B,aAAgB5B,EAEhB,IADA8qB,EAAQ33B,KAAKo2B,OAAO7U,OAAOvhB,KAAKy7B,aAC3B/4B,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAC1BwB,EAAOyzB,EAAMj1B,GACP+L,IAAQvK,EAAKo3B,SAAS7sB,KAAUvK,EAAKuf,QAAQkX,QAC3Cz2B,EAAKwuB,QAAO,IACZsS,EAASjiC,KAAKmB,GAM9BlE,KAAKimD,kBAAkBjhB,EAAU,IACjChlC,KAAKgmD,oBAAqB,CAC9B,EAEAnvB,SAAU,SAAS3yB,GACflE,KAAKgmD,oBAAqB,EAC1B,IAEIh/C,EAAStE,EAFTqjD,EAAa,GACbpuB,EAAQ,GAWZ,IARIzzB,aAAgB3D,MAChBo3B,EAAQzzB,EACDA,aAAgB2+C,GACvBlrB,EAAM50B,KAAKmB,GACHrD,EAAUqD,KAClByzB,EAAQ33B,KAAK4/B,eAAetyB,MAAM,IAGjC5K,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,KAC1BsE,EAAU2wB,EAAMj1B,IACJgwB,QAAO,IACfqzB,EAAWhjD,KAAKiE,GAIxBhH,KAAKimD,kBAAkB,GAAIF,GAC3B/lD,KAAKgmD,oBAAqB,CAC9B,EAMA/1B,QAAS,SAAS0H,EAAOrU,GAChBqU,IACDA,EAAQ33B,KAAK4/B,eAAetyB,SAGhC,IAA2CkS,EAAvC7Y,EAAS3G,KAAK61D,iBAAiBl+B,GACnC,IAAK/R,EAAQtC,IAAaA,EAAU,CAChC9D,EAAUkjC,GAAe1iD,KAAKqgC,UAAW15B,EAAOupB,SAChD,IAAInd,EAAO,IAAI2kB,EAAY13B,KAAM23B,EAAOnY,GACxCxf,KAAK07B,gBAAgB5mB,IAAI/B,EAC7B,MACI/S,KAAKqgC,UAAUpQ,QAAQtpB,EAAOupB,SAC9BlwB,KAAK81D,aAAanvD,GAAQ,EAElC,EAMAwpB,OAAQ,SAASwH,EAAOrU,GACfqU,IACDA,EAAQ33B,KAAK4/B,eAAetyB,SAGhC,IAA2CkS,EAAvC7Y,EAAS3G,KAAK61D,iBAAiBl+B,GACnC,IAAK/R,EAAQtC,IAAaA,EAAU,CAChC9D,EAAUkjC,GAAe1iD,KAAKqgC,UAAW15B,EAAOupB,SAChD,IAAInd,EAAO,IAAI+kB,EAAW93B,KAAM23B,EAAOnY,GACvCxf,KAAK07B,gBAAgB5mB,IAAI/B,EAC7B,MACI/S,KAAKqgC,UAAUlQ,OAAOxpB,EAAOupB,SAC7BlwB,KAAK81D,aAAanvD,GAAQ,EAElC,EAOAovD,cAAe,SAAS7xD,EAAMuf,GAC1B,IAEIzM,EAASvI,EAAMunD,EAAUC,EAFzBlG,EAAW/vD,KAAK+vD,WAChB7K,EAAU,IAAI/kD,EAAQgR,UAAU4+C,GAGb,IAAnBA,EAAS7iD,OAAmC,IAApB6iD,EAAS9iD,SAKhB,SADrBwW,EAAUpjB,EAAW,CAAEk0B,SAAS,EAAOljB,MAAO,iBAAmBoS,IACrDpS,QACRoS,EAAQpS,MAAQ,iBAGhBnN,aAAgB2+C,GAChBp0C,EAAOvK,EAAK0T,OAAO8pC,IACZphD,EAAQ4D,GACfuK,EAAOzO,KAAKywB,YAAYvsB,GACjBA,aAAgB2I,IACvB4B,EAAOvK,EAAKuH,SAGhBuqD,EAAWvnD,EAAKhD,QAEhBgD,EAAKkB,KAAK3P,KAAKszD,QAEX7kD,EAAKvB,MAAQ6iD,EAAS7iD,OAASuB,EAAKxB,OAAS8iD,EAAS9iD,UACtDjN,KAAKszD,MAAQtzD,KAAKwzD,cAAc3S,EAAKl3C,IAAIomD,EAAS7iD,MAAQ8oD,EAAS9oD,MAAO6iD,EAAS9iD,OAAS+oD,EAAS/oD,SACrGwB,EAAOunD,EAASvqD,QAAQkE,KAAK3P,KAAKszD,QAGtCtzD,KAAKk2D,iBAELl/C,EAAUvI,EAAKhD,QACfy5C,EAAQ7zC,MAAM5C,EAAMgV,EAAQpS,OAE5B4kD,EAASxnD,EAAKL,UAAUzC,MAAMqL,EAAQ5I,WACtCpO,KAAKk3B,IAAI++B,EAAOpqD,OAAO,GAAI4X,EAAQ8Q,SACvC,EAEA4hC,YAAa,SAASrjB,GACd/xC,EAAY+xC,KACZA,EAAY,QAEhB,IACIsjB,EACAlyD,EACAxB,EAHAi1B,EAAQ33B,KAAK0yB,SAKjB,GAAqB,IAAjBiF,EAAM11B,OAAV,CAIA,OAAQ6wC,EAAUrhC,eACd,IAAK,OACL,IAAK,MACD2kD,EAAM3hD,GACN,MACJ,IAAK,QACL,IAAK,SACD2hD,EAAMlc,GAId,IAAKx3C,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAE1B,IADAwB,EAAOyzB,EAAMj1B,cACOo6B,GAChB,OAAQgW,EAAUrhC,eACd,IAAK,OACD2kD,EAAMvV,EAAKl3C,IAAIysD,EAAKlyD,EAAKuf,QAAQzgB,GACjC,MACJ,IAAK,MACDozD,EAAMvV,EAAKl3C,IAAIysD,EAAKlyD,EAAKuf,QAAQxgB,GACjC,MACJ,IAAK,QACDmzD,EAAMvV,EAAKn3C,IAAI0sD,EAAKlyD,EAAKuf,QAAQzgB,GACjC,MACJ,IAAK,SACDozD,EAAMvV,EAAKn3C,IAAI0sD,EAAKlyD,EAAKuf,QAAQxgB,GAKjD,IAAIozB,EAAa,GACbD,EAAS,GACb,IAAK1zB,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAE1B,IADAwB,EAAOyzB,EAAMj1B,cACOo6B,GAGhB,OAFA1G,EAAOrzB,KAAKmB,GACZmyB,EAAWtzB,KAAKmB,EAAK0T,UACbk7B,EAAUrhC,eACd,IAAK,OACL,IAAK,QACDvN,EAAK+C,SAAS,IAAI1D,EAAM6yD,EAAKlyD,EAAKuf,QAAQxgB,IAC1C,MACJ,IAAK,MACL,IAAK,SACDiB,EAAK+C,SAAS,IAAI1D,EAAMW,EAAKuf,QAAQzgB,EAAGozD,IAKxD,IAAIrjD,EAAO,IAAI5S,EAAQg2B,cAAcC,EAAQC,GAC7Cr2B,KAAK07B,gBAAgB5mB,IAAI/B,GAAM,EApD/B,CAqDJ,EAEApD,KAAM,SAASA,EAAM8T,GACjB,GAAI9T,EAAM,CACN,IAAI+2B,EAAcjjB,EAAUA,EAAQ/V,MAAQ,IAAIvN,EAAQoD,MAAM,EAAG,GAIjE,GAFAoM,EAAO3P,KAAKszD,MAAQtzD,KAAKwzD,cAAc7jD,IAElC5O,EAAY2lC,GAAc,CAE3B,IAAI+sB,GADJ/sB,EAAc,IAAIvmC,EAAQoD,MAAMs9C,EAAKjtC,MAAM8yB,EAAY1jC,GAAI69C,EAAKjtC,MAAM8yB,EAAYzjC,KACpD4I,MAAM8D,GAEhC0mD,EADiBr2D,KAAK6oC,YAAYnC,GACb/6B,MAAM8nD,GAC/BzzD,KAAKg7B,UAAU,IAAI76B,EAAQoD,MAAMs9C,EAAKjtC,MAAMyiD,EAAIrzD,GAAI69C,EAAKjtC,MAAMyiD,EAAIpzD,IACvE,CAEIwgB,IACAA,EAAQ9T,KAAOA,GAGnB3P,KAAK0zD,gBAEL1zD,KAAKo5B,OAAO7H,QAAQ+kC,cAEpBt2D,KAAK2zD,iBACT,CAEA,OAAO3zD,KAAKszD,KAChB,EAEAiD,QAAS,SAASr/B,GAKd,OAJal3B,KAAKo5B,OACN3R,YACRyP,EAAMA,EAAIxrB,KAAK1L,KAAKk7B,OAEjBhE,CACX,EAEAA,IAAK,SAASA,EAAK3C,GACf,KAAI2C,aAAe3zB,GAef,OAAOvD,KAAKk7B,KAAKrvB,OAAO,GAdxB,IAAIsM,EAAOnY,KACPq5B,EAAWlhB,EAAKkhB,SAEpBnC,GADAA,EAAM/e,EAAKo+C,QAAQr/B,IACTrrB,OAAO,GAEb0oB,EACA8E,EAASm9B,iBAAiBt/B,EAAIl0B,EAAGk0B,EAAIj0B,GAAG,WACpCkV,EAAKw7C,iBACT,KAEAt6B,EAASo9B,SAASv/B,EAAIl0B,EAAGk0B,EAAIj0B,GAC7BkV,EAAKw7C,kBAKjB,EAEA5D,SAAU,WACN,IAAI/oD,EAAUhH,KAAKgH,QACfkG,EAAQlG,EAAQkG,QAChBD,EAASjG,EAAQiG,SAMrB,OAJIjN,KAAKitD,UACLhgD,GAAUwzC,EAAYzgD,KAAKitD,QAAQjmD,UAGhC,IAAI6F,EAAK,EAAG,EAAGK,EAAOD,EACjC,EACAyL,KAAM,WACF,GAAI1Y,KAAKyjB,QAAQ/K,KAAK2hB,QAAS,CAC3Br6B,KAAKssD,WAAa,GAClBtsD,KAAK02D,YAAc,EACnB,IAAK,IAAIh0D,EAAI,EAAGA,EAAI1C,KAAK4/B,eAAe39B,OAAQS,IAAK,CACjD,IAAIwB,EAAOlE,KAAK4/B,eAAel9B,GAC/B1C,KAAKssD,WAAWvpD,KAAKmB,EACzB,CACJ,CACJ,EACAw6B,IAAK,WACD,GAAI1+B,KAAKyjB,QAAQ/K,KAAK2hB,QAAS,CAC3Br6B,KAAKssD,WAAa,GAClBtsD,KAAK02D,YAAc,EACnB,IAAK,IAAIh0D,EAAI,EAAGA,EAAI1C,KAAK4/B,eAAe39B,OAAQS,IAAK,CACjD,IAAIwB,EAAOlE,KAAK4/B,eAAel9B,GAC/B1C,KAAKssD,WAAWvpD,KAAKmB,EACzB,CACAlE,KAAK6F,OAAO7F,KAAKssD,YAAY,EACjC,CACJ,EAEA3tB,MAAO,WACH,GAAI3+B,KAAKssD,WAAWrqD,OAAS,EAAG,CAC5B,IAAIiC,EAAMyyD,EAAQj0D,EACdk0D,EAAU,CAAC,EACX1qC,EAAWupC,GAAqBz1D,KAAKssD,YACrC7wB,EAAcvP,EAASuP,YACvBrF,EAASlK,EAASkK,OAClBxqB,EAAS,CACT5I,EAAGhD,KAAK02D,YAAc12D,KAAKyjB,QAAQ/K,KAAKsxB,QACxC/mC,EAAGjD,KAAK02D,YAAc12D,KAAKyjB,QAAQ/K,KAAKuxB,SAI5C,IAFAjqC,KAAK62B,WAEAn0B,EAAI,EAAGA,EAAI0zB,EAAOn0B,OAAQS,IAE3Bi0D,GADAzyD,EAAOkyB,EAAO1zB,IACA+I,QACdmrD,EAAQ1yD,EAAK4R,IAAM6gD,EACnBA,EAAO1vD,SAAS,IAAI1D,EAAMW,EAAKuf,QAAQzgB,EAAI4I,EAAO5I,EAAGkB,EAAKuf,QAAQxgB,EAAI2I,EAAO3I,IAC7E0zD,EAAOx2D,QAAUH,MACjB22D,EAAS32D,KAAKijB,UAAU0zC,KAEpBA,EAAOjkC,SAIf,IAAKhwB,EAAI,EAAGA,EAAI+4B,EAAYx5B,OAAQS,IAChCwB,EAAOu3B,EAAY/4B,IACnBi0D,EAAS32D,KAAKwjB,eAAetf,EAAKuH,YAE9BzL,KAAK62D,wBAAwBF,EAAQzyD,EAAM,SAAU0yD,EAAShrD,GAC9D5L,KAAK62D,wBAAwBF,EAAQzyD,EAAM,SAAU0yD,EAAShrD,GAE9D+qD,EAAOjkC,QAAO,GACdikC,EAAO/gC,eAIf51B,KAAKs+B,eAELt+B,KAAK02D,aAAe,CACxB,CACJ,EAEAG,wBAAyB,SAASv9C,EAAYw9C,EAAkBvN,EAAeqN,EAAShrD,GACpF,IAAIg+C,EAAYH,EAAcrlC,EAC1Bjc,EAAS2uD,EAAiBvN,KAC1BppD,EAAUH,KACVmI,aAAkB07C,IAAa+S,EAAQzuD,EAAOmP,MAAMxB,KACpDsO,EAAcwyC,EAAQzuD,EAAOmP,MAAMxB,IAC/B3V,EAAQg0B,aAAa/P,EAAYtO,IACjCwD,EAAWiwC,GAAenlC,EAAY2Y,aAAa50B,EAAOsb,QAAQphB,QAElEonD,EAAetpD,EAAQupD,oBAAoBtB,SAAShkC,EAAY0+B,SAASuF,QAErEuB,EAAa,SAAS1lD,GAClBkgB,EAAcjkB,EAAQ0nD,SAAS3jD,EAAK4R,IACpCwD,EAAWiwC,GAAenlC,EAAY2Y,aAAa50B,EAAOsb,QAAQphB,OAClEiX,EAAWsc,aACf,EACAz1B,EAAQwpD,2BAA2B5mD,KAAK0mD,EAAaG,WAAWA,MAIxEtwC,EAAWiwC,GAAe,IAAIhmD,EAAMuzD,EAAiBvN,EAAgB,WAAWvmD,EAAI4I,EAAO5I,EAAG8zD,EAAiBvN,EAAgB,WAAWtmD,EAAI2I,EAAO3I,GAE7J,EAOAwtB,YAAa,SAASkH,EAAOxtB,GACzB,IAAyBsC,EAArBgC,EAAO5B,EAAK2D,QACZumD,EAAKl2D,EAAU82B,GAAS33B,KAAK61D,iBAAiBl+B,GAAS,CAAEvB,OAAQp2B,KAAKo2B,QAC1E,GAAI2gC,EAAG3gC,OAAOn0B,OAAS,EAAG,CACtB,IAAIiC,EAAO6yD,EAAG3gC,OAAO,GACrB3nB,EAAOvK,EAAK0T,OAAO+b,IACnB,IAAK,IAAIjxB,EAAI,EAAGA,EAAIq0D,EAAG3gC,OAAOn0B,OAAQS,IAElC+J,GADAvI,EAAO6yD,EAAG3gC,OAAO1zB,IACLkV,OAAO+b,KACJ,IAAXxpB,IACAsC,EAAKzJ,GAAKkB,EAAKyhC,gBAAgB3iC,EAC/ByJ,EAAKxJ,GAAKiB,EAAKyhC,gBAAgB1iC,GAEnCwL,EAAOA,EAAKzB,MAAMP,EAE1B,CACA,OAAOgC,CACX,EAEAuoD,iBAAkB,WACd,IAAIC,EAAkBj3D,KAAKgH,QAAQ4E,SAInC,OAHI5L,KAAKitD,UACLgK,EAAgB/oD,KAAOuyC,EAAYzgD,KAAKitD,QAAQjmD,UAE7CiwD,CACX,EAEA7D,eAAgB,SAAS1lD,GACrB,IAAIupD,EAAkBj3D,KAAKg3D,mBAE3B,OAAO,IAAIzzD,EAAMmK,EAAM1K,EAAIi0D,EAAgBzpD,KAAME,EAAMzK,EAAIg0D,EAAgB/oD,IAC/E,EACAgpD,eAAgB,SAASxpD,GACrB,IAAIupD,EAAkBj3D,KAAKg3D,mBAE3B,OAAO,IAAIzzD,EAAMmK,EAAM1K,EAAIi0D,EAAgBzpD,KAAME,EAAMzK,EAAIg0D,EAAgB/oD,IAC/E,EACAipD,YAAa,SAASzpD,GAClB,OAAO1N,KAAKo3D,qBAAqB1pD,EAAO1N,KAAKq3D,cACjD,EACAxuB,YAAa,SAASn7B,GAClB,OAAO1N,KAAKo3D,qBAAqB1pD,EAAO1N,KAAKs3D,QACjD,EACArzB,aAAc,SAASv2B,GACnB,OAAO1N,KAAKo3D,qBAAqB1pD,EAAO1N,KAAKu3D,aACjD,EACAC,aAAc,SAAS9pD,GACnB,OAAO1N,KAAKo3D,qBAAqB1pD,EAAO1N,KAAKy3D,mBACjD,EACA3E,gBAAiB,SAASplD,GACtB,IAAIgqD,EAAY13D,KAAKozD,eAAe1lD,GAKpC,OAJK1N,KAAKo5B,OAAO3R,YACbiwC,EAAU10D,EAAI00D,EAAU10D,EAAIhD,KAAKq5B,SAASyB,WAC1C48B,EAAUz0D,EAAIy0D,EAAUz0D,EAAIjD,KAAKq5B,SAAS0B,WAEvC/6B,KAAKm3D,YAAYO,EAC5B,EACAC,gBAAiB,SAASjqD,GACtB,OAAO1N,KAAKk3D,eAAel3D,KAAK6oC,YAAYn7B,GAChD,EACA0pD,qBAAsB,SAAS1pD,EAAO0b,GAClC,IAAIziB,EAAS+G,EACb,GAAIA,aAAiBnK,EACb6lB,IACAziB,EAASyiB,EAAO1hB,MAAMgG,QAGzB,CACD,IAAImB,EAAK7O,KAAKo3D,qBAAqB1pD,EAAMU,UAAWgb,GAChDra,EAAK/O,KAAKo3D,qBAAqB1pD,EAAMa,cAAe6a,GACxDziB,EAASkG,EAAK4D,WAAW5B,EAAIE,EACjC,CACA,OAAOpI,CACX,EAEAixD,cAAe,SAAShL,GACpB5sD,KAAKyjB,QAAQmpC,WAAaA,EAC1B5sD,KAAK63D,cACD73D,KAAKyjB,QAAQqpC,UACb9sD,KAAK4sD,WAAWkL,OAExB,EAEAC,yBAA0B,SAASnL,GAC/B5sD,KAAKyjB,QAAQ0kC,sBAAwByE,EACrC5sD,KAAKg4D,wBACDh4D,KAAKyjB,QAAQqpC,UACb9sD,KAAKmoD,sBAAsB2P,OAEnC,EAOAthC,OAAQ,SAAS/S,GAGb,IAAI9hB,EAUAkrC,EACJ,OAbA7sC,KAAK4lD,YAAa,EAGd7kD,EAAY0iB,KACZA,EAAUzjB,KAAKyjB,QAAQ+S,SAGvB70B,EADAZ,EAAY0iB,IAAY1iB,EAAY0iB,EAAQ9hB,MACrC,OAGA8hB,EAAQ9hB,MAGN8P,eACT,IAAK,OACDo7B,EAAI,IAAI1sC,EAAQ6zC,WAAWh0C,MAC3B,MAEJ,IAAK,UACD6sC,EAAI,IAAI1sC,EAAQk0C,cAAcr0C,MAC9B,MAEJ,IAAK,gBACL,IAAK,QACL,IAAK,SACL,IAAK,iBACD6sC,EAAI,IAAI1sC,EAAQkkB,aAAarkB,MAC7B,MACJ,QACI,KAAM,qBAAuB2B,EAAO,sBAE5C,IAAI0yB,EAAe,IAAIl0B,EAAQwuC,YAAY3uC,MACvCs0B,EAAauY,EAAErW,OAAO/S,GAC1B,GAAI6Q,EAAY,CACZ,IAAIvhB,EAAO,IAAI5S,EAAQi0B,eAAeC,EAAcC,EAAY7Q,EAAUA,EAAQ8Q,QAAU,MAC5Fv0B,KAAK07B,gBAAgB5mB,IAAI/B,EAC7B,CACA/S,KAAK4lD,YAAa,EAClB5lD,KAAKi4D,oBACT,EAMA9jC,aAAc,SAASre,GACnB,IAAIwF,EAIJ,OAHAA,EAAQ9a,EAAMqG,MAAM7G,KAAKo2B,QAAQ,SAAShzB,GACtC,OAAOA,EAAEwkB,OAAO9R,KAAOA,CAC3B,KAEWwF,EAEXA,EAAQ9a,EAAMqG,MAAM7G,KAAKy7B,aAAa,SAAS72B,GAC3C,OAAOA,EAAEgjB,OAAO9R,KAAOA,CAC3B,GAEJ,EAEAoiD,kBAAmB,SAASpiD,GASxB,OAPI9V,KAAKykD,YACGzkD,KAAK6nD,SAAS/xC,GAEdtV,EAAMqG,MAAM7G,KAAKo2B,QAAQ,SAAS9e,GACtC,OAAQA,EAAMwrC,UAAY,CAAC,GAAGhtC,KAAOA,CACzC,GAGR,EAEAqiD,mBAAoB,SAAS9P,GASzB,OAPIroD,KAAKykD,YACGjkD,EAAMqG,MAAM7G,KAAKo2B,QAAQ,SAAS9e,GACtC,OAAQA,EAAMwrC,UAAY,CAAC,GAAGuF,MAAQA,CAC1C,IAEQroD,KAAK6nD,SAASQ,EAG9B,EAEA+P,uBAAwB,SAAStiD,GAC7B,IAAIwD,EAMJ,OALItZ,KAAKmoD,wBACL7uC,EAAa9Y,EAAMqG,MAAM7G,KAAKy7B,aAAa,SAASniB,GAChD,OAAQA,EAAWwpC,UAAY,CAAC,GAAGhtC,KAAOA,CAC9C,KAEGwD,CACX,EAEA++C,wBAAyB,SAAShQ,GAC9B,IAAI/uC,EAIJ,OAHItZ,KAAKmoD,wBACL7uC,EAAatZ,KAAKguD,oBAAoB3F,IAEnC/uC,CACX,EAEAyyC,qBAAsB,SAAStoC,GACvBA,EAAQ+S,SACR/S,EAAQ+S,OAASn2B,EAAW,CAAC,EAAGF,EAAQipC,WAAWjzB,GAAGkzB,gBAAkB,CAAC,EAAG5lB,EAAQ+S,QAE5F,EAEAyvB,kBAAmB,SAASjhB,EAAU+gB,IAC9B/gB,EAAS/iC,QAAU8jD,EAAW9jD,SAC9BjC,KAAKmJ,QAAQi4C,GAAQ,CAAEpc,SAAUA,EAAU+gB,WAAYA,GAE/D,EACAyN,cAAe,SAAS7jD,GACpB,OAAOkxC,EAAKl3C,IAAIk3C,EAAKn3C,IAAIiG,EAAM3P,KAAKyjB,QAAQub,SAAUh/B,KAAKyjB,QAAQwb,QACvE,EACAy0B,cAAe,SAAS9rD,GACpB,IAAIzH,EAAUH,KACVk3B,EAAMtvB,GAAOzH,EAAQ+6B,KAErB/6B,EAAQi5B,OAAO3R,WACftnB,EAAQk5B,SAASo9B,SAASv/B,EAAIl0B,EAAGk0B,EAAIj0B,GACrC9C,EAAQ+1D,mBAER/1D,EAAQ66B,UAAU9D,GAClB/2B,EAAQm4D,sBAEhB,EAEAC,WAAY,WACRv4D,KAAKmJ,QAAQm4C,GAAK,CAAExD,MAAO99C,KAAKk7B,KAAMzrB,MAAO+E,OAAOgkD,KACxD,EACAx9B,UAAW,SAAS9D,GAChBl3B,KAAKk7B,KAAOhE,EACZl3B,KAAKy4D,kBACT,EACAvC,eAAgB,WACZ,IAAIvmD,EAAO3P,KAAKszD,MAEZ5rC,EAAY,IAAIF,EAAmB,EAAG,EAAG7X,EAAMA,GACnD+X,EAAUC,OAAO3nB,KAAKqgC,WACtBrgC,KAAK04D,kBAAkBhxC,GACvB1nB,KAAKy4D,kBACT,EACAH,oBAAqB,WACjB,IAAIphC,EAAMl3B,KAAKk7B,KACXvrB,EAAO3P,KAAKszD,MAEZ5rC,EAAY,IAAIF,EAAmB0P,EAAIl0B,EAAGk0B,EAAIj0B,EAAG0M,EAAMA,GAC3D+X,EAAUC,OAAO3nB,KAAKqgC,WACtBrgC,KAAK04D,kBAAkBhxC,GACvB1nB,KAAKy4D,kBACT,EACAC,kBAAmB,SAASC,GACxB34D,KAAKu3D,aAAeoB,EAAgB7xC,WACpC9mB,KAAKy3D,mBAAqBkB,EAAgB3xC,SAASF,UACvD,EACA2xC,iBAAkB,WACd,IAAIvhC,EAAMl3B,KAAKk7B,KACXvrB,EAAO3P,KAAKszD,MAEZ5rC,EAAY,IAAIF,EAAmB0P,EAAIl0B,EAAGk0B,EAAIj0B,EAAG0M,EAAMA,GAC3D3P,KAAKs3D,QAAU5vC,EAAUZ,WACzB9mB,KAAKq3D,cAAgB3vC,EAAUV,SAASF,UAC5C,EACA+Q,SAAU,SAASF,EAAOnY,GACtB,IAAI7Y,EAAS3G,KAAK61D,iBAAiBl+B,GACnC33B,KAAKqgC,UAAUhQ,QAAQ1pB,EAAOupB,QAAS1Q,GACvCxf,KAAK81D,aAAanvD,GAAQ,EAC9B,EACAmvD,aAAc,SAASnvD,EAAQspB,GAC3B,IAEIvtB,EAAGwB,EAFH00D,EAAW3oC,EAAUjwB,KAAKo2B,OAAOn0B,OAAS,EAAI,EAC9C42D,EAAS5oC,EAAUjwB,KAAKy7B,YAAYx5B,OAAS,EAAI,EAErD,IAAKS,EAAI,EAAGA,EAAIiE,EAAOyvB,OAAOn0B,OAAQS,IAClCwB,EAAOyC,EAAOyvB,OAAO1zB,GACrBlC,EAAMqF,OAAO7F,KAAKo2B,OAAQlyB,GAC1B1D,EAAMuG,OAAO/G,KAAKo2B,OAAQlyB,EAAM00D,GAEpC,IAAKl2D,EAAI,EAAGA,EAAIiE,EAAO2/C,KAAKrkD,OAAQS,IAChCwB,EAAOyC,EAAO2/C,KAAK5jD,GACnBlC,EAAMqF,OAAO7F,KAAKy7B,YAAav3B,GAC/B1D,EAAMuG,OAAO/G,KAAKy7B,YAAav3B,EAAM20D,EAE7C,EACAhD,iBAAkB,SAASl+B,GACvB,IAAIj1B,EAAGiE,EAAS,CAAC,EAAGi0B,EAAOjD,EAW3B,IAVAhxB,EAAOupB,QAAU,GACjBvpB,EAAOyvB,OAAS,GAChBzvB,EAAO2/C,KAAO,GAET3uB,EAEOr3B,EAAQq3B,KAChBiD,EAAO,CAACjD,IAFRiD,EAAO56B,KAAK4/B,eAAetyB,QAK1B5K,EAAI,EAAGA,EAAIk4B,EAAK34B,OAAQS,IAAK,CAC9B,IAAIwB,EAAO02B,EAAKl4B,GACZwB,aAAgB44B,IAChBn2B,EAAOyvB,OAAOrzB,KAAKmB,GACnByC,EAAOupB,QAAQntB,KAAKmB,EAAK0jB,SAClB1jB,aAAgB27B,KACvBl5B,EAAO2/C,KAAKvjD,KAAKmB,GACjByC,EAAOupB,QAAQntB,KAAKmB,EAAK0jB,QAEjC,CAEA,OAAOjhB,CACX,EAEA+uD,YAAa,SAASxxD,EAAMof,EAAUw1C,GAClC50D,EAAKwuB,QAAO,GACRxuB,aAAgB44B,IAChB98B,KAAK21D,qBAAqBzxD,GAC1BlE,KAAK+4D,aAAa70D,EAAMof,EAAUw1C,IAC3B50D,aAAgB27B,KACvB7/B,KAAK41D,0BAA0B1xD,GAC/BlE,KAAKg5D,kBAAkB90D,EAAMof,IAGjCtjB,KAAKqgC,UAAUx6B,OAAO3B,EAAK0jB,OAC/B,EAEAmxC,aAAc,SAASzhD,EAAOgM,EAAUw1C,GACpC,IAAIp2D,EAAG4W,EAAY6iB,EACflb,EAAU,GAAIJ,EAAU,GAS5B,IARA7gB,KAAK44B,YAAY6D,eAEbnZ,GACAtjB,KAAK07B,gBAAgBjD,iBAAiB,IAAIvC,EAAgB5e,IAE9D9W,EAAMqF,OAAO7F,KAAKo2B,OAAQ9e,GAC1BtX,KAAKsrD,gBAAgBzlD,OAAOyR,GAEvB5U,EAAI,EAAGA,EAAI4U,EAAM6oB,WAAWl+B,OAAQS,IAAK,CAC1Cy5B,EAAY7kB,EAAM6oB,WAAWz9B,GAC7B,IAAK,IAAIqI,EAAI,EAAGA,EAAIoxB,EAAUV,YAAYx5B,OAAQ8I,IAC9CuO,EAAa6iB,EAAUV,YAAY1wB,GAC9B+tD,GAAuB14D,EAAQ+F,QAAQmT,EAAYw/C,KAChDx/C,EAAWujB,iBAAmBV,EAC9Blb,EAAQle,KAAKuW,GACNA,EAAW2c,iBAAmBkG,GACrCtb,EAAQ9d,KAAKuW,GAI7B,CAEA,IAAK5W,EAAI,EAAGA,EAAIue,EAAQhf,OAAQS,IAC5Bue,EAAQve,GAAGN,OAAO,KAAMkhB,GACxBrC,EAAQve,GAAGkzB,cAEf,IAAKlzB,EAAI,EAAGA,EAAIme,EAAQ5e,OAAQS,IAC5Bme,EAAQne,GAAGyF,OAAO,KAAMmb,GACxBzC,EAAQne,GAAGkzB,aAEnB,EAEAojC,kBAAmB,SAAS1/C,EAAYgK,GAChChK,EAAWujB,iBACXr8B,EAAMqF,OAAOyT,EAAWujB,gBAAgBpB,YAAaniB,GAErDA,EAAW2c,iBACXz1B,EAAMqF,OAAOyT,EAAW2c,gBAAgBwF,YAAaniB,GAErDgK,GACAtjB,KAAK07B,gBAAgBjD,iBAAiB,IAAIzC,EAAqB1c,IAGnE9Y,EAAMqF,OAAO7F,KAAKy7B,YAAaniB,EACnC,EAEA2/C,iBAAkB,SAASthC,EAAOuhC,GAC9B,IAAIh1D,EAAMqU,EAAUjB,EAAO4oB,EAG3B,IAFAvI,EAAQr3B,EAAQq3B,GAASA,EAAQ,CAACA,GAE3BA,EAAM11B,QAGT,GAFAiC,EAAOyzB,EAAMwd,SACb79B,EAAQtX,KAAK6nD,SAAS3jD,EAAKmkD,QAEvBroD,KAAKm5D,wBAAwB7hD,GAC7BtX,KAAK01D,YAAYp+C,GAAO,UACjBtX,KAAK6nD,SAAS3jD,EAAKmkD,KACtB6Q,GAAah1D,EAAKk1D,aAAel1D,EAAKm1D,UAEtC,IADA9gD,EAAWrU,EAAKqU,SAASV,OACpBqoB,EAAM,EAAGA,EAAM3nB,EAAStW,OAAQi+B,IACjCvI,EAAM50B,KAAKwV,EAAS2nB,GAKxC,EAEAi5B,wBAAyB,SAAS7hD,GAC9B,IACI4oB,EADAzE,EAAcnkB,EAAMmkB,cAGxB,GAAIA,EACA,IAAKyE,EAAM,EAAGA,EAAMzE,EAAYx5B,OAAQi+B,IACpClgC,KAAK01D,YAAYj6B,EAAYyE,IAAM,EAG/C,EAEAo5B,aAAc,SAASxW,EAAUx/B,GAC7B,GAAKsC,EAAQk9B,GAAb,CAIA,IAAIxrC,EAAQtX,KAAK6nD,SAAS/E,EAAShtC,IACnC,GAAIwB,EACA,OAAOA,EAGX,IAAImM,EAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAQN,eAK1C,OAJAM,EAAQq/B,SAAWA,EACnBxrC,EAAQ,IAAIwlB,GAAMrZ,EAASzjB,MAC3BA,KAAKujB,SAASjM,GAAoB,IAAbgM,GACrBtjB,KAAK6nD,SAAS/E,EAAShtC,IAAMwB,EACtBA,CAZP,CAaJ,EAEAiiD,kBAAmB,SAASzW,GACxB,GAAKl9B,EAAQk9B,GAAb,CAIA,IAAIxrC,EAAQtX,KAAK6nD,SAAS/E,EAASuF,KACnC,GAAI/wC,EACA,OAAOA,EAGX,IAAImM,EAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAQN,eAK1C,OAJAM,EAAQq/B,SAAWA,EACnBxrC,EAAQ,IAAIwlB,GAAMrZ,EAASzjB,MAC3BA,KAAKujB,SAASjM,GACdtX,KAAK6nD,SAAS/E,EAASuF,KAAO/wC,EACvBA,CAZP,CAaJ,EAEAkiD,cAAe,SAAS7hC,EAAO/S,GAC3B,IAAI1gB,EAAMg8B,EAAK5oB,EAAOmiD,EACtB,IAAKv5B,EAAM,EAAGA,EAAMvI,EAAM11B,OAAQi+B,IAC9Bh8B,EAAOyzB,EAAMuI,GACb5oB,EAAQtX,KAAKu5D,kBAAkBr1D,IAC/Bu1D,EAAcz5D,KAAKu5D,kBAAkB30C,MACjB5kB,KAAK0f,UAAU+5C,EAAaniD,IAC/BtX,KAAK0jB,QAAQ+1C,EAAaniD,EAGnD,EAEAoiD,eAAgB,SAASnnD,GACrB,IAKI2tB,EACAy5B,EANAxhD,EAAOnY,KACPkY,EAAO3F,EAAE2F,KACT+G,EAAS1M,EAAE0M,OACX0Y,EAAQplB,EAAEolB,MACVlU,EAAUtL,EAAKsL,QAInB,GAAIlR,EAAEmU,MACF,IAAKwZ,EAAM,EAAGA,EAAMvI,EAAM11B,OAAQi+B,IAC1BlgC,KAAK6nD,SAASlwB,EAAMuI,GAAKmoB,MACzBroD,KAAK6nD,SAASlwB,EAAMuI,GAAKmoB,KAAK7D,mBAH1C,CASA,GAAc,UAAVvlC,EACAjf,KAAKi5D,iBAAiB1mD,EAAEolB,OAAO,QAc/B,IAXM1Y,GAAqB,eAAXA,GAA6Bjf,KAAK45D,gBAC9C55D,KAAK45D,eAAgB,EACrBD,GAAY,GAGX16C,GAAW/G,GACZC,EAAKhR,QAGTnH,KAAKw5D,cAAc7hC,EAAOzf,GAErBgoB,EAAM,EAAGA,EAAMvI,EAAM11B,OAAQi+B,IAC9BvI,EAAMuI,GAAKk1B,OAIf3xC,EAAQ+S,SAAWmjC,GAAuB,UAAV16C,GAAgC,OAAVA,IACtD9G,EAAKqe,OAAO/S,EAAQ+S,QAGpBmjC,IACA35D,KAAKmJ,QAAQ,aACbnJ,KAAK45D,eAAgB,EA5BzB,CA8BJ,EAEAC,SAAU,SAAS31D,GACXA,aAAgB44B,GAChB98B,KAAKujB,SAASrf,GACPA,aAAgB27B,IACvB7/B,KAAKiuD,cAAc/pD,EAE3B,EAEAguD,eAAgB,SAAS4H,GACrB,IAAI35D,EAAUH,KAAK44B,YAAYz4B,QAE/B,IAAKH,KAAK+5D,eAA6C,IAA5B55D,EAAQuyB,SAASzwB,OAAc,CACtD,IAAI+E,EAAU7G,EAAQuyB,SAAS,GAC/B,GAAI1rB,IAAwC,IAA7BA,EAAQyc,QAAQ2hB,SAAoB,CAC/C,IAAIA,EAAWp+B,EAAQyc,QAAQ2hB,SAC3B5H,EAAQ4H,EAAS5H,MAarB,GAZIx9B,KAAKykD,aAAgC,IAAjBjnB,EAAMv7B,SACtB+E,aAAmB81B,GACnBU,EAAQ,CAAC,OAAQ,kBAAmB,uBAC7Bx2B,aAAmB64B,KAC1BrC,EAAQ,CAAC,SAGT4H,IAAgC,IAApBA,EAASv/B,QACrB23B,EAAMz6B,KAAK,WAIfy6B,GAASA,EAAMv7B,OAAQ,CACvB,IACIyL,EACJ1N,KAAK+5D,cAAgB,IAAI7M,GAAe/sD,EAAS,CAC7Cq9B,MAAOA,EACP2vB,MAAOntD,KAAKotD,cAAcp1B,KAAKh4B,MAC/BqtD,OAAO,EACP2M,YAAax2D,SAASrD,EAAQ6G,QAAQizD,QAAQ,aAAa36B,IAAI,UAAW,IAAM,KAEpF,IAAI46B,EAAa3Z,EAAWvgD,KAAK+5D,cAAcI,OAAOnzD,SAClDozD,EAAc3Z,EAAYzgD,KAAK+5D,cAAcI,OAAOnzD,SACxD,GAAIA,aAAmB81B,GAAO,CAC1B,IAAIgF,EAAc9hC,KAAK6oC,YAAY7hC,EAAQ4Q,OAAO+b,KAClDjmB,EAAQ,IAAInK,EAAMu+B,EAAY9+B,EAAG8+B,EAAY7+B,GAAG0I,MAAM,IAAIpI,GACrD22D,EAAap4B,EAAY50B,OAAS,EACnCktD,EAdM,IAed,MAAO,GAAIpzD,aAAmB64B,GAAY,CACtC,IAAIw6B,EAAmBr6D,KAAK6oC,YAAY7hC,EAAQ4Q,UAEhDlK,EAAQ,IAAInK,EAAM82D,EAAiBr3D,EAAGq3D,EAAiBp3D,GAClD0I,MAAM,IAAIpI,GACN22D,EAAaG,EAAiBntD,MAAQ,IAAM,EAC7CktD,EArBE,IAuBd,CAEI1sD,GACK1N,KAAKo5B,OAAO3R,YACb/Z,EAAQA,EAAM/B,MAAM,IAAIpI,EAAMvD,KAAKq5B,SAASyB,WAAY96B,KAAKq5B,SAAS0B,aAE1ErtB,EAAQ1N,KAAKk3D,eAAexpD,GAC5BA,EAAQ,IAAInK,EAAMs9C,EAAKn3C,IAAIgE,EAAM1K,EAAG,GAAI69C,EAAKn3C,IAAIgE,EAAMzK,EAAG,IAC1DjD,KAAK+5D,cAAcO,OAAO5sD,GACtBosD,GACA95D,KAAK+5D,cAAcI,OAAOI,IAAI,QAAStI,KAG3CjyD,KAAKu+B,iBAEb,CACJ,CACJ,CACJ,EAEA6uB,cAAe,SAAS76C,GACpBvS,KAAKmJ,QAAQ,eAAgBoJ,GAC7BvS,KAAKu+B,iBACT,EAEAi8B,oBAAqB,SAAS9sD,GAC1B,OAAOA,EAAM7B,MAAM,EAAI7L,KAAK2P,OAChC,EAEA8nB,YAAa,WACTz3B,KAAKo2B,OAAS,GACdp2B,KAAK4/B,eAAiB,GACtB5/B,KAAKy7B,YAAc,GACnBz7B,KAAK6nD,SAAW,CAAC,EACjB7nD,KAAKguD,oBAAsB,CAAC,EAC5BhuD,KAAK0pD,oBAAsB,IAAI+Q,GAC/Bz6D,KAAK2pD,2BAA6B,GAClC3pD,KAAK07B,gBAAkB,IAAI3D,EAAgB,CACvC2iC,OAAQ16D,KAAK0xD,aACbiJ,OAAQ36D,KAAK0xD,eAEjB1xD,KAAK8V,GAAK3V,EAAQsT,UACtB,EAEA+4C,gBAAiB,WACb,IAAIr0C,EAAOnY,KACXmY,EAAK0/C,cAED1/C,EAAKssC,aACLtsC,EAAK6/C,wBAGL7/C,EAAKsL,QAAQqpC,WACT30C,EAAKssC,aACLzkD,KAAK46D,gBAAiB,EACtB56D,KAAK66D,qBAAsB,EAC3B1iD,EAAKy0C,WAAWkL,QAChB3/C,EAAKgwC,sBAAsB2P,SAE3B3/C,EAAKy0C,WAAWkL,QAG5B,EAEAD,YAAa,WACT,GAAIjyC,EAAQ5lB,KAAKyjB,QAAQ0kC,uBAAwB,CAC7CnoD,KAAKykD,aAAc,EACnB,IAAIqW,EAAY96D,KAAKyjB,QAAQmpC,YAAc,CAAC,EACxCmO,EAAKz6D,EAAQw6D,GAAa,CAAEjjD,KAAMijD,GAAcA,EAEhD96D,KAAK4sD,YAAc5sD,KAAKg7D,sBACxBh7D,KAAK4sD,WACAloB,OAAO,SAAU1kC,KAAKg7D,uBACtBt2B,OAAO,eAAgB1kC,KAAKi7D,4BAC5Bv2B,OAAO,QAAS1kC,KAAKk7D,sBAE1Bl7D,KAAKg7D,sBAAwBh7D,KAAKm7D,eAAenjC,KAAKh4B,MACtDA,KAAKi7D,2BAA6Bj7D,KAAKo7D,oBAAoBpjC,KAAKh4B,MAChEA,KAAKk7D,oBAAsBl7D,KAAKq7D,OAAOrjC,KAAKh4B,OAGhDA,KAAK4sD,WAAa/sD,MAAMgY,KAAKyjD,WAAWh0C,OAAOyzC,GAC1C/iC,KAAK,SAAUh4B,KAAKg7D,uBACpBhjC,KAAK,eAAgBh4B,KAAKi7D,4BAC1BjjC,KAAK,QAASh4B,KAAKk7D,oBAC5B,MACIl7D,KAAKu7D,kBACLv7D,KAAKykD,aAAc,CAE3B,EAEAuT,sBAAuB,WACnB,IAAI8C,EAAY96D,KAAKyjB,QAAQ0kC,sBAC7B,GAAI2S,EAAW,CACX,IAAIC,EAAKz6D,EAAQw6D,GAAa,CAAEjjD,KAAMijD,GAAcA,EAEhD96D,KAAKmoD,uBAAyBnoD,KAAKw7D,2BACnCx7D,KAAKmoD,sBACAzjB,OAAO,SAAU1kC,KAAKw7D,4BACtB92B,OAAO,eAAgB1kC,KAAKy7D,iCAC5B/2B,OAAO,QAAS1kC,KAAK07D,2BAE1B17D,KAAKw7D,2BAA6Bx7D,KAAK27D,oBAAoB3jC,KAAKh4B,MAChEA,KAAKy7D,gCAAkCz7D,KAAK47D,yBAAyB5jC,KAAKh4B,MAC1EA,KAAK07D,yBAA2B17D,KAAK67D,kBAAkB7jC,KAAKh4B,OAGhEA,KAAKmoD,sBAAwBtoD,MAAMgY,KAAKyjD,WAAWh0C,OAAOyzC,GACrD/iC,KAAK,SAAUh4B,KAAKw7D,4BACpBxjC,KAAK,eAAgBh4B,KAAKy7D,iCAC1BzjC,KAAK,QAASh4B,KAAK07D,yBAC5B,CACJ,EAEAN,oBAAqB,SAAS7oD,GACZ,QAAVA,EAAE5Q,OACF3B,KAAK46D,gBAAiB,EAE9B,EAEAgB,yBAA0B,SAASrpD,GACjB,QAAVA,EAAE5Q,OACF3B,KAAK66D,qBAAsB,EAEnC,EAEAQ,OAAQ,WACJr7D,KAAK46D,gBAAiB,CAC1B,EAEAiB,kBAAmB,WACf77D,KAAK66D,qBAAsB,CAC/B,EAEAM,eAAgB,SAAS5oD,GACJ,WAAbA,EAAE0M,OACEjf,KAAK87D,kBACL97D,KAAK+7D,cAAcxpD,EAAEolB,OAEL,eAAbplB,EAAE0M,OACLjf,KAAK87D,kBACL97D,KAAKg8D,cAAczpD,EAAEolB,MAAOplB,EAAEmU,OAEd,QAAbnU,EAAE0M,OACTjf,KAAK0pD,oBAAoB50C,IAAIvC,EAAEolB,OACX,SAAbplB,EAAE0M,OACTjf,KAAKi8D,YAAY1pD,EAAEolB,OAEnB33B,KAAK02B,SAEb,EAEAolC,eAAgB,WACZ,OAAQ97D,KAAKk8D,UACjB,EAEAtX,qBAAsB,WAClB5kD,KAAKk8D,YAAcl8D,KAAKk8D,YAAc,GAAK,CAC/C,EAEArX,oBAAqB,WACjB7kD,KAAKk8D,WAAarb,EAAKn3C,KAAK1J,KAAKk8D,YAAc,GAAK,EAAG,EAC3D,EAEAxlC,QAAS,WACL12B,KAAK46D,gBAAiB,EACjB56D,KAAK66D,qBACN76D,KAAKm8D,6BAEb,EAEAA,4BAA6B,WACzBn8D,KAAKmH,QACLnH,KAAKo8D,WAAWp8D,KAAK4sD,WAAWe,QAC5B3tD,KAAKmoD,uBACLnoD,KAAKq8D,gBAAgBr8D,KAAKmoD,sBAAsBwF,QAAQ,GAGxD3tD,KAAKyjB,QAAQ+S,OACbx2B,KAAKw2B,OAAOx2B,KAAKyjB,QAAQ+S,QAEzBx2B,KAAKi4D,qBAETj4D,KAAKmJ,QAAQ,YACjB,EAEA08C,mBAAoB,WAChB7lD,KAAK66D,qBAAsB,EACtB76D,KAAK46D,gBACN56D,KAAKm8D,6BAEb,EAEAlE,mBAAoB,WAEhB,IADA,IAAIx8B,EAAcz7B,KAAKy7B,YACdyE,EAAM,EAAGA,EAAMzE,EAAYx5B,OAAQi+B,IACxCzE,EAAYyE,GAAKxJ,SAEzB,EAEAqlC,cAAe,SAASpkC,GACpB,IACIzzB,EAAMxB,EADNklD,EAAU5nD,KAAK6nD,SAEnB,IAAKnlD,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAEtBklD,GADJ1jD,EAAOyzB,EAAMj1B,IACIoT,MACb9V,KAAK6F,OAAO+hD,EAAQ1jD,EAAK4R,KAAK,GAC9B8xC,EAAQ1jD,EAAK4R,IAAM,KAG/B,EAEAmmD,YAAa,WACT,IAAI97D,EAAUH,KACVs8D,EAAgBn8D,EAAQupD,oBAC5B4S,EAAc/2D,SAAQ,SAASkkD,GAC3B,IAAI3G,EAAW2G,EAAa3G,SACxBxrC,EAAQmyC,EAAaziD,QACpB87C,EAAStjB,UACNloB,GACAA,EAAM8sC,uBACNjkD,EAAQojB,SAASjM,EAAOmyC,EAAanmC,UACrCnjB,EAAQ0nD,SAAS/E,EAAShtC,IAAMwB,GAEhCnX,EAAQm5D,aAAaxW,GAEzB2G,EAAa8S,WACbD,EAAcz2D,OAAOi9C,GAE7B,GACJ,EAEAkZ,cAAe,SAASrkC,EAAOjR,GAC3B,IAAK,IAAIhkB,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAAK,CACnC,IAAIogD,EAAWnrB,EAAMj1B,GAEjB4U,EAAQtX,KAAK6nD,SAAS/E,EAAShtC,IAC/BwB,GACAA,EAAM0sC,uBAAuBlB,EAAUp8B,EAE/C,CACJ,EAEA01C,WAAY,SAASI,GACjB,IAAK,IAAI95D,EAAI,EAAGA,EAAI85D,EAAUv6D,OAAQS,IAClC1C,KAAKs5D,aAAakD,EAAU95D,IAAI,EAExC,EAEAi5D,oBAAqB,SAASppD,GACT,WAAbA,EAAE0M,OACEjf,KAAK87D,kBACL97D,KAAKy8D,mBAAmBlqD,EAAEolB,OAEV,QAAbplB,EAAE0M,OACTjf,KAAKq8D,gBAAgB9pD,EAAEolB,OACH,SAAbplB,EAAE0M,SAEW,eAAb1M,EAAE0M,OACLjf,KAAK87D,kBACL97D,KAAK08D,mBAAmBnqD,EAAEolB,OAG9B33B,KAAK6lD,qBAEb,EAEA4W,mBAAoB,SAAS9kC,GACzB,IAAK,IAAIj1B,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAC9B1C,KAAK6F,OAAO7F,KAAKguD,oBAAoBr2B,EAAMj1B,GAAG2lD,MAAM,GACpDroD,KAAKguD,oBAAoBr2B,EAAMj1B,GAAG2lD,KAAO,IAEjD,EAEAqU,mBAAoB,SAAS/kC,GACzB,IAAK,IAAIj1B,EAAI,EAAGA,EAAIi1B,EAAM11B,OAAQS,IAAK,CACnC,IAAIogD,EAAWnrB,EAAMj1B,GAEJ1C,KAAKguD,oBAAoBlL,EAASuF,KACxCrE,uBAAuBlB,EACtC,CACJ,EAEAuZ,gBAAiB,SAAS5gC,EAAanY,GAGnC,IAFA,IAAIrhB,EAASw5B,EAAYx5B,OAEhBS,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC7B,IAAIogD,EAAWrnB,EAAY/4B,GAC3B1C,KAAK28D,uBAAuB7Z,EAAUx/B,EAC1C,CACJ,EAEAq5C,uBAAwB,SAAS7Z,EAAUx/B,GACvC,IAAKtjB,KAAKguD,oBAAoBlL,EAASuF,KAAM,CACzC,IAAI5+C,EAAOzJ,KAAK48D,mBAAmB9Z,EAASr5C,MACvCmc,EAAQnc,IAAkB,OAATA,IAClBA,EAAO,IAAIlG,EAAMu/C,EAASgF,MAAOhF,EAASiF,QAG9C,IAAIx+C,EAAKvJ,KAAK48D,mBAAmB9Z,EAASv5C,IAK1C,GAJKqc,EAAQrc,IAAc,OAAPA,IAChBA,EAAK,IAAIhG,EAAMu/C,EAASkF,IAAKlF,EAASmF,MAGtCriC,EAAQnc,IAASmc,EAAQrc,GAAK,CAC9B,IAAIka,EAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAAQupC,oBAC1CvpC,EAAQq/B,SAAWA,EACnB,IAAIxpC,EAAa,IAAIumB,GAAWp2B,EAAMF,EAAIka,GAE1CzjB,KAAKguD,oBAAoBlL,EAASuF,KAAO/uC,EACzCtZ,KAAKiuD,cAAc30C,EAAYgK,EACnC,CACJ,CACJ,EAEAs5C,mBAAoB,SAASp6D,GACzB,IAAI25B,EAMJ,OAJIvW,EAAQpjB,IAAoB,OAAVA,IAClB25B,EAAYn8B,KAAK6nD,SAASrlD,IAGvB25B,CACX,EAEAo/B,gBAAiB,WACb,IAAIpjD,EAAOnY,KAEP4sD,EADUz0C,EAAKsL,QACMmpC,WAIzB,IAFAA,EAAatsD,EAAQssD,GAAc,CAAE/0C,KAAM+0C,GAAeA,aAEhC/sD,MAAMgY,KAAKyjD,cAAgB1O,aAAsB/sD,MAAMgY,KAAK8oC,wBAClF,MAAM,IAAIrqC,MAAM,qQAGfs2C,EAAWnmC,SACZmmC,EAAWnmC,OAAS,CAChB,CAAEC,MAAO,QACT,CAAEA,MAAO,OACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,cAGbvO,EAAKy0C,YAAcz0C,EAAKgsB,iBACxBhsB,EAAK0kD,oBAGT1kD,EAAKgsB,gBAAkBhsB,EAAKuhD,eAAe1hC,KAAK7f,GAChDA,EAAK2kD,cAAgB3kD,EAAKkjD,OAAOrjC,KAAK7f,GAEtCA,EAAKy0C,WAAajM,EAAuBr5B,OAAOslC,GAC3C50B,KAAKgpB,EAAQ7oC,EAAKgsB,iBAClBnM,KAAKkpB,EAAO/oC,EAAK2kD,cAC1B,EAEAD,kBAAmB,WACf,IAAI1kD,EAAOnY,KAEXmY,EAAKy0C,WAAWloB,OAAOsc,EAAQ7oC,EAAKgsB,iBAAiBO,OAAOwc,EAAO/oC,EAAK2kD,cAC5E,EAEAn0B,OAAQ,SAASrS,EAAS6G,GAClBA,IAAazX,GAAe4Q,IACxB6G,GACAn9B,KAAK+iC,UAAUhgC,KAAKuzB,GACpBt2B,KAAKosD,aAAa/9B,OAAOiI,EAAQ1O,UAGjCpnB,EAAMqF,OAAO7F,KAAK+iC,UAAWzM,GAC7Bt2B,KAAKosD,aAAavmD,OAAOywB,EAAQ1O,SAG7C,EAEAo/B,gBAAiB,SAAS1vC,EAAO9U,GACzBA,EACAxC,KAAKi9B,mBAAmB9S,KAAK7S,GAE7BtX,KAAKi9B,mBAAmBlL,SAEhC,EAEA4hC,gBAAiB,WAGb,IAFA,IAAIoJ,EAAW/8D,KAAK+iC,UAEXrgC,EAAI,EAAGA,EAAIq6D,EAAS96D,OAAQS,IAAK,CACtC,IAAI4zB,EAAUymC,EAASr6D,GAEnB4zB,EAAQG,eACRH,EAAQG,gBAEZH,EAAQI,SACZ,CACJ,EAEAsmC,SAAU,WACN,IAAK,IAAIt6D,EAAI,EAAGA,EAAI1C,KAAKy7B,YAAYx5B,OAAQS,IACzC1C,KAAKy7B,YAAY/4B,GAAGg0B,SAE5B,EAEA6H,gBAAiB,WACTv+B,KAAK+5D,gBACL/5D,KAAK+5D,cAAckD,OACnBj9D,KAAK+5D,cAAchoC,UACnB/xB,KAAK+5D,cAAgB,KAE7B,EAEApF,sBAAuB,WACf30D,KAAKitD,UACLjtD,KAAKitD,QAAQgQ,OACbj9D,KAAKitD,QAAQl7B,UACb/xB,KAAKitD,QAAU,KAEvB,EAEAiQ,gBAAiB,WACb,IAAIvrC,EAAU3xB,KAAKo5B,OAAO1H,SACtByrC,EAAe9c,EAAK34B,YACAD,WAAWkK,EAAQ3uB,GAAI2uB,EAAQ1uB,GAEnDm6D,EAAW,IAAI/c,EAAKxzC,KAAK,CAAC,EAAG,GAAI,CAAC8kB,EAAQzkB,MAAOykB,EAAQ1kB,SACzDowD,EAAWxrC,EAAK/F,KAAKwxC,SAASF,GAC9BG,EAAO,IAAI1rC,EAAK7C,MAAM,CAAEtH,UAAWy1C,IACnCK,EAAW,IAAI3rC,EAAK7C,MAAM,CAAEyuC,KAAMJ,IAClChiD,EAAOrb,KAAKo5B,OAAOjQ,eAAe5Q,SAAS,GAO/C,OALAilD,EAASnvC,OAAOkvC,GAGhBA,EAAKhlD,SAASxV,KAAKsY,GAEZmiD,CACX,EAEAE,aAAc,WACV,IAAIvuD,EAAQkxC,EAAK34B,YAAYvY,MAAM,EAAInP,KAAKszD,OACxCiK,EAAO,IAAI1rC,EAAK7C,MAAM,CACtBtH,UAAWvY,IAGXkM,EAAOrb,KAAKqgC,UAAUlX,eAG1B,OAFAo0C,EAAKhlD,SAASxV,KAAKsY,GAEZkiD,CACX,EAEAj/B,aAAc,WACVt+B,KAAKqoC,oBACLroC,KAAKg9B,wBACT,EAEAqL,kBAAmB,WACXroC,KAAK4sD,YAAc5sD,KAAKykD,aACxBzkD,KAAK4sD,WAAWwC,MAExB,EAEApyB,uBAAwB,WACpB,IAAI7kB,EAAOnY,KACPmY,EAAKgwC,uBAAyBhwC,EAAKssC,cACnCxkD,EAAE09D,KAAKj2D,MAAMzH,EAAGkY,EAAKwxC,4BAA4BiU,MAAK,WAClDzlD,EAAKgwC,sBAAsBiH,MAC/B,IACAj3C,EAAK0lD,0BAA4B,GAEzC,IASJ,SAAStZ,GAAoBzB,GACzB,IAAIn8C,EAAS,CAAC,EA4Bd,OAxBIif,GAFJk9B,EAAWA,GAAY,CAAC,GAEH33B,OAA2B,OAAlB23B,EAAS33B,OACnCxkB,EAAOwkB,KAAO23B,EAAS33B,MAGvBvF,EAAQk9B,EAAS9/C,IAAqB,OAAf8/C,EAAS9/C,IAChC2D,EAAO3D,EAAI8/C,EAAS9/C,GAGpB4iB,EAAQk9B,EAAS7/C,IAAqB,OAAf6/C,EAAS7/C,IAChC0D,EAAO1D,EAAI6/C,EAAS7/C,GAGpB2iB,EAAQk9B,EAAS51C,QAA6B,OAAnB41C,EAAS51C,QACpCvG,EAAOuG,MAAQ41C,EAAS51C,OAGxB0Y,EAAQk9B,EAAS71C,SAA+B,OAApB61C,EAAS71C,SACrCtG,EAAOsG,OAAS61C,EAAS71C,QAGzB2Y,EAAQk9B,EAASnhD,OAA2B,OAAlBmhD,EAASnhD,OACnCgF,EAAOhF,KAAOmhD,EAASnhD,MAGpBgF,CACX,CApCAvG,EAAQ09D,YAAY91D,OAAO2jD,GAAQx1C,IAAI,GAEnCtW,MAAMk+D,UACNl+D,MAAMk+D,SAAS/1D,OAAO2jD,GAAQx1C,IAoFlC,IAAI+2C,GAAiBrtD,MAAMoW,WAAWjO,OAAO,CACzCC,KAAM,SAAS9H,EAASsjB,GACpB5jB,MAAMoW,WAAWE,GAAGlO,KAAK5G,KAAKrB,MAC9BA,KAAKG,QAAUA,EACfH,KAAKyjB,QAAUpjB,EAAW,CAAC,EAAGL,KAAKyjB,QAASA,GAC5CzjB,KAAKg+D,OAAS,GACdh+D,KAAKi+D,gBACLj+D,KAAKk+D,cACLl+D,KAAKm+D,cAEDn+D,KAAKyjB,QAAQ4pC,OACbrtD,KAAKo+D,cAGTp+D,KAAKg4B,KAAKh4B,KAAKi4B,OAAQxU,EAC3B,EAEAwU,OAAQ,CAAC,SAETmmC,YAAa,WACTp+D,KAAKoR,UAAYnR,EAAE,UAAUouB,OAAOruB,KAAKgH,SACzChH,KAAKm6D,OAASn6D,KAAKoR,UAAUitD,WAAW,CAAC,GAAGC,eAChD,EAEAH,YAAa,WACT,IAAK,IAAIz7D,EAAI,EAAGA,EAAI1C,KAAKg+D,OAAO/7D,OAAQS,IAAK,CACzC,IAAIs2B,EAAOh5B,KAAKg+D,OAAOt7D,IACnBs2B,EAAKulC,SAAWvlC,EAAKulC,QAAQt8D,SAAW2jB,EAAQoT,EAAKulC,WACrDv+D,KAAKw+D,SAAS1pD,IAAIkkB,EAE1B,CACJ,EAEAilC,cAAe,WACXj+D,KAAKgH,QAAU/G,EAAE,UACjBD,KAAKw+D,SAAWx+D,KAAKgH,QAChBy3D,aAAa,CACVtR,MAAOntD,KAAKmtD,MAAMn1B,KAAKh4B,MACvB0+D,WAAW,IACZC,kBAEP3+D,KAAKgH,QAAQs4B,IAAI,SAAU,OAC/B,EAEA4+B,YAAa,WACT,IAAK,IAAIx7D,EAAI,EAAGA,EAAI1C,KAAKyjB,QAAQ+Z,MAAMv7B,OAAQS,IAC3C1C,KAAK4+D,WAAW5+D,KAAKyjB,QAAQ+Z,MAAM96B,GAE3C,EAEAk8D,WAAY,SAAS5lC,GACZ4nB,EAAc5nB,KACfA,EAAO,CACH32B,KAAM22B,IAGd,IAAI6lC,EAAW7lC,EAAK32B,KAAO,OACvBrC,KAAK6+D,GACL7+D,KAAK6+D,GAAU7lC,GAEfh5B,KAAKg+D,OAAOj7D,KAAK1C,EAAW,CAAC,EAAG24B,EAAM,CAClC8lC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ+Z,EAAK32B,SAG3D,EAEAi4D,OAAQ,SAAS5sD,GACb,IAAIssD,EAAcx2D,SAASxD,KAAKyjB,QAAQu2C,YAAa,IAEjDh6D,KAAKm6D,SACLn6D,KAAKm6D,OAAO6E,KAAKtxD,EAAM1K,EAAG0K,EAAMzK,GAE5B+2D,GACAh6D,KAAKm6D,OAAO9K,QAAQ/vB,IAAI,SAAU06B,GAG9C,EAEAiD,KAAM,WACEj9D,KAAKm6D,QACLn6D,KAAKm6D,OAAO7K,OAEpB,EAEA2P,SAAU,WACN,MAAO,CACHt9D,KAAM,cACN48D,QAAS,GAEjB,EAEAW,SAAU,WACNl/D,KAAKg+D,OAAOj7D,KAAK,CACb++C,KAAM,SACNqd,SAAU,WACVx9D,KAAM,SACNwpB,KAAM,OACN2zC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,UAElD,EAEAmgD,WAAY,WACRp/D,KAAKg+D,OAAOj7D,KAAK,CACb++C,KAAM,IACNqd,SAAU,WACVx9D,KAAM,SACNwpB,KAAM,SACN2zC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,YAElD,EAEAogD,wBAAyB,SAAS57C,GAC9BzjB,KAAKs/D,aAAa,UAClBt/D,KAAKu/D,aAAahB,QAAQx7D,KAAK,CAC3B++C,KAAM,cACNqd,SAAU,WACVh0C,KAAM,sBACNmF,MAAO,SACPwuC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,sBAAuBpU,KAAM4Y,EAAQ5Y,QAEvF,EAEA20D,oBAAqB,SAAS/7C,GAC1BzjB,KAAKs/D,aAAa,UAClBt/D,KAAKu/D,aAAahB,QAAQx7D,KAAK,CAC3B++C,KAAM,eACNgd,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,kBAAmBpU,KAAM4Y,EAAQ5Y,OAC3Es0D,SAAU,WACVh0C,KAAM,kBACNmF,MAAO,UAEf,EAEAmvC,gBAAiB,WACbz/D,KAAKs/D,aAAa,UAClBt/D,KAAK0/D,aAAanB,QAAQx7D,KAAK,CAC3B++C,KAAM,SACNqd,SAAU,WACVh0C,KAAM,cACNmF,MAAO,SACPwuC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,iBAElD,EAEA0gD,qBAAsB,WAClB3/D,KAAKs/D,aAAa,UAClBt/D,KAAK0/D,aAAanB,QAAQx7D,KAAK,CAC3B++C,KAAM,YACNqd,SAAU,WACVh0C,KAAM,mBACNmF,MAAO,SACPwuC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,sBAElD,EAEA2gD,SAAU,WACN5/D,KAAKs/D,aAAa,WAClBt/D,KAAK6/D,cAActB,QAAQx7D,KAAK,CAC5B++C,KAAM,OACNqd,SAAU,WACVh0C,KAAM,OACNmF,MAAO,UACPwuC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,UAElD,EAEA6gD,SAAU,WACN9/D,KAAKs/D,aAAa,WAClBt/D,KAAK6/D,cAActB,QAAQx7D,KAAK,CAC5B++C,KAAM,OACNqd,SAAU,WACVh0C,KAAM,OACNmF,MAAO,UACPwuC,WAAY9+D,KAAK++D,eAAe,CAAE9/C,OAAQ,UAElD,EAEAqgD,aAAc,SAASj9D,GACnB,IAAI09D,EAAO,IAAM19D,EAAO,QACnBrC,KAAK+/D,KACN//D,KAAK+/D,GAAQ//D,KAAKi/D,WAClBj/D,KAAKg+D,OAAOj7D,KAAK/C,KAAK+/D,IAE9B,EAEAhB,eAAgB,SAASD,GACrB,IAAIvP,EAAO,CAAC,EAUZ,OARIuP,EAAW7/C,SACXswC,EAAK1vD,MAAM0vD,KAAK,WAAauP,EAAW7/C,QAGxC6/C,EAAWj0D,OACX0kD,EAAK1vD,MAAM0vD,KAAK,SAAWuP,EAAWj0D,MAGnC0kD,CACX,EAEAyQ,eAAgB,SAASh5D,GACrB,IAAIuoD,EAAO,CAAC,EAERtwC,EAASjY,EAAQuoD,KAAK1vD,MAAM0vD,KAAK,WACjCtwC,IACAswC,EAAKtwC,OAASA,GAGlB,IAAIpU,EAAO7D,EAAQuoD,KAAK1vD,MAAM0vD,KAAK,SAKnC,OAJI1kD,IACA0kD,EAAK1kD,KAAOA,GAGT0kD,CACX,EAEApC,MAAO,SAAS56C,GACZ,IAAIusD,EAAa9+D,KAAKggE,eAAe//D,EAAEsS,EAAEpK,SACrC8W,EAAS6/C,EAAW7/C,OAEpBA,GAAUjf,KAAKif,IACfjf,KAAKif,GAAQ6/C,GAGjB9+D,KAAKmJ,QAAQ,QAASnJ,KAAKigE,UAAUhhD,EAAQ1M,EAAEpK,QACnD,EAEA83D,UAAW,SAAShhD,EAAQ9W,GAKxB,IAJA,IAEmCnB,EAF/BklB,EAAWlsB,KAAKkgE,mBAChBj+D,EAASiqB,EAASjqB,OAClBm0B,EAAS,GAAIqF,EAAc,GAEtByE,EAAM,EAAGA,EAAMj+B,EAAQi+B,KAC5Bl5B,EAAUklB,EAASgU,cACIpD,GACnB1G,EAAOrzB,KAAKiE,GAEZy0B,EAAY14B,KAAKiE,GAIzB,MAAO,CACHovB,OAAQA,EACRqF,YAAaA,EACbxc,OAAQA,EACR9W,OAAQA,EAEhB,EAEAg4D,OAAU,WACN,IACI/hC,EADUp+B,KAAKG,QACIk+B,eAAer+B,KAAKkgE,oBACvC9hC,EAASn8B,SACTjC,KAAKG,QAAQ0F,OAAOu4B,GAAU,GAC9Bp+B,KAAKG,QAAQm+B,eAErB,EAEAwvB,KAAM,WACF,IAAIsS,EAAkBpgE,KAAKkgE,mBACI,IAA3BE,EAAgBn+D,QAChBjC,KAAKG,QAAQ2tD,KAAKsS,EAAgB,GAE1C,EAEAC,gBAAiB,SAAS58C,GACtB,IAAI9U,EAAQ7M,WAAW2hB,EAAQ5Y,MAAQ,IACvC7K,KAAK8kD,QAAQn2C,EACjB,EAEA2xD,oBAAqB,SAAS78C,GAC1B,IAAI9U,EAAQ7M,WAAW2hB,EAAQ5Y,MAAQ,IACvC7K,KAAK8kD,SAASn2C,EAClB,EAEAm2C,QAAS,SAASn2C,GACd,IAAI2nB,EAAUt2B,KAAKG,QAAQo7B,iBAC3BjF,EAAQ3nB,MAAM2nB,EAAQ3nB,QAAUA,GAChC2nB,EAAQrnB,QACZ,EAEAixD,iBAAkB,WACd,OAAOlgE,KAAKG,QAAQuyB,QACxB,EAEA+6B,YAAa,WACTztD,KAAKG,QAAQstD,aACjB,EAEAM,iBAAkB,WACd/tD,KAAKG,QAAQ4tD,kBACjB,EAEAp5B,KAAM,WACF30B,KAAKG,QAAQw0B,MACjB,EAEAE,KAAM,WACF70B,KAAKG,QAAQ00B,MACjB,EAEA9C,QAAS,WACL/xB,KAAKG,QAAU,KACfH,KAAKgH,QAAU,KACfhH,KAAKyjB,QAAU,KAEXzjB,KAAKw+D,UACLx+D,KAAKw+D,SAASzsC,UAGd/xB,KAAKm6D,QACLn6D,KAAKm6D,OAAOpoC,SAEpB,IAGAwuC,GAAS1gE,MAAMoW,WAAWjO,OAAO,CACjCC,KAAM,SAASjB,EAASyc,GACpB5jB,MAAMoW,WAAWE,GAAGlO,KAAK5G,KAAKrB,MAE9BA,KAAKyjB,QAAUzb,GAAO,EAAM,CAAC,EAAGhI,KAAKyjB,QAASA,GAC9CzjB,KAAKgH,QAAUA,EACfhH,KAAKqkD,MAAQrkD,KAAKyjB,QAAQ4gC,MAC1BrkD,KAAKymB,OAASzmB,KAAKwgE,aACnBxgE,KAAKygE,iBACLzgE,KAAK0gE,gBACT,EAEAj9C,QAAS,CACL2qC,QAAS,CAAC,GAGdqS,eAAgB,WACZzgE,KAAKqvD,QAAUrvD,KAAKgH,OACxB,EAEA05D,eAAgB,WACZ,IAAIj9C,EAAUzjB,KAAKyjB,QAEnBzjB,KAAKolC,SAAW,IAAIvlC,MAAM8K,GAAGg2D,SAAS3gE,KAAKqvD,QAAS,CAChD5oC,OAAQzmB,KAAKymB,OACbte,OAAQsb,EAAQtb,OAChBy4D,gBAAgB,EAChBvc,MAAOrkD,KAAKqkD,OAEpB,EAEAI,YAAa,SAAS/9B,GAClB,OAAO1mB,KAAKqkD,MAAMjf,UAAYplC,KAAKqkD,MAAMjf,SAAS1e,EACtD,EAEA85C,WAAY,WACR,IAAI/5C,EAAS,GACTo6C,EAAc7gE,KAAKqkD,MAAM59B,OAE7B,IAAK,IAAIC,KAASm6C,EAAa,CAC3B,IAAIl6D,EAAS,CAAC,EACd,GAAI3G,KAAKykD,YAAY/9B,GAAQ,CACzB,IAAIgnC,EAAS1tD,KAAKyjB,QAAQ2qC,QAAQ1nC,GAC9BgnC,IACA/mD,EAAO+mD,OAASA,GAEpB/mD,EAAO+f,MAAQA,EACfD,EAAO1jB,KAAK4D,EAChB,CACJ,CAEA,OAAO8f,CACX,EAEAxhB,IAAK,WACD,OAAOjF,KAAKolC,SAASngC,KACzB,EAEA8sB,QAAS,WACL/xB,KAAKolC,SAASrT,UACd/xB,KAAKolC,SAASp+B,QAAQN,KAAK,IAAM7G,MAAM0vD,KAAK,iBAAmB,KAAK/+C,QACpExQ,KAAKqkD,MAAQrkD,KAAKqvD,QAAUrvD,KAAKgH,QAAUhH,KAAK8gE,QAAU9gE,KAAKolC,SAAW,IAC9E,IAGAwpB,GAAc2R,GAAOv4D,OAAO,CAC5BC,KAAM,SAASjB,EAASyc,GACpB88C,GAAOpqD,GAAGlO,KAAK5G,KAAKrB,KAAMgH,EAASyc,GACnCzjB,KAAKg4B,KAAKh4B,KAAKi4B,OAAQj4B,KAAKyjB,SAE5BzjB,KAAKg/D,MACT,EAEA/mC,OAAQ,CAAE,SAAU,UAEpBxU,QAAS,CACLvjB,OAAQ,CACJmtD,OAAO,EACPqR,WAAW,EACX7R,WAAW,EACXn4B,MAAO,OACP1L,SAAS,IAIjBy3C,eAAgB,WACZ,IAAItoD,EAAOnY,KACXA,KAAKqvD,QAAUpvD,EAAE,oCACZsvD,KAAK1vD,MAAM0vD,KAAK,OAAQvvD,KAAKqkD,MAAMgE,KAExC,IAAI0Y,EAAc,GAEd/gE,KAAKyjB,QAAQ+/B,UACbud,GAAe/gE,KAAKghE,kBACpBhhE,KAAKymB,OAAS,IAEds6C,GAAe/gE,KAAKihE,gBAGxBF,GAAe/gE,KAAKkhE,iBAEpBlhE,KAAKqvD,QAAQhhC,OACTpuB,EAAE,wCAAwCouB,OAAO0yC,IAErD/gE,KAAKE,OAAS,IAAIL,MAAM8K,GAAGw2D,OAAOnhE,KAAKqvD,QAAQI,SAASzvD,KAAKgH,SAAUhH,KAAKyjB,QAAQvjB,QACpFF,KAAKE,OAAO83B,KAAK,SAAS,SAASzlB,GAE3BA,EAAE6uD,gBACF7uD,EAAE8uD,OAAOr6D,QAAQmC,QAAQ,SACzBgP,EAAKmpD,aAAa/uD,GAE1B,IAEAvS,KAAKuhE,qBACT,EAEAP,gBAAiB,WACb,IAAIxd,EAAWxjD,KAAKyjB,QAAQ+/B,SAQ5B,MANwB,iBAAbA,IACPA,EAAW3jD,MAAM2hE,SAAShe,IAG9BA,EAAW3jD,MAAM2jD,SAASA,EAAf3jD,CAAyBG,KAAKqkD,MAG7C,EAEA4c,cAAe,WAEX,IADA,IAAIQ,EAAO,GACF/+D,EAAI,EAAGA,EAAI1C,KAAKymB,OAAOxkB,OAAQS,IAAK,CACzC,IAAIgkB,EAAQ1mB,KAAKymB,OAAO/jB,GAExB++D,GAAQ,yCAA2C/6C,EAAMA,MAAQ,MAAQA,EAAMA,OAAS,IAAM,iBAE1F1mB,KAAKykD,YAAY/9B,EAAMA,SACvB+6C,GAAQ,QAAU5hE,MAAM0vD,KAAK,iBAAmB,KAAO7oC,EAAMA,MAC7D,gCAER,CAEA,OAAO+6C,CACX,EAEAP,eAAgB,WACZ,IAAIO,EAAO,+BAIX,OAHAA,GAAQzhE,KAAK0hE,cAAc,UAC3BD,GAAQzhE,KAAK0hE,cAAc,UAC3BD,GAAQ,QAEZ,EAEAC,cAAe,SAASr/D,GACpB,OAAOxC,MAAM2jD,SAAS5B,GAAf/hD,CAAgCuiD,GAAe//C,GAC1D,EAEAk/D,oBAAqB,WACjBvhE,KAAK2hE,oBAAsB3hE,KAAKshE,aAAatpC,KAAKh4B,MAClDA,KAAKE,OAAO8G,QAAQgpD,GAAG/O,EAAQH,EAAI,0BAA2B9gD,KAAK2hE,qBAEnE3hE,KAAK4hE,oBAAsB5hE,KAAK6hE,aAAa7pC,KAAKh4B,MAClDA,KAAKE,OAAO8G,QAAQgpD,GAAG/O,EAAQH,EAAI,0BAA2B9gD,KAAK4hE,oBACvE,EAEAC,aAAc,SAAStvD,GACnBA,EAAE0/C,iBACFjyD,KAAKmJ,QAAQ,SACjB,EAEAm4D,aAAc,SAAS/uD,GACnBA,EAAE0/C,iBACFjyD,KAAKmJ,QAAQ,SACjB,EAEA61D,KAAM,WACFh/D,KAAKE,OAAO8E,SAASg6D,MACzB,EAEA1P,MAAO,WACHtvD,KAAKE,OAAO83B,KAAK,aAAch4B,KAAK+xB,QAAQiG,KAAKh4B,OAAOsvD,OAC5D,EAEAv9B,QAAS,WACL/xB,KAAKE,OAAOovD,QAAQv9B,UACpB/xB,KAAKE,OAAO8G,QAAQytD,IAAIxT,EAAQH,EAAI,qBAAsB9gD,KAAK2hE,qBAC/D3hE,KAAKE,OAAO8G,QAAQytD,IAAIxT,EAAQH,EAAI,qBAAsB9gD,KAAK4hE,qBAC/D5hE,KAAK2hE,oBAAsB,KAC3B3hE,KAAK8hE,wBAA0B,KAC/B9hE,KAAKE,OAAS,KACdqgE,GAAOpqD,GAAG4b,QAAQ1wB,KAAKrB,KAC3B,IAGJ,SAASyuD,GAAmBr9C,EAAWqS,GACnC,IAAI4gC,EAAQrkD,KAAK4sD,WAAWmV,OAAO1d,MACnC,GAAIA,EAAO,CACP,IAAI2d,EAAY3d,EAAMluC,GAAGsQ,OAAO0E,KAAO,OAASk5B,EAAM4d,QACtDhiE,EAAE,gBAAkBwjB,EAAQiD,MAAQ,QAC/B+oC,SAASr+C,GAAW8wD,kBAAkB,CACnCC,eAAgB9d,EAAM4d,QACtBG,cAAeJ,EACfpV,WAAY5sD,KAAK4sD,WAAW/0C,OAAO+rC,SACnCye,YAAa,IACbC,gBAAgB,GAE5B,CACJ,CAEA,SAASC,GAAazf,GAClB9iD,KAAK8iD,SAAWA,EAChB9iD,KAAKwiE,UAAY,EACrB,CAwBA,SAAS/H,KACLz6D,KAAK23B,MAAQ,CAAC,CAClB,CAxBA4qC,GAAapsD,GAAKosD,GAAahhE,UAAY,CACvCqoD,WAAY,SAAS6Y,GACjB,IAAIC,EAAWziE,EAAE0iE,WAKjB,OAJA3iE,KAAKwiE,UAAUz/D,KAAK,CAChB0/D,SAAUA,EACVG,SAAUF,IAEPA,CACX,EAEAnG,SAAU,WAGN,IAFA,IACIr4D,EADAs+D,EAAYxiE,KAAKwiE,UAEZtiC,EAAM,EAAGA,EAAMsiC,EAAUvgE,OAAQi+B,KACtCh8B,EAAOlE,KAAKwiE,UAAUtiC,IACjBuiC,SAASziE,KAAK8iD,UACnB5+C,EAAK0+D,SAASC,UAElB7iE,KAAKwiE,UAAY,EACrB,GAOJ/H,GAAwBtkD,GAAKskD,GAAwBl5D,UAAY,CAC7DuT,IAAK,SAAS6iB,GACV,IAAK,IAAIuI,EAAM,EAAGA,EAAMvI,EAAM11B,OAAQi+B,IAClClgC,KAAK23B,MAAMA,EAAMuI,GAAKmoB,KAAO,IAAIka,GAAa5qC,EAAMuI,GAE5D,EAEA36B,QAAS,SAASk9D,GACd,IAAK,IAAIpa,KAAOroD,KAAK23B,MACjB8qC,EAASziE,KAAK23B,MAAM0wB,GAE5B,EAEAD,SAAU,SAASC,GACf,OAAOroD,KAAK23B,MAAM0wB,EACtB,EAEAxiD,OAAQ,SAAS3B,UACNlE,KAAK23B,MAAMzzB,EAAKmkD,IAC3B,GAGJ,IAAIya,GAAW/6D,EAAMC,OAAO,CACxBC,KAAM,WACFjI,KAAKo2B,OAAS,EAClB,EAEA2sC,KAAM,SAASzrD,EAAOM,GAClB5X,KAAKo2B,OAAOrzB,KAAK,CACb6U,OAAQA,EACRN,MAAOA,IAEXA,EAAM0rD,UAAYhjE,IACtB,EAEA+G,OAAQ,SAASuQ,EAAOM,GACpB5X,KAAK+iE,KAAKzrD,EAAOM,EACrB,EAEA/R,OAAQ,SAASyR,GAIb,IAHA,IAAI8e,EAASp2B,KAAKo2B,OACdn0B,EAASm0B,EAAOn0B,OAEXi+B,EAAM,EAAGA,EAAMj+B,EAAQi+B,IAC5B,GAAI9J,EAAO8J,GAAK5oB,QAAUA,EAAO,CAC7B8e,EAAOnwB,OAAOi6B,EAAK,GACnB,KACJ,CAER,EAEAqrB,YAAa,SAAS98C,EAAM28C,GAIxB,IAHA,IAAIh1B,EAASp2B,KAAKo2B,OACdn0B,EAASm0B,EAAOn0B,OAEXS,EAAI,EAAGA,EAAIT,EAAQS,IACxB,GAAI1C,KAAKijE,UAAU7sC,EAAO1zB,GAAG4U,MAAO7I,KAAUrO,EAAQ+F,QAAQiwB,EAAO1zB,GAAG4U,MAAO8zC,GAC3E,OAAO,CAGnB,EAEA6X,UAAW,SAAS3rD,EAAO7I,GACvB,IAAIE,EAAQ2I,EAAMrI,SAASN,MACvBiJ,EAASN,EAAMM,SAOnB,OALKjJ,EAGK+B,EAAUI,MAAMrC,EAAMmJ,GAASjJ,GAF/BiJ,EAAOhI,SAASnB,EAK9B,IAGAy0D,GAAWJ,GAAS96D,OAAO,CAC3BC,KAAM,SAASwG,GACXq0D,GAAS3sD,GAAGlO,KAAK5G,KAAKrB,MACtBA,KAAKuY,SAAW,GAChBvY,KAAKyO,KAAOA,CAChB,EAEA00D,SAAU,SAAS10D,GACf,IAAI20D,EAAWpjE,KAAKyO,KAChB40D,EAAkBD,EAAS70D,cAC3BA,EAAcE,EAAKF,cAGvB,OAFe60D,EAASpgE,GAAKyL,EAAKzL,GAAKogE,EAASngE,GAAKwL,EAAKxL,GAAKsL,EAAYvL,GAAKqgE,EAAgBrgE,GAC5FuL,EAAYtL,GAAKogE,EAAgBpgE,CAEzC,EAEAqgE,eAAgB,SAAS70D,GACrB,OAAOzO,KAAKyO,KAAKmB,SAASnB,EAC9B,EAEA1H,OAAQ,SAASuQ,EAAOM,GACpB,IAAI2rD,GAAW,EACXhrD,EAAWvY,KAAKuY,SAChBtW,EAASsW,EAAStW,OACtB,GAAIjC,KAAKmjE,SAASvrD,GAAS,CACvB,IAAK3V,GAAUjC,KAAKo2B,OAAOn0B,OAAS,EAChCjC,KAAK+iE,KAAKzrD,EAAOM,OACd,CACE3V,GACDjC,KAAKwjE,gBAGT,IAAK,IAAItjC,EAAM,EAAGA,EAAM3nB,EAAStW,OAAQi+B,IACrC,GAAI3nB,EAAS2nB,GAAKn5B,OAAOuQ,EAAOM,GAAS,CACrC2rD,GAAW,EACX,KACJ,CAGCA,GACDvjE,KAAK+iE,KAAKzrD,EAAOM,EAEzB,CACA2rD,GAAW,CACf,CAEA,OAAOA,CACX,EAEAC,cAAe,WACX,IAMIC,EAAUC,EANVj1D,EAAOzO,KAAKyO,KACZ8J,EAAWvY,KAAKuY,SAChB6d,EAASp2B,KAAKo2B,OACdpxB,EAASyJ,EAAKzJ,SACd2+D,EAAYl1D,EAAKvB,MAAQ,EACzB02D,EAAan1D,EAAKxB,OAAS,EAS/B,IANAsL,EAASxV,KACL,IAAImgE,GAAS,IAAIr2D,EAAK4B,EAAKzL,EAAGyL,EAAKxL,EAAG0gE,EAAWC,IACjD,IAAIV,GAAS,IAAIr2D,EAAK7H,EAAOhC,EAAGyL,EAAKxL,EAAG0gE,EAAWC,IACnD,IAAIV,GAAS,IAAIr2D,EAAK4B,EAAKzL,EAAGgC,EAAO/B,EAAG0gE,EAAWC,IACnD,IAAIV,GAAS,IAAIr2D,EAAK7H,EAAOhC,EAAGgC,EAAO/B,EAAG0gE,EAAWC,KAEpDF,EAAWttC,EAAOn0B,OAAS,EAAGyhE,GAAY,EAAGA,IAC9C,IAAKD,EAAW,EAAGA,EAAWlrD,EAAStW,OAAQwhE,IAC3C,GAAIlrD,EAASkrD,GAAU18D,OAAOqvB,EAAOstC,GAAUpsD,MAAO8e,EAAOstC,GAAU9rD,QAAS,CAC5Ewe,EAAOnwB,OAAOy9D,EAAU,GACxB,KACJ,CAGZ,EAEAnY,YAAa,SAAS98C,EAAM28C,GACxB,IAAIlrB,EACA3nB,EAAWvY,KAAKuY,SAChBtW,EAASsW,EAAStW,OAClBw9B,GAAM,EAEV,GAAIz/B,KAAKsjE,eAAe70D,GACpB,GAAIq0D,GAAS3sD,GAAGo1C,YAAYlqD,KAAKrB,KAAMyO,EAAM28C,GACzC3rB,GAAM,OAEL,IAAKS,EAAM,EAAGA,EAAMj+B,EAAQi+B,IACzB,GAAI3nB,EAAS2nB,GAAKqrB,YAAY98C,EAAM28C,GAAU,CAC3C3rB,GAAM,EACN,KACH,CAKZ,OAAOA,CACX,IAGA0sB,GAAiBpkD,EAAMC,OAAO,CAC9B67D,UAAW,IAEX57D,KAAM,SAAS9H,GACX,IAAI2jE,EAAsB9jE,KAAK+jE,cAAc/rC,KAAKh4B,MAClDG,EAAQ63B,KAAKtE,EAAkBowC,GAC/B3jE,EAAQ63B,KAAKqpB,GAAYyiB,GACzB9jE,KAAKgkE,WACT,EAEAA,UAAW,WACPhkE,KAAKikE,QAAU,CAAC,EAChBjkE,KAAKqb,KAAO,IAAIynD,EACpB,EAEA37D,MAAO,WACHnH,KAAKgkE,WACT,EAEAD,cAAe,SAASxxD,GAChBA,EAAErO,KAAK8+D,WACPzwD,EAAErO,KAAK8+D,UAAUn9D,OAAO0M,EAAErO,MAE9BlE,KAAK+G,OAAOwL,EAAErO,KAClB,EAEA6C,OAAQ,SAASuQ,GACb,IAAIM,EAASN,EAAMM,OAAO+b,IACtBuwC,EAAWlkE,KAAK6jE,UAChBM,EAAUnkE,KAAKokE,WAAWxsD,GAC1B5U,EAAImhE,EAAQ,GAAG,GACflhE,EAAIkhE,EAAQ,GAAG,GAEfnkE,KAAKqkE,OAAOF,GACZnkE,KAAKqb,KAAKtU,OAAOuQ,EAAOM,IAEnB5X,KAAKikE,QAAQjhE,KACdhD,KAAKikE,QAAQjhE,GAAK,CAAC,GAGlBhD,KAAKikE,QAAQjhE,GAAGC,KACjBjD,KAAKikE,QAAQjhE,GAAGC,GAAK,IAAIigE,GACrB,IAAIr2D,EAAK7J,EAAIkhE,EAAUjhE,EAAIihE,EAAUA,EAAUA,KAIvDlkE,KAAKikE,QAAQjhE,GAAGC,GAAG8D,OAAOuQ,EAAOM,GAEzC,EAEA/R,OAAQ,SAASyR,GACTA,EAAM0rD,WACN1rD,EAAM0rD,UAAUn9D,OAAOyR,EAE/B,EAEA+sD,OAAQ,SAASF,GACb,OAAOA,EAAQ,GAAGliE,OAAS,GAAKkiE,EAAQ,GAAGliE,OAAS,CACxD,EAEAmiE,WAAY,SAAS31D,GAMjB,IALA,IAAIy1D,EAAWlkE,KAAK6jE,UAChBt1D,EAAcE,EAAKF,cACnB+1D,EAAUzjB,EAAKj9C,MAAM2K,EAAYvL,EAAIkhE,GACrCK,EAAU1jB,EAAKj9C,MAAM2K,EAAYtL,EAAIihE,GACrCC,EAAU,CAAC,GAAG,IACTnhE,EAAI69C,EAAKj9C,MAAM6K,EAAKzL,EAAIkhE,GAAWlhE,GAAKshE,EAASthE,IACtDmhE,EAAQ,GAAGphE,KAAKC,GAEpB,IAAK,IAAIC,EAAI49C,EAAKj9C,MAAM6K,EAAKxL,EAAIihE,GAAWjhE,GAAKshE,EAASthE,IACtDkhE,EAAQ,GAAGphE,KAAKE,GAEpB,OAAOkhE,CACX,EAEA5Y,YAAa,SAAS98C,EAAM28C,GACxB,IACIoZ,EAAMC,EAAMzhE,EAAGC,EACfoY,EAFA8oD,EAAUnkE,KAAKokE,WAAW31D,GAI9B,GAAIzO,KAAKqb,KAAKkwC,YAAY98C,EAAM28C,GAC5B,OAAO,EAGX,IAAKoZ,EAAO,EAAGA,EAAOL,EAAQ,GAAGliE,OAAQuiE,IAErC,IADAxhE,EAAImhE,EAAQ,GAAGK,GACVC,EAAO,EAAGA,EAAON,EAAQ,GAAGliE,OAAQwiE,IAGrC,GAFAxhE,EAAIkhE,EAAQ,GAAGM,IACfppD,GAAQrb,KAAKikE,QAAQjhE,IAAM,CAAC,GAAGC,KACnBoY,EAAKkwC,YAAY98C,EAAM28C,GAC/B,OAAO,EAKnB,OAAO,CACX,IAGJ,SAAStF,GAAchD,GACnB,IAAIn8C,EAASm8C,EAKb,OAJIA,aAAoBjjD,MAAMgY,KAAK6sD,SAC/B/9D,EAASm8C,EAASc,UACXd,EAASmf,SAAWnf,EAAS6hB,YAEjCh+D,CACX,CAEA,SAAS8uD,GAAqBvpC,GAC1B,IAEIllB,EAASk5B,EAFTzE,EAAc,GACdrF,EAAS,GAEb,IAAK8J,EAAM,EAAGA,EAAMhU,EAASjqB,OAAQi+B,KACjCl5B,EAAUklB,EAASgU,cACIpD,GACnB1G,EAAOrzB,KAAKiE,GAEZy0B,EAAY14B,KAAKiE,GAGzB,MAAO,CACHovB,OAAQA,EACRqF,YAAaA,EAErB,CAEA,SAASmyB,GAAYhB,EAAYvI,GAC7B,OAAIuI,EAAWmV,OAAO1d,MACX,IAAIuI,EAAWmV,OAAO1d,MAAMA,GAGhC,IAAIxkD,MAAMgY,KAAK+sD,iBAAiBvgB,EAC3C,CAEA,SAASiE,GAAW5hC,EAAO29B,GACnBz+B,EAAQy+B,EAAM39B,KACd29B,EAAMnvC,IAAIwR,EAAO,KAEzB,CAEA,SAASipC,GAAmBkV,EAAal+C,EAAgBF,GAErD,IADA,IAAIC,EACKwZ,EAAM,EAAGA,EAAMzZ,EAAOxkB,OAAQi+B,IACnCxZ,EAAQD,EAAOyZ,GACXvZ,IAAmBf,EAAQe,EAAeD,MAC1CC,EAAeD,GAASm+C,EAAYn+C,GAGhD,CASA,SAASurC,GAAe1/C,GACpBA,EAAE0/C,gBACN,CAEA7xD,EAAQuK,GAAGm6D,OAAOnZ,IAElBtrD,EAAWF,EAAS,CAChB28B,MAAOA,GACP+C,WAAYA,GACZgkB,UAAWA,GACXqJ,eAAgBA,GAChBgW,SAAUA,GACVJ,SAAUA,GACV3W,eAAgBA,GAChByC,YAAaA,IAExB,CAzoKD,CAyoKG1uD,OAAOL,MAAMqL,QAoBZ,IAAI65D,EAAUllE,MAElBP,EAAQ0lE,SApBS,CACTlvD,GAAI,kBACJzT,KAAM,UACN4iE,SAAU,UACVC,YAAa,6BACbC,QAAS,CAAE,OAAQ,aAAc,kBAAmB,cAAe,UAAW,eAAgB,iBAAkB,WAChHC,SAAU,CAAC,CACPtvD,GAAI,6BACJzT,KAAM,aACN6iE,YAAa,wBACbC,QAAS,CAAE,QACb,CACErvD,GAAI,0BACJzT,KAAM,UACN6iE,YAAa,4BACbC,QAAS,CAAE,WAAY,SAAU,mBAM7C7lE,EAAQ+lE,QAAUN,EAElB9jE,OAAOqkE,eAAehmE,EAAS,aAAc,CAAEkD,OAAO,GAEzD","ignoreList":[],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data.js'), require('kendo.draganddrop.js'), require('kendo.userevents.js'), require('kendo.mobile.scroller.js'), require('kendo.core.js'), require('kendo.dataviz.core.js'), require('kendo.drawing.js'), require('kendo.toolbar.js'), require('kendo.editable.js'), require('kendo.window.js'), require('kendo.dropdownlist.js'), require('kendo.dataviz.themes.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.data', 'kendo.draganddrop', 'kendo.userevents', 'kendo.mobile.scroller', 'kendo.core', 'kendo.dataviz.core', 'kendo.drawing', 'kendo.toolbar', 'kendo.editable', 'kendo.window', 'kendo.dropdownlist', 'kendo.dataviz.themes', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.DatavizDiagram = {})));\n})(this, (function (exports) {\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram = {},\n            deepExtend = kendo.deepExtend,\n            isArray = Array.isArray,\n            EPSILON = 1e-06;\n\n        /*-------------------Diverse utilities----------------------------*/\n        var Utils = {\n        };\n\n        deepExtend(Utils, {\n            isNearZero: function(num) {\n                return Math.abs(num) < EPSILON;\n            },\n            isDefined: function(obj) {\n                return typeof obj !== 'undefined';\n            },\n\n            isUndefined: function(obj) {\n                return (typeof obj === 'undefined') || obj === null;\n            },\n            /**\n             * Returns whether the given object is an object or a value.\n             */\n            isObject: function(obj) {\n                return obj === Object(obj);\n            },\n            /**\n             * Returns whether the object has a property with the given name.\n             */\n            has: function(obj, key) {\n                return Object.hasOwnProperty.call(obj, key);\n            },\n            /**\n             * Returns whether the given object is a string.\n             */\n            isString: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object String]';\n            },\n            isBoolean: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object Boolean]';\n            },\n            isType: function(obj, type) {\n                return Object.prototype.toString.call(obj) == '[object ' + type + ']';\n            },\n            /**\n             * Returns whether the given object is a number.\n             */\n            isNumber: function(obj) {\n                return !isNaN(parseFloat(obj)) && isFinite(obj);\n            },\n            /**\n             * Return whether the given object (array or dictionary).\n             */\n            isEmpty: function(obj) {\n                if (obj === null) {\n                    return true;\n                }\n                if (isArray(obj) || Utils.isString(obj)) {\n                    return obj.length === 0;\n                }\n                for (var key in obj) {\n                    if (Utils.has(obj, key)) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n            simpleExtend: function(destination, source) {\n                if (!Utils.isObject(source)) {\n                    return;\n                }\n\n                for (var name in source) {\n                    destination[name] = source[name];\n                }\n            },\n            /**\n             * Returns an array of the specified size and with each entry set to the given value.\n             * @param size\n             * @param value\n             * @returns {Array}\n             */\n            initArray: function createIdArray(size, value) {\n                var array = [];\n                for (var i = 0; i < size; ++i) {\n                    array[i] = value;\n                }\n                return array;\n            },\n            serializePoints: function(points) {\n                var res = [];\n                for (var i = 0; i < points.length; i++) {\n                    var p = points[i];\n                    res.push(p.x + \";\" + p.y);\n                }\n                return res.join(\";\");\n            },\n            deserializePoints: function(s) {\n                var v = s.split(\";\"), points = [];\n                if (v.length % 2 !== 0) {\n                    throw \"Not an array of points.\";\n                }\n                for (var i = 0; i < v.length; i += 2) {\n                    points.push(new diagram.Point(\n                        parseInt(v[i], 10),\n                        parseInt(v[i + 1], 10)\n                    ));\n                }\n                return points;\n            },\n            /**\n             * Returns an integer within the given bounds.\n             * @param lower The inclusive lower bound.\n             * @param upper The exclusive upper bound.\n             * @returns {number}\n             */\n            randomInteger: function(lower, upper) {\n                return parseInt(Math.floor(Math.random() * upper) + lower, 10);\n            } ,\n            /*\n             Depth-first traversal of the given node.\n             */\n            DFT: function(el, func) {\n                func(el);\n                if (el.childNodes) {\n                    for (var i = 0; i < el.childNodes.length; i++) {\n                        var item = el.childNodes[i];\n                        this.DFT(item, func);\n                    }\n                }\n            },\n            /*\n             Returns the angle in degrees for the given matrix\n             */\n            getMatrixAngle: function(m) {\n                if (m === null || m.d === 0) {\n                    return 0;\n                }\n                return Math.atan2(m.b, m.d) * 180 / Math.PI;\n            },\n\n            /*\n             Returns the scaling factors for the given matrix.\n             */\n            getMatrixScaling: function(m) {\n                var sX = Math.sqrt(m.a * m.a + m.c * m.c);\n                var sY = Math.sqrt(m.b * m.b + m.d * m.d);\n                return [sX, sY];\n            }\n\n        });\n\n        /**\n         * The Range defines an array of equally separated numbers.\n         * @param start The start-value of the Range.\n         * @param stop The end-value of the Range.\n         * @param step The separation between the values (default:1).\n         * @returns {Array}\n         */\n        function Range(start, stop, step) {\n            if (typeof start == 'undefined' || typeof stop == 'undefined') {\n                return [];\n            }\n            if (step && Utils.sign(stop - start) != Utils.sign(step)) {\n                throw \"The sign of the increment should allow to reach the stop-value.\";\n            }\n            step = step || 1;\n            start = start || 0;\n            stop = stop || start;\n            if ((stop - start) / step === Infinity) {\n                throw \"Infinite range defined.\";\n            }\n            var range = [], i = -1, j;\n\n            function rangeIntegerScale(x) {\n                var k = 1;\n                while (x * k % 1) {\n                    k *= 10;\n                }\n                return k;\n            }\n\n            var k = rangeIntegerScale(Math.abs(step));\n            start *= k;\n            stop *= k;\n            step *= k;\n            if (start > stop && step > 0) {\n                step = -step;\n            }\n            if (step < 0) {\n                while ((j = start + step * ++i) >= stop) {\n                    range.push(j / k);\n                }\n            }\n            else {\n                while ((j = start + step * ++i) <= stop) {\n                    range.push(j / k);\n                }\n            }\n            return range;\n        }\n\n        /*-------------------Diverse math functions----------------------------*/\n\n        function findRadian(start, end) {\n            if (start == end) {\n                return 0;\n            }\n            var sngXComp = end.x - start.x,\n                sngYComp = start.y - end.y,\n                atan = Math.atan(sngXComp / sngYComp);\n            if (sngYComp >= 0) {\n                return sngXComp < 0 ? atan + (2 * Math.PI) : atan;\n            }\n            return atan + Math.PI;\n        }\n\n        Utils.sign = function(number) {\n            return number ? number < 0 ? -1 : 1 : 0;\n        };\n\n        Utils.findAngle = function(center, end) {\n            return findRadian(center, end) * 180 / Math.PI;\n        };\n\n        /*-------------------Array Helpers ----------------------------*/\n\n        Utils.forEach = function(arr, iterator, thisRef) {\n            for (var i = 0; i < arr.length; i++) {\n                iterator.call(thisRef, arr[i], i, arr);\n            }\n        };\n\n        Utils.any = function(arr, predicate) {\n            for (var i = 0; i < arr.length; ++i) {\n                if (predicate(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n\n        Utils.remove = function(arr, what) {\n            var ax;\n            while ((ax = Utils.indexOf(arr, what)) !== -1) {\n                arr.splice(ax, 1);\n            }\n            return arr;\n        };\n\n        Utils.contains = function(arr, obj) {\n            return Utils.indexOf(arr, obj) !== -1;\n        };\n\n        Utils.indexOf = function(arr, what) {\n            return $.inArray(what, arr);\n        };\n\n        Utils.fold = function(list, iterator, acc, context) {\n            var initial = arguments.length > 2;\n\n            for (var i = 0; i < list.length; i++) {\n                var value = list[i];\n                if (!initial) {\n                    acc = value;\n                    initial = true;\n                }\n                else {\n                    acc = iterator.call(context, acc, value, i, list);\n                }\n            }\n\n            if (!initial) {\n                throw 'Reduce of empty array with no initial value';\n            }\n\n            return acc;\n        };\n\n        Utils.find = function(arr, iterator, context) {\n            var result;\n            Utils.any(arr, function(value, index, list) {\n                if (iterator.call(context, value, index, list)) {\n                    result = value;\n                    return true;\n                }\n                return false;\n            });\n            return result;\n        };\n\n        Utils.first = function(arr, constraint, context) {\n            if (arr.length === 0) {\n                return null;\n            }\n            if (Utils.isUndefined(constraint)) {\n                return arr[0];\n            }\n\n            return Utils.find(arr, constraint, context);\n        };\n\n        /**\n         * Inserts the given element at the specified position and returns the result.\n         */\n        Utils.insert = function(arr, element, position) {\n            arr.splice(position, 0, element);\n            return arr;\n        };\n\n        Utils.all = function(arr, iterator, context) {\n            var result = true;\n            var value;\n\n            for (var i = 0; i < arr.length; i++) {\n                value = arr[i];\n                result = result && iterator.call(context, value, i, arr);\n\n                if (!result) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n\n        Utils.clear = function(arr) {\n            arr.splice(0, arr.length);\n        };\n\n        /**\n         * Sort the arrays on the basis of the first one (considered as keys and the other array as values).\n         * @param a\n         * @param b\n         * @param sortfunc (optiona) sorting function for the values in the first array\n         */\n        Utils.bisort = function(a, b, sortfunc) {\n            if (Utils.isUndefined(a)) {\n                throw \"First array is not specified.\";\n            }\n            if (Utils.isUndefined(b)) {\n                throw \"Second array is not specified.\";\n            }\n            if (a.length != b.length) {\n                throw \"The two arrays should have equal length\";\n            }\n\n            var all = [], i;\n\n            for (i = 0; i < a.length; i++) {\n                all.push({ 'x': a[i], 'y': b[i] });\n            }\n            if (Utils.isUndefined(sortfunc)) {\n                all.sort(function(m, n) {\n                    return m.x - n.x;\n                });\n            }\n            else {\n                all.sort(function(m, n) {\n                    return sortfunc(m.x, n.x);\n                });\n            }\n\n            Utils.clear(a);\n            Utils.clear(b);\n\n            for (i = 0; i < all.length; i++) {\n                a.push(all[i].x);\n                b.push(all[i].y);\n            }\n        };\n\n        Utils.addRange = function(arr, range) {\n            arr.push.apply(arr, range);\n        };\n\n        var Easing = {\n            easeInOut: function(pos) {\n                return ((-Math.cos(pos * Math.PI) / 2) + 0.5);\n            }\n        };\n\n        /**\n         * An animation ticker driving an adapter which sets a particular\n         * property in function of the tick.\n         * @type {*}\n         */\n        var Ticker = kendo.Class.extend({\n            init: function() {\n                this.adapters = [];\n                this.target = 0;\n                this.tick = 0;\n                this.interval = 20;\n                this.duration = 800;\n                this.lastTime = null;\n                this.handlers = [];\n                var _this = this;\n                this.transition = Easing.easeInOut;\n                this.timerDelegate = function() {\n                    _this.onTimerEvent();\n                };\n            },\n            addAdapter: function(a) {\n                this.adapters.push(a);\n            },\n            onComplete: function(handler) {\n                this.handlers.push(handler);\n            },\n            removeHandler: function(handler) {\n                this.handlers = $.grep(this.handlers, function(h) {\n                    return h !== handler;\n                });\n            },\n            trigger: function() {\n                var _this = this;\n                if (this.handlers) {\n                    Utils.forEach(this.handlers, function(h) {\n                        return h.call(_this.caller !== null ? _this.caller : _this);\n                    });\n                }\n            },\n            onStep: function() {\n            },\n            seekTo: function(to) {\n                this.seekFromTo(this.tick, to);\n            },\n            seekFromTo: function(from, to) {\n                this.target = Math.max(0, Math.min(1, to));\n                this.tick = Math.max(0, Math.min(1, from));\n                this.lastTime = new Date().getTime();\n                if (!this.intervalId) {\n                    this.intervalId = window.setInterval(this.timerDelegate, this.interval);\n                }\n            },\n            stop: function() {\n                if (this.intervalId) {\n                    window.clearInterval(this.intervalId);\n                    this.intervalId = null;\n\n                    //this.trigger.call(this);\n                    this.trigger();\n                    // this.next();\n                }\n            },\n            play: function(origin) {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                if (origin !== null) {\n                    this.caller = origin;\n                }\n                this.initState();\n                this.seekFromTo(0, 1);\n            },\n            reverse: function() {\n                this.seekFromTo(1, 0);\n            },\n            initState: function() {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].initState();\n                }\n            },\n            propagate: function() {\n                var value = this.transition(this.tick);\n\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].update(value);\n                }\n            },\n            onTimerEvent: function() {\n                var now = new Date().getTime();\n                var timePassed = now - this.lastTime;\n                this.lastTime = now;\n                var movement = (timePassed / this.duration) * (this.tick < this.target ? 1 : -1);\n                if (Math.abs(movement) >= Math.abs(this.tick - this.target)) {\n                    this.tick = this.target;\n                } else {\n                    this.tick += movement;\n                }\n\n                try {\n                    this.propagate();\n                } finally {\n                    this.onStep.call(this);\n                    if (this.target == this.tick) {\n                        this.stop();\n                    }\n                }\n            }\n        });\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Utils: Utils,\n            Range: Range,\n            Ticker: Ticker\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            Utils = diagram.Utils,\n            Point = kendo.geometry.Point,\n            isFunction = kendo.isFunction,\n            contains = Utils.contains,\n            map = $.map;\n\n        // Constants ==============================================================\n        var HITTESTAREA = 3,\n            EPSILON = 1e-06;\n\n        class ExtendedPoint extends Point {\n            constructor(x, y) {\n                super(x, y);\n            }\n\n            clone() {\n                return new ExtendedPoint(this.x, this.y);\n            }\n\n            plus(p) {\n                return new ExtendedPoint(this.x + p.x, this.y + p.y);\n            }\n\n            minus(p) {\n                return new ExtendedPoint(this.x - p.x, this.y - p.y);\n            }\n\n            offset(value) {\n                return new ExtendedPoint(this.x - value, this.y - value);\n            }\n\n            times(s) {\n                return new ExtendedPoint(this.x * s, this.y * s);\n            }\n\n            normalize() {\n                if (this.length() === 0) {\n                    return new ExtendedPoint();\n                }\n                return this.times(1 / this.length());\n            }\n\n            length() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            }\n\n            toString() {\n                return \"(\" + this.x + \",\" + this.y + \")\";\n            }\n\n            lengthSquared() {\n                return (this.x * this.x + this.y * this.y);\n            }\n\n            middleOf(p, q) {\n                return new ExtendedPoint(q.x - p.x, q.y - p.y).times(0.5).plus(p);\n            }\n\n            toPolar(useDegrees) {\n                var factor = 1;\n                if (useDegrees) {\n                    factor = 180 / Math.PI;\n                }\n                var a = Math.atan2(Math.abs(this.y), Math.abs(this.x));\n                var halfpi = Math.PI / 2;\n                var len = this.length();\n                if (this.x === 0) {\n                    // note that the angle goes down and not the usual mathematical convention\n\n                    if (this.y === 0) {\n                        return new Polar(0, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * halfpi);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * 3 * halfpi);\n                    }\n                }\n                else if (this.x > 0) {\n                    if (this.y === 0) {\n                        return new Polar(len, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * a);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (4 * halfpi - a));\n                    }\n                }\n                else {\n                    if (this.y === 0) {\n                        return new Polar(len, 2 * halfpi);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * (2 * halfpi - a));\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (2 * halfpi + a));\n                    }\n                }\n            }\n            isOnLine(from, to) {\n                if (from.x > to.x) { // from must be the leftmost point\n                    var temp = to;\n                    to = from;\n                    from = temp;\n                }\n                var r1 = new Rect(from.x, from.y).inflate(HITTESTAREA, HITTESTAREA),\n                    r2 = new Rect(to.x, to.y).inflate(HITTESTAREA, HITTESTAREA), o1, u1;\n                if (r1.union(r2).contains(this)) {\n                    if (from.x === to.x || from.y === to.y) {\n                        return true;\n                    }\n                    else if (from.y < to.y) {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - r1.y)) / (r2.y - r1.y));\n                    }\n                    else {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - r1.y)) / (r2.y - r1.y));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                    }\n                    return (this.x > o1 && this.x < u1);\n                }\n                return false;\n            }\n            parse(str) {\n                var tempStr = str.slice(1, str.length - 1),\n                    xy = tempStr.split(\",\"),\n                    x = parseInt(xy[0], 10),\n                    y = parseInt(xy[1], 10);\n                if (!isNaN(x) && !isNaN(y)) {\n                    return new ExtendedPoint(x, y);\n                }\n            }\n        }\n\n        /**\n         * Structure combining a Point with two additional points representing the handles or tangents attached to the first point.\n         * If the additional points are null or equal to the first point the path will be sharp.\n         * Left and right correspond to the direction of the underlying path.\n         */\n        var PathDefiner = Class.extend(\n            {\n                init: function(p, left, right) {\n                    this.point = p;\n                    this.left = left;\n                    this.right = right;\n                }\n            }\n        );\n\n        /**\n         * Defines a rectangular region.\n         */\n        var Rect = Class.extend({\n            init: function(x, y, width, height) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.width = width || 0;\n                this.height = height || 0;\n            },\n            contains: function(point) {\n                return ((point.x >= this.x) && (point.x <= (this.x + this.width)) && (point.y >= this.y) && (point.y <= (this.y + this.height)));\n            },\n            inflate: function(dx, dy) {\n                if (dy === undefined$1) {\n                    dy = dx;\n                }\n\n                this.x -= dx;\n                this.y -= dy;\n                this.width += 2 * dx + 1;\n                this.height += 2 * dy + 1;\n                return this;\n            },\n            offset: function(dx, dy) {\n                var x = dx, y = dy;\n                if (dx instanceof ExtendedPoint) {\n                    x = dx.x;\n                    y = dx.y;\n                }\n                this.x += x;\n                this.y += y;\n                return this;\n            },\n            union: function(r) {\n                var x1 = Math.min(this.x, r.x);\n                var y1 = Math.min(this.y, r.y);\n                var x2 = Math.max((this.x + this.width), (r.x + r.width));\n                var y2 = Math.max((this.y + this.height), (r.y + r.height));\n                return new Rect(x1, y1, x2 - x1, y2 - y1);\n            },\n            center: function() {\n                return new ExtendedPoint(this.x + this.width / 2, this.y + this.height / 2);\n            },\n            top: function() {\n                return new ExtendedPoint(this.x + this.width / 2, this.y);\n            },\n            right: function() {\n                return new ExtendedPoint(this.x + this.width, this.y + this.height / 2);\n            },\n            bottom: function() {\n                return new ExtendedPoint(this.x + this.width / 2, this.y + this.height);\n            },\n            left: function() {\n                return new ExtendedPoint(this.x, this.y + this.height / 2);\n            },\n            topLeft: function() {\n                return new ExtendedPoint(this.x, this.y);\n            },\n            topRight: function() {\n                return new ExtendedPoint(this.x + this.width, this.y);\n            },\n            bottomLeft: function() {\n                return new ExtendedPoint(this.x, this.y + this.height);\n            },\n            bottomRight: function() {\n                return new ExtendedPoint(this.x + this.width, this.y + this.height);\n            },\n            clone: function() {\n                return new Rect(this.x, this.y, this.width, this.height);\n            },\n            isEmpty: function() {\n                return !this.width && !this.height;\n            },\n            equals: function(rect) {\n                return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n            },\n            rotatedBounds: function(angle) {\n                var rect = this.clone(),\n                    points = this.rotatedPoints(angle),\n                    tl = points[0],\n                    tr = points[1],\n                    br = points[2],\n                    bl = points[3];\n\n                rect.x = Math.min(br.x, tl.x, tr.x, bl.x);\n                rect.y = Math.min(br.y, tl.y, tr.y, bl.y);\n                rect.width = Math.max(br.x, tl.x, tr.x, bl.x) - rect.x;\n                rect.height = Math.max(br.y, tl.y, tr.y, bl.y) - rect.y;\n\n                return rect;\n            },\n            rotatedPoints: function(angle) {\n                var rect = this,\n                    c = rect.center(),\n                    br = rect.bottomRight().rotate(angle, c),\n                    tl = rect.topLeft().rotate(angle, c),\n                    tr = rect.topRight().rotate(angle, c),\n                    bl = rect.bottomLeft().rotate(angle, c);\n\n                return [tl, tr, br, bl];\n            },\n            toString: function(delimiter) {\n                delimiter = delimiter || \" \";\n\n                return this.x + delimiter + this.y + delimiter + this.width + delimiter + this.height;\n            },\n            scale: function(scaleX, scaleY, staicPoint, adornerCenter, angle) {\n                var tl = this.topLeft();\n                var thisCenter = this.center();\n                tl.rotate(angle, thisCenter).rotate(angle, adornerCenter);\n\n                var delta = staicPoint.minus(tl);\n                var scaled = new ExtendedPoint(delta.x * scaleX, delta.y * scaleY);\n                var position = delta.minus(scaled);\n                tl = tl.plus(position);\n                tl.rotate(angle, adornerCenter).rotate(angle, thisCenter);\n\n                this.x = tl.x;\n                this.y = tl.y;\n\n                this.width *= scaleX;\n                this.height *= scaleY;\n            },\n\n            zoom: function(zoom) {\n                this.x *= zoom;\n                this.y *= zoom;\n                this.width *= zoom;\n                this.height *= zoom;\n                return this;\n            },\n\n            overlaps: function(rect) {\n                var bottomRight = this.bottomRight();\n                var rectBottomRight = rect.bottomRight();\n                var overlaps = !(bottomRight.x < rect.x || bottomRight.y < rect.y ||\n                    rectBottomRight.x < this.x || rectBottomRight.y < this.y);\n                return overlaps;\n            }\n        });\n\n        var Size = Class.extend({\n            init: function(width, height) {\n                this.width = width;\n                this.height = height;\n            }\n        });\n\n        Size.prototype.Empty = new Size(0, 0);\n\n        Rect.toRect = function(rect) {\n            if (!(rect instanceof Rect)) {\n                rect = new Rect(rect.x, rect.y, rect.width, rect.height);\n            }\n\n            return rect;\n        };\n\n        Rect.empty = function() {\n            return new Rect(0, 0, 0, 0);\n        };\n\n        Rect.fromPoints = function(p, q) {\n            if (isNaN(p.x) || isNaN(p.y) || isNaN(q.x) || isNaN(q.y)) {\n                throw \"Some values are NaN.\";\n            }\n            return new Rect(Math.min(p.x, q.x), Math.min(p.y, q.y), Math.abs(p.x - q.x), Math.abs(p.y - q.y));\n        };\n\n        function isNearZero(num) {\n            return Math.abs(num) < EPSILON;\n        }\n\n        function intersectLine(start1, end1, start2, end2, isSegment) {\n            var tangensdiff = ((end1.x - start1.x) * (end2.y - start2.y)) - ((end1.y - start1.y) * (end2.x - start2.x));\n            if (isNearZero(tangensdiff)) {\n                //parallel lines\n                return;\n            }\n\n            var num1 = ((start1.y - start2.y) * (end2.x - start2.x)) - ((start1.x - start2.x) * (end2.y - start2.y));\n            var num2 = ((start1.y - start2.y) * (end1.x - start1.x)) - ((start1.x - start2.x) * (end1.y - start1.y));\n            var r = num1 / tangensdiff;\n            var s = num2 / tangensdiff;\n\n            if (isSegment && (r < 0 || r > 1 || s < 0 || s > 1)) {\n                //r < 0 => line 1 is below line 2\n                //r > 1 => line 1 is above line 2\n                //s < 0 => line 2 is below line 1\n                //s > 1 => line 2 is above line 1\n                return;\n            }\n\n            return new ExtendedPoint(start1.x + (r * (end1.x - start1.x)), start1.y + (r * (end1.y - start1.y)));\n        }\n\n        var Intersect = {\n            lines: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2);\n            },\n            segments: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2, true);\n            },\n            rectWithLine: function(rect, start, end) {\n                return Intersect.segments(start, end, rect.topLeft(), rect.topRight()) ||\n                    Intersect.segments(start, end, rect.topRight(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.bottomLeft(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.topLeft(), rect.bottomLeft());\n            },\n            rects: function(rect1, rect2, angle) {\n                var tl = rect2.topLeft(),\n                    tr = rect2.topRight(),\n                    bl = rect2.bottomLeft(),\n                    br = rect2.bottomRight();\n                var center = rect2.center();\n                if (angle) {\n                    tl = tl.rotate(angle, center);\n                    tr = tr.rotate(angle, center);\n                    bl = bl.rotate(angle, center);\n                    br = br.rotate(angle, center);\n                }\n\n                var intersect = rect1.contains(tl) ||\n                    rect1.contains(tr) ||\n                    rect1.contains(bl) ||\n                    rect1.contains(br) ||\n                    Intersect.rectWithLine(rect1, tl, tr) ||\n                    Intersect.rectWithLine(rect1, tl, bl) ||\n                    Intersect.rectWithLine(rect1, tr, br) ||\n                    Intersect.rectWithLine(rect1, bl, br);\n\n                if (!intersect) {//last possible case is rect1 to be completely within rect2\n                    tl = rect1.topLeft();\n                    tr = rect1.topRight();\n                    bl = rect1.bottomLeft();\n                    br = rect1.bottomRight();\n\n                    if (angle) {\n                        var reverseAngle = 360 - angle;\n                        tl = tl.rotate(reverseAngle, center);\n                        tr = tr.rotate(reverseAngle, center);\n                        bl = bl.rotate(reverseAngle, center);\n                        br = br.rotate(reverseAngle, center);\n                    }\n\n                    intersect = rect2.contains(tl) ||\n                        rect2.contains(tr) ||\n                        rect2.contains(bl) ||\n                        rect2.contains(br);\n                }\n\n                return intersect;\n            }\n        };\n\n        /**\n         * Aligns two rectangles, where one is the container and the other is content.\n         */\n        var RectAlign = Class.extend({\n            init: function(container) {\n                this.container = Rect.toRect(container);\n            },\n\n            align: function(content, alignment) {\n                var alignValues = alignment.toLowerCase().split(\" \");\n\n                for (var i = 0; i < alignValues.length; i++) {\n                    content = this._singleAlign(content, alignValues[i]);\n                }\n\n                return content;\n            },\n            _singleAlign: function(content, alignment) {\n                if (isFunction(this[alignment])) {\n                    return this[alignment](content);\n                }\n                else {\n                    return content;\n                }\n            },\n\n            left: function(content) {\n                return this._align(content, this._left);\n            },\n            center: function(content) {\n                return this._align(content, this._center);\n            },\n            right: function(content) {\n                return this._align(content, this._right);\n            },\n            stretch: function(content) {\n                return this._align(content, this._stretch);\n            },\n            top: function(content) {\n                return this._align(content, this._top);\n            },\n            middle: function(content) {\n                return this._align(content, this._middle);\n            },\n            bottom: function(content) {\n                return this._align(content, this._bottom);\n            },\n\n            _left: function(container, content) {\n                content.x = container.x;\n            },\n            _center: function(container, content) {\n                content.x = ((container.width - content.width) / 2) || 0;\n            },\n            _right: function(container, content) {\n                content.x = container.width - content.width;\n            },\n            _top: function(container, content) {\n                content.y = container.y;\n            },\n            _middle: function(container, content) {\n                content.y = ((container.height - content.height) / 2) || 0;\n            },\n            _bottom: function(container, content) {\n                content.y = container.height - content.height;\n            },\n            _stretch: function(container, content) {\n                content.x = 0;\n                content.y = 0;\n                content.height = container.height;\n                content.width = container.width;\n            },\n            _align: function(content, alignCalc) {\n                content = Rect.toRect(content);\n                alignCalc(this.container, content);\n\n                return content;\n            }\n        });\n\n        var Polar = Class.extend({\n            init: function(r, a) {\n                this.r = r;\n                this.angle = a;\n            }\n        });\n\n        /**\n         * SVG transformation matrix.\n         */\n        var Matrix = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            plus: function(m) {\n                this.a += m.a;\n                this.b += m.b;\n                this.c += m.c;\n                this.d += m.d;\n                this.e += m.e;\n                this.f += m.f;\n            },\n            minus: function(m) {\n                this.a -= m.a;\n                this.b -= m.b;\n                this.c -= m.c;\n                this.d -= m.d;\n                this.e -= m.e;\n                this.f -= m.f;\n            },\n            times: function(m) {\n                return new Matrix(\n                    this.a * m.a + this.c * m.b,\n                    this.b * m.a + this.d * m.b,\n                    this.a * m.c + this.c * m.d,\n                    this.b * m.c + this.d * m.d,\n                    this.a * m.e + this.c * m.f + this.e,\n                    this.b * m.e + this.d * m.f + this.f\n                );\n            },\n            apply: function(p) {\n                return new ExtendedPoint(this.a * p.x + this.c * p.y + this.e, this.b * p.x + this.d * p.y + this.f);\n            },\n            applyRect: function(r) {\n                return Rect.fromPoints(this.apply(r.topLeft()), this.apply(r.bottomRight()));\n            },\n            toString: function() {\n                return \"matrix(\" + this.a + \" \" + this.b + \" \" + this.c + \" \" + this.d + \" \" + this.e + \" \" + this.f + \")\";\n            }\n        });\n\n        deepExtend(Matrix, {\n            fromSVGMatrix: function(vm) {\n                var m = new Matrix();\n                m.a = vm.a;\n                m.b = vm.b;\n                m.c = vm.c;\n                m.d = vm.d;\n                m.e = vm.e;\n                m.f = vm.f;\n                return m;\n            },\n            fromMatrixVector: function(v) {\n                var m = new Matrix();\n                m.a = v.a;\n                m.b = v.b;\n                m.c = v.c;\n                m.d = v.d;\n                m.e = v.e;\n                m.f = v.f;\n                return m;\n            },\n            fromList: function(v) {\n                if (v.length !== 6) {\n                    throw \"The given list should consist of six elements.\";\n                }\n                var m = new Matrix();\n                m.a = v[0];\n                m.b = v[1];\n                m.c = v[2];\n                m.d = v[3];\n                m.e = v[4];\n                m.f = v[5];\n                return m;\n            },\n            translation: function(x, y) {\n                var m = new Matrix();\n                m.a = 1;\n                m.b = 0;\n                m.c = 0;\n                m.d = 1;\n                m.e = x;\n                m.f = y;\n                return m;\n            },\n            unit: function() {\n                return new Matrix(1, 0, 0, 1, 0, 0);\n            },\n            rotation: function(angle, x, y) {\n                var m = new Matrix();\n                m.a = Math.cos(angle * Math.PI / 180);\n                m.b = Math.sin(angle * Math.PI / 180);\n                m.c = -m.b;\n                m.d = m.a;\n                m.e = (x - x * m.a + y * m.b) || 0;\n                m.f = (y - y * m.a - x * m.b) || 0;\n                return m;\n            },\n            scaling: function(scaleX, scaleY) {\n                var m = new Matrix();\n                m.a = scaleX;\n                m.b = 0;\n                m.c = 0;\n                m.d = scaleY;\n                m.e = 0;\n                m.f = 0;\n                return m;\n            },\n            parse: function(v) {\n                var parts, nums;\n                if (v) {\n                    v = v.trim();\n                    // of the form \"matrix(...)\"\n                    if (v.slice(0, 6).toLowerCase() === \"matrix\") {\n                        nums = v.slice(7, v.length - 1).trim();\n                        parts = nums.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                        parts = nums.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    // of the form \"(...)\"\n                    if (v.slice(0, 1) === \"(\" && v.slice(v.length - 1) === \")\") {\n                        v = v.substr(1, v.length - 1);\n                    }\n                    if (v.indexOf(\",\") > 0) {\n                        parts = v.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    if (v.indexOf(\" \") > 0) {\n                        parts = v.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                }\n                return parts;\n            }\n        });\n\n        /**\n         * SVG transformation represented as a vector.\n         */\n        var MatrixVector = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            fromMatrix: function FromMatrix(m) {\n                var v = new MatrixVector();\n                v.a = m.a;\n                v.b = m.b;\n                v.c = m.c;\n                v.d = m.d;\n                v.e = m.e;\n                v.f = m.f;\n                return v;\n            }\n        });\n\n        /**\n         * Returns a value with Gaussian (normal) distribution.\n         * @param mean The mean value of the distribution.\n         * @param deviation The deviation (spreading at half-height) of the distribution.\n         * @returns {number}\n         */\n        function normalVariable(mean, deviation) {\n            var x, y, r;\n            do {\n                x = Math.random() * 2 - 1;\n                y = Math.random() * 2 - 1;\n                r = x * x + y * y;\n            }\n            while (!r || r > 1);\n            return mean + deviation * x * Math.sqrt(-2 * Math.log(r) / r);\n        }\n\n        /**\n         * Returns a random identifier which can be used as an ID of objects, eventually augmented with a prefix.\n         * @returns {string}\n         */\n        function randomId(length) {\n            if (Utils.isUndefined(length)) {\n                length = 10;\n            }\n            // old version return Math.floor((1 + Math.random()) * 0x1000000).toString(16).substring(1);\n            var result = '';\n            var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            for (var i = length; i > 0; --i) {\n                result += chars.charAt(Math.round(Math.random() * (chars.length - 1)));\n            }\n            return result;\n        }\n\n        var Geometry = {\n\n            /**\n             * Returns the squared distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            _distanceToLineSquared: function(p, a, b) {\n                function d2(pt1, pt2) {\n                    return (pt1.x - pt2.x) * (pt1.x - pt2.x) + (pt1.y - pt2.y) * (pt1.y - pt2.y);\n                }\n\n                if (a === b) { // returns the distance of p to a\n                    return d2(p, a);\n                }\n\n                var vx = b.x - a.x,\n                    vy = b.y - a.y,\n                    dot = (p.x - a.x) * vx + (p.y - a.y) * vy;\n                if (dot < 0) {\n                    return d2(a, p); // sits on side of a\n                }\n\n                dot = (b.x - p.x) * vx + (b.y - p.y) * vy;\n                if (dot < 0) {\n                    return d2(b, p); // sits on side of b\n                }\n                // regular case, use crossproduct to get the sine out\n                dot = (b.x - p.x) * vy - (b.y - p.y) * vx;\n                return dot * dot / (vx * vx + vy * vy);\n            },\n\n            /**\n             * Returns the distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            distanceToLine: function(p, a, b) {\n                return Math.sqrt(this._distanceToLineSquared(p, a, b));\n            },\n\n            /**\n             * Returns the distance of the given points to the polyline defined by the points.\n             * @param p An arbitrary point.\n             * @param points The points defining the polyline.\n             * @returns {Number}\n             */\n            distanceToPolyline: function(p, points) {\n                var minimum = Number.MAX_VALUE;\n                if (Utils.isUndefined(points) || points.length === 0) {\n                    return Number.MAX_VALUE;\n                }\n                for (var s = 0; s < points.length - 1; s++) {\n                    var p1 = points[s];\n                    var p2 = points[s + 1];\n\n                    var d = this._distanceToLineSquared(p, p1, p2);\n                    if (d < minimum) {\n                        minimum = d;\n                    }\n                }\n                return Math.sqrt(minimum);\n            }\n        };\n\n        /*---------------The HashTable structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs that are organized based on the hash code of the key.\n         * _buckets[hashId] = {key: key, value:...}\n         * Important: do not use the standard Array access method, use the get/set methods instead.\n         * See http://en.wikipedia.org/wiki/Hash_table\n         */\n        var HashTable = kendo.Class.extend({\n            init: function() {\n                this._buckets = [];\n                this.length = 0;\n            },\n\n            /**\n             * Adds the literal object with the given key (of the form {key: key,....}).\n             */\n            add: function(key, value) {\n\n                var obj = this._createGetBucket(key);\n                if (Utils.isDefined(value)) {\n                    obj.value = value;\n                }\n                return obj;\n            },\n\n            /**\n             * Gets the literal object with the given key.\n             */\n            get: function(key) {\n                if (this._bucketExists(key)) {\n                    return this._createGetBucket(key);\n                }\n                return null;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Determines whether the HashTable contains a specific key.\n             */\n            containsKey: function(key) {\n                return this._bucketExists(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the hashtable.\n             * Returns the removed bucket.\n             */\n            remove: function(key) {\n                if (this._bucketExists(key)) {\n                    var hashId = this._hash(key);\n                    delete this._buckets[hashId];\n                    this.length--;\n                    return key;\n                }\n            },\n\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func) {\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    func(bucket);\n                }\n            },\n\n            /**\n             * Returns a (shallow) clone of the current HashTable.\n             * @returns {HashTable}\n             */\n            clone: function() {\n                var ht = new HashTable();\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    ht.add(bucket.key, bucket.value);\n                }\n                return ht;\n            },\n\n            /**\n             * Returns the hashes of the buckets.\n             * @returns {Array}\n             * @private\n             */\n            _hashes: function() {\n                var hashes = [];\n                for (var hash in this._buckets) {\n                    if (this._buckets.hasOwnProperty(hash)) {\n                        hashes.push(hash);\n                    }\n                }\n                return hashes;\n            },\n\n            _bucketExists: function(key) {\n                var hashId = this._hash(key);\n                return Utils.isDefined(this._buckets[hashId]);\n            },\n\n            /**\n             * Returns-adds the createGetBucket with the given key. If not present it will\n             * be created and returned.\n             * A createGetBucket is a literal object of the form {key: key, ...}.\n             */\n            _createGetBucket: function(key) {\n                var hashId = this._hash(key);\n                var bucket = this._buckets[hashId];\n                if (Utils.isUndefined(bucket)) {\n                    bucket = { key: key };\n                    this._buckets[hashId] = bucket;\n                    this.length++;\n                }\n                return bucket;\n            },\n\n            /**\n             * Hashing of the given key.\n             */\n            _hash: function(key) {\n                if (Utils.isNumber(key)) {\n                    return key;\n                }\n                if (Utils.isString(key)) {\n                    return this._hashString(key);\n                }\n                if (Utils.isObject(key)) {\n                    return this._objectHashId(key);\n                }\n                throw \"Unsupported key type.\";\n            },\n\n            /**\n             * Hashing of a string.\n             */\n            _hashString: function(s) {\n                // see for example http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n                var result = 0;\n                if (s.length === 0) {\n                    return result;\n                }\n                for (var i = 0; i < s.length; i++) {\n                    var ch = s.charCodeAt(i);\n                    result = ((result * 32) - result) + ch;\n                }\n                return result;\n            },\n\n            /**\n             * Returns the unique identifier for an object. This is automatically assigned and add on the object.\n             */\n            _objectHashId: function(key) {\n                var id = key._hashId;\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                    key._hashId = id;\n                }\n                return id;\n            }\n        });\n\n        /*---------------The Dictionary structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs.\n         * Important: do not use the standard Array access method, use the get/Set methods instead.\n         */\n        var Dictionary = kendo.Observable.extend({\n            /**\n             * Initializes a new instance of the Dictionary class.\n             * @param dictionary Loads the content of the given dictionary into this new one.\n             */\n            init: function(dictionary) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(dictionary)) {\n                    if (Array.isArray(dictionary)) {\n                        for (var i = 0; i < dictionary.length; i++) {\n                            this.add(dictionary[i]);\n                        }\n                    } else {\n                        dictionary.forEach(function(k, v) {\n                            this.add(k, v);\n                        }, this);\n                    }\n                }\n            },\n\n            /**\n             * Adds a key-value to the dictionary.\n             * If the key already exists this will assign the given value to the existing entry.\n             */\n            add: function(key, value) {\n                var entry = this._hashTable.get(key);\n                if (!entry) {\n                    entry = this._hashTable.add(key);\n                    this.length++;\n                    this.trigger('changed');\n                }\n                entry.value = value;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Gets the value associated with the given key in the dictionary.\n             */\n            get: function(key) {\n                var entry = this._hashTable.get(key);\n                if (entry) {\n                    return entry.value;\n                }\n                throw new Error(\"Cannot find key \" + key);\n            },\n\n            /**\n             * Returns whether the dictionary contains the given key.\n             */\n            containsKey: function(key) {\n                return this._hashTable.containsKey(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the dictionary.\n             */\n            remove: function(key) {\n                if (this.containsKey(key)) {\n                    this.trigger(\"changed\");\n                    this.length--;\n                    return this._hashTable.remove(key);\n                }\n            },\n\n            /**\n             * The functional gets the key and value as parameters.\n             */\n            forEach: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key, entry.value);\n                });\n            },\n\n            /**\n             * Same as forEach except that only the value is passed to the functional.\n             */\n            forEachValue: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.value);\n                });\n            },\n\n            /**\n             * Calls a defined callback function for each key in the dictionary.\n             */\n            forEachKey: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key);\n                });\n            },\n\n            /**\n             * Gets an array with all keys in the dictionary.\n             */\n            keys: function() {\n                var keys = [];\n                this.forEachKey(function(key) {\n                    keys.push(key);\n                });\n                return keys;\n            }\n        });\n\n        /*---------------Queue structure--------------------------------*/\n\n        var Queue = kendo.Class.extend({\n\n            init: function() {\n                this._tail = null;\n                this._head = null;\n                this.length = 0;\n            },\n\n            /**\n             * Enqueues an object to the end of the queue.\n             */\n            enqueue: function(value) {\n                var entry = { value: value, next: null };\n                if (!this._head) {\n                    this._head = entry;\n                    this._tail = this._head;\n                }\n                else {\n                    this._tail.next = entry;\n                    this._tail = this._tail.next;\n                }\n                this.length++;\n            },\n\n            /**\n             * Removes and returns the object at top of the queue.\n             */\n            dequeue: function() {\n                if (this.length < 1) {\n                    throw new Error(\"The queue is empty.\");\n                }\n                var value = this._head.value;\n                this._head = this._head.next;\n                this.length--;\n                return value;\n            },\n\n            contains: function(item) {\n                var current = this._head;\n                while (current) {\n                    if (current.value === item) {\n                        return true;\n                    }\n                    current = current.next;\n                }\n                return false;\n            }\n        });\n\n\n        /**\n         * While other data structures can have multiple times the same item a Set owns only\n         * once a particular item.\n         * @type {*}\n         */\n        var Set = kendo.Observable.extend({\n            init: function(resource) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(resource)) {\n                    if (resource instanceof HashTable) {\n                        resource.forEach(function(d) {\n                            this.add(d);\n                        });\n                    }\n                    else if (resource instanceof Dictionary) {\n                        resource.forEach(function(k, v) {\n                            this.add({ key: k, value: v });\n                        }, this);\n                    }\n                }\n            },\n\n            contains: function(item) {\n                return this._hashTable.containsKey(item);\n            },\n\n            add: function(item) {\n                var entry = this._hashTable.get(item);\n                if (!entry) {\n                    this._hashTable.add(item, item);\n                    this.length++;\n                    this.trigger('changed');\n                }\n            },\n\n            get: function(item) {\n                if (this.contains(item)) {\n                    return this._hashTable.get(item).value;\n                }\n                else {\n                    return null;\n                }\n            },\n\n            /**\n             * Returns the hash of the item.\n             * @param item\n             * @returns {*}\n             */\n            hash: function(item) {\n                return this._hashTable._hash(item);\n            },\n\n            /**\n             * Removes the given item from the set. No exception is thrown if the item is not in the Set.\n             * @param item\n             */\n            remove: function(item) {\n                if (this.contains(item)) {\n                    this._hashTable.remove(item);\n                    this.length--;\n                    this.trigger('changed');\n                }\n            },\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func, context) {\n                this._hashTable.forEach(function(kv) {\n                    func(kv.value);\n                }, context);\n            },\n            toArray: function() {\n                var r = [];\n                this.forEach(function(d) {\n                    r.push(d);\n                });\n                return r;\n            }\n        });\n\n        /*----------------Node-------------------------------*/\n\n        /**\n         * Defines the node (vertex) of a Graph.\n         */\n        var Node = kendo.Class.extend({\n\n            init: function(id, shape) {\n\n                /**\n                 * Holds all the links incident with the current node.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.links = [];\n\n                /**\n                 * Holds the links from the current one to another Node .\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.outgoing = [];\n\n                /**\n                 * Holds the links from another Node to the current one.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.incoming = [];\n\n                /**\n                 * Holds the weight of this Node.\n                 */\n                this.weight = 1;\n\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(shape)) {\n                    this.associatedShape = shape;\n                    // transfer the shape's bounds to the runtime props\n                    var b = shape.bounds();\n                    this.width = b.width;\n                    this.height = b.height;\n                    this.x = b.x;\n                    this.y = b.y;\n                }\n                else {\n                    this.associatedShape = null;\n                }\n                /**\n                 * The payload of the node.\n                 * @type {null}\n                 */\n                this.data = null;\n                this.type = \"Node\";\n                this.shortForm = \"Node '\" + this.id + \"'\";\n                /**\n                 * Whether this is an injected node during the analysis or layout process.\n                 * @type {boolean}\n                 */\n                this.isVirtual = false;\n            },\n\n            /**\n             * Returns whether this node has no links attached.\n             */\n            isIsolated: function() {\n                return Utils.isEmpty(this.links);\n            },\n\n            /**\n             * Gets or sets the bounding rectangle of this node.\n             * This should be considered as runtime data, the property is not hotlinked to a SVG item.\n             */\n            bounds: function(r) {\n                if (!Utils.isDefined(r)) {\n                    return new diagram.Rect(this.x, this.y, this.width, this.height);\n                }\n\n                this.x = r.x;\n                this.y = r.y;\n                this.width = r.width;\n                this.height = r.height;\n            },\n\n            /**\n             * Returns whether there is at least one link with the given (complementary) node. This can be either an\n             * incoming or outgoing link.\n             */\n            isLinkedTo: function(node) {\n                var that = this;\n                return Utils.any(that.links, function(link) {\n                    return link.getComplement(that) === node;\n                });\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function() {\n                if (this.outgoing.length === 0) {\n                    return [];\n                }\n                var children = [];\n                for (var i = 0, len = this.outgoing.length; i < len; i++) {\n                    var link = this.outgoing[i];\n                    children.push(link.getComplement(this));\n                }\n                return children;\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function() {\n                if (this.incoming.length === 0) {\n                    return [];\n                }\n                var parents = [];\n                for (var i = 0, len = this.incoming.length; i < len; i++) {\n                    var link = this.incoming[i];\n                    parents.push(link.getComplement(this));\n                }\n                return parents;\n            },\n\n            /**\n             * Returns a clone of the Node. Note that the identifier is not cloned since it's a different Node instance.\n             * @returns {Node}\n             */\n            clone: function() {\n                var copy = new Node();\n                if (Utils.isDefined(this.weight)) {\n                    copy.weight = this.weight;\n                }\n                if (Utils.isDefined(this.balance)) {\n                    copy.balance = this.balance;\n                }\n                if (Utils.isDefined(this.owner)) {\n                    copy.owner = this.owner;\n                }\n                copy.associatedShape = this.associatedShape;\n                copy.x = this.x;\n                copy.y = this.y;\n                copy.width = this.width;\n                copy.height = this.height;\n                return copy;\n            },\n\n            /**\n             * Returns whether there is a link from the current node to the given node.\n             */\n            adjacentTo: function(node) {\n                return this.isLinkedTo(node) !== null;\n            },\n\n            /**\n             * Removes the given link from the link collection this node owns.\n             * @param link\n             */\n            removeLink: function(link) {\n                if (link.source === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.outgoing, link);\n                    link.source = null;\n                }\n\n                if (link.target === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.incoming, link);\n                    link.target = null;\n                }\n            },\n\n            /**\n             * Returns whether there is a (outgoing) link from the current node to the given one.\n             */\n            hasLinkTo: function(node) {\n                return Utils.any(this.outgoing, function(link) {\n                    return link.target === node;\n                });\n            },\n\n            /**\n             * Returns the degree of this node, i.e. the sum of incoming and outgoing links.\n             */\n            degree: function() {\n                return this.links.length;\n            },\n\n            /**\n             * Returns whether this node is either the source or the target of the given link.\n             */\n            incidentWith: function(link) {\n                return contains(this.links, link);\n            },\n\n            /**\n             * Returns the links between this node and the given one.\n             */\n            getLinksWith: function(node) {\n                return Utils.all(this.links, function(link) {\n                    return link.getComplement(this) === node;\n                }, this);\n            },\n\n            /**\n             * Returns the nodes (either parent or child) which are linked to the current one.\n             */\n            getNeighbors: function() {\n                var neighbors = [];\n                Utils.forEach(this.incoming, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                Utils.forEach(this.outgoing, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                return neighbors;\n            }\n        });\n\n        /**\n         * Defines a directed link (edge, connection) of a Graph.\n         */\n        var Link = kendo.Class.extend({\n\n            init: function(source, target, id, connection) {\n                if (Utils.isUndefined(source)) {\n                    throw \"The source of the new link is not set.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    throw \"The target of the new link is not set.\";\n                }\n                var sourceFound, targetFound;\n                if (Utils.isString(source)) {\n                    sourceFound = new Node(source);\n                }\n                else {\n                    sourceFound = source;\n                }\n                if (Utils.isString(target)) {\n                    targetFound = new Node(target);\n                }\n                else {\n                    targetFound = target;\n                }\n\n                this.source = sourceFound;\n                this.target = targetFound;\n                this.source.links.push(this);\n                this.target.links.push(this);\n                this.source.outgoing.push(this);\n                this.target.incoming.push(this);\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(connection)) {\n                    this.associatedConnection = connection;\n                }\n                else {\n                    this.associatedConnection = null;\n                }\n                this.type = \"Link\";\n                this.shortForm = \"Link '\" + this.source.id + \"->\" + this.target.id + \"'\";\n            },\n\n            /**\n             * Returns the complementary node of the given one, if any.\n             */\n            getComplement: function(node) {\n                if (this.source !== node && this.target !== node) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                return this.source === node ? this.target : this.source;\n            },\n\n            /**\n             * Returns the overlap of the current link with the given one, if any.\n             */\n            getCommonNode: function(link) {\n                if (this.source === link.source || this.source === link.target) {\n                    return this.source;\n                }\n                if (this.target === link.source || this.target === link.target) {\n                    return this.target;\n                }\n                return null;\n            },\n\n            /**\n             * Returns whether the current link is bridging the given nodes.\n             */\n            isBridging: function(v1, v2) {\n                return this.source === v1 && this.target === v2 || this.source === v2 && this.target === v1;\n            },\n\n            /**\n             * Returns the source and target of this link as a tuple.\n             */\n            getNodes: function() {\n                return [this.source, this.target];\n            },\n\n            /**\n             * Returns whether the given node is either the source or the target of the current link.\n             */\n            incidentWith: function(node) {\n                return this.source === node || this.target === node;\n            },\n\n            /**\n             * Returns whether the given link is a continuation of the current one. This can be both\n             * via an incoming or outgoing link.\n             */\n            adjacentTo: function(link) {\n                return contains(this.source.links, link) || contains(this.target.links, link);\n            },\n\n            /**\n             * Changes the source-node of this link.\n             */\n            changeSource: function(node) {\n                Utils.remove(this.source.links, this);\n                Utils.remove(this.source.outgoing, this);\n\n                node.links.push(this);\n                node.outgoing.push(this);\n\n                this.source = node;\n            },\n\n            /**\n             * Changes the target-node of this link.\n             * @param node\n             */\n            changeTarget: function(node) {\n                Utils.remove(this.target.links, this);\n                Utils.remove(this.target.incoming, this);\n\n                node.links.push(this);\n                node.incoming.push(this);\n\n                this.target = node;\n            },\n\n            /**\n             * Changes both the source and the target nodes of this link.\n             */\n            changesNodes: function(v, w) {\n                if (this.source === v) {\n                    this.changeSource(w);\n                }\n                else if (this.target === v) {\n                    this.changeTarget(w);\n                }\n            },\n\n            /**\n             * Reverses the direction of this link.\n             */\n            reverse: function() {\n                var oldSource = this.source;\n                var oldTarget = this.target;\n\n                this.source = oldTarget;\n                Utils.remove(oldSource.outgoing, this);\n                this.source.outgoing.push(this);\n\n                this.target = oldSource;\n                Utils.remove(oldTarget.incoming, this);\n                this.target.incoming.push(this);\n                return this;\n            },\n\n            /**\n             * Ensures that the given target defines the endpoint of this link.\n             */\n            directTo: function(target) {\n                if (this.source !== target && this.target !== target) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                if (this.target !== target) {\n                    this.reverse();\n                }\n            },\n\n            /**\n             * Returns a reversed clone of this link.\n             */\n            createReverseEdge: function() {\n                var r = this.clone();\n                r.reverse();\n                r.reversed = true;\n                return r;\n            },\n\n            /**\n             * Returns a clone of this link.\n             */\n            clone: function() {\n                var clone = new Link(this.source, this.target);\n                return clone;\n            }\n        });\n\n        /*--------------Graph structure---------------------------------*/\n        /**\n         * Defines a directed graph structure.\n         * Note that the incidence structure resides in the nodes through the incoming and outgoing links collection, rahter than\n         * inside the Graph.\n         */\n        var Graph = kendo.Class.extend({\n            init: function(idOrDiagram) {\n                /**\n                 * The links or edge collection of this Graph.\n                 * @type {Array}\n                 */\n                this.links = [];\n                /**\n                 * The node or vertex collection of this Graph.\n                 * @type {Array}\n                 */\n                this.nodes = [];\n\n                this._nodeMap = new Dictionary();\n                /**\n                 * The optional reference to the Diagram on which this Graph is based.\n                 * @type {null}\n                 */\n                this.diagram = null;\n\n                /**\n                 * The root of this Graph. If not set explicitly the first Node with zero incoming links will be taken.\n                 * @type {null}\n                 * @private\n                 */\n                this._root = null;\n                if (Utils.isDefined(idOrDiagram)) {\n                    if (Utils.isString(idOrDiagram)) {\n                        this.id = idOrDiagram;\n                    }\n                    else {\n                        this.diagram = idOrDiagram;\n                        this.id = idOrDiagram.id;\n                    }\n                }\n                else {\n                    this.id = randomId();\n                }\n\n                /**\n                 * The bounds of this graph if the nodes have spatial extension defined.\n                 * @type {Rect}\n                 */\n                this.bounds = new Rect();\n                // keeps track whether the children & parents have been created\n                this._hasCachedRelationships = false;\n                this.type = \"Graph\";\n            },\n            /**\n             * Caches the relational information of parents and children in the 'parents' and 'children'\n             * properties.\n             * @param forceRebuild If set to true the relational info will be rebuild even if already present.\n             */\n            cacheRelationships: function(forceRebuild) {\n                if (Utils.isUndefined(forceRebuild)) {\n                    forceRebuild = false;\n                }\n                if (this._hasCachedRelationships && !forceRebuild) {\n                    return;\n                }\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    node.children = this.getChildren(node);\n                    node.parents = this.getParents(node);\n                }\n                this._hasCachedRelationships = true;\n            },\n\n            /**\n             * Assigns tree-levels to the nodes assuming this is a tree graph.\n             * If not connected or not a tree the process will succeed but\n             * will have little meaning.\n             * @param startNode The node from where the level numbering starts, usually the root of the tree.\n             * @param visited The collection of visited nodes.\n             * @param offset The offset or starting counter of the level info.\n             */\n            assignLevels: function(startNode, offset, visited) {\n                if (!startNode) {\n                    throw \"Start node not specified.\";\n                }\n                if (Utils.isUndefined(offset)) {\n                    offset = 0;\n                }\n                // if not done before, cache the parents and children\n                this.cacheRelationships();\n                if (Utils.isUndefined(visited)) {\n                    visited = new Dictionary();\n                    Utils.forEach(this.nodes, function(n) {\n                        visited.add(n, false);\n                    });\n                }\n                visited.set(startNode, true);\n                startNode.level = offset;\n                var children = startNode.children;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (!child || visited.get(child)) {\n                        continue;\n                    }\n                    this.assignLevels(child, offset + 1, visited);\n                }\n            },\n\n            /**\n             * Gets or set the root of this graph.\n             * If not set explicitly the first Node with zero incoming links will be taken.\n             * @param value\n             * @returns {*}\n             */\n            root: function(value) {\n                if (Utils.isUndefined(value)) {\n                    if (!this._root) {\n                        // TODO: better to use the longest path for the most probable root?\n                        var found = Utils.first(this.nodes, function(n) {\n                            return n.incoming.length === 0;\n                        });\n                        if (found) {\n                            return found;\n                        }\n                        return Utils.first(this.nodes);\n                    }\n                    else {\n                        return this._root;\n                    }\n                }\n                else {\n                    this._root = value;\n                }\n            },\n\n            /**\n             * Returns the connected components of this graph.\n             * Note that the returned graphs are made up of the nodes and links of this graph, i.e. a pointer to the items of this graph.\n             * If you alter the items of the components you'll alter the original graph and vice versa.\n             * @returns {Array}\n             */\n            getConnectedComponents: function() {\n                this.componentIndex = 0;\n                this.setItemIndices();\n                var componentId = Utils.initArray(this.nodes.length, -1);\n\n                for (var v = 0; v < this.nodes.length; v++) {\n                    if (componentId[v] === -1) {\n                        this._collectConnectedNodes(componentId, v);\n                        this.componentIndex++;\n                    }\n                }\n\n                var components = [], i;\n                for (i = 0; i < this.componentIndex; ++i) {\n                    components[i] = new Graph();\n                }\n                for (i = 0; i < componentId.length; ++i) {\n                    var graph = components[componentId[i]];\n                    graph.addNodeAndOutgoings(this.nodes[i]);\n                }\n                // sorting the components in decreasing order of node count\n                components.sort(function(a, b) {\n                    return b.nodes.length - a.nodes.length;\n                });\n                return components;\n            },\n\n            _collectConnectedNodes: function(setIds, nodeIndex) {\n                setIds[nodeIndex] = this.componentIndex; // part of the current component\n                var node = this.nodes[nodeIndex];\n                Utils.forEach(node.links,\n                    function(link) {\n                        var next = link.getComplement(node);\n                        var nextId = next.index;\n                        if (setIds[nextId] === -1) {\n                            this._collectConnectedNodes(setIds, nextId);\n                        }\n                    }, this);\n            },\n\n            /**\n             * Calculates the bounds of this Graph if the Nodes have spatial dimensions defined.\n             * @returns {Rect}\n             */\n            calcBounds: function() {\n                if (this.isEmpty()) {\n                    this.bounds = new Rect();\n                    return this.bounds;\n                }\n                var b = null;\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (!b) {\n                        b = node.bounds();\n                    }\n                    else {\n                        b = b.union(node.bounds());\n                    }\n                }\n                this.bounds = b;\n                return this.bounds;\n            },\n\n            /**\n             * Creates a spanning tree for the current graph.\n             * Important: this will not return a spanning forest if the graph is disconnected.\n             * Prim's algorithm  finds a minimum-cost spanning tree of an edge-weighted, connected, undirected graph;\n             * see http://en.wikipedia.org/wiki/Prim%27s_algorithm .\n             * @param root The root of the spanning tree.\n             * @returns {Graph}\n             */\n            getSpanningTree: function(root) {\n                var tree = new Graph();\n                var map = new Dictionary(), source, target;\n                tree.root = root.clone();\n                tree.root.level = 0;\n                tree.root.id = root.id;\n                map.add(root, tree.root);\n                root.level = 0;\n\n                var visited = [];\n                var remaining = [];\n                tree._addNode(tree.root);\n                visited.push(root);\n                remaining.push(root);\n\n                var levelCount = 1;\n                while (remaining.length > 0) {\n                    var next = remaining.pop();\n                    for (var ni = 0; ni < next.links.length; ni++) {\n                        var link = next.links[ni];\n                        var cn = link.getComplement(next);\n                        if (contains(visited, cn)) {\n                            continue;\n                        }\n\n                        cn.level = next.level + 1;\n                        if (levelCount < cn.level + 1) {\n                            levelCount = cn.level + 1;\n                        }\n                        if (!contains(remaining, cn)) {\n                            remaining.push(cn);\n                        }\n                        if (!contains(visited, cn)) {\n                            visited.push(cn);\n                        }\n                        if (map.containsKey(next)) {\n                            source = map.get(next);\n                        }\n                        else {\n                            source = next.clone();\n                            source.level = next.level;\n                            source.id = next.id;\n                            map.add(next, source);\n                        }\n                        if (map.containsKey(cn)) {\n                            target = map.get(cn);\n                        }\n                        else {\n                            target = cn.clone();\n                            target.level = cn.level;\n                            target.id = cn.id;\n                            map.add(cn, target);\n                        }\n                        var newLink = new Link(source, target);\n                        tree.addLink(newLink);\n                    }\n\n                }\n\n                var treeLevels = [];\n                for (var i = 0; i < levelCount; i++) {\n                    treeLevels.push([]);\n                }\n\n                Utils.forEach(tree.nodes, function(node) {\n                    treeLevels[node.level].push(node);\n                });\n\n                tree.treeLevels = treeLevels;\n                tree.cacheRelationships();\n                return tree;\n            },\n\n            /**\n             * Returns a random node in this graph.\n             * @param excludedNodes The collection of nodes which should not be considered.\n             * @param incidenceLessThan The maximum degree or incidence the random node should have.\n             * @returns {*}\n             */\n            takeRandomNode: function(excludedNodes, incidenceLessThan) {\n                if (Utils.isUndefined(excludedNodes)) {\n                    excludedNodes = [];\n                }\n                if (Utils.isUndefined(incidenceLessThan)) {\n                    incidenceLessThan = 4;\n                }\n                if (this.nodes.length === 0) {\n                    return null;\n                }\n                if (this.nodes.length === 1) {\n                    return contains(excludedNodes, this.nodes[0]) ? null : this.nodes[0];\n                }\n                var pool = $.grep(this.nodes, function(node) {\n                    return !contains(excludedNodes, node) && node.degree() <= incidenceLessThan;\n                });\n                if (Utils.isEmpty(pool)) {\n                    return null;\n                }\n                return pool[Utils.randomInteger(0, pool.length)];\n            },\n\n            /**\n             * Returns whether this is an empty graph.\n             */\n            isEmpty: function() {\n                return Utils.isEmpty(this.nodes);\n            },\n\n            /**\n             * Checks whether the endpoints of the links are all in the nodes collection.\n             */\n            isHealthy: function() {\n                return Utils.all(this.links, function(link) {\n                    return contains(this.nodes, link.source) && contains(this.nodes, link.target);\n                }, this);\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getParents();\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getChildren();\n            },\n\n            /**\n             * Adds a new link to the graph between the given nodes.\n             */\n            addLink: function(sourceOrLink, target, owner) {\n\n                if (Utils.isUndefined(sourceOrLink)) {\n                    throw \"The source of the link is not defined.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    // can only be undefined if the first one is a Link\n                    if (Utils.isDefined(sourceOrLink.type) && sourceOrLink.type === \"Link\") {\n                        this.addExistingLink(sourceOrLink);\n                        return;\n                    }\n                    else {\n                        throw \"The target of the link is not defined.\";\n                    }\n                }\n\n                var foundSource = this.getNode(sourceOrLink);\n                if (Utils.isUndefined(foundSource)) {\n                    foundSource = this.addNode(sourceOrLink);\n                }\n                var foundTarget = this.getNode(target);\n                if (Utils.isUndefined(foundTarget)) {\n                    foundTarget = this.addNode(target);\n                }\n\n                var newLink = new Link(foundSource, foundTarget);\n\n                if (Utils.isDefined(owner)) {\n                    newLink.owner = owner;\n                }\n\n                /*newLink.source.outgoing.push(newLink);\n                 newLink.source.links.push(newLink);\n                 newLink.target.incoming.push(newLink);\n                 newLink.target.links.push(newLink);*/\n\n                this.links.push(newLink);\n\n                return newLink;\n            },\n\n            /**\n             * Removes all the links in this graph.\n             */\n            removeAllLinks: function() {\n                while (this.links.length > 0) {\n                    var link = this.links[0];\n                    this.removeLink(link);\n                }\n            },\n\n            /**\n             * Adds the given link to the current graph.\n             */\n            addExistingLink: function(link) {\n\n                if (this.hasLink(link)) {\n                    return;\n                }\n                this.links.push(link);\n                if (this.hasNode(link.source.id)) {\n                    // priority to the existing node with the id even if other props are different\n                    var s = this.getNode(link.source.id);\n                    link.changeSource(s);\n                }\n                else {\n                    this.addNode(link.source);\n                }\n\n                if (this.hasNode(link.target.id)) {\n                    var t = this.getNode(link.target.id);\n                    link.changeTarget(t);\n                }\n                else {\n                    this.addNode(link.target);\n                }\n\n                /*  if (!link.source.outgoing.contains(link)) {\n                 link.source.outgoing.push(link);\n                 }\n                 if (!link.source.links.contains(link)) {\n                 link.source.links.push(link);\n                 }\n                 if (!link.target.incoming.contains(link)) {\n                 link.target.incoming.push(link);\n                 }\n                 if (!link.target.links.contains(link)) {\n                 link.target.links.push(link);\n                 }*/\n            },\n\n            /**\n             * Returns whether the given identifier or Link is part of this graph.\n             * @param linkOrId An identifier or a Link object.\n             * @returns {*}\n             */\n            hasLink: function(linkOrId) {\n                if (Utils.isString(linkOrId)) {\n                    return Utils.any(this.links, function(link) {\n                        return link.id === linkOrId;\n                    });\n                }\n                if (linkOrId.type === \"Link\") {\n                    return contains(this.links, linkOrId);\n                }\n                throw \"The given object is neither an identifier nor a Link.\";\n            },\n            /**\n             * Gets the node with the specified Id or null if not part of this graph.\n             */\n            getNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                if (this._nodeMap.containsKey(id)) {\n                    return this._nodeMap.get(id);\n                }\n            },\n\n            /**\n             * Returns whether the given node or node Id is part of this graph.\n             */\n            hasNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                return this._nodeMap.containsKey(id);\n            },\n\n            _addNode: function(node) {\n                this.nodes.push(node);\n                this._nodeMap.add(node.id, node);\n            },\n\n            _removeNode: function(node) {\n                Utils.remove(this.nodes, node);\n                this._nodeMap.remove(node.id);\n            },\n\n            /**\n             * Removes the given node from this graph.\n             * The node can be specified as an object or as an identifier (string).\n             */\n            removeNode: function(nodeOrId) {\n                var n = nodeOrId;\n                if (Utils.isString(nodeOrId)) {\n                    n = this.getNode(nodeOrId);\n                }\n\n                if (Utils.isDefined(n)) {\n                    var links = n.links;\n                    n.links = [];\n                    for (var i = 0, len = links.length; i < len; i++) {\n                        var link = links[i];\n                        this.removeLink(link);\n                    }\n                    this._removeNode(n);\n                }\n                else {\n                    throw \"The identifier should be a Node or the Id (string) of a node.\";\n                }\n            },\n\n            /**\n             * Returns whether the given nodes are connected with a least one link independently of the direction.\n             */\n            areConnected: function(n1, n2) {\n                return Utils.any(this.links, function(link) {\n                    return link.source == n1 && link.target == n2 || link.source == n2 && link.target == n1;\n                });\n            },\n\n            /**\n             * Removes the given link from this graph.\n             */\n            removeLink: function(link) {\n                /*    if (!this.links.contains(link)) {\n                 throw \"The given link is not part of the Graph.\";\n                 }\n                 */\n                Utils.remove(this.links, link);\n\n                Utils.remove(link.source.outgoing, link);\n                Utils.remove(link.source.links, link);\n                Utils.remove(link.target.incoming, link);\n                Utils.remove(link.target.links, link);\n            },\n\n            /**\n             * Adds a new node to this graph, if not already present.\n             * The node can be an existing Node or the identifier of a new node.\n             * No error is thrown if the node is already there and the existing one is returned.\n             */\n            addNode: function(nodeOrId, layoutRect, owner) {\n\n                var newNode = null;\n\n                if (!Utils.isDefined(nodeOrId)) {\n                    throw \"No Node or identifier for a new Node is given.\";\n                }\n\n                if (Utils.isString(nodeOrId)) {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    newNode = new Node(nodeOrId);\n                }\n                else {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    // todo: ensure that the param is a Node?\n                    newNode = nodeOrId;\n                }\n\n                if (Utils.isDefined(layoutRect)) {\n                    newNode.bounds(layoutRect);\n                }\n\n                if (Utils.isDefined(owner)) {\n                    newNode.owner = owner;\n                }\n                this._addNode(newNode);\n                return newNode;\n            },\n\n            /**\n             * Adds the given Node and its outgoing links.\n             */\n            addNodeAndOutgoings: function(node) {\n                if (!this.hasNode(node)) {\n                    this._addNode(node);\n                }\n\n                var newLinks = node.outgoing;\n                node.outgoing = [];\n                Utils.forEach(newLinks, function(link) {\n                    this.addExistingLink(link);\n                }, this);\n            },\n\n            /**\n             * Sets the 'index' property on the links and nodes of this graph.\n             */\n            setItemIndices: function() {\n                var i;\n                for (i = 0; i < this.nodes.length; ++i) {\n                    this.nodes[i].index = i;\n                }\n\n                for (i = 0; i < this.links.length; ++i) {\n                    this.links[i].index = i;\n                }\n            },\n\n            /**\n             * Returns a clone of this graph.\n             */\n            clone: function(saveMapping) {\n                var copy = new Graph();\n                var save = Utils.isDefined(saveMapping) && saveMapping === true;\n                if (save) {\n                    copy.nodeMap = new Dictionary();\n                    copy.linkMap = new Dictionary();\n                }\n                // we need a map even if the saveMapping is not set\n                var map = new Dictionary();\n                Utils.forEach(this.nodes, function(nOriginal) {\n                    var nCopy = nOriginal.clone();\n                    map.set(nOriginal, nCopy);\n                    copy._addNode(nCopy);\n\n                    if (save) {\n                        copy.nodeMap.set(nCopy, nOriginal);\n                    }\n                });\n\n                Utils.forEach(this.links, function(linkOriginal) {\n                    if (map.containsKey(linkOriginal.source) && map.containsKey(linkOriginal.target)) {\n                        var linkCopy = copy.addLink(map.get(linkOriginal.source), map.get(linkOriginal.target));\n                        if (save) {\n                            copy.linkMap.set(linkCopy, linkOriginal);\n                        }\n                    }\n                });\n\n                return copy;\n            },\n\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"QSDF\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            linearize: function(addIds) {\n                return Graph.Utils.linearize(this, addIds);\n            },\n\n            /**\n             * Performs a depth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            depthFirstTraversal: function(startNode, action) {\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var visited = [];\n                this._dftIterator(foundNode, action, visited);\n            },\n\n            _dftIterator: function(node, action, visited) {\n\n                action(node);\n                visited.push(node);\n                var children = node.getChildren();\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (contains(visited, child)) {\n                        continue;\n                    }\n                    this._dftIterator(child, action, visited);\n                }\n            },\n\n            /**\n             * Performs a breadth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            breadthFirstTraversal: function(startNode, action) {\n\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var queue = new Queue();\n                var visited = [];\n                queue.enqueue(foundNode);\n\n                while (queue.length > 0) {\n                    var node = queue.dequeue();\n                    action(node);\n                    visited.push(node);\n                    var children = node.getChildren();\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        if (contains(visited, child) || contains(queue, child)) {\n                            continue;\n                        }\n                        queue.enqueue(child);\n                    }\n                }\n            },\n\n            /**\n             * This is the classic Tarjan algorithm for strongly connected components.\n             * See e.g. http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm\n             * @param excludeSingleItems Whether isolated nodes should be excluded from the analysis.\n             * @param node The start node from which the analysis starts.\n             * @param indices  Numbers the nodes consecutively in the order in which they are discovered.\n             * @param lowLinks The smallest index of any node known to be reachable from the node, including the node itself\n             * @param connected The current component.\n             * @param stack The bookkeeping stack of things to visit.\n             * @param index The counter of visited nodes used to assign the indices.\n             * @private\n             */\n            _stronglyConnectedComponents: function(excludeSingleItems, node, indices, lowLinks, connected, stack, index) {\n                indices.add(node, index);\n                lowLinks.add(node, index);\n                index++;\n\n                stack.push(node);\n\n                var children = node.getChildren(), next;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    next = children[i];\n                    if (!indices.containsKey(next)) {\n                        this._stronglyConnectedComponents(excludeSingleItems, next, indices, lowLinks, connected, stack, index);\n                        lowLinks.add(node, Math.min(lowLinks.get(node), lowLinks.get(next)));\n                    }\n                    else if (contains(stack, next)) {\n                        lowLinks.add(node, Math.min(lowLinks.get(node), indices.get(next)));\n                    }\n                }\n                // If v is a root node, pop the stack and generate a strong component\n                if (lowLinks.get(node) === indices.get(node)) {\n                    var component = [];\n                    do {\n                        next = stack.pop();\n                        component.push(next);\n                    }\n                    while (next !== node);\n                    if (!excludeSingleItems || (component.length > 1)) {\n                        connected.push(component);\n                    }\n                }\n            },\n\n            /**\n             * Returns the cycles found in this graph.\n             * The returned arrays consist of the nodes which are strongly coupled.\n             * @param excludeSingleItems Whether isolated nodes should be excluded.\n             * @returns {Array} The array of cycles found.\n             */\n            findCycles: function(excludeSingleItems) {\n                if (Utils.isUndefined(excludeSingleItems)) {\n                    excludeSingleItems = true;\n                }\n                var indices = new Dictionary();\n                var lowLinks = new Dictionary();\n                var connected = [];\n                var stack = [];\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (indices.containsKey(node)) {\n                        continue;\n                    }\n                    this._stronglyConnectedComponents(excludeSingleItems, node, indices, lowLinks, connected, stack, 0);\n                }\n                return connected;\n            },\n\n            /**\n             * Returns whether this graph is acyclic.\n             * @returns {*}\n             */\n            isAcyclic: function() {\n                return Utils.isEmpty(this.findCycles());\n            },\n\n            /**\n             * Returns whether the given graph is a subgraph of this one.\n             * @param other Another graph instance.\n             */\n            isSubGraph: function(other) {\n                var otherArray = other.linearize();\n                var thisArray = this.linearize();\n                return Utils.all(otherArray, function(s) {\n                    return contains(thisArray, s);\n                });\n            },\n\n            /**\n             *  Makes an acyclic graph from the current (connected) one.\n             * * @returns {Array} The reversed links.\n             */\n            makeAcyclic: function() {\n                // if empty or almost empty\n                if (this.isEmpty() || this.nodes.length <= 1 || this.links.length <= 1) {\n                    return [];\n                }\n                // singular case of just two nodes\n                if (this.nodes.length == 2) {\n                    var result = [];\n                    if (this.links.length > 1) {\n                        var oneLink = this.links[0];\n                        var oneNode = oneLink.source;\n                        for (var i = 0, len = this.links.length; i < len; i++) {\n                            var link = this.links[i];\n                            if (link.source == oneNode) {\n                                continue;\n                            }\n                            var rev = link.reverse();\n                            result.push(rev);\n                        }\n                    }\n                    return result;\n                }\n\n                var copy = this.clone(true); // copy.nodeMap tells you the mapping\n                var N = this.nodes.length;\n\n                var intensityCatalog = new Dictionary();\n\n                /**\n                 * If there are both incoming and outgoing links this will return the flow intensity (out-in).\n                 * Otherwise the node acts as a flow source with N specifying the (equal) intensity.\n                 * @param node\n                 * @returns {number}\n                 */\n                var flowIntensity = function(node) {\n                    if (node.outgoing.length === 0) {\n                        return (2 - N);\n                    }\n                    else if (node.incoming.length === 0) {\n                        return (N - 2);\n                    }\n                    else {\n                        return node.outgoing.length - node.incoming.length;\n                    }\n                };\n\n                /**\n                 * Collects the nodes with the same intensity.\n                 * @param node\n                 * @param intensityCatalog\n                 */\n                var catalogEqualIntensity = function(node, intensityCatalog) {\n                    var intensity = flowIntensity(node, N);\n                    if (!intensityCatalog.containsKey(intensity)) {\n                        intensityCatalog.set(intensity, []);\n                    }\n                    intensityCatalog.get(intensity).push(node);\n                };\n\n                Utils.forEach(copy.nodes, function(v) {\n                    catalogEqualIntensity(v, intensityCatalog);\n                });\n\n                var sourceStack = [];\n                var targetStack = [];\n\n                while (copy.nodes.length > 0) {\n                    var source, target, intensity;\n                    if (intensityCatalog.containsKey(2 - N)) {\n                        var targets = intensityCatalog.get(2 - N); // nodes without outgoings\n                        while (targets.length > 0) {\n                            target = targets.pop();\n                            for (var li = 0; li < target.links.length; li++) {\n                                var targetLink = target.links[li];\n                                source = targetLink.getComplement(target);\n                                intensity = flowIntensity(source, N);\n                                Utils.remove(intensityCatalog.get(intensity), source);\n                                source.removeLink(targetLink);\n                                catalogEqualIntensity(source, intensityCatalog);\n                            }\n                            copy._removeNode(target);\n                            targetStack.unshift(target);\n                        }\n                    }\n\n                    // move sources to sourceStack\n                    if (intensityCatalog.containsKey(N - 2)) {\n                        var sources = intensityCatalog.get(N - 2); // nodes without incomings\n                        while (sources.length > 0) {\n                            source = sources.pop();\n                            for (var si = 0; si < source.links.length; si++) {\n                                var sourceLink = source.links[si];\n                                target = sourceLink.getComplement(source);\n                                intensity = flowIntensity(target, N);\n                                Utils.remove(intensityCatalog.get(intensity), target);\n                                target.removeLink(sourceLink);\n                                catalogEqualIntensity(target, intensityCatalog);\n                            }\n                            sourceStack.push(source);\n                            copy._removeNode(source);\n                        }\n                    }\n\n                    if (copy.nodes.length > 0) {\n                        for (var k = N - 3; k > 2 - N; k--) {\n                            if (intensityCatalog.containsKey(k) &&\n                                intensityCatalog.get(k).length > 0) {\n                                var maxdiff = intensityCatalog.get(k);\n                                var v = maxdiff.pop();\n                                for (var ri = 0; ri < v.links.length; ri++) {\n                                    var ril = v.links[ri];\n                                    var u = ril.getComplement(v);\n                                    intensity = flowIntensity(u, N);\n                                    Utils.remove(intensityCatalog.get(intensity), u);\n                                    u.removeLink(ril);\n                                    catalogEqualIntensity(u, intensityCatalog);\n                                }\n                                sourceStack.push(v);\n                                copy._removeNode(v);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                sourceStack = sourceStack.concat(targetStack);\n\n                var vertexOrder = new Dictionary();\n                for (var kk = 0; kk < this.nodes.length; kk++) {\n                    vertexOrder.set(copy.nodeMap.get(sourceStack[kk]), kk);\n                }\n\n                var reversedEdges = [];\n                Utils.forEach(this.links, function(link) {\n                    if (vertexOrder.get(link.source) > vertexOrder.get(link.target)) {\n                        link.reverse();\n                        reversedEdges.push(link);\n                    }\n                });\n                return reversedEdges;\n            }\n        });\n\n        /**\n         * A collection of predefined graphs for demo and testing purposes.\n         */\n        Graph.Predefined = {\n            /**\n             * Eight-shapes graph all connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            EightGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->4\", \"4->1\", \"3->5\", \"5->6\", \"6->7\", \"7->3\"]);\n            },\n\n            /**\n             * Creates a typical mindmap diagram.\n             * @returns {*}\n             * @constructor\n             */\n            Mindmap: function() {\n                return Graph.Utils.parse([\"0->1\", \"0->2\", \"0->3\", \"0->4\", \"0->5\", \"1->6\", \"1->7\", \"7->8\", \"2->9\", \"9->10\", \"9->11\", \"3->12\",\n                    \"12->13\", \"13->14\", \"4->15\", \"4->16\", \"15->17\", \"15->18\", \"18->19\", \"18->20\", \"14->21\", \"14->22\", \"5->23\", \"23->24\", \"23->25\", \"6->26\"]);\n            },\n\n            /**\n             * Three nodes connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            ThreeGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->1\"]);\n            },\n\n            /**\n             * A tree with each node having two children.\n             * @param levels How many levels the binary tree should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            BinaryTree: function(levels) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 5;\n                }\n                return Graph.Utils.createBalancedTree(levels, 2);\n            },\n\n            /**\n             * A linear graph (discrete line segment).\n             * @param length How many segments (the node count is hence (length+1)).\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Linear: function(length) {\n                if (Utils.isUndefined(length)) {\n                    length = 10;\n                }\n                return Graph.Utils.createBalancedTree(length, 1);\n            },\n\n            /**\n             * A standard tree-graph with the specified levels and children (siblings) count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Tree: function(levels, siblingsCount) {\n                return Graph.Utils.createBalancedTree(levels, siblingsCount);\n            },\n\n            /**\n             * Creates a forest.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @param trees The amount of trees the forest should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Forest: function(levels, siblingsCount, trees) {\n                return Graph.Utils.createBalancedForest(levels, siblingsCount, trees);\n            },\n\n            /**\n             * A workflow-like graph with cycles.\n             * @returns {*}\n             * @constructor\n             */\n            Workflow: function() {\n                return Graph.Utils.parse(\n                    [\"0->1\", \"1->2\", \"2->3\", \"1->4\", \"4->3\", \"3->5\", \"5->6\", \"6->3\", \"6->7\", \"5->4\"]\n                );\n            },\n\n            /**\n             * A grid graph with the direction of the links avoiding cycles.\n             * Node count: (n+1).(m+1)\n             * Link count: n.(m+1) + m.(n+1)\n             * @param n Horizontal count of grid cells. If zero this will result in a linear graph.\n             * @param m Vertical count of grid cells. If zero this will result in a linear graph.\n             * @constructor\n             */\n            Grid: function(n, m) {\n                var g = new diagram.Graph();\n                if (n <= 0 && m <= 0) {\n                    return g;\n                }\n\n                for (var i = 0; i < n + 1; i++) {\n                    var previous = null;\n                    for (var j = 0; j < m + 1; j++) {\n                        // using x-y coordinates to name the nodes\n                        var node = new Node(i.toString() + \".\" + j.toString());\n                        g.addNode(node);\n                        if (previous) {\n                            g.addLink(previous, node);\n                        }\n                        if (i > 0) {\n                            var left = g.getNode((i - 1).toString() + \".\" + j.toString());\n                            g.addLink(left, node);\n                        }\n                        previous = node;\n                    }\n                }\n                return g;\n            }\n\n        };\n\n        /**\n         * Graph generation and other utilities.\n         */\n        Graph.Utils = {\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"id177\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            parse: function(graphString) {\n\n                var previousLink, graph = new diagram.Graph(), parts = graphString.slice();\n                for (var i = 0, len = parts.length; i < len; i++) {\n                    var part = parts[i];\n                    if (Utils.isString(part)) // link spec\n                    {\n                        if (part.indexOf(\"->\") < 0) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        var p = part.split(\"->\");\n                        if (p.length != 2) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        previousLink = new Link(p[0], p[1]);\n                        graph.addLink(previousLink);\n                    }\n                    if (Utils.isObject(part)) {\n                        if (!previousLink) {\n                            throw \"Specification found before Link definition.\";\n                        }\n                        kendo.deepExtend(previousLink, part);\n                    }\n                }\n                return graph;\n            },\n\n            /**\n             * Returns a linearized representation of the given Graph.\n             * See also the Graph.Utils.parse method for the inverse operation.\n             */\n            linearize: function(graph, addIds) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"Expected an instance of a Graph object in slot one.\";\n                }\n                if (Utils.isUndefined(addIds)) {\n                    addIds = false;\n                }\n                var lin = [];\n                for (var i = 0, len = graph.links.length; i < len; i++) {\n                    var link = graph.links[i];\n                    lin.push(link.source.id + \"->\" + link.target.id);\n                    if (addIds) {\n                        lin.push({ id: link.id });\n                    }\n                }\n                return lin;\n            },\n\n            /**\n             * The method used by the diagram creation to instantiate a shape.\n             * @param kendoDiagram The Kendo diagram where the diagram will be created.\n             * @param p The position at which to place the shape.\n             * @param shapeDefaults Optional Shape options.\n             * @param id Optional identifier of the shape.\n             * @returns {*}\n             * @private\n             */\n            _addShape: function(kendoDiagram, p, id, shapeDefaults) {\n                if (Utils.isUndefined(p)) {\n                    p = new ExtendedPoint(0, 0);\n                }\n\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                }\n\n                shapeDefaults = kendo.deepExtend({\n                    width: 20,\n                    height: 20,\n                    id: id,\n                    radius: 10,\n                    fill: \"#778899\",\n                    data: \"circle\",\n                    undoable: false,\n                    x: p.x,\n                    y: p.y\n                }, shapeDefaults);\n\n                return kendoDiagram.addShape(shapeDefaults);\n            },\n            /**\n             * The method used by the diagram creation to instantiate a connection.\n             * @param diagram he Kendo diagram where the diagram will be created.\n             * @param from The source shape.\n             * @param to The target shape.\n             * @param options Optional Connection options.\n             * @returns {*}\n             * @private\n             */\n            _addConnection: function(diagram, from, to, options) {\n                return diagram.connect(from, to, options);\n            },\n\n            /**\n             * Creates a diagram from the given Graph.\n             * @param diagram The Kendo diagram where the diagram will be created.\n             * @param graph The graph structure defining the diagram.\n             */\n            createDiagramFromGraph: function(diagram, graph, doLayout, randomSize) {\n\n                if (Utils.isUndefined(diagram)) {\n                    throw \"The diagram surface is undefined.\";\n                }\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph specification defined.\";\n                }\n                if (Utils.isUndefined(doLayout)) {\n                    doLayout = true;\n                }\n                if (Utils.isUndefined(randomSize)) {\n                    randomSize = false;\n                }\n\n                var width = diagram.element.clientWidth || 200;\n                var height = diagram.element.clientHeight || 200;\n                var map = [], node, shape;\n                for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                    node = graph.nodes[i];\n                    var p = node.position;\n                    if (Utils.isUndefined(p)) {\n                        if (Utils.isDefined(node.x) && Utils.isDefined(node.y)) {\n                            p = new ExtendedPoint(node.x, node.y);\n                        }\n                        else {\n                            p = new ExtendedPoint(Utils.randomInteger(10, width - 20), Utils.randomInteger(10, height - 20));\n                        }\n                    }\n                    var opt = {};\n\n                    if (node.id === \"0\") {\n                        /* kendo.deepExtend(opt,\n                         {\n                         fill: \"Orange\",\n                         data: 'circle',\n                         width: 100,\n                         height: 100,\n                         center: new Point(50, 50)\n                         });*/\n                    }\n                    else if (randomSize) {\n                        kendo.deepExtend(opt, {\n                            width: Math.random() * 150 + 20,\n                            height: Math.random() * 80 + 50,\n                            data: 'rectangle',\n                            fill: {\n                                color: \"#778899\"\n                            }\n                        });\n                    }\n\n                    shape = this._addShape(diagram, p, node.id, opt);\n                    //shape.content(node.id);\n\n                    var bounds = shape.bounds();\n                    if (Utils.isDefined(bounds)) {\n                        node.x = bounds.x;\n                        node.y = bounds.y;\n                        node.width = bounds.width;\n                        node.height = bounds.height;\n                    }\n                    map[node.id] = shape;\n                }\n                for (var gli = 0; gli < graph.links.length; gli++) {\n                    var link = graph.links[gli];\n                    var sourceShape = map[link.source.id];\n                    if (Utils.isUndefined(sourceShape)) {\n                        continue;\n                    }\n                    var targetShape = map[link.target.id];\n                    if (Utils.isUndefined(targetShape)) {\n                        continue;\n                    }\n                    this._addConnection(diagram, sourceShape, targetShape, { id: link.id });\n\n                }\n                if (doLayout) {\n                    var l = new diagram.SpringLayout(diagram);\n                    l.layoutGraph(graph, { limitToView: false });\n                    for (var shi = 0; shi < graph.nodes.length; shi++) {\n                        node = graph.nodes[shi];\n                        shape = map[node.id];\n                        shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                    }\n                }\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             */\n            createBalancedTree: function(levels, siblingsCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0) {\n                    return g;\n                }\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                g.root = root;\n                lastAdded.push(root);\n                for (var i = 0; i < levels; i++) {\n                    news = [];\n                    for (var j = 0; j < lastAdded.length; j++) {\n                        var parent = lastAdded[j];\n                        for (var k = 0; k < siblingsCount; k++) {\n                            var item = new Node((++counter).toString());\n                            g.addLink(parent, item);\n                            news.push(item);\n                        }\n                    }\n                    lastAdded = news;\n                }\n                return g;\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @param treeCount The number of trees the forest should have.\n             */\n            createBalancedForest: function(levels, siblingsCount, treeCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n                if (Utils.isUndefined(treeCount)) {\n                    treeCount = 5;\n                }\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0 || treeCount <= 0) {\n                    return g;\n                }\n\n                for (var t = 0; t < treeCount; t++) {\n                    var root = new Node((++counter).toString());\n                    g.addNode(root);\n                    lastAdded = [root];\n                    for (var i = 0; i < levels; i++) {\n                        news = [];\n                        for (var j = 0; j < lastAdded.length; j++) {\n                            var parent = lastAdded[j];\n                            for (var k = 0; k < siblingsCount; k++) {\n                                var item = new Node((++counter).toString());\n                                g.addLink(parent, item);\n                                news.push(item);\n                            }\n                        }\n                        lastAdded = news;\n                    }\n                }\n                return g;\n            },\n\n            /**\n             * Creates a random graph (uniform distribution) with the specified amount of nodes.\n             * @param nodeCount The amount of nodes the random graph should have.\n             * @param maxIncidence The maximum allowed degree of the nodes.\n             * @param isTree Whether the return graph should be a tree (default: false).\n             * @returns {diagram.Graph}\n             */\n            createRandomConnectedGraph: function(nodeCount, maxIncidence, isTree) {\n\n                /* Swa's Mathematica export of random Bernoulli graphs\n                 gr[n_,p_]:=Module[{g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]},\n                 While[Not[ConnectedGraphQ[g]],g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]];g];\n                 project[a_]:=(\"\\\"\"<>ToString[Part[#,1]]<>\"->\"<>ToString[Part[#,2]]<>\"\\\"\")&     @ a;\n                 export[g_]:=project/@ EdgeList[g]\n                 g = gr[12,.1]\n                 export [g]\n                 */\n\n                if (Utils.isUndefined(nodeCount)) {\n                    nodeCount = 40;\n                }\n                if (Utils.isUndefined(maxIncidence)) {\n                    maxIncidence = 4;\n                }\n                if (Utils.isUndefined(isTree)) {\n                    isTree = false;\n                }\n\n                var g = new diagram.Graph(), counter = -1;\n                if (nodeCount <= 0) {\n                    return g;\n                }\n\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                if (nodeCount === 1) {\n                    return g;\n                }\n                if (nodeCount > 1) {\n                    // random tree\n                    for (var i = 1; i < nodeCount; i++) {\n                        var poolNode = g.takeRandomNode([], maxIncidence);\n                        if (!poolNode) {\n                            //failed to find one so the graph will have less nodes than specified\n                            break;\n                        }\n                        var newNode = g.addNode(i.toString());\n                        g.addLink(poolNode, newNode);\n                    }\n                    if (!isTree && nodeCount > 1) {\n                        var randomAdditions = Utils.randomInteger(1, nodeCount);\n                        for (var ri = 0; ri < randomAdditions; ri++) {\n                            var n1 = g.takeRandomNode([], maxIncidence);\n                            var n2 = g.takeRandomNode([], maxIncidence);\n                            if (n1 && n2 && !g.areConnected(n1, n2)) {\n                                g.addLink(n1, n2);\n                            }\n                        }\n                    }\n                    return g;\n                }\n            },\n\n            /**\n             * Generates a random diagram.\n             * @param diagram The host diagram.\n             * @param shapeCount The number of shapes the random diagram should contain.\n             * @param maxIncidence The maximum degree the shapes can have.\n             * @param isTree Whether the generated diagram should be a tree\n             * @param layoutType The optional layout type to apply after the diagram is generated.\n             */\n            randomDiagram: function(diagram, shapeCount, maxIncidence, isTree, randomSize) {\n                var g = kendo.dataviz.diagram.Graph.Utils.createRandomConnectedGraph(shapeCount, maxIncidence, isTree);\n                Graph.Utils.createDiagramFromGraph(diagram, g, false, randomSize);\n            }\n        };\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Point: ExtendedPoint,\n            Intersect: Intersect,\n            Geometry: Geometry,\n            Rect: Rect,\n            Size: Size,\n            RectAlign: RectAlign,\n            Matrix: Matrix,\n            MatrixVector: MatrixVector,\n            normalVariable: normalVariable,\n            randomId: randomId,\n            Dictionary: Dictionary,\n            HashTable: HashTable,\n            Queue: Queue,\n            Set: Set,\n            Node: Node,\n            Link: Link,\n            Graph: Graph,\n            PathDefiner: PathDefiner\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            Point = diagram.Point,\n            Rect = diagram.Rect,\n            Matrix = diagram.Matrix,\n            Utils = diagram.Utils,\n            isNumber = Utils.isNumber,\n            isString = Utils.isString,\n            MatrixVector = diagram.MatrixVector,\n\n            g = kendo.geometry,\n            d = kendo.drawing,\n\n            defined = d.util.defined,\n\n            inArray = $.inArray;\n\n        // Constants ==============================================================\n        var TRANSPARENT = \"transparent\",\n            Markers = {\n                none: \"none\",\n                arrowStart: \"ArrowStart\",\n                filledCircle: \"FilledCircle\",\n                arrowEnd: \"ArrowEnd\"\n            },\n            FULL_CIRCLE_ANGLE = 360,\n            START = \"start\",\n            END = \"end\",\n            WIDTH = \"width\",\n            HEIGHT = \"height\",\n            X = \"x\",\n            Y = \"y\";\n\n        diagram.Markers = Markers;\n\n        function diffNumericOptions(options, fields) {\n            var elementOptions = this.options;\n            var hasChanges = false;\n            var value, field;\n            for (var i = 0; i < fields.length; i++) {\n                field = fields[i];\n                value = options[field];\n                if (isNumber(value) && elementOptions[field] !== value) {\n                    elementOptions[field] = value;\n                    hasChanges = true;\n                }\n            }\n\n            return hasChanges;\n        }\n\n        var Scale = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrix: function() {\n                return Matrix.scaling(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"scale({0},{1})\", this.x, this.y);\n            },\n            invert: function() {\n                return new Scale(1 / this.x, 1 / this.y);\n            }\n        });\n\n        var Translation = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrixVector: function() {\n                return new MatrixVector(0, 0, 0, 0, this.x, this.y);\n            },\n            toMatrix: function() {\n                return Matrix.translation(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"translate({0},{1})\", this.x, this.y);\n            },\n            plus: function(delta) {\n                this.x += delta.x;\n                this.y += delta.y;\n            },\n            times: function(factor) {\n                this.x *= factor;\n                this.y *= factor;\n            },\n            length: function() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            },\n            normalize: function() {\n                if (this.Length === 0) {\n                    return;\n                }\n                this.times(1 / this.length());\n            },\n            invert: function() {\n                return new Translation(-this.x, -this.y);\n            }\n        });\n\n        var Rotation = Class.extend({\n            init: function(angle, x, y) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.angle = angle;\n            },\n            toString: function() {\n                if (this.x && this.y) {\n                    return kendo.format(\"rotate({0},{1},{2})\", this.angle, this.x, this.y);\n                } else {\n                    return kendo.format(\"rotate({0})\", this.angle);\n                }\n            },\n            toMatrix: function() {\n                return Matrix.rotation(this.angle, this.x, this.y); // T*R*T^-1\n            },\n            center: function() {\n                return new Point(this.x, this.y);\n            },\n            invert: function() {\n                return new Rotation(FULL_CIRCLE_ANGLE - this.angle, this.x, this.y);\n            }\n        });\n\n        Rotation.ZERO = new Rotation(0);\n\n        Rotation.create = function(rotation) {\n            return new Rotation(rotation.angle, rotation.x, rotation.y);\n        };\n\n        Rotation.parse = function(str) {\n            var values = str.slice(1, str.length - 1).split(\",\"),\n                angle = values[0],\n                x = values[1],\n                y = values[2];\n            var rotation = new Rotation(angle, x, y);\n            return rotation;\n        };\n\n        var CompositeTransform = Class.extend({\n            init: function(x, y, scaleX, scaleY, angle, center) {\n                this.translate = new Translation(x, y);\n                if (scaleX !== undefined$1 && scaleY !== undefined$1) {\n                    this.scale = new Scale(scaleX, scaleY);\n                }\n                if (angle !== undefined$1) {\n                    this.rotate = center ? new Rotation(angle, center.x, center.y) : new Rotation(angle);\n                }\n            },\n            toString: function() {\n                var toString = function(transform) {\n                    return transform ? transform.toString() : \"\";\n                };\n\n                return toString(this.translate) +\n                    toString(this.rotate) +\n                    toString(this.scale);\n            },\n\n            render: function(visual) {\n                visual._transform = this;\n                visual._renderTransform();\n            },\n\n            toMatrix: function() {\n                var m = Matrix.unit();\n\n                if (this.translate) {\n                    m = m.times(this.translate.toMatrix());\n                }\n                if (this.rotate) {\n                    m = m.times(this.rotate.toMatrix());\n                }\n                if (this.scale) {\n                    m = m.times(this.scale.toMatrix());\n                }\n                return m;\n            },\n            invert: function() {\n                var rotate = this.rotate ? this.rotate.invert() : undefined$1,\n                    rotateMatrix = rotate ? rotate.toMatrix() : Matrix.unit(),\n                    scale = this.scale ? this.scale.invert() : undefined$1,\n                    scaleMatrix = scale ? scale.toMatrix() : Matrix.unit();\n\n                var translatePoint = new Point(-this.translate.x, -this.translate.y);\n                translatePoint = rotateMatrix.times(scaleMatrix).apply(translatePoint);\n                var translate = new Translation(translatePoint.x, translatePoint.y);\n\n                var transform = new CompositeTransform();\n                transform.translate = translate;\n                transform.rotate = rotate;\n                transform.scale = scale;\n\n                return transform;\n            }\n        });\n\n        var AutoSizeableMixin = {\n            _setScale: function() {\n                var options = this.options;\n                var originWidth = this._originWidth;\n                var originHeight = this._originHeight;\n                var scaleX = options.width / originWidth;\n                var scaleY = options.height / originHeight;\n\n                if (!isNumber(scaleX)) {\n                    scaleX = 1;\n                }\n                if (!isNumber(scaleY)) {\n                    scaleY = 1;\n                }\n\n                this._transform.scale = new Scale(scaleX, scaleY);\n            },\n\n            _setTranslate: function() {\n                var options = this.options;\n                var x = options.x || 0;\n                var y = options.y || 0;\n                this._transform.translate = new Translation(x, y);\n            },\n\n            _initSize: function() {\n                var options = this.options;\n                var transform = false;\n                if (options.autoSize !== false && (defined(options.width) || defined(options.height))) {\n                    this._measure(true);\n                    this._setScale();\n                    transform = true;\n                }\n\n                if (defined(options.x) || defined(options.y)) {\n                    this._setTranslate();\n                    transform = true;\n                }\n\n                if (transform) {\n                    this._renderTransform();\n                }\n            },\n\n            _updateSize: function(options) {\n                var update = false;\n\n                if (this.options.autoSize !== false && this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                    update = true;\n                    this._measure(true);\n                    this._setScale();\n                }\n\n                if (this._diffNumericOptions(options, [X, Y])) {\n                    update = true;\n                    this._setTranslate();\n                }\n\n                if (update) {\n                    this._renderTransform();\n                }\n\n                return update;\n            }\n        };\n\n        var Element = Class.extend({\n            init: function(options) {\n                var element = this;\n                element.options = deepExtend({}, element.options, options);\n                element.id = element.options.id;\n                element._originSize = Rect.empty();\n                element._transform = new CompositeTransform();\n            },\n\n            visible: function(value) {\n                return this.drawingContainer().visible(value);\n            },\n\n            redraw: function(options) {\n                if (options && options.id) {\n                     this.id = options.id;\n                }\n            },\n\n            position: function(x, y) {\n                var options = this.options;\n                if (!defined(x)) {\n                   return new Point(options.x, options.y);\n                }\n\n                if (defined(y)) {\n                    options.x = x;\n                    options.y = y;\n                } else if (x instanceof Point) {\n                    options.x = x.x;\n                    options.y = x.y;\n                }\n\n                this._transform.translate = new Translation(options.x, options.y);\n                this._renderTransform();\n            },\n\n            rotate: function(angle, center) {\n                if (defined(angle)) {\n                    this._transform.rotate = new Rotation(angle, center.x, center.y);\n                    this._renderTransform();\n                }\n                return this._transform.rotate || Rotation.ZERO;\n            },\n\n            drawingContainer: function() {\n                return this.drawingElement;\n            },\n\n            _renderTransform: function() {\n                var matrix = this._transform.toMatrix();\n                this.drawingContainer().transform(new g.Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f));\n            },\n\n            _hover: function() {},\n\n            _diffNumericOptions: diffNumericOptions,\n\n            _measure: function(force) {\n                var rect;\n                if (!this._measured || force) {\n                    var box = this._boundingBox() || new g.Rect();\n                    var startPoint = box.topLeft();\n                    rect = new Rect(startPoint.x, startPoint.y, box.width(), box.height());\n                    this._originSize = rect;\n                    this._originWidth = rect.width;\n                    this._originHeight = rect.height;\n                    this._measured = true;\n                } else {\n                    rect = this._originSize;\n                }\n                return rect;\n            },\n\n            _boundingBox: function() {\n                return this.drawingElement.rawBBox();\n            }\n        });\n\n        var VisualBase = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                options = this.options;\n                options.fill = normalizeDrawingOptions(options.fill);\n                options.stroke = normalizeDrawingOptions(options.stroke);\n            },\n\n            options: {\n                stroke: {\n                    color: \"gray\",\n                    width: 1\n                },\n                fill: {\n                    color: TRANSPARENT\n                }\n            },\n\n            fill: function(color, opacity) {\n                this._fill({\n                    color: getColor(color),\n                    opacity: opacity\n                });\n            },\n\n            stroke: function(color, width, opacity) {\n                this._stroke({\n                    color: getColor(color),\n                    width: width,\n                    opacity: opacity\n                });\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var stroke = options.stroke;\n                    var fill = options.fill;\n                    if (stroke) {\n                        this._stroke(normalizeDrawingOptions(stroke));\n                    }\n                    if (fill) {\n                        this._fill(normalizeDrawingOptions(fill));\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _hover: function(show) {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var hover = options.hover;\n\n                if (hover && hover.fill) {\n                    var fill = show ? normalizeDrawingOptions(hover.fill) : options.fill;\n                    drawingElement.fill(fill.color, fill.opacity);\n                }\n            },\n\n            _stroke: function(strokeOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    stroke: strokeOptions\n                });\n\n                strokeOptions = options.stroke;\n\n                var stroke = null;\n                if (strokeOptions.width > 0) {\n                    stroke = {\n                        color: strokeOptions.color,\n                        width: strokeOptions.width,\n                        opacity: strokeOptions.opacity,\n                        dashType: strokeOptions.dashType\n                    };\n                }\n\n                this.drawingElement.options.set(\"stroke\", stroke);\n            },\n\n            _fill: function(fillOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    fill: fillOptions || {}\n                });\n                var fill = options.fill;\n\n                if (fill.gradient) {\n                    var gradient = fill.gradient;\n                    var GradientClass = (gradient.type === \"radial\" ? d.RadialGradient : d.LinearGradient);\n                    this.drawingElement.fill(new GradientClass(gradient));\n                } else {\n                    this.drawingElement.fill(fill.color, fill.opacity);\n                }\n            }\n        });\n\n        var TextBlock = VisualBase.extend({\n            init: function(options) {\n                options = this._textColor(options);\n                VisualBase.fn.init.call(this, options);\n\n                this._font();\n                this._initText();\n                this._initSize();\n            },\n\n            options: {\n                fontSize: 15,\n                fontFamily: \"sans-serif\",\n                stroke: {\n                    width: 0\n                },\n                fill: {\n                    color: \"black\"\n                },\n                autoSize: true\n            },\n\n            _initText: function() {\n                var options = this.options;\n\n                this.drawingElement = new d.Text(defined(options.text) ? options.text : \"\", new g.Point(), {\n                    font: options.font\n                });\n\n                this._fill();\n                this._stroke();\n            },\n\n            _textColor: function(options) {\n                if (options && options.color) {\n                    options = deepExtend({}, options, {\n                        fill: {\n                            color: options.color\n                        }\n                    });\n                }\n                return options;\n            },\n\n            _font: function() {\n                var options = this.options;\n                if (options.fontFamily && defined(options.fontSize)) {\n                    var fontOptions = [];\n\n                    if (options.fontStyle) {\n                        fontOptions.push(options.fontStyle);\n                    }\n\n                    if (options.fontWeight) {\n                        fontOptions.push(options.fontWeight);\n                    }\n\n                    fontOptions.push(options.fontSize + (isNumber(options.fontSize) ? \"px\" : \"\"));\n                    fontOptions.push(options.fontFamily);\n\n                    options.font = fontOptions.join(\" \");\n                } else {\n                    delete options.font;\n                }\n            },\n\n            content: function(text) {\n                return this.drawingElement.content(text);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var sizeChanged = false;\n                    var textOptions = this.options;\n\n                    options = this._textColor(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (options.fontFamily || defined(options.fontSize) || options.fontStyle || options.fontWeight) {\n                        deepExtend(textOptions, {\n                            fontFamily: options.fontFamily,\n                            fontSize: options.fontSize,\n                            fontStyle: options.fontStyle,\n                            fontWeight: options.fontWeight\n                        });\n                        this._font();\n                        this.drawingElement.options.set(\"font\", textOptions.font);\n                        sizeChanged = true;\n                    }\n\n                    if (options.text) {\n                        this.content(options.text);\n                        sizeChanged = true;\n                    }\n\n                    if (!this._updateSize(options) && sizeChanged) {\n                        this._initSize();\n                    }\n                }\n            }\n        });\n\n        deepExtend(TextBlock.fn, AutoSizeableMixin);\n\n        var Rectangle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initPath();\n                this._setPosition();\n            },\n\n            _setPosition: function() {\n                var options = this.options;\n                var x = options.x;\n                var y = options.y;\n                if (defined(x) || defined(y)) {\n                    this.position(x || 0, y || 0);\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                        this._drawPath();\n                    }\n                    if (this._diffNumericOptions(options, [X, Y])) {\n                        this._setPosition();\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke,\n                    closed: true\n                });\n\n                this._fill();\n                this._drawPath();\n            },\n\n            _drawPath: function() {\n                var drawingElement = this.drawingElement;\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var width = sizeOptions.width;\n                var height = sizeOptions.height;\n\n                drawingElement.segments.elements([\n                    createSegment(0, 0),\n                    createSegment(width, 0),\n                    createSegment(width, height),\n                    createSegment(0, height)\n                ]);\n            }\n        });\n\n        var MarkerBase = VisualBase.extend({\n            init: function(options) {\n               VisualBase.fn.init.call(this, options);\n               var anchor = this.options.anchor;\n               this.anchor = new g.Point(anchor.x, anchor.y);\n               this.createElement();\n            },\n\n            options: {\n               stroke: {\n                    color: TRANSPARENT,\n                    width: 0\n               },\n               fill: {\n                    color: \"black\"\n               }\n            },\n\n            _transformToPath: function(point, path) {\n                var transform = path.transform();\n                if (point && transform) {\n                    point = point.transformCopy(transform);\n                }\n                return point;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.position) {\n                        this.options.position = options.position;\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            }\n        });\n\n        var CircleMarker = MarkerBase.extend({\n            options: {\n                radius: 4,\n                anchor: {\n                    x: 0,\n                    y: 0\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = new d.Circle(new g.Circle(this.anchor, options.radius), {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var options = this.options;\n                var position = options.position;\n                var segments = path.segments;\n                var targetSegment;\n                var point;\n\n                if (position == START) {\n                    targetSegment = segments[0];\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                }\n                if (targetSegment) {\n                    point = this._transformToPath(targetSegment.anchor(), path);\n                    this.drawingElement.transform(g.transform().translate(point.x, point.y));\n                }\n            }\n        });\n\n        var ArrowMarker = MarkerBase.extend({\n            options: {\n                path: \"M 0 0 L 10 5 L 0 10 L 3 5 z\" ,\n                anchor: {\n                    x: 10,\n                    y: 5\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = d.Path.parse(options.path, {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var points = this._linePoints(path);\n                var start = points.start;\n                var end = points.end;\n                var transform = g.transform();\n                if (start) {\n                    transform.rotate(lineAngle(start, end), end);\n                }\n\n                if (end) {\n                    var anchor = this.anchor;\n                    var translate = end.clone().translate(-anchor.x, -anchor.y);\n                    transform.translate(translate.x, translate.y);\n                }\n                this.drawingElement.transform(transform);\n            },\n\n            _linePoints: function(path) {\n                var options = this.options;\n                var segments = path.segments;\n                var startPoint, endPoint, targetSegment;\n                if (options.position == START) {\n                    targetSegment = segments[0];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlOut();\n                        var nextSegment = segments[1];\n                        if (!startPoint && nextSegment) {\n                            startPoint = nextSegment.anchor();\n                        }\n                    }\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlIn();\n                        var prevSegment = segments[segments.length - 2];\n                        if (!startPoint && prevSegment) {\n                            startPoint = prevSegment.anchor();\n                        }\n                    }\n                }\n                if (endPoint) {\n                    return {\n                        start: this._transformToPath(startPoint, path),\n                        end: this._transformToPath(endPoint, path)\n                    };\n                }\n            }\n        });\n\n        var MarkerPathMixin = {\n            _getPath: function(position) {\n                var path = this.drawingElement;\n                if (path instanceof d.MultiPath) {\n                    if (position == START) {\n                        path = path.paths[0];\n                    } else {\n                        path = path.paths[path.paths.length - 1];\n                    }\n                }\n                if (path && path.segments.length) {\n                    return path;\n                }\n            },\n\n            _normalizeMarkerOptions: function(options) {\n                var startCap = options.startCap;\n                var endCap = options.endCap;\n\n                if (isString(startCap)) {\n                    options.startCap = {\n                        type: startCap\n                    };\n                }\n\n                if (isString(endCap)) {\n                    options.endCap = {\n                        type: endCap\n                    };\n                }\n            },\n\n            _removeMarker: function(position) {\n                var marker = this._markers[position];\n                if (marker) {\n                    this.drawingContainer().remove(marker.drawingElement);\n                    delete this._markers[position];\n                }\n            },\n\n            _createMarkers: function() {\n                var options = this.options;\n                this._normalizeMarkerOptions(options);\n\n                this._markers = {};\n                this._markers[START] = this._createMarker(options.startCap, START);\n                this._markers[END] = this._createMarker(options.endCap, END);\n            },\n\n            _createMarker: function(options, position) {\n                var type = (options || {}).type;\n                var path = this._getPath(position);\n                var markerType, marker;\n                if (!path) {\n                    this._removeMarker(position);\n                    return;\n                }\n\n                if (type == Markers.filledCircle) {\n                    markerType = CircleMarker;\n                } else if (type == Markers.arrowStart || type == Markers.arrowEnd) {\n                    markerType = ArrowMarker;\n                } else {\n                    this._removeMarker(position);\n                }\n                if (markerType) {\n                    marker = new markerType(deepExtend({}, options, {\n                        position: position\n                    }));\n                    marker.positionMarker(path);\n                    this.drawingContainer().append(marker.drawingElement);\n\n                    return marker;\n                }\n            },\n\n            _positionMarker: function(position) {\n                var marker = this._markers[position];\n\n                if (marker) {\n                    var path = this._getPath(position);\n                    if (path) {\n                        marker.positionMarker(path);\n                    } else {\n                        this._removeMarker(position);\n                    }\n                }\n            },\n\n            _capMap: {\n                start: \"startCap\",\n                end: \"endCap\"\n            },\n\n            _redrawMarker: function(pathChange, position, options) {\n                this._normalizeMarkerOptions(options);\n\n                var pathOptions = this.options;\n                var cap = this._capMap[position];\n                var pathCapType = (pathOptions[cap] || {}).type;\n                var optionsCap = options[cap];\n                var created = false;\n                if (optionsCap) {\n                    pathOptions[cap] = deepExtend({}, pathOptions[cap], optionsCap);\n                    if (optionsCap.type && pathCapType != optionsCap.type) {\n                        this._removeMarker(position);\n                        this._markers[position] = this._createMarker(pathOptions[cap], position);\n                        created = true;\n                    } else if (this._markers[position]) {\n                       this._markers[position].redraw(optionsCap);\n                    }\n                } else if (pathChange && !this._markers[position] && pathOptions[cap]) {\n                    this._markers[position] = this._createMarker(pathOptions[cap], position);\n                    created = true;\n                }\n                return created;\n            },\n\n            _redrawMarkers: function(pathChange, options) {\n                if (!this._redrawMarker(pathChange, START, options) && pathChange) {\n                    this._positionMarker(START);\n                }\n                if (!this._redrawMarker(pathChange, END, options) && pathChange) {\n                    this._positionMarker(END);\n                }\n            }\n        };\n\n        var Path = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._createElements();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: true\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            data: function(value) {\n                var options = this.options;\n                if (value) {\n                    if (options.data != value) {\n                       options.data = value;\n                       this._setData(value);\n                       this._initSize();\n                       this._redrawMarkers(true, {});\n                    }\n                } else {\n                    return options.data;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n\n                    var pathOptions = this.options;\n                    var data = options.data;\n\n                    if (defined(data) && pathOptions.data != data) {\n                        pathOptions.data = data;\n                        this._setData(data);\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._updateSize(options);\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _createElements: function() {\n                var options = this.options;\n\n                this.drawingElement = d.Path.parse(options.data || \"\", {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n                this._createMarkers();\n            },\n\n            _setData: function(data) {\n                var drawingElement = this.drawingElement;\n                var multipath = d.Path.parse(data || \"\");\n                var paths = multipath.paths.slice(0);\n                multipath.paths.elements([]);\n                drawingElement.paths.elements(paths);\n            }\n        });\n\n        deepExtend(Path.fn, AutoSizeableMixin);\n        deepExtend(Path.fn, MarkerPathMixin);\n\n        var Line = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    options = options || {};\n                    var from = options.from;\n                    var to = options.to;\n                    if (from) {\n                        this.options.from = from;\n                    }\n\n                    if (to) {\n                        this.options.to = to;\n                    }\n\n                    if (from || to) {\n                        this._drawPath();\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this._drawPath();\n                this.container.append(drawingElement);\n            },\n\n            _drawPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement;\n                var from = options.from || new Point();\n                var to = options.to || new Point();\n\n                drawingElement.segments.elements([\n                    createSegment(from.x, from.y),\n                    createSegment(to.x, to.y)\n                ]);\n            }\n        });\n\n        deepExtend(Line.fn, MarkerPathMixin);\n\n        var Polyline = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            points: function(points) {\n                var options = this.options;\n                if (points) {\n                    options.points = points;\n                    this._updatePath();\n                } else {\n                    return options.points;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var points = options.points;\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (points && this._pointsDiffer(points)) {\n                        this.points(points);\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n\n                if (options.points) {\n                    this._updatePath();\n                }\n            },\n\n            _pointsDiffer: function(points) {\n                var currentPoints = this.options.points;\n                var differ = currentPoints.length !== points.length;\n                if (!differ) {\n                    for (var i = 0; i < points.length; i++) {\n                        if (currentPoints[i].x !== points[i].x || currentPoints[i].y !== points[i].y) {\n                            differ = true;\n                            break;\n                        }\n                    }\n                }\n\n                return differ;\n            },\n\n            _updatePath: function() {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var points = options.points;\n                var segments = [];\n                var point;\n                for (var i = 0; i < points.length; i++) {\n                    point = points[i];\n                    segments.push(createSegment(point.x, point.y));\n                }\n\n                drawingElement.segments.elements(segments);\n            },\n\n            options: {\n                points: []\n            }\n        });\n\n        deepExtend(Polyline.fn, MarkerPathMixin);\n\n        var Image = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                this._initImage();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.source) {\n                        this.drawingElement.src(options.source);\n                    }\n\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                        this.drawingElement.rect(this._rect());\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _initImage: function() {\n                var options = this.options;\n                var rect = this._rect();\n\n                this.drawingElement = new d.Image(options.source, rect, {});\n            },\n\n            _rect: function() {\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var origin = new g.Point(sizeOptions.x, sizeOptions.y);\n                var size = new g.Size(sizeOptions.width, sizeOptions.height);\n\n                return new g.Rect(origin, size);\n            }\n        });\n\n        var Group = Element.extend({\n            init: function(options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Group();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: false\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                this.children.push(visual);\n                this._childrenChange = true;\n            },\n\n            remove: function(visual) {\n                if (this._remove(visual)) {\n                    this._childrenChange = true;\n                }\n            },\n\n            _remove: function(visual) {\n                var index = inArray(visual, this.children);\n                if (index >= 0) {\n                    this.drawingElement.removeAt(index);\n                    this.children.splice(index, 1);\n                    return true;\n                }\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n                this.children = [];\n                this._childrenChange = true;\n            },\n\n            toFront: function(visuals) {\n                var visual;\n\n                for (var i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    if (this._remove(visual)) {\n                        this.append(visual);\n                    }\n                }\n            },\n            //TO DO: add drawing group support for moving and inserting children\n            toBack: function(visuals) {\n                this._reorderChildren(visuals, 0);\n            },\n\n            toIndex: function(visuals, indices) {\n                this._reorderChildren(visuals, indices);\n            },\n\n            _reorderChildren: function(visuals, indices) {\n                var group = this.drawingElement;\n                var drawingChildren = group.children.slice(0);\n                var children = this.children;\n                var fixedPosition = isNumber(indices);\n                var i, index, toIndex, drawingElement, visual;\n\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    drawingElement = visual.drawingContainer();\n\n                    index = inArray(visual, children);\n                    if (index >= 0) {\n                        drawingChildren.splice(index, 1);\n                        children.splice(index, 1);\n\n                        toIndex = fixedPosition ? indices : indices[i];\n\n                        drawingChildren.splice(toIndex, 0, drawingElement);\n                        children.splice(toIndex, 0, visual);\n                    }\n                }\n                group.clear();\n                group.append.apply(group, drawingChildren);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (this._childrenChange) {\n                        this._childrenChange = false;\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                    } else {\n                        this._updateSize(options);\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _boundingBox: function() {\n                var children = this.children;\n                var boundingBox;\n                var visual, childBoundingBox;\n                for (var i = 0; i < children.length; i++) {\n                    visual = children[i];\n                    if (visual.visible() && visual._includeInBBox !== false) {\n                        childBoundingBox = visual.drawingContainer().clippedBBox(null);\n                        if (childBoundingBox) {\n                            if (boundingBox) {\n                                boundingBox = g.Rect.union(boundingBox, childBoundingBox);\n                            } else {\n                                boundingBox = childBoundingBox;\n                            }\n                        }\n                    }\n                }\n\n                return boundingBox;\n            }\n        });\n\n        deepExtend(Group.fn, AutoSizeableMixin);\n\n        var Layout = Group.extend({\n            init: function(rect, options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Layout(toDrawingRect(rect), options);\n                this._initSize();\n            },\n\n            rect: function(rect) {\n                if (rect) {\n                    this.drawingElement.rect(toDrawingRect(rect));\n                } else {\n                    var drawingRect = this.drawingElement.rect();\n                    if (drawingRect) {\n                        return new Rect(drawingRect.origin.x, drawingRect.origin.y, drawingRect.size.width, drawingRect.size.height);\n                    }\n                }\n            },\n\n            reflow: function() {\n                this.drawingElement.reflow();\n            },\n\n            redraw: function(options) {\n                kendo.deepExtend(this.drawingElement.options, options);\n                Group.fn.redraw.call(this, options);\n            }\n        });\n\n        var Circle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initCircle();\n                this._initSize();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var circleOptions = this.options;\n\n                    if (options.center) {\n                        deepExtend(circleOptions, {\n                            center: options.center\n                        });\n                        this._center.move(circleOptions.center.x, circleOptions.center.y);\n                    }\n\n                    if (this._diffNumericOptions(options, [\"radius\"])) {\n                        this._circle.setRadius(circleOptions.radius);\n                    }\n\n                    this._updateSize(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initCircle: function() {\n                var options = this.options;\n                var width = options.width;\n                var height = options.height;\n                var radius = options.radius;\n                if (!defined(radius)) {\n                    if (!defined(width)) {\n                        width = height;\n                    }\n                    if (!defined(height)) {\n                        height = width;\n                    }\n                    options.radius = radius = Math.min(width, height) / 2;\n                }\n\n                var center = options.center || { x: radius, y: radius };\n                this._center = new g.Point(center.x, center.y);\n                this._circle = new g.Circle(this._center, radius);\n                this.drawingElement = new d.Circle(this._circle, {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n            }\n        });\n        deepExtend(Circle.fn, AutoSizeableMixin);\n\n        var Canvas = Class.extend({\n            init: function(element, options) {\n                options = options || {};\n                this.element = element;\n                this.surface = d.Surface.create(element, options);\n                if (kendo.isFunction(this.surface.translate)) {\n                    this.translate = this._translate;\n                }\n\n                this.drawingElement = new d.Group();\n                this._viewBox = new Rect(0, 0, options.width, options.height);\n                this.size(this._viewBox);\n            },\n\n            bounds: function() {\n                var box = this.drawingElement.clippedBBox();\n                return new Rect(0, 0, box.width(), box.height());\n            },\n\n            size: function(size) {\n                var viewBox = this._viewBox;\n                if (defined(size)) {\n                    viewBox.width = size.width;\n                    viewBox.height = size.height;\n                    this.surface.setSize(size);\n                }\n                return {\n                    width: viewBox.width,\n                    height: viewBox.height\n                };\n            },\n\n            _translate: function(x, y) {\n                var viewBox = this._viewBox;\n                if (defined(x) && defined(y)) {\n                    viewBox.x = x;\n                    viewBox.y = y;\n                    this.surface.translate({ x: x, y: y });\n                }\n                return {\n                    x: viewBox.x,\n                    y: viewBox.y\n                };\n            },\n\n            draw: function() {\n                this.surface.draw(this.drawingElement);\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                return this;\n            },\n\n            remove: function(visual) {\n                this.drawingElement.remove(visual.drawingContainer());\n            },\n\n            insertBefore: function() {\n\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n            },\n\n            destroy: function(clearHtml) {\n                this.surface.destroy();\n                if (clearHtml) {\n                    $(this.element).remove();\n                }\n            }\n        });\n\n        // Helper functions ===========================================\n\n        function sizeOptionsOrDefault(options) {\n            return {\n                x: options.x || 0,\n                y: options.y || 0,\n                width: options.width || 0,\n                height: options.height || 0\n            };\n        }\n\n        function normalizeDrawingOptions(options) {\n            if (options) {\n                var drawingOptions = options;\n\n                if (isString(drawingOptions)) {\n                    drawingOptions = {\n                        color: drawingOptions\n                    };\n                }\n\n                if (drawingOptions.color) {\n                    drawingOptions.color = getColor(drawingOptions.color);\n                }\n                return drawingOptions;\n            }\n        }\n\n        function getColor(value) {\n            var color;\n            if (value != TRANSPARENT) {\n                color = new d.Color(value).toHex();\n            } else {\n                color = value;\n            }\n            return color;\n        }\n\n        function lineAngle(p1, p2) {\n            var xDiff = p2.x - p1.x;\n            var yDiff = p2.y - p1.y;\n            var angle = d.util.deg(Math.atan2(yDiff, xDiff));\n            return angle;\n        }\n\n        function createSegment(x, y) {\n            return new g.Segment(new g.Point(x, y));\n        }\n\n        function toDrawingRect(rect) {\n            if (rect) {\n                return new g.Rect([rect.x, rect.y], [rect.width, rect.height]);\n            }\n        }\n\n        // Exports ================================================================\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            diffNumericOptions: diffNumericOptions,\n            Element: Element,\n            Scale: Scale,\n            Translation: Translation,\n            Rotation: Rotation,\n            Circle: Circle,\n            Group: Group,\n            Rectangle: Rectangle,\n            Canvas: Canvas,\n            Path: Path,\n            Layout: Layout,\n            Line: Line,\n            MarkerBase: MarkerBase,\n            ArrowMarker: ArrowMarker,\n            CircleMarker: CircleMarker,\n            Polyline: Polyline,\n            CompositeTransform: CompositeTransform,\n            TextBlock: TextBlock,\n            Image: Image,\n            VisualBase: VisualBase\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var kendo = window.kendo,\n                dataviz = kendo.dataviz,\n                diagram = dataviz.diagram,\n                Class = kendo.Class,\n                Group = diagram.Group,\n                Rect = diagram.Rect,\n                Rectangle = diagram.Rectangle,\n                Utils = diagram.Utils,\n                isUndefined = Utils.isUndefined,\n                Point = diagram.Point,\n                Circle = diagram.Circle,\n                Ticker = diagram.Ticker,\n                deepExtend = kendo.deepExtend,\n                Movable = kendo.ui.Movable,\n                util = kendo.drawing.util,\n                defined = util.defined,\n                inArray = $.inArray;\n\n            // Constants ==============================================================\n            var Cursors = {\n                    arrow: \"default\",\n                    grip: \"pointer\",\n                    cross: \"pointer\",\n                    add: \"pointer\",\n                    move: \"move\",\n                    select: \"pointer\",\n                    south: \"s-resize\",\n                    east: \"e-resize\",\n                    west: \"w-resize\",\n                    north: \"n-resize\",\n                    rowresize: \"row-resize\",\n                    colresize: \"col-resize\"\n                },\n                HIT_TEST_DISTANCE = 10,\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                DEFAULT_SNAP_SIZE = 10,\n                DEFAULT_SNAP_ANGLE = 10,\n                DRAG_START = \"dragStart\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                ITEMROTATE = \"itemRotate\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                MIN_SNAP_SIZE = 5,\n                MIN_SNAP_ANGLE = 5,\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                SCROLL_MIN = -20000,\n                SCROLL_MAX = 20000,\n                FRICTION = 0.90,\n                FRICTION_MOBILE = 0.93,\n                VELOCITY_MULTIPLIER = 5,\n                TRANSPARENT = \"transparent\",\n                PAN = \"pan\",\n                ROTATED = \"rotated\",\n                SOURCE = \"source\",\n                TARGET = \"target\",\n                HANDLE_NAMES = {\n                    \"-1\": SOURCE,\n                    \"1\": TARGET\n                };\n\n            diagram.Cursors = Cursors;\n\n            var PositionAdapter = kendo.Class.extend({\n                init: function(layoutState) {\n                    this.layoutState = layoutState;\n                    this.diagram = layoutState.diagram;\n                },\n                initState: function() {\n                    this.froms = [];\n                    this.tos = [];\n                    this.subjects = [];\n                    function pusher(id, bounds) {\n                        var shape = this.diagram.getShapeById(id);\n                        if (shape) {\n                            this.subjects.push(shape);\n                            this.froms.push(shape.bounds().topLeft());\n                            this.tos.push(bounds.topLeft());\n                        }\n                    }\n\n                    this.layoutState.nodeMap.forEach(pusher, this);\n                },\n                update: function(tick) {\n                    if (this.subjects.length <= 0) {\n                        return;\n                    }\n                    for (var i = 0; i < this.subjects.length; i++) {\n                        //todo: define a Lerp function instead\n                        this.subjects[i].position(\n                            new Point(this.froms[i].x + (this.tos[i].x - this.froms[i].x) * tick, this.froms[i].y + (this.tos[i].y - this.froms[i].y) * tick)\n                        );\n                    }\n                }\n            });\n\n            var LayoutUndoUnit = Class.extend({\n                init: function(initialState, finalState, animate) {\n                    if (isUndefined(animate)) {\n                        this.animate = false;\n                    }\n                    else {\n                        this.animate = animate;\n                    }\n                    this._initialState = initialState;\n                    this._finalState = finalState;\n                    this.title = \"Diagram layout\";\n                },\n                undo: function() {\n                    this.setState(this._initialState);\n                },\n                redo: function() {\n                    this.setState(this._finalState);\n                },\n                setState: function(state) {\n                    var diagram = state.diagram;\n                    if (this.animate) {\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                conn.visible(false);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                        var ticker = new Ticker();\n                        ticker.addAdapter(new PositionAdapter(state));\n                        ticker.onComplete(function() {\n                            state.linkMap.forEach(\n                                function(id) {\n                                    var conn = diagram.getShapeById(id);\n                                    conn.visible(true);\n                                }\n                            );\n                        });\n                        ticker.play();\n                    }\n                    else {\n                        state.nodeMap.forEach(function(id, bounds) {\n                            var shape = diagram.getShapeById(id);\n                            if (shape) {\n                                shape.position(bounds.topLeft());\n                            }\n                        });\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                    }\n                }\n            });\n\n            var CompositeUnit = Class.extend({\n                init: function(unit) {\n                    this.units = [];\n                    this.title = \"Composite unit\";\n                    if (unit !== undefined$1) {\n                        this.units.push(unit);\n                    }\n                },\n                add: function(undoUnit) {\n                    this.units.push(undoUnit);\n                },\n                undo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].undo();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].redo();\n                    }\n                }\n            });\n\n            var ConnectionEditUnit = Class.extend({\n                init: function(item, redoSource, redoTarget) {\n                    this.item = item;\n                    this._redoSource = redoSource;\n                    this._redoTarget = redoTarget;\n                    if (defined(redoSource)) {\n                        this._undoSource = item.source();\n                    }\n\n                    if (defined(redoTarget)) {\n                        this._undoTarget = item.target();\n                    }\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    if (this._undoSource !== undefined$1) {\n                        this.item._updateConnector(this._undoSource, \"source\");\n                    }\n\n                    if (this._undoTarget !== undefined$1) {\n                        this.item._updateConnector(this._undoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    if (this._redoSource !== undefined$1) {\n                        this.item._updateConnector(this._redoSource, \"source\");\n                    }\n\n                    if (this._redoTarget !== undefined$1) {\n                        this.item._updateConnector(this._redoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                }\n            });\n\n            var ConnectionEditUndoUnit = Class.extend({\n                init: function(item, undoSource, undoTarget) {\n                    this.item = item;\n                    this._undoSource = undoSource;\n                    this._undoTarget = undoTarget;\n                    this._redoSource = item.source();\n                    this._redoTarget = item.target();\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    this.item._updateConnector(this._undoSource, \"source\");\n                    this.item._updateConnector(this._undoTarget, \"target\");\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    this.item._updateConnector(this._redoSource, \"source\");\n                    this.item._updateConnector(this._redoTarget, \"target\");\n                    this.item.updateModel();\n                }\n            });\n\n            var DeleteConnectionUnit = Class.extend({\n                init: function(connection) {\n                    this.connection = connection;\n                    this.diagram = connection.diagram;\n                    this.targetConnector = connection.targetConnector;\n                    this.title = \"Delete connection\";\n                },\n                undo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                },\n                redo: function() {\n                    this.diagram.remove(this.connection, false);\n                }\n            });\n\n            var DeleteShapeUnit = Class.extend({\n                init: function(shape) {\n                    this.shape = shape;\n                    this.diagram = shape.diagram;\n                    this.title = \"Deletion\";\n                },\n                undo: function() {\n                    this.diagram._addShape(this.shape, false);\n                    this.shape.select(false);\n                },\n                redo: function() {\n                    this.shape.select(false);\n                    this.diagram.remove(this.shape, false);\n                }\n            });\n            /**\n             * Holds the undoredo state when performing a rotation, translation or scaling. The adorner is optional.\n             * @type {*}\n             */\n            var TransformUnit = Class.extend({\n                init: function(shapes, undoStates, adorner) {\n                    this.shapes = shapes;\n                    this.undoStates = undoStates;\n                    this.title = \"Transformation\";\n                    this.redoStates = [];\n                    this.adorner = adorner;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoStates.push(shape.bounds());\n                    }\n                },\n                undo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.undoStates[i]);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.redoStates[i], this.undoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.redoStates[i]);\n                        // the 'layout' property, if implemented, lets the shape itself work out what to do with the new bounds\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.undoStates[i], this.redoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var AddConnectionUnit = Class.extend({\n                init: function(connection, diagram) {\n                    this.connection = connection;\n                    this.diagram = diagram;\n                    this.title = \"New connection\";\n                },\n\n                undo: function() {\n                    this.diagram.remove(this.connection, false);\n                },\n\n                redo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                }\n            });\n\n            var AddShapeUnit = Class.extend({\n                init: function(shape, diagram) {\n                    this.shape = shape;\n                    this.diagram = diagram;\n                    this.title = \"New shape\";\n                },\n\n                undo: function() {\n                    this.diagram.deselect();\n                    this.diagram.remove(this.shape, false);\n                },\n\n                redo: function() {\n                    this.diagram._addShape(this.shape, false);\n                }\n            });\n\n            var PanUndoUnit = Class.extend({\n                init: function(initialPosition, finalPosition, diagram) {\n                    this.initial = initialPosition;\n                    this.finalPos = finalPosition;\n                    this.diagram = diagram;\n                    this.title = \"Pan Unit\";\n                },\n                undo: function() {\n                    this.diagram.pan(this.initial);\n                },\n                redo: function() {\n                    this.diagram.pan(this.finalPos);\n                }\n            });\n\n            var RotateUnit = Class.extend({\n                init: function(adorner, shapes, undoRotates) {\n                    this.shapes = shapes;\n                    this.undoRotates = undoRotates;\n                    this.title = \"Rotation\";\n                    this.redoRotates = [];\n                    this.redoAngle = adorner._angle;\n                    this.adorner = adorner;\n                    this.center = adorner._innerBounds.center();\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoRotates.push(shape.rotate().angle);\n                    }\n                },\n                undo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.undoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.redoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var ToFrontUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toFront(this.items, false);\n                }\n            });\n\n            var ToBackUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toBack(this.items, false);\n                }\n            });\n\n            /**\n             * Undo-redo service.\n             */\n            var UndoRedoService = kendo.Observable.extend({\n                init: function(options) {\n                    kendo.Observable.fn.init.call(this, options);\n                    this.bind(this.events, options);\n                    this.stack = [];\n                    this.index = 0;\n                    this.capacity = 100;\n                },\n\n                events: [\"undone\", \"redone\"],\n\n                /**\n                 * Starts the collection of units. Add those with\n                 * the addCompositeItem method and call commit. Or cancel to forget about it.\n                 */\n                begin: function() {\n                    this.composite = new CompositeUnit();\n                },\n\n                /**\n                 * Cancels the collection process of unit started with 'begin'.\n                 */\n                cancel: function() {\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Commits a batch of units.\n                 */\n                commit: function(execute) {\n                    if (this.composite.units.length > 0) {\n                        this._restart(this.composite, execute);\n                    }\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Adds a unit as part of the begin-commit batch.\n                 * @param undoUnit\n                 */\n                addCompositeItem: function(undoUnit) {\n                    if (this.composite) {\n                        this.composite.add(undoUnit);\n                    } else {\n                        this.add(undoUnit);\n                    }\n                },\n\n                /**\n                 * Standard addition of a unit. See also the batch version; begin-addCompositeUnit-commit methods.\n                 * @param undoUnit The unit to be added.\n                 * @param execute If false, the unit will be added but not executed.\n                 */\n                add: function(undoUnit, execute) {\n                    this._restart(undoUnit, execute);\n                },\n\n                /**\n                 * Returns the number of undoable unit in the stack.\n                 * @returns {Number}\n                 */\n\n                pop: function() {\n                    if (this.index > 0) {\n                        this.stack.pop();\n                        this.index--;\n                    }\n                },\n\n                count: function() {\n                    return this.stack.length;\n                },\n\n                /**\n                 * Rollback of the unit on top of the stack.\n                 */\n                undo: function() {\n                    if (this.index > 0) {\n                        this.index--;\n                        this.stack[this.index].undo();\n                        this.trigger(\"undone\");\n                    }\n                },\n\n                /**\n                 * Redo of the last undone action.\n                 */\n                redo: function() {\n                    if (this.stack.length > 0 && this.index < this.stack.length) {\n                        this.stack[this.index].redo();\n                        this.index++;\n                        this.trigger(\"redone\");\n                    }\n                },\n\n                _restart: function(composite, execute) {\n                    // throw away anything beyond this point if this is a new branch\n                    this.stack.splice(this.index, this.stack.length - this.index);\n                    this.stack.push(composite);\n                    if (execute !== false) {\n                        this.redo();\n                    } else {\n                        this.index++;\n                    }\n                    // check the capacity\n                    if (this.stack.length > this.capacity) {\n                        this.stack.splice(0, this.stack.length - this.capacity);\n                        this.index = this.capacity; //points to the end of the stack\n                    }\n                },\n\n                /**\n                 * Clears the stack.\n                 */\n                clear: function() {\n                    this.stack = [];\n                    this.index = 0;\n                }\n            });\n\n    // Tools =========================================\n\n            var EmptyTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                start: function() {\n                },\n                move: function() {\n                },\n                end: function() {\n                },\n                tryActivate: function() {\n                    return false;\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ScrollerTool = EmptyTool.extend({\n                init: function(toolService) {\n                    var tool = this;\n                    var friction = kendo.support.mobileOS ? FRICTION_MOBILE : FRICTION;\n                    EmptyTool.fn.init.call(tool, toolService);\n\n                    var diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas;\n\n                    var scroller = diagram.scroller = tool.scroller = $(diagram.scrollable).kendoMobileScroller({\n                        friction: friction,\n                        velocityMultiplier: VELOCITY_MULTIPLIER,\n                        mousewheelScrolling: false,\n                        zoom: false,\n                        scroll: tool._move.bind(tool)\n                    }).data(\"kendoMobileScroller\");\n\n                    if (canvas.translate) {\n                        tool.movableCanvas = new Movable(canvas.element);\n                    }\n\n                    var virtualScroll = function(dimension, min, max) {\n                        dimension.makeVirtual();\n                        dimension.virtualSize(min || SCROLL_MIN, max || SCROLL_MAX);\n                    };\n\n                    virtualScroll(scroller.dimensions.x);\n                    virtualScroll(scroller.dimensions.y);\n                    scroller.disable();\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var options = toolService.diagram.options.pannable;\n                    var enabled = meta.ctrlKey;\n\n                    if (defined(options.key)) {\n                        if (!options.key || options.key == \"none\") {\n                            enabled = noMeta(meta) && !defined(toolService.hoveredItem);\n                        } else {\n                            enabled = meta[options.key + \"Key\"];\n                        }\n                    }\n\n                    return options !== false && enabled && !defined(toolService.hoveredAdorner) && !defined(toolService._hoveredConnector);\n                },\n\n                start: function() {\n                    this.scroller.enable();\n                },\n                move: function() {\n                },//the tool itself should not handle the scrolling. Let kendo scroller take care of this part. Check _move\n                _move: function(args) {\n                    var tool = this,\n                        diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas,\n                        scrollPos = new Point(args.scrollLeft, args.scrollTop);\n\n                    if (canvas.translate) {\n                        diagram._storePan(scrollPos.times(-1));\n                        tool.movableCanvas.moveTo(scrollPos);\n                        canvas.translate(scrollPos.x, scrollPos.y);\n                    } else {\n                        scrollPos = scrollPos.plus(diagram._pan.times(-1));\n                    }\n\n                    diagram.trigger(PAN, { pan: scrollPos });\n                },\n                end: function() {\n                    this.scroller.disable();\n                },\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            /**\n             * The tool handling the transformations via the adorner.\n             * @type {*}\n             */\n            var PointerTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function() {\n                    return true; // the pointer tool is last and handles all others requests.\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        hoveredItem = toolService.hoveredItem;\n\n                    if (hoveredItem) {\n                        toolService.selectSingle(hoveredItem, meta);\n                        if (hoveredItem.adorner) { //connection\n                            this.adorner = hoveredItem.adorner;\n                            this.handle = this.adorner._hitTest(p);\n                        }\n                    }\n\n                    if (!this.handle) {\n                        this.handle = diagram._resizingAdorner._hitTest(p);\n                        if (this.handle) {\n                            this.adorner = diagram._resizingAdorner;\n                        }\n                    }\n\n                    if (this.adorner) {\n                        if (!this.adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_START, { shapes: this.adorner.shapes, connections: [] })) {\n                            this.adorner.start(p);\n                        } else {\n                            toolService.startPoint = p;\n                            toolService.end(p);\n                        }\n                    }\n                },\n\n                move: function(p) {\n                    if (this.adorner) {\n                        this.adorner.move(this.handle, p);\n                        if (this.adorner.isDragHandle(this.handle)) {\n                            this.toolService.diagram.trigger(DRAG, { shapes: this.adorner.shapes, connections: [] });\n                        }\n                    }\n                },\n\n                end: function() {\n                    var diagram = this.toolService.diagram,\n                        adorner = this.adorner,\n                        unit;\n\n                    if (adorner) {\n                        if (!adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_END, { shapes: adorner.shapes, connections: [] })) {\n                            unit = adorner.stop();\n                            if (unit) {\n                                diagram.undoRedoService.add(unit, false);\n                            }\n                        } else {\n                            adorner.cancel();\n                        }\n                    }\n\n                    this.adorner = undefined$1;\n                    this.handle = undefined$1;\n                },\n                getCursor: function(p) {\n                    return this.toolService.hoveredItem ? this.toolService.hoveredItem._getCursor(p) : Cursors.arrow;\n                }\n            });\n\n            var SelectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var selectable = toolService.diagram.options.selectable;\n                    var enabled = selectable && selectable.multiple !== false;\n\n                    if (enabled) {\n                        if (selectable.key && selectable.key != \"none\") {\n                            enabled = meta[selectable.key + \"Key\"];\n                        } else {\n                            enabled = noMeta(meta);\n                        }\n                    }\n\n                    return enabled && !defined(toolService.hoveredItem) && !defined(toolService.hoveredAdorner);\n                },\n                start: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.deselect();\n                    diagram.selector.start(p);\n                },\n                move: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.selector.move(p);\n                },\n                end: function(p, meta) {\n                    var diagram = this.toolService.diagram, hoveredItem = this.toolService.hoveredItem;\n                    var rect = diagram.selector.bounds();\n                    if ((!hoveredItem || !hoveredItem.isSelected) && !meta.ctrlKey) {\n                        diagram.deselect();\n                    }\n                    if (!rect.isEmpty()) {\n                        diagram.selectArea(rect);\n                    }\n                    diagram.selector.end();\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n                tryActivate: function() {\n                    return this.toolService._hoveredConnector;\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        connector = toolService._hoveredConnector,\n                        connection = diagram._createConnection({}, connector._c, p);\n\n                    if (canDrag(connection) && !diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: TARGET }) && diagram._addConnection(connection)) {\n                        toolService._connectionManipulation(connection, connector._c.shape, true);\n                        toolService._removeHover();\n                        toolService.selectSingle(toolService.activeConnection, meta);\n                        if (meta.type == \"touchmove\") {\n                            diagram._cachedTouchTarget = connector.visual;\n                        }\n                    } else {\n                        connection.source(null);\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var toolService = this.toolService;\n                    var connection = toolService.activeConnection;\n\n                    connection.target(p);\n                    toolService.diagram.trigger(DRAG, { shapes: [], connections: [connection], connectionHandle: TARGET });\n                    return true;\n                },\n\n                end: function(p) {\n                    var toolService = this.toolService,\n                        d = toolService.diagram,\n                        connection = toolService.activeConnection,\n                        hoveredItem = toolService.hoveredItem,\n                        connector = toolService._hoveredConnector,\n                        target,\n                        cachedTouchTarget = d._cachedTouchTarget;\n\n                    if (!connection) {\n                        return;\n                    }\n\n                    if (connector && connector._c != connection.sourceConnector) {\n                        target = connector._c;\n                    } else if (hoveredItem && hoveredItem instanceof diagram.Shape) {\n                        target = hoveredItem.getConnector(AUTO) || hoveredItem.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    connection.target(target);\n\n                    if (!d.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: TARGET })) {\n                        connection.updateModel();\n                        d._syncConnectionChanges();\n                    } else {\n                        d.remove(connection, false);\n                        d.undoRedoService.pop();\n                    }\n                    toolService._connectionManipulation();\n\n                    if (cachedTouchTarget) {\n                        d._connectorsAdorner.visual.remove(cachedTouchTarget);\n                        d._cachedTouchTarget = null;\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionEditTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        selectable = diagram.options.selectable,\n                        item = toolService.hoveredItem,\n                        isActive = selectable !== false &&\n                                   item && item.path && !(item.isSelected && meta.ctrlKey);\n\n                    if (isActive) {\n                        this._c = item;\n                    }\n\n                    return isActive;\n                },\n\n                start: function(p, meta) {\n                    var toolService = this.toolService;\n                    var connection = this._c;\n\n                    toolService.selectSingle(connection, meta);\n\n                    var adorner = connection.adorner;\n\n                    var handle, name;\n                    if (adorner) {\n                        handle = adorner._hitTest(p);\n                        name = HANDLE_NAMES[handle];\n                    }\n\n                    if (canDrag(connection) && adorner && !toolService.diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: name })) {\n                        this.handle = handle;\n                        this.handleName = name;\n                        adorner.start(p);\n                    } else {\n                        toolService.startPoint = p;\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var adorner = this._c.adorner;\n                    if (canDrag(this._c) && adorner) {\n                        adorner.move(this.handle, p);\n                        this.toolService.diagram.trigger(DRAG, { shapes: [], connections: [this._c], connectionHandle: this.handleName });\n\n                        return true;\n                    }\n                },\n\n                end: function(p) {\n                    var connection = this._c;\n                    var adorner = connection.adorner;\n                    var toolService = this.toolService;\n                    var diagram = toolService.diagram;\n\n                    if (adorner) {\n                        if (canDrag(connection)) {\n                            var unit = adorner.stop(p);\n                            if (!diagram.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: this.handleName })) {\n                                diagram.undoRedoService.add(unit, false);\n                                connection.updateModel();\n                                diagram._syncConnectionChanges();\n                            } else {\n                                unit.undo();\n                            }\n                        }\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            function testKey(key, str) {\n                return str.charCodeAt(0) == key || str.toUpperCase().charCodeAt(0) == key;\n            }\n\n            /**\n             * The service managing the tools.\n             * @type {*}\n             */\n            var ToolService = Class.extend({\n                init: function(diagram) {\n                    this.diagram = diagram;\n                    this.tools = [\n                        new ScrollerTool(this),\n                        new ConnectionEditTool(this),\n                        new ConnectionTool(this),\n                        new SelectionTool(this),\n                        new PointerTool(this)\n                    ]; // the order matters.\n\n                    this.activeTool = undefined$1;\n                },\n\n                start: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this._updateHoveredItem(p);\n                    this._activateTool(p, meta);\n                    this.activeTool.start(p, meta);\n                    this._updateCursor(p);\n                    this.diagram.focus();\n                    this.diagram.canvas.surface.suspendTracking();\n                    this.startPoint = p;\n                    return true;\n                },\n\n                move: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    var updateHovered = true;\n                    if (this.activeTool) {\n                        updateHovered = this.activeTool.move(p, meta);\n                    }\n                    if (updateHovered) {\n                        this._updateHoveredItem(p);\n                    }\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                end: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this.diagram.canvas.surface.resumeTracking();\n                    this.activeTool = undefined$1;\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                keyDown: function(key, meta) {\n                    var diagram = this.diagram;\n                    meta = deepExtend({ ctrlKey: false, metaKey: false, altKey: false }, meta);\n                    if ((meta.ctrlKey || meta.metaKey) && !meta.altKey) {// ctrl or option\n                        if (testKey(key, \"a\")) {// A: select all\n                            diagram.selectAll();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"z\")) {// Z: undo\n                            diagram.undo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"y\")) {// y: redo\n                            diagram.redo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"c\")) {\n                            diagram.copy();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"x\")) {\n                            diagram.cut();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"v\")) {\n                            diagram.paste();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"l\")) {\n                            diagram.layout();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"d\")) {\n                            diagram._destroyToolBar();\n                            diagram.copy();\n                            diagram.paste();\n                        }\n                    } else if (key === 46 || key === 8) {// del: deletion\n                        var toRemove = this.diagram._triggerRemove(diagram.select());\n                        if (toRemove.length) {\n                            this.diagram.remove(toRemove, true);\n                            this.diagram._syncChanges();\n                            this.diagram._destroyToolBar();\n                        }\n\n                        return true;\n                    } else if (key === 27) {// ESC: stop any action\n                        this._discardNewConnection();\n                        diagram.deselect();\n                        diagram._destroyToolBar();\n                        return true;\n                    }\n\n                },\n                wheel: function(p, meta) {\n                    var diagram = this.diagram,\n                        delta = meta.delta,\n                        z = diagram.zoom(),\n                        options = diagram.options,\n                        zoomRate = options.zoomRate,\n                        zoomOptions = { point: p, meta: meta, zoom: z };\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    if (delta < 0) {\n                        z += zoomRate;\n                    } else {\n                        z -= zoomRate;\n                    }\n\n                    z = kendo.drawing.util.round(Math.max(options.zoomMin, Math.min(options.zoomMax, z)), 2);\n                    zoomOptions.zoom = z;\n\n                    diagram.zoom(z, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n\n                    return true;\n                },\n                setTool: function(tool, index) {\n                    tool.toolService = this;\n                    this.tools[index] = tool;\n                },\n\n                selectSingle: function(item, meta) {\n                    var diagram = this.diagram;\n                    var selectable = diagram.options.selectable;\n                    if (selectable && !item.isSelected && item.options.selectable !== false) {\n                        var addToSelection = meta.ctrlKey && selectable.multiple !== false;\n                        diagram.select(item, { addToSelection: addToSelection });\n                    }\n                },\n\n                _discardNewConnection: function() {\n                    if (this.newConnection) {\n                        this.diagram.remove(this.newConnection);\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _activateTool: function(p, meta) {\n                    for (var i = 0; i < this.tools.length; i++) {\n                        var tool = this.tools[i];\n                        if (tool.tryActivate(p, meta)) {\n                            this.activeTool = tool;\n                            break; // activating the first available tool in the loop.\n                        }\n                    }\n                },\n                _updateCursor: function(p) {\n                    var element = this.diagram.element;\n                    var cursor = this.activeTool ? this.activeTool.getCursor(p) : (this.hoveredAdorner ? this.hoveredAdorner._getCursor(p) : (this.hoveredItem ? this.hoveredItem._getCursor(p) : Cursors.arrow));\n\n                    element.css({ cursor: cursor });\n                },\n                _connectionManipulation: function(connection, disabledShape, isNew) {\n                    this.activeConnection = connection;\n                    this.disabledShape = disabledShape;\n                    if (isNew) {\n                        this.newConnection = this.activeConnection;\n                    } else {\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _updateHoveredItem: function(p) {\n                    var hit = this._hitTest(p);\n                    var diagram = this.diagram;\n\n                    if (hit != this.hoveredItem && (!this.disabledShape || hit != this.disabledShape)) {\n                        if (this.hoveredItem) {\n                            diagram.trigger(MOUSE_LEAVE, { item: this.hoveredItem });\n                            this.hoveredItem._hover(false);\n                        }\n\n                        if (hit && hit.options.enable) {\n                            diagram.trigger(MOUSE_ENTER, { item: hit });\n\n                            this.hoveredItem = hit; // Shape, connection or connector\n                            this.hoveredItem._hover(true);\n                        } else {\n                            this.hoveredItem = undefined$1;\n                        }\n                    }\n                },\n                _removeHover: function() {\n                    if (this.hoveredItem) {\n                        this.hoveredItem._hover(false);\n                        this.hoveredItem = undefined$1;\n                    }\n                },\n                _hitTest: function(point) {\n                    var hit, d = this.diagram, item, i;\n\n                    // connectors\n                    if (this._hoveredConnector) {\n                        this._hoveredConnector._hover(false);\n                        this._hoveredConnector = undefined$1;\n                    }\n                    if (d._connectorsAdorner._visible) {\n                        hit = d._connectorsAdorner._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n\n                    hit = this.diagram._resizingAdorner._hitTest(point);\n                    if (hit) {\n                        this.hoveredAdorner = d._resizingAdorner;\n                        if (hit.x !== 0 || hit.y !== 0) { // hit testing for resizers or rotator, otherwise if (0,0) than pass through.\n                            return;\n                        }\n                        hit = undefined$1;\n                    } else {\n                        this.hoveredAdorner = undefined$1;\n                    }\n\n                    if (!this.activeTool || this.activeTool.type !== \"ConnectionTool\") {\n                        var selectedConnections = []; // only the connections should have higher presence because the connection edit point is on top of connector.\n                        // TODO: This should be reworked. The connection adorner should be one for all selected connections and should be hit tested prior the connections and shapes itself.\n                        for (i = 0; i < d._selectedItems.length; i++) {\n                            item = d._selectedItems[i];\n                            if (item instanceof diagram.Connection) {\n                                selectedConnections.push(item);\n                            }\n                        }\n                        hit = this._hitTestItems(selectedConnections, point);\n                    }\n\n                    return hit || this._hitTestElements(point);\n                },\n\n                _hitTestElements: function(point) {\n                    var diagram = this.diagram;\n                    var shapeHit = this._hitTestItems(diagram.shapes, point);\n                    var connectionHit = this._hitTestItems(diagram.connections, point);\n                    var hit;\n\n                    if ((!this.activeTool || this.activeTool.type != \"ConnectionTool\") && shapeHit && connectionHit && !hitTestShapeConnectors(shapeHit, point)) {\n                        var mainLayer = diagram.mainLayer;\n                        var shapeIdx = inArray(shapeHit.visual, mainLayer.children);\n                        var connectionIdx = inArray(connectionHit.visual, mainLayer.children);\n                        hit = shapeIdx > connectionIdx ? shapeHit : connectionHit;\n                    }\n                    return hit || shapeHit || connectionHit;\n                },\n\n                _hitTestItems: function(array, point) {\n                    var i, item, hit;\n                    for (i = array.length - 1; i >= 0; i--) {\n                        item = array[i];\n                        hit = item._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n                }\n            });\n\n    // Routing =========================================\n\n            /**\n             * Base class for connection routers.\n             */\n            var ConnectionRouterBase = kendo.Class.extend({\n                init: function() {\n                }\n                /*route: function (connection) {\n                 },\n                 hitTest: function (p) {\n\n                 },\n                 getBounds: function () {\n\n                 }*/\n            });\n\n            /**\n             * Base class for polyline and cascading routing.\n             */\n            var LinearConnectionRouter = ConnectionRouterBase.extend({\n                init: function(connection) {\n                    var that = this;\n                    ConnectionRouterBase.fn.init.call(that);\n                    this.connection = connection;\n                },\n                /**\n                 * Hit testing for polyline paths.\n                 */\n                hitTest: function(p) {\n                    var rec = this.getBounds().inflate(HIT_TEST_DISTANCE);\n                    if (!rec.contains(p)) {\n                        return false;\n                    }\n                    return diagram.Geometry.distanceToPolyline(p, this.connection.allPoints()) < HIT_TEST_DISTANCE;\n                },\n\n                /**\n                 * Bounds of a polyline.\n                 * @returns {kendo.dataviz.diagram.Rect}\n                 */\n                getBounds: function() {\n                    var points = this.connection.allPoints(),\n                        s = points[0],\n                        e = points[points.length - 1],\n                        right = Math.max(s.x, e.x),\n                        left = Math.min(s.x, e.x),\n                        top = Math.min(s.y, e.y),\n                        bottom = Math.max(s.y, e.y);\n\n                    for (var i = 1; i < points.length - 1; ++i) {\n                        right = Math.max(right, points[i].x);\n                        left = Math.min(left, points[i].x);\n                        top = Math.min(top, points[i].y);\n                        bottom = Math.max(bottom, points[i].y);\n                    }\n\n                    return new Rect(left, top, right - left, bottom - top);\n                }\n            });\n\n            /**\n             * A simple poly-linear routing which does not alter the intermediate points.\n             * Does hold the underlying hit, bounds....logic.\n             * @type {*|Object|void|extend|Zepto.extend|b.extend}\n             */\n            var PolylineRouter = LinearConnectionRouter.extend({\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n                route: function() {\n                    // just keep the points as is\n                }\n            });\n\n            var CascadingRouter = LinearConnectionRouter.extend({\n                SAME_SIDE_DISTANCE_RATIO: 5,\n\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n\n                routePoints: function(start, end, sourceConnector, targetConnector) {\n                    var result;\n\n                    if (sourceConnector && targetConnector) {\n                        result = this._connectorPoints(start, end, sourceConnector, targetConnector);\n                    } else {\n                        result = this._floatingPoints(start, end, sourceConnector);\n                    }\n                    return result;\n                },\n\n                route: function() {\n                    var sourceConnector = this.connection._resolvedSourceConnector;\n                    var targetConnector = this.connection._resolvedTargetConnector;\n                    var start = this.connection.sourcePoint();\n                    var end = this.connection.targetPoint();\n                    var points = this.routePoints(start, end, sourceConnector, targetConnector);\n                    this.connection.points(points);\n                },\n\n                _connectorSides: [{\n                    name: \"Top\",\n                    axis: \"y\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Left\",\n                    axis: \"x\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Bottom\",\n                    axis: \"y\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }, {\n                    name: \"Right\",\n                    axis: \"x\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }],\n\n                _connectorSide: function(connector, targetPoint) {\n                    var position = connector.position();\n                    var shapeBounds = connector.shape.bounds(ROTATED);\n                    var bounds = {\n                        topLeft: shapeBounds.topLeft(),\n                        bottomRight: shapeBounds.bottomRight()\n                    };\n                    var sides = this._connectorSides;\n                    var min = util.MAX_NUM;\n                    var sideDistance;\n                    var minSide;\n                    var axis;\n                    var side;\n                    for (var idx = 0; idx < sides.length; idx++) {\n                        side = sides[idx];\n                        axis = side.axis;\n                        sideDistance = Math.round(Math.abs(position[axis] - bounds[side.boundsPoint][axis]));\n                        if (sideDistance < min) {\n                            min = sideDistance;\n                            minSide = side;\n                        } else if (sideDistance === min &&\n                            (position[axis] - targetPoint[axis]) * side.secondarySign > (position[minSide.axis] - targetPoint[minSide.axis]) * minSide.secondarySign) {\n                            minSide = side;\n                        }\n                    }\n                    return minSide.name;\n                },\n\n                _sameSideDistance: function(connector) {\n                    var bounds = connector.shape.bounds(ROTATED);\n                    return Math.min(bounds.width, bounds.height) / this.SAME_SIDE_DISTANCE_RATIO;\n                },\n\n                _connectorPoints: function(start, end, sourceConnector, targetConnector) {\n                    var sourceConnectorSide = this._connectorSide(sourceConnector, end);\n                    var targetConnectorSide = this._connectorSide(targetConnector, start);\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var sameSideDistance = this._sameSideDistance(sourceConnector);\n                    var result = [];\n                    var pointX, pointY;\n\n                    if (sourceConnectorSide === TOP || sourceConnectorSide == BOTTOM) {\n                        if (targetConnectorSide == TOP || targetConnectorSide == BOTTOM) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == TOP) {\n                                    pointY = Math.min(start.y, end.y) - sameSideDistance;\n                                } else {\n                                    pointY = Math.max(start.y, end.y) + sameSideDistance;\n                                }\n                                result = [new Point(start.x, pointY), new Point(end.x, pointY)];\n                            } else {\n                                result = [new Point(start.x, start.y + deltaY / 2), new Point(end.x, start.y + deltaY / 2)];\n                            }\n                        } else {\n                            result = [new Point(start.x, end.y)];\n                        }\n                    } else {\n                        if (targetConnectorSide == LEFT || targetConnectorSide == RIGHT) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == LEFT) {\n                                    pointX = Math.min(start.x, end.x) - sameSideDistance;\n                                } else {\n                                    pointX = Math.max(start.x, end.x) + sameSideDistance;\n                                }\n                                result = [new Point(pointX, start.y), new Point(pointX, end.y)];\n                            } else {\n                                result = [new Point(start.x + deltaX / 2, start.y), new Point(start.x + deltaX / 2, start.y + deltaY)];\n                            }\n                        } else {\n                            result = [new Point(end.x, start.y)];\n                        }\n                    }\n                    return result;\n                },\n\n                _floatingPoints: function(start, end, sourceConnector) {\n                    var sourceConnectorSide = sourceConnector ? this._connectorSide(sourceConnector, end) : null;\n                    var cascadeStartHorizontal = this._startHorizontal(start, end, sourceConnectorSide);\n                    var points = [start, start, end, end];\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var length = points.length;\n                    var shiftX;\n                    var shiftY;\n\n                    // note that this is more generic than needed for only two intermediate points.\n                    for (var idx = 1; idx < length - 1; ++idx) {\n                        if (cascadeStartHorizontal) {\n                            if (idx % 2 !== 0) {\n                                shiftX = deltaX / (length / 2);\n                                shiftY = 0;\n                            }\n                            else {\n                                shiftX = 0;\n                                shiftY = deltaY / ((length - 1) / 2);\n                            }\n                        }\n                        else {\n                            if (idx % 2 !== 0) {\n                                shiftX = 0;\n                                shiftY = deltaY / (length / 2);\n                            }\n                            else {\n                                shiftX = deltaX / ((length - 1) / 2);\n                                shiftY = 0;\n                            }\n                        }\n                        points[idx] = new Point(points[idx - 1].x + shiftX, points[idx - 1].y + shiftY);\n                    }\n                    // need to fix the wrong 1.5 factor of the last intermediate point\n                    idx--;\n                    if ((cascadeStartHorizontal && (idx % 2 !== 0)) || (!cascadeStartHorizontal && (idx % 2 === 0))) {\n                        points[length - 2] = new Point(points[length - 1].x, points[length - 2].y);\n                    } else {\n                        points[length - 2] = new Point(points[length - 2].x, points[length - 1].y);\n                    }\n\n                    return [points[1], points[2]];\n                },\n\n                _startHorizontal: function(start, end, sourceSide) {\n                    var horizontal;\n                    if (sourceSide !== null && (sourceSide === RIGHT || sourceSide === LEFT)) {\n                        horizontal = true;\n                    } else {\n                        horizontal = Math.abs(start.x - end.x) > Math.abs(start.y - end.y);\n                    }\n\n                    return horizontal;\n                }\n            });\n\n    // Adorners =========================================\n\n            var AdornerBase = Class.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    that.diagram = diagram;\n                    that.options = deepExtend({}, that.options, options);\n                    that.visual = new Group();\n                    that.diagram._adorners.push(that);\n                },\n                refresh: function() {\n\n                }\n            });\n\n            var ConnectionEditAdorner = AdornerBase.extend({\n                init: function(connection, options) {\n                    var that = this, diagram;\n                    that.connection = connection;\n                    diagram = that.connection.diagram;\n                    that._ts = diagram.toolService;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    var sp = that.connection.sourcePoint();\n                    var tp = that.connection.targetPoint();\n                    that.spVisual = new Circle(deepExtend(that.options.handles, { center: sp }));\n                    that.epVisual = new Circle(deepExtend(that.options.handles, { center: tp }));\n                    that.visual.append(that.spVisual);\n                    that.visual.append(that.epVisual);\n                },\n\n                options: {\n                    handles: {}\n                },\n\n                _getCursor: function() {\n                    return Cursors.move;\n                },\n\n                start: function(p) {\n                    this.handle = this._hitTest(p);\n                    this.startPoint = p;\n                    this._initialSource = this.connection.source();\n                    this._initialTarget = this.connection.target();\n                    switch (this.handle) {\n                        case -1:\n                            if (this.connection.targetConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.targetConnector.shape);\n                            }\n                            break;\n                        case 1:\n                            if (this.connection.sourceConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.sourceConnector.shape);\n                            }\n                            break;\n                    }\n                },\n\n                move: function(handle, p) {\n                    switch (handle) {\n                        case -1:\n                            this.connection.source(p);\n                            break;\n                        case 1:\n                            this.connection.target(p);\n                            break;\n                        default:\n                            var delta = p.minus(this.startPoint);\n                            this.startPoint = p;\n                            if (!this.connection.sourceConnector) {\n                                this.connection.source(this.connection.sourcePoint().plus(delta));\n                            }\n                            if (!this.connection.targetConnector) {\n                                this.connection.target(this.connection.targetPoint().plus(delta));\n                            }\n                            break;\n                    }\n                    this.refresh();\n                    return true;\n                },\n\n                stop: function(p) {\n                    var ts = this.diagram.toolService, item = ts.hoveredItem, target;\n                    if (ts._hoveredConnector) {\n                        target = ts._hoveredConnector._c;\n                    } else if (item && item instanceof diagram.Shape) {\n                        target = item.getConnector(AUTO) || item.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    if (this.handle === -1) {\n                        this.connection.source(target);\n                    } else if (this.handle === 1) {\n                        this.connection.target(target);\n                    }\n\n                    this.handle = undefined$1;\n                    this._ts._connectionManipulation();\n                    return new ConnectionEditUndoUnit(this.connection, this._initialSource, this._initialTarget);\n                },\n\n                _hitTest: function(point) {\n                    var sourcePoint = this.connection.sourcePoint();\n                    var targetPoint = this.connection.targetPoint();\n                    var radiusX = this.options.handles.width / 2 + HIT_TEST_DISTANCE;\n                    var radiusY = this.options.handles.height / 2 + HIT_TEST_DISTANCE;\n                    var sourcePointDistance = sourcePoint.distanceTo(point);\n                    var targetPointDistance = targetPoint.distanceTo(point);\n                    var sourceHandle = new Rect(sourcePoint.x, sourcePoint.y).inflate(radiusX, radiusY).contains(point);\n                    var targetHandle = new Rect(targetPoint.x, targetPoint.y).inflate(radiusX, radiusY).contains(point);\n                    var handle = 0;\n\n                    if (sourceHandle && (!targetHandle || sourcePointDistance < targetPointDistance)) {\n                        handle = -1;\n                    } else if (targetHandle && (!sourceHandle || targetPointDistance < sourcePointDistance)) {\n                        handle = 1;\n                    }\n\n                    return handle;\n                },\n\n                refresh: function() {\n                    this.spVisual.redraw({ center: this.diagram.modelToLayer(this.connection.sourcePoint()) });\n                    this.epVisual.redraw({ center: this.diagram.modelToLayer(this.connection.targetPoint()) });\n                }\n            });\n\n            var ConnectorsAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._refreshHandler = function(e) {\n                        if (e.item == that.shape) {\n                            that.refresh();\n                        }\n                    };\n                },\n\n                show: function(shape) {\n                    var that = this, len, i, ctr;\n                    that._visible = true;\n                    that.shape = shape;\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    len = shape.connectors.length;\n                    that.connectors = [];\n                    that._clearVisual();\n                    for (i = 0; i < len; i++) {\n                        ctr = new ConnectorVisual(shape.connectors[i]);\n                        that.connectors.push(ctr);\n                        that.visual.append(ctr.visual);\n                    }\n                    that.visual.visible(true);\n                    that.refresh();\n                },\n\n                _clearVisual: function() {\n                    var that = this;\n                    if (that.diagram._cachedTouchTarget) {\n                        that._keepCachedTouchTarget();\n                    } else {\n                        that.visual.clear();\n                    }\n                },\n\n                _keepCachedTouchTarget: function() {\n                    var that = this,\n                        visualChildren = that.visual.children;\n                    var childrenCount = visualChildren.length;\n                    var index = inArray(that.diagram._cachedTouchTarget, visualChildren);\n                    for (var i = childrenCount - 1; i >= 0; i--) {\n                        if (i == index) {\n                            continue;\n                        }\n                        that.visual.remove(visualChildren[i]);\n                    }\n                },\n\n                destroy: function() {\n                    var that = this;\n                    that.diagram.unbind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    that.shape = undefined$1;\n                    that._visible = undefined$1;\n                    that.visual.visible(false);\n                },\n\n                _hitTest: function(p) {\n                    var ctr, i;\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        if (ctr._hitTest(p)) {\n                            ctr._hover(true);\n                            this.diagram.toolService._hoveredConnector = ctr;\n                            break;\n                        }\n                    }\n                },\n\n                refresh: function() {\n                    if (this.shape) {\n                        var bounds = this.shape.bounds();\n                            bounds = this.diagram.modelToLayer(bounds);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.connectors, function() {\n                            this.refresh();\n                        });\n                    }\n                }\n            });\n\n            function hitToOppositeSide(hit, bounds) {\n                var result;\n\n                if (hit.x == -1 && hit.y == -1) {\n                    result = bounds.bottomRight();\n                } else if (hit.x == 1 && hit.y == 1) {\n                    result = bounds.topLeft();\n                } else if (hit.x == -1 && hit.y == 1) {\n                    result = bounds.topRight();\n                } else if (hit.x == 1 && hit.y == -1) {\n                    result = bounds.bottomLeft();\n                } else if (hit.x === 0 && hit.y == -1) {\n                    result = bounds.bottom();\n                } else if (hit.x === 0 && hit.y == 1) {\n                    result = bounds.top();\n                } else if (hit.x == 1 && hit.y === 0) {\n                    result = bounds.left();\n                } else if (hit.x == -1 && hit.y === 0) {\n                    result = bounds.right();\n                }\n\n                return result;\n            }\n\n            var ResizingAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._manipulating = false;\n                    that.map = [];\n                    that.shapes = [];\n\n                    that._initSelection();\n                    that._createHandles();\n                    that.redraw();\n                    that.diagram.bind(\"select\", function(e) {\n                        that._initialize(e.selected);\n                    });\n\n                    that._refreshHandler = function() {\n                        if (!that._internalChange) {\n                            that.refreshBounds();\n                            that.refresh();\n                        }\n                    };\n\n                    that._rotatedHandler = function() {\n                        if (that.shapes.length == 1) {\n                            that._angle = that.shapes[0].rotate().angle;\n                        }\n                        that._refreshHandler();\n                    };\n\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler).bind(ITEMROTATE, that._rotatedHandler);\n                    that.refreshBounds();\n                    that.refresh();\n                },\n\n                options: {\n                    handles: {\n                        fill: {\n                            color: \"#fff\"\n                        },\n                        stroke: {\n                            color: \"#282828\"\n                        },\n                        height: 7,\n                        width: 7,\n                        hover: {\n                            fill: {\n                                color: \"#282828\"\n                            },\n                            stroke: {\n                                color: \"#282828\"\n                            }\n                        }\n                    },\n                    selectable: {\n                        stroke: {\n                            color: \"#778899\",\n                            width: 1,\n                            dashType: \"dash\"\n                        },\n                        fill: {\n                            color: TRANSPARENT\n                        }\n                    },\n                    offset: 10\n                },\n\n                _initSelection: function() {\n                    var that = this;\n                    var diagram = that.diagram;\n                    var selectable = diagram.options.selectable;\n                    var options = deepExtend({}, that.options.selectable, selectable);\n                    that.rect = new Rectangle(options);\n                    that.visual.append(that.rect);\n                },\n\n                _resizable: function() {\n                    return this.options.editable && this.options.editable.resize !== false;\n                },\n\n                _handleOptions: function() {\n                    return (this.options.editable.resize || {}).handles || this.options.handles;\n                },\n\n                _createHandles: function() {\n                    var handles, item, y, x;\n\n                    if (this._resizable()) {\n                        handles = this._handleOptions();\n                        for (x = -1; x <= 1; x++) {\n                            for (y = -1; y <= 1; y++) {\n                                if ((x !== 0) || (y !== 0)) { // (0, 0) element, (-1, -1) top-left, (+1, +1) bottom-right\n                                    item = new Rectangle(handles);\n                                    item.drawingElement._hover = this._hover.bind(this);\n                                    this.map.push({ x: x, y: y, visual: item });\n                                    this.visual.append(item);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                bounds: function(value) {\n                    if (value) {\n                        this._innerBounds = value.clone();\n                        this._bounds = this.diagram.modelToLayer(value).inflate(this.options.offset, this.options.offset);\n                    } else {\n                        return this._bounds;\n                    }\n                },\n\n                _hitTest: function(p) {\n                    var tp = this.diagram.modelToLayer(p),\n                        i, hit, handleBounds, handlesCount = this.map.length, handle;\n\n                    if (this._angle) {\n                        tp = tp.clone().rotate(this._angle, this._bounds.center());\n                    }\n\n                    if (this._resizable()) {\n                        for (i = 0; i < handlesCount; i++) {\n                            handle = this.map[i];\n                            hit = new Point(handle.x, handle.y);\n                            handleBounds = this._getHandleBounds(hit); //local coordinates\n                            handleBounds.offset(this._bounds.x, this._bounds.y);\n                            if (handleBounds.contains(tp)) {\n                                return hit;\n                            }\n                        }\n                    }\n\n                    if (this._bounds.contains(tp)) {\n                        return new Point(0, 0);\n                    }\n                },\n\n                _getHandleBounds: function(p) {\n                    if (this._resizable()) {\n                        var handles = this._handleOptions(),\n                            w = handles.width,\n                            h = handles.height,\n                            r = new Rect(0, 0, w, h);\n\n                        if (p.x < 0) {\n                            r.x = - w / 2;\n                        } else if (p.x === 0) {\n                            r.x = Math.floor(this._bounds.width / 2) - w / 2;\n                        } else if (p.x > 0) {\n                            r.x = this._bounds.width + 1.0 - w / 2;\n                        } if (p.y < 0) {\n                            r.y = - h / 2;\n                        } else if (p.y === 0) {\n                            r.y = Math.floor(this._bounds.height / 2) - h / 2;\n                        } else if (p.y > 0) {\n                            r.y = this._bounds.height + 1.0 - h / 2;\n                        }\n\n                        return r;\n                    }\n                },\n\n                _getCursor: function(point) {\n                    var hit = this._hitTest(point);\n                    if (hit && (hit.x >= -1) && (hit.x <= 1) && (hit.y >= -1) && (hit.y <= 1) && this._resizable()) {\n                        var angle = this._angle;\n                        if (angle) {\n                            hit.rotate(angle, new Point(0, 0));\n                            hit = new Point(Math.round(hit.x), Math.round(hit.y));\n                        }\n\n                        if (hit.x == -1 && hit.y == -1) {\n                            return \"nw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == 1) {\n                            return \"se-resize\";\n                        }\n                        if (hit.x == -1 && hit.y == 1) {\n                            return \"sw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == -1) {\n                            return \"ne-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == -1) {\n                            return \"n-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == 1) {\n                            return \"s-resize\";\n                        }\n                        if (hit.x == 1 && hit.y === 0) {\n                            return \"e-resize\";\n                        }\n                        if (hit.x == -1 && hit.y === 0) {\n                            return \"w-resize\";\n                        }\n                    }\n                    return this._manipulating ? Cursors.move : Cursors.select;\n                },\n\n                _initialize: function() {\n                    var that = this, i, item,\n                        items = that.diagram.select();\n\n                    that.shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof diagram.Shape) {\n                            that.shapes.push(item);\n                            item._rotationOffset = new Point();\n                        }\n                    }\n\n                    that._angle = that.shapes.length == 1 ? that.shapes[0].rotate().angle : 0;\n                    that._startAngle = that._angle;\n                    that._rotates();\n                    that._positions();\n                    that.refreshBounds();\n                    that.refresh();\n                    that.redraw();\n                },\n\n                _rotates: function() {\n                    var that = this, i, shape;\n                    that.initialRotates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialRotates.push(shape.rotate().angle);\n                    }\n                },\n\n                _positions: function() {\n                    var that = this, i, shape;\n                    that.initialStates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialStates.push(shape.bounds());\n                    }\n                },\n\n                _hover: function(value, element) {\n                    if (this._resizable()) {\n                        var handleOptions = this._handleOptions(),\n                            hover = handleOptions.hover,\n                            stroke = handleOptions.stroke,\n                            fill = handleOptions.fill;\n\n                        if (value && Utils.isDefined(hover.stroke)) {\n                            stroke = deepExtend({}, stroke, hover.stroke);\n                        }\n\n                        if (value && Utils.isDefined(hover.fill)) {\n                            fill = hover.fill;\n                        }\n                        element.stroke(stroke.color, stroke.width, stroke.opacity);\n                        element.fill(fill.color, fill.opacity);\n                    }\n                },\n\n                start: function(p) {\n                    this._sp = p;\n                    this._cp = p;\n                    this._lp = p;\n                    this._manipulating = true;\n                    this._internalChange = true;\n                    this.shapeStates = [];\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.shapeStates.push(shape.bounds());\n                    }\n                },\n\n                redraw: function() {\n                    var i, handle,\n                        visibleHandles = this._resizable();\n\n                    for (i = 0; i < this.map.length; i++) {\n                        handle = this.map[i];\n                        handle.visual.visible(visibleHandles);\n                    }\n                },\n\n                angle: function(value) {\n                    if (defined(value)) {\n                        this._angle = value;\n                    }\n\n                    return this._angle;\n                },\n\n                rotate: function() {\n                    var center = this._innerBounds.center();\n                    var currentAngle = this.angle();\n                    this._internalChange = true;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        currentAngle = (currentAngle + this.initialRotates[i] - this._startAngle) % 360;\n                        shape.rotate(currentAngle, center);\n                    }\n                    this.refresh();\n                },\n\n                move: function(handle, p) {\n                    var delta, dragging,\n                        dtl = new Point(),\n                        dbr = new Point(),\n                        bounds, center, shape,\n                        i, angle, newBounds,\n                        changed = 0, staticPoint,\n                        scaleX, scaleY;\n\n                    if (handle.y === -2 && handle.x === -1) {\n                        center = this._innerBounds.center();\n                        this._angle = this._truncateAngle(Utils.findAngle(center, p));\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            angle = (this._angle + this.initialRotates[i] - this._startAngle) % 360;\n                            shape.rotate(angle, center);\n                            if (shape.hasOwnProperty(\"layout\")) {\n                                shape.layout(shape);\n                            }\n                            this._rotating = true;\n                        }\n                        this.refresh();\n                    } else {\n                        if (this.shouldSnap()) {\n                            var thr = this._truncateDistance(p.minus(this._lp));\n                            // threshold\n                            if (thr.x === 0 && thr.y === 0) {\n                                this._cp = p;\n                                return;\n                            }\n                            delta = thr;\n                            this._lp = new Point(this._lp.x + thr.x, this._lp.y + thr.y);\n                        } else {\n                            delta = p.minus(this._cp);\n                        }\n\n                        if (this.isDragHandle(handle)) {\n                            dbr = dtl = delta; // dragging\n                            dragging = true;\n                        } else {\n                            if (this._angle) { // adjust the delta so that resizers resize in the correct direction after rotation.\n                                delta.rotate(this._angle, new Point(0, 0));\n                            }\n                            if (handle.x == -1) {\n                                dtl.x = delta.x;\n                            } else if (handle.x == 1) {\n                                dbr.x = delta.x;\n                            }\n                            if (handle.y == -1) {\n                                dtl.y = delta.y;\n                            } else if (handle.y == 1) {\n                                dbr.y = delta.y;\n                            }\n                        }\n\n                        if (!dragging) {\n                            staticPoint = hitToOppositeSide(handle, this._innerBounds);\n                            scaleX = (this._innerBounds.width + delta.x * handle.x) / this._innerBounds.width;\n                            scaleY = (this._innerBounds.height + delta.y * handle.y) / this._innerBounds.height;\n                        }\n\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            bounds = shape.bounds();\n                            if (dragging) {\n                                if (!canDrag(shape)) {\n                                    continue;\n                                }\n                                newBounds = this._displaceBounds(bounds, dtl, dbr, dragging);\n                            } else {\n                                newBounds = bounds.clone();\n                                newBounds.scale(scaleX, scaleY, staticPoint, this._innerBounds.center(), shape.rotate().angle);\n                                var newCenter = newBounds.center(); // fixes the new rotation center.\n                                newCenter.rotate(-this._angle, bounds.center());\n                                newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                            }\n                            if (newBounds.width >= shape.options.minWidth && newBounds.height >= shape.options.minHeight) { // if we up-size very small shape\n                                var oldBounds = bounds;\n                                shape.bounds(newBounds);\n                                if (shape.hasOwnProperty(\"layout\")) {\n                                    shape.layout(shape, oldBounds, newBounds);\n                                }\n                                if (oldBounds.width !== newBounds.width || oldBounds.height !== newBounds.height) {\n                                    shape.rotate(shape.rotate().angle); // forces the rotation to update it's rotation center\n                                }\n                                changed += 1;\n                            }\n                        }\n\n                        if (changed) {\n                            if (changed == i) {\n                                newBounds = this._displaceBounds(this._innerBounds, dtl, dbr, dragging);\n                                this.bounds(newBounds);\n                            } else {\n                                this.refreshBounds();\n                            }\n                            this.refresh();\n                        }\n\n                        this._positions();\n                    }\n\n                    this._cp = p;\n                },\n\n                isDragHandle: function(handle) {\n                    return handle.x === 0 && handle.y === 0;\n                },\n\n                cancel: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        shapes[idx].bounds(states[idx]);\n                    }\n                    this.refreshBounds();\n                    this.refresh();\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                },\n\n                _truncatePositionToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncatePositionToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateSizeToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncateSizeToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateAngle: function(a) {\n                    var snap = this.snapOptions();\n                    var snapAngle = Math.max(snap.angle || DEFAULT_SNAP_ANGLE, MIN_SNAP_ANGLE);\n                    return snap ? Math.floor((a % 360) / snapAngle) * snapAngle : (a % 360);\n                },\n\n                _truncateDistance: function(d) {\n                    if (d instanceof diagram.Point) {\n                        return new diagram.Point(this._truncateDistance(d.x), this._truncateDistance(d.y));\n                    } else {\n                        var snap = this.snapOptions() || {};\n                        var snapSize = Math.max(snap.size || DEFAULT_SNAP_SIZE, MIN_SNAP_SIZE);\n                        return snap ? Math.floor(d / snapSize) * snapSize : d;\n                    }\n                },\n\n                snapOptions: function() {\n                    var editable = this.diagram.options.editable;\n                    var snap = ((editable || {}).drag || {}).snap || {};\n                    return snap;\n                },\n\n                shouldSnap: function() {\n                    var editable = this.diagram.options.editable;\n                    var drag = (editable || {}).drag;\n                    var snap = (drag || {}).snap;\n                    return editable !== false && drag !== false && snap !== false;\n                },\n\n                _displaceBounds: function(bounds, dtl, dbr, dragging) {\n                    var tl = bounds.topLeft().plus(dtl),\n                        br = bounds.bottomRight().plus(dbr),\n                        newBounds = Rect.fromPoints(tl, br),\n                        newCenter;\n                    if (!dragging) {\n                        newCenter = newBounds.center();\n                        newCenter.rotate(bounds.center(), -this._angle);\n                        newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                    }\n                    return newBounds;\n                },\n\n                stop: function() {\n                    var unit, i, shape;\n                    if (this._cp != this._sp) {\n                        if (this._rotating) {\n                            unit = new RotateUnit(this, this.shapes, this.initialRotates);\n                            this._rotating = false;\n                        } else if (this._diffStates()) {\n                            if (this.diagram.ruler) {\n                                for (i = 0; i < this.shapes.length; i++) {\n                                    shape = this.shapes[i];\n                                    var bounds = shape.bounds();\n                                    bounds = this._truncateSizeToGuides(this._truncatePositionToGuides(bounds));\n                                    shape.bounds(bounds);\n                                    this.refreshBounds();\n                                    this.refresh();\n                                }\n                            }\n                            for (i = 0; i < this.shapes.length; i++) {\n                                shape = this.shapes[i];\n                                shape.updateModel();\n                            }\n                            unit = new TransformUnit(this.shapes, this.shapeStates, this);\n                            this.diagram._syncShapeChanges();\n                        }\n                    }\n\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                    return unit;\n                },\n\n                _diffStates: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        if (!shapes[idx].bounds().equals(states[idx])) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n\n                refreshBounds: function() {\n                    var bounds = this.shapes.length == 1 ?\n                        this.shapes[0].bounds().clone() :\n                        this.diagram.boundingBox(this.shapes, true);\n\n                    this.bounds(bounds);\n                },\n\n                refresh: function() {\n                    var that = this, b, bounds;\n                    if (this.shapes.length > 0) {\n                        bounds = this.bounds();\n                        this.visual.visible(true);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.map, function() {\n                            b = that._getHandleBounds(new Point(this.x, this.y));\n                            this.visual.position(b.topLeft());\n                        });\n                        this.visual.position(bounds.topLeft());\n\n                        var center = new Point(bounds.width / 2, bounds.height / 2);\n                        this.visual.rotate(this._angle, center);\n                        this.rect.redraw({ width: bounds.width, height: bounds.height });\n                        if (this.rotationThumb) {\n                            var thumb = this.options.editable.rotate.thumb;\n                            this._rotationThumbBounds = new Rect(bounds.center().x, bounds.y + thumb.y, 0, 0).inflate(thumb.width);\n                            this.rotationThumb.redraw({ x: bounds.width / 2 - thumb.width / 2 });\n                        }\n                    } else {\n                        this.visual.visible(false);\n                    }\n                }\n            });\n\n            var Selector = Class.extend({\n                init: function(diagram) {\n                    var selectable = diagram.options.selectable;\n                    this.options = deepExtend({}, this.options, selectable);\n\n                    this.visual = new Rectangle(this.options);\n                    this.diagram = diagram;\n                },\n                options: {\n                    stroke: {\n                        color: \"#778899\",\n                        width: 1,\n                        dashType: \"dash\"\n                    },\n                    fill: {\n                        color: TRANSPARENT\n                    }\n                },\n                start: function(p) {\n                    this._sp = this._ep = p;\n                    this.refresh();\n                    this.diagram._adorn(this, true);\n                },\n                end: function() {\n                    this._sp = this._ep = undefined$1;\n                    this.diagram._adorn(this, false);\n                },\n                bounds: function(value) {\n                    if (value) {\n                        this._bounds = value;\n                    }\n                    return this._bounds;\n                },\n                move: function(p) {\n                    this._ep = p;\n                    this.refresh();\n                },\n                refresh: function() {\n                    if (this._sp) {\n                        var visualBounds = Rect.fromPoints(this.diagram.modelToLayer(this._sp), this.diagram.modelToLayer(this._ep));\n                        this.bounds(Rect.fromPoints(this._sp, this._ep));\n                        this.visual.position(visualBounds.topLeft());\n                        this.visual.redraw({ height: visualBounds.height + 1, width: visualBounds.width + 1 });\n                    }\n                }\n            });\n\n            var ConnectorVisual = Class.extend({\n                init: function(connector) {\n                    this.options = deepExtend({}, connector.options);\n                    this._c = connector;\n                    this.visual = new Circle(this.options);\n                    this.refresh();\n                },\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && Utils.isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && Utils.isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.visual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n                },\n                refresh: function() {\n                    var p = this._c.shape.diagram.modelToView(this._c.position()),\n                        relative = p.minus(this._c.shape.bounds(\"transformed\").topLeft()),\n                        value = new Rect(p.x, p.y, 0, 0);\n                    value.inflate(this.options.width / 2, this.options.height / 2);\n                    this._visualBounds = value;\n                    this.visual.redraw({ center: new Point(relative.x, relative.y) });\n                },\n                _hitTest: function(p) {\n                    var tp = this._c.shape.diagram.modelToView(p);\n                    return this._visualBounds.contains(tp);\n                }\n            });\n\n            function canDrag(element) {\n                var editable = element.options.editable;\n                return editable && editable.drag !== false;\n            }\n\n            function hitTestShapeConnectors(shape, point) {\n                var connector, position, rect;\n                for (var idx = 0; idx < shape.connectors.length; idx++) {\n                    connector = shape.connectors[idx];\n                    position = connector.position();\n                    rect = new Rect(position.x, position.y);\n                    rect.inflate(HIT_TEST_DISTANCE, HIT_TEST_DISTANCE);\n                    if (rect.contains(point)) {\n                        return connector;\n                    }\n                }\n            }\n\n            function noMeta(meta) {\n                return meta.ctrlKey === false && meta.altKey === false && meta.shiftKey === false;\n            }\n\n            deepExtend(diagram, {\n                CompositeUnit: CompositeUnit,\n                TransformUnit: TransformUnit,\n                PanUndoUnit: PanUndoUnit,\n                AddShapeUnit: AddShapeUnit,\n                AddConnectionUnit: AddConnectionUnit,\n                DeleteShapeUnit: DeleteShapeUnit,\n                DeleteConnectionUnit: DeleteConnectionUnit,\n                ConnectionEditAdorner: ConnectionEditAdorner,\n                ConnectionTool: ConnectionTool,\n                ConnectorVisual: ConnectorVisual,\n                UndoRedoService: UndoRedoService,\n                ResizingAdorner: ResizingAdorner,\n                Selector: Selector,\n                ToolService: ToolService,\n                ConnectorsAdorner: ConnectorsAdorner,\n                LayoutUndoUnit: LayoutUndoUnit,\n                ConnectionEditUnit: ConnectionEditUnit,\n                ToFrontUnit: ToFrontUnit,\n                ToBackUnit: ToBackUnit,\n                ConnectionRouterBase: ConnectionRouterBase,\n                PolylineRouter: PolylineRouter,\n                CascadingRouter: CascadingRouter,\n                SelectionTool: SelectionTool,\n                ScrollerTool: ScrollerTool,\n                PointerTool: PointerTool,\n                ConnectionEditTool: ConnectionEditTool,\n                RotateUnit: RotateUnit\n            });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Graph = diagram.Graph,\n            Node = diagram.Node,\n            Link = diagram.Link,\n            deepExtend = kendo.deepExtend,\n            Size = diagram.Size,\n            Rect = diagram.Rect,\n            Dictionary = diagram.Dictionary,\n            Set = diagram.Set,\n            HyperTree = diagram.Graph,\n            Utils = diagram.Utils,\n            Point = diagram.Point,\n            EPSILON = 1e-06,\n            DEG_TO_RAD = Math.PI / 180,\n            contains = Utils.contains,\n            grep = $.grep;\n\n        /**\n         * Base class for layout algorithms.\n         * @type {*}\n         */\n        var LayoutBase = kendo.Class.extend({\n            defaultOptions: {\n                type: \"Tree\",\n                subtype: \"Down\",\n                roots: null,\n                animate: false,\n                //-------------------------------------------------------------------\n                /**\n                 * Force-directed option: whether the motion of the nodes should be limited by the boundaries of the diagram surface.\n                 */\n                limitToView: false,\n                /**\n                 * Force-directed option: the amount of friction applied to the motion of the nodes.\n                 */\n                friction: 0.9,\n                /**\n                 * Force-directed option: the optimal distance between nodes (minimum energy).\n                 */\n                nodeDistance: 50,\n                /**\n                 * Force-directed option: the number of time things are being calculated.\n                 */\n                iterations: 300,\n                //-------------------------------------------------------------------\n                /**\n                 * Tree option: the separation in one direction (depends on the subtype what direction this is).\n                 */\n                horizontalSeparation: 90,\n                /**\n                 * Tree option: the separation in the complementary direction (depends on the subtype what direction this is).\n                 */\n                verticalSeparation: 50,\n\n                //-------------------------------------------------------------------\n                /**\n                 * Tip-over tree option: children-to-parent vertical distance.\n                 */\n                underneathVerticalTopOffset: 15,\n                /**\n                 * Tip-over tree option: children-to-parent horizontal distance.\n                 */\n                underneathHorizontalOffset: 15,\n                /**\n                 * Tip-over tree option: leaf-to-next-branch vertical distance.\n                 */\n                underneathVerticalSeparation: 15,\n                //-------------------------------------------------------------------\n                /**\n                 * Settings object to organize the different components of the diagram in a grid layout structure\n                 */\n                grid: {\n                    /**\n                     * The width of the grid in which components are arranged. Beyond this width a component will be on the next row.\n                     */\n                    width: 1500,\n                    /**\n                     * The left offset of the grid.\n                     */\n                    offsetX: 50,\n                    /**\n                     * The top offset of the grid.\n                     */\n                    offsetY: 50,\n                    /**\n                     * The horizontal padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingX: 20,\n                    /**\n                     * The vertical padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingY: 20\n                },\n\n                //-------------------------------------------------------------------\n                /**\n                 * Layered option: the separation height/width between the layers.\n                 */\n                layerSeparation: 50,\n                /**\n                 * Layered option: how many rounds of shifting and fine-tuning.\n                 */\n                layeredIterations: 2,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                startRadialAngle: 0,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                endRadialAngle: 360,\n                /**\n                 * Tree-radial option: the separation between levels.\n                 */\n                radialSeparation: 150,\n                /**\n                 * Tree-radial option: the separation between the root and the first level.\n                 */\n                radialFirstLevelSeparation: 200,\n                /**\n                 * Tree-radial option: whether a virtual roots bing the components in one radial layout.\n                 */\n                keepComponentsInOneRadialLayout: false,\n                //-------------------------------------------------------------------\n\n                // TODO: ensure to change this to false when containers are around\n                ignoreContainers: true,\n                layoutContainerChildren: false,\n                ignoreInvisible: true,\n                animateTransitions: false\n            },\n            init: function() {\n            },\n\n            /**\n             * Organizes the components in a grid.\n             * Returns the final set of nodes (not the Graph).\n             * @param components\n             */\n            gridLayoutComponents: function(components) {\n                if (!components) {\n                    throw \"No components supplied.\";\n                }\n\n                // calculate and cache the bounds of the components\n                Utils.forEach(components, function(c) {\n                    c.calcBounds();\n                });\n\n                // order by decreasing width\n                components.sort(function(a, b) {\n                    return b.bounds.width - a.bounds.width;\n                });\n\n                var maxWidth = this.options.grid.width,\n                    offsetX = this.options.grid.componentSpacingX,\n                    offsetY = this.options.grid.componentSpacingY,\n                    height = 0,\n                    startX = this.options.grid.offsetX,\n                    startY = this.options.grid.offsetY,\n                    x = startX,\n                    y = startY,\n                    i,\n                    resultLinkSet = [],\n                    resultNodeSet = [];\n\n                while (components.length > 0) {\n                    if (x >= maxWidth) {\n                        // start a new row\n                        x = startX;\n                        y += height + offsetY;\n                        // reset the row height\n                        height = 0;\n                    }\n                    var component = components.pop();\n                    this.moveToOffset(component, new Point(x, y));\n                    for (i = 0; i < component.nodes.length; i++) {\n                        resultNodeSet.push(component.nodes[i]); // to be returned in the end\n                    }\n                    for (i = 0; i < component.links.length; i++) {\n                        resultLinkSet.push(component.links[i]);\n                    }\n                    var boundingRect = component.bounds;\n                    var currentHeight = boundingRect.height;\n                    if (currentHeight <= 0 || isNaN(currentHeight)) {\n                        currentHeight = 0;\n                    }\n                    var currentWidth = boundingRect.width;\n                    if (currentWidth <= 0 || isNaN(currentWidth)) {\n                        currentWidth = 0;\n                    }\n\n                    if (currentHeight >= height) {\n                        height = currentHeight;\n                    }\n                    x += currentWidth + offsetX;\n                }\n\n                return {\n                    nodes: resultNodeSet,\n                    links: resultLinkSet\n                };\n            },\n\n            moveToOffset: function(component, p) {\n                var i, j,\n                    bounds = component.bounds,\n                    deltax = p.x - bounds.x,\n                    deltay = p.y - bounds.y;\n\n                for (i = 0; i < component.nodes.length; i++) {\n                    var node = component.nodes[i];\n                    var nodeBounds = node.bounds();\n                    if (nodeBounds.width === 0 && nodeBounds.height === 0 && nodeBounds.x === 0 && nodeBounds.y === 0) {\n                        nodeBounds = new Rect(0, 0, 0, 0);\n                    }\n                    nodeBounds.x += deltax;\n                    nodeBounds.y += deltay;\n                    node.bounds(nodeBounds);\n                }\n                for (i = 0; i < component.links.length; i++) {\n                    var link = component.links[i];\n                    if (link.points) {\n                        var newpoints = [];\n                        var points = link.points;\n                        for (j = 0; j < points.length; j++) {\n                            var pt = points[j];\n                            pt.x += deltax;\n                            pt.y += deltay;\n                            newpoints.push(pt);\n                        }\n                        link.points = newpoints;\n                    }\n                }\n                this.currentHorizontalOffset += bounds.width + this.options.grid.offsetX;\n                return new Point(deltax, deltay);\n            },\n\n            transferOptions: function(options) {\n\n                // Size options lead to stackoverflow and need special handling\n\n                this.options = kendo.deepExtend({}, this.defaultOptions);\n                if (Utils.isUndefined(options)) {\n                    return;\n                }\n\n                this.options = kendo.deepExtend(this.options, options || {});\n            }\n        });\n\n        /**\n         * The data bucket a hypertree holds in its nodes.     *\n         * @type {*}\n         */\n        /* var ContainerGraph = kendo.Class.extend({\n         init: function (diagram) {\n         this.diagram = diagram;\n         this.graph = new Graph(diagram);\n         this.container = null;\n         this.containerNode = null;\n         }\n\n         });*/\n\n        /**\n         * Adapter between the diagram control and the graph representation. It converts shape and connections to nodes and edges taking into the containers and their collapsef state,\n         * the visibility of items and more. If the layoutContainerChildren is true a hypertree is constructed which holds the hierarchy of containers and many conditions are analyzed\n         * to investigate how the effective graph structure looks like and how the layout has to be performed.\n         * @type {*}\n         */\n        var DiagramToHyperTreeAdapter = kendo.Class.extend({\n            init: function(diagram) {\n\n                /**\n                 * The mapping to/from the original nodes.\n                 * @type {Dictionary}\n                 */\n                this.nodeMap = new Dictionary();\n\n                /**\n                 * Gets the mapping of a shape to a container in case the shape sits in a collapsed container.\n                 * @type {Dictionary}\n                 */\n                this.shapeMap = new Dictionary();\n\n                /**\n                 * The nodes being mapped.\n                 * @type {Dictionary}\n                 */\n                this.nodes = [];\n\n                /**\n                 * The connections being mapped.\n                 * @type {Dictionary}\n                 */\n                this.edges = [];\n\n                // the mapping from an edge to all the connections it represents, this can be both because of multiple connections between\n                // two shapes or because a container holds multiple connections to another shape or container.\n                this.edgeMap = new Dictionary();\n\n                /**\n                 * The resulting set of Nodes when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalNodes = [];\n\n                /**\n                 * The resulting set of Links when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalLinks = [];\n\n                /**\n                 * The items being omitted because of multigraph edges.\n                 * @type {Array}\n                 */\n                this.ignoredConnections = [];\n\n                /**\n                 * The items being omitted because of containers, visibility and other factors.\n                 * @type {Array}\n                 */\n                this.ignoredShapes = [];\n\n                /**\n                 * The map from a node to the partition/hypernode in which it sits. This hyperMap is null if 'options.layoutContainerChildren' is false.\n                 * @type {Dictionary}\n                 */\n                this.hyperMap = new Dictionary();\n\n                /**\n                 * The hypertree contains the hierarchy defined by the containers.\n                 * It's in essence a Graph of Graphs with a tree structure defined by the hierarchy of containers.\n                 * @type {HyperTree}\n                 */\n                this.hyperTree = new Graph();\n\n                /**\n                 * The resulting graph after conversion. Note that this does not supply the information contained in the\n                 * ignored connection and shape collections.\n                 * @type {null}\n                 */\n                this.finalGraph = null;\n\n                this.diagram = diagram;\n            },\n\n            /**\n             * The hyperTree is used when the 'options.layoutContainerChildren' is true. It contains the hierarchy of containers whereby each node is a ContainerGraph.\n             * This type of node has a Container reference to the container which holds the Graph items. There are three possible situations during the conversion process:\n             *  - Ignore the containers: the container are non-existent and only normal shapes are mapped. If a shape has a connection to a container it will be ignored as well\n             *    since there is no node mapped for the container.\n             *  - Do not ignore the containers and leave the content of the containers untouched: the top-level elements are being mapped and the children within a container are not altered.\n             *  - Do not ignore the containers and organize the content of the containers as well: the hypertree is constructed and there is a partitioning of all nodes and connections into the hypertree.\n             *    The only reason a connection or node is not being mapped might be due to the visibility, which includes the visibility change through a collapsed parent container.\n             * @param options\n             */\n            convert: function(options) {\n\n                if (Utils.isUndefined(this.diagram)) {\n                    throw \"No diagram to convert.\";\n                }\n\n                this.options = kendo.deepExtend({\n                        ignoreInvisible: true,\n                        ignoreContainers: true,\n                        layoutContainerChildren: false\n                    },\n                    options || {}\n                );\n\n                this.clear();\n                // create the nodes which participate effectively in the graph analysis\n                this._renormalizeShapes();\n\n                // recreate the incoming and outgoing collections of each and every node\n                this._renormalizeConnections();\n\n                // export the resulting graph\n                this.finalNodes = new Dictionary(this.nodes);\n                this.finalLinks = new Dictionary(this.edges);\n\n                this.finalGraph = new Graph();\n                this.finalNodes.forEach(function(n) {\n                    this.finalGraph.addNode(n);\n                }, this);\n                this.finalLinks.forEach(function(l) {\n                    this.finalGraph.addExistingLink(l);\n                }, this);\n                return this.finalGraph;\n            },\n\n            /**\n             * Maps the specified connection to an edge of the graph deduced from the given diagram.\n             * @param connection\n             * @returns {*}\n             */\n            mapConnection: function(connection) {\n                return this.edgeMap.get(connection.id);\n            },\n\n            /**\n             * Maps the specified shape to a node of the graph deduced from the given diagram.\n             * @param shape\n             * @returns {*}\n             */\n            mapShape: function(shape) {\n                return this.nodeMap.get(shape.id);\n            },\n\n            /**\n             * Gets the edge, if any, between the given nodes.\n             * @param a\n             * @param b\n             */\n            getEdge: function(a, b) {\n                return Utils.first(a.links, function(link) {\n                    return link.getComplement(a) === b;\n                });\n            },\n\n            /**\n             * Clears all the collections used by the conversion process.\n             */\n            clear: function() {\n                this.finalGraph = null;\n                this.hyperTree = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new HyperTree() : null;\n                this.hyperMap = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new Dictionary() : null;\n                this.nodeMap = new Dictionary();\n                this.shapeMap = new Dictionary();\n                this.nodes = [];\n                this.edges = [];\n                this.edgeMap = new Dictionary();\n                this.ignoredConnections = [];\n                this.ignoredShapes = [];\n                this.finalNodes = [];\n                this.finalLinks = [];\n            },\n\n            /**\n             * The path from a given ContainerGraph to the root (container).\n             * @param containerGraph\n             * @returns {Array}\n             */\n            listToRoot: function(containerGraph) {\n                var list = [];\n                var s = containerGraph.container;\n                if (!s) {\n                    return list;\n                }\n                list.push(s);\n                while (s.parentContainer) {\n                    s = s.parentContainer;\n                    list.push(s);\n                }\n                list.reverse();\n                return list;\n            },\n\n            firstNonIgnorableContainer: function(shape) {\n\n                if (shape.isContainer && !this._isIgnorableItem(shape)) {\n                    return shape;\n                }\n                return !shape.parentContainer ? null : this.firstNonIgnorableContainer(shape.parentContainer);\n            },\n            isContainerConnection: function(a, b) {\n                if (a.isContainer && this.isDescendantOf(a, b)) {\n                    return true;\n                }\n                return b.isContainer && this.isDescendantOf(b, a);\n            },\n\n            /**\n             * Returns true if the given shape is a direct child or a nested container child of the given container.\n             * If the given container and shape are the same this will return false since a shape cannot be its own child.\n             * @param scope\n             * @param a\n             * @returns {boolean}\n             */\n            isDescendantOf: function(scope, a) {\n                if (!scope.isContainer) {\n                    throw \"Expecting a container.\";\n                }\n                if (scope === a) {\n                    return false;\n                }\n                if (contains(scope.children, a)) {\n                    return true;\n                }\n                var containers = [];\n                for (var i = 0, len = scope.children.length; i < len; i++) {\n                    var c = scope.children[i];\n                    if (c.isContainer && this.isDescendantOf(c, a)) {\n                        containers.push(c);\n                    }\n                }\n\n                return containers.length > 0;\n            },\n            isIgnorableItem: function(shape) {\n                if (this.options.ignoreInvisible) {\n                    if (shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    if (!shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    return true;\n                }\n                else {\n                    return shape.isCollapsed && !this._isTop(shape);\n                }\n            },\n\n            /**\n             *  Determines whether the shape is or needs to be mapped to another shape. This occurs essentially when the shape sits in\n             * a collapsed container hierarchy and an external connection needs a node endpoint. This node then corresponds to the mapped shape and is\n             * necessarily a container in the parent hierarchy of the shape.\n             * @param shape\n             */\n            isShapeMapped: function(shape) {\n                return shape.isCollapsed && !this._isVisible(shape) && !this._isTop(shape);\n            },\n\n            leastCommonAncestor: function(a, b) {\n                if (!a) {\n                    throw \"Parameter should not be null.\";\n                }\n                if (!b) {\n                    throw \"Parameter should not be null.\";\n                }\n\n                if (!this.hyperTree) {\n                    throw \"No hypertree available.\";\n                }\n                var al = this.listToRoot(a);\n                var bl = this.listToRoot(b);\n                var found = null;\n                if (Utils.isEmpty(al) || Utils.isEmpty(bl)) {\n                    return this.hyperTree.root.data;\n                }\n                var xa = al[0];\n                var xb = bl[0];\n                var i = 0;\n                while (xa === xb) {\n                    found = al[i];\n                    i++;\n                    if (i >= al.length || i >= bl.length) {\n                        break;\n                    }\n                    xa = al[i];\n                    xb = bl[i];\n                }\n                if (!found) {\n                    return this.hyperTree.root.data;\n                }\n                else {\n                    return grep(this.hyperTree.nodes, function(n) {\n                        return n.data.container === found;\n                    });\n                }\n            },\n            /**\n             * Determines whether the specified item is a top-level shape or container.\n             * @param item\n             * @returns {boolean}\n             * @private\n             */\n            _isTop: function(item) {\n                return !item.parentContainer;\n            },\n\n            /**\n             * Determines iteratively (by walking up the container stack) whether the specified shape is visible.\n             * This does NOT tell whether the item is not visible due to an explicit Visibility change or due to a collapse state.\n             * @param shape\n             * @returns {*}\n             * @private\n             */\n            _isVisible: function(shape) {\n\n                if (!shape.visible()) {\n                    return false;\n                }\n                return !shape.parentContainer ? shape.visible() : this._isVisible(shape.parentContainer);\n            },\n\n            _isCollapsed: function(shape) {\n\n                if (shape.isContainer && shape.isCollapsed) {\n                    return true;\n                }\n                return shape.parentContainer && this._isCollapsed(shape.parentContainer);\n            },\n\n            /**\n             * First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.\n             * @private\n             */\n            _renormalizeShapes: function() {\n                // add the nodes, the adjacency structure will be reconstructed later on\n                if (this.options.ignoreContainers) {\n                    for (var i = 0, len = this.diagram.shapes.length; i < len; i++) {\n                        var shape = this.diagram.shapes[i];\n\n                        // if not visible (and ignoring the invisible ones) or a container we skip\n                        if ((this.options.ignoreInvisible && !this._isVisible(shape)) || shape.isContainer) {\n                            this.ignoredShapes.push(shape);\n                            continue;\n                        }\n                        var node = new Node(shape.id, shape);\n                        node.isVirtual = false;\n\n                        // the mapping will always contain singletons and the hyperTree will be null\n                        this.nodeMap.add(shape.id, node);\n                        this.nodes.push(node);\n                    }\n                }\n                else {\n                    throw \"Containers are not supported yet, but stay tuned.\";\n                }\n            },\n\n            /**\n             * Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.\n             * @private\n             */\n            _renormalizeConnections: function() {\n                if (this.diagram.connections.length === 0) {\n                    return;\n                }\n                for (var i = 0, len = this.diagram.connections.length; i < len; i++) {\n                    var conn = this.diagram.connections[i];\n\n                    if (this.isIgnorableItem(conn)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    var source = !conn.sourceConnector ? null : conn.sourceConnector.shape;\n                    var sink = !conn.targetConnector ? null : conn.targetConnector.shape;\n\n                    // no layout for floating connections\n                    if (!source || !sink) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (contains(this.ignoredShapes, source) && !this.shapeMap.containsKey(source)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n                    if (contains(this.ignoredShapes, sink) && !this.shapeMap.containsKey(sink)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    // if the endpoint sits in a collapsed container we need the container rather than the shape itself\n                    if (this.shapeMap.containsKey(source)) {\n                        source = this.shapeMap[source];\n                    }\n                    if (this.shapeMap.containsKey(sink)) {\n                        sink = this.shapeMap[sink];\n                    }\n\n                    var sourceNode = this.mapShape(source);\n                    var sinkNode = this.mapShape(sink);\n                    if ((sourceNode === sinkNode) || this.areConnectedAlready(sourceNode, sinkNode)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (sourceNode === null || sinkNode === null) {\n                        throw \"A shape was not mapped to a node.\";\n                    }\n                    if (this.options.ignoreContainers) {\n                        // much like a floating connection here since at least one end is attached to a container\n                        if (sourceNode.isVirtual || sinkNode.isVirtual) {\n                            this.ignoredConnections.push(conn);\n                            continue;\n                        }\n                        var newEdge = new Link(sourceNode, sinkNode, conn.id, conn);\n\n                        this.edgeMap.add(conn.id, newEdge);\n                        this.edges.push(newEdge);\n                    }\n                    else {\n                        throw \"Containers are not supported yet, but stay tuned.\";\n                    }\n                }\n            },\n\n            areConnectedAlready: function(n, m) {\n                return Utils.any(this.edges, function(l) {\n                    return l.source === n && l.target === m || l.source === m && l.target === n;\n                });\n            }\n\n            /**\n             * Depth-first traversal of the given container.\n             * @param container\n             * @param action\n             * @param includeStart\n             * @private\n             */\n            /* _visitContainer: function (container, action, includeStart) {\n\n             *//*if (container == null) throw new ArgumentNullException(\"container\");\n             if (action == null) throw new ArgumentNullException(\"action\");\n             if (includeStart) action(container);\n             if (container.children.isEmpty()) return;\n             foreach(\n             var item\n             in\n             container.children.OfType < IShape > ()\n             )\n             {\n             var childContainer = item\n             as\n             IContainerShape;\n             if (childContainer != null) this.VisitContainer(childContainer, action);\n             else action(item);\n             }*//*\n             }*/\n\n\n        });\n\n        /**\n         * The classic spring-embedder (aka force-directed, Fruchterman-Rheingold, barycentric) algorithm.\n         * http://en.wikipedia.org/wiki/Force-directed_graph_drawing\n         *  - Chapter 12 of Tamassia et al. \"Handbook of graph drawing and visualization\".\n         *  - Kobourov on preprint arXiv; http://arxiv.org/pdf/1201.3011.pdf\n         *  - Fruchterman and Rheingold in SOFTWARE-PRACTICE AND EXPERIENCE, VOL. 21(1 1), 1129-1164 (NOVEMBER 1991)\n         * @type {*}\n         */\n        var SpringLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutGraph: function(graph, options) {\n\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                var initialTemperature = this.options.nodeDistance * 9;\n                this.temperature = initialTemperature;\n\n                var guessBounds = this._expectedBounds();\n                this.width = guessBounds.width;\n                this.height = guessBounds.height;\n\n                for (var step = 0; step < this.options.iterations; step++) {\n                    this.refineStage = step >= this.options.iterations * 5 / 6;\n                    this.tick();\n                    // exponential cooldown\n                    this.temperature = this.refineStage ?\n                        initialTemperature / 30 :\n                        initialTemperature * (1 - step / (2 * this.options.iterations ));\n                }\n            },\n\n            /**\n             * Single iteration of the simulation.\n             */\n            tick: function() {\n                var i;\n                // collect the repulsive forces on each node\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    this._repulsion(this.graph.nodes[i]);\n                }\n\n                // collect the attractive forces on each node\n                for (i = 0; i < this.graph.links.length; i++) {\n                    this._attraction(this.graph.links[i]);\n                }\n                // update the positions\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    var node = this.graph.nodes[i];\n                    var offset = Math.sqrt(node.dx * node.dx + node.dy * node.dy);\n                    if (offset === 0) {\n                        return;\n                    }\n                    node.x += Math.min(offset, this.temperature) * node.dx / offset;\n                    node.y += Math.min(offset, this.temperature) * node.dy / offset;\n                    if (this.options.limitToView) {\n                        node.x = Math.min(this.width, Math.max(node.width / 2, node.x));\n                        node.y = Math.min(this.height, Math.max(node.height / 2, node.y));\n                    }\n                }\n            },\n\n            /**\n             * Shakes the node away from its current position to escape the deadlock.\n             * @param node A Node.\n             * @private\n             */\n            _shake: function(node) {\n                // just a simple polar neighborhood\n                var rho = Math.random() * this.options.nodeDistance / 4;\n                var alpha = Math.random() * 2 * Math.PI;\n                node.x += rho * Math.cos(alpha);\n                node.y -= rho * Math.sin(alpha);\n            },\n\n            /**\n             * The typical Coulomb-Newton force law F=k/r^2\n             * @remark This only works in dimensions less than three.\n             * @param d\n             * @param n A Node.\n             * @param m Another Node.\n             * @returns {number}\n             * @private\n             */\n            _InverseSquareForce: function(d, n, m) {\n                var force;\n                if (!this.refineStage) {\n                    force = Math.pow(d, 2) / Math.pow(this.options.nodeDistance, 2);\n                }\n                else {\n                    var deltax = n.x - m.x;\n                    var deltay = n.y - m.y;\n\n                    var wn = n.width / 2;\n                    var hn = n.height / 2;\n                    var wm = m.width / 2;\n                    var hm = m.height / 2;\n\n                    force = (Math.pow(deltax, 2) / Math.pow(wn + wm + this.options.nodeDistance, 2)) + (Math.pow(deltay, 2) / Math.pow(hn + hm + this.options.nodeDistance, 2));\n                }\n                return force * 4 / 3;\n            },\n\n            /**\n             * The typical Hooke force law F=kr^2\n             * @param d\n             * @param n\n             * @param m\n             * @returns {number}\n             * @private\n             */\n            _SquareForce: function(d, n, m) {\n                return 1 / this._InverseSquareForce(d, n, m);\n            },\n\n            _repulsion: function(n) {\n                n.dx = 0;\n                n.dy = 0;\n                Utils.forEach(this.graph.nodes, function(m) {\n                    if (m === n) {\n                        return;\n                    }\n                    while (n.x === m.x && n.y === m.y) {\n                        this._shake(m);\n                    }\n                    var vx = n.x - m.x;\n                    var vy = n.y - m.y;\n                    var distance = Math.sqrt(vx * vx + vy * vy);\n                    var r = this._SquareForce(distance, n, m) * 2;\n                    n.dx += (vx / distance) * r;\n                    n.dy += (vy / distance) * r;\n                }, this);\n            },\n            _attraction: function(link) {\n                var t = link.target;\n                var s = link.source;\n                if (s === t) {\n                    // loops induce endless shakes\n                    return;\n                }\n                while (s.x === t.x && s.y === t.y) {\n                    this._shake(t);\n                }\n\n                var vx = s.x - t.x;\n                var vy = s.y - t.y;\n                var distance = Math.sqrt(vx * vx + vy * vy);\n\n                var a = this._InverseSquareForce(distance, s, t) * 5;\n                var dx = (vx / distance) * a;\n                var dy = (vy / distance) * a;\n                t.dx += dx;\n                t.dy += dy;\n                s.dx -= dx;\n                s.dy -= dy;\n            },\n\n            /**\n             * Calculates the expected bounds after layout.\n             * @returns {*}\n             * @private\n             */\n            _expectedBounds: function() {\n\n                var size, N = this.graph.nodes.length, /*golden ration optimal?*/ ratio = 1.5, multiplier = 4;\n                if (N === 0) {\n                    return size;\n                }\n                size = Utils.fold(this.graph.nodes, function(s, node) {\n                    var area = node.width * node.height;\n                    if (area > 0) {\n                        s += Math.sqrt(area);\n                        return s;\n                    }\n                    return 0;\n                }, 0, this);\n                var av = size / N;\n                var squareSize = av * Math.ceil(Math.sqrt(N));\n                var width = squareSize * Math.sqrt(ratio);\n                var height = squareSize / Math.sqrt(ratio);\n                return { width: width * multiplier, height: height * multiplier };\n            }\n\n        });\n\n        var TreeLayoutProcessor = kendo.Class.extend({\n\n            init: function(options) {\n                this.center = null;\n                this.options = options;\n            },\n            layout: function(treeGraph, root) {\n                this.graph = treeGraph;\n                if (!this.graph.nodes || this.graph.nodes.length === 0) {\n                    return;\n                }\n\n                if (!contains(this.graph.nodes, root)) {\n                    throw \"The given root is not in the graph.\";\n                }\n\n                this.center = root;\n                this.graph.cacheRelationships();\n                /* var nonull = this.graph.nodes.where(function (n) {\n                 return n.associatedShape != null;\n                 });*/\n\n                // transfer the rects\n                /*nonull.forEach(function (n) {\n                 n.Location = n.associatedShape.Position;\n                 n.NodeSize = n.associatedShape.ActualBounds.ToSize();\n                 }\n\n                 );*/\n\n                // caching the children\n                /* nonull.forEach(function (n) {\n                 n.children = n.getChildren();\n                 });*/\n\n                this.layoutSwitch();\n\n                // apply the layout to the actual visuals\n                // nonull.ForEach(n => n.associatedShape.Position = n.Location);\n            },\n\n            layoutLeft: function(left) {\n                this.setChildrenDirection(this.center, \"Left\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    node.TreeDirection = \"Left\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x - this.options.horizontalSeparation;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    var p = new Point(x - node.Size.width, y);\n\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutRight: function(right) {\n                this.setChildrenDirection(this.center, \"Right\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    node.TreeDirection = \"Right\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x + this.options.horizontalSeparation + this.center.width;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutUp: function(up) {\n                this.setChildrenDirection(this.center, \"Up\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y, node, i;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    node.TreeDirection = \"Up\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n\n                // y = this.center.y -verticalSeparation -this.center.height/2 - h;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    y = this.center.y - this.options.verticalSeparation - node.Size.height;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutDown: function(down) {\n                var node, i;\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    node.treeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutRadialTree: function() {\n                // var rmax = children.Aggregate(0D, (current, node) => Math.max(node.SectorAngle, current));\n                this.setChildrenDirection(this.center, \"Radial\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.previousRoot = null;\n                var startAngle = this.options.startRadialAngle * DEG_TO_RAD;\n                var endAngle = this.options.endRadialAngle * DEG_TO_RAD;\n                if (endAngle <= startAngle) {\n                    throw \"Final angle should not be less than the start angle.\";\n                }\n\n                this.maxDepth = 0;\n                this.origin = new Point(this.center.x, this.center.y);\n                this.calculateAngularWidth(this.center, 0);\n\n                // perform the layout\n                if (this.maxDepth > 0) {\n                    this.radialLayout(this.center, this.options.radialFirstLevelSeparation, startAngle, endAngle);\n                }\n\n                // update properties of the root node\n                this.center.Angle = endAngle - startAngle;\n            },\n\n            tipOverTree: function(down, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.setChildrenLayout(this.center, \"Underneath\", false, startFromLevel);\n                var w = 0, y, node, i;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n\n                    // if (node.IsSpecial) continue;\n                    node.TreeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n\n                // putting the root in the center with respect to the whole diagram is not a nice result, let's put it with respect to the first level only\n                w -= down[down.length - 1].width;\n                w += down[down.length - 1].associatedShape.bounds().width;\n\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    // if (node.IsSpecial) continue;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n\n                /*//let's place the special node, assuming there is only one\n                 if (down.Count(n => n.IsSpecial) > 0)\n                 {\n                 var special = (from n in down where n.IsSpecial select n).First();\n                 if (special.Children.Count > 0)\n                 throw new DiagramException(\"The 'special' element should not have children.\");\n                 special.Data.Location = new Point(Center.Data.Location.X + Center.AssociatedShape.BoundingRectangle.Width + this.options.HorizontalSeparation, Center.Data.Location.Y);\n                 }*/\n            },\n            calculateAngularWidth: function(n, d) {\n                if (d > this.maxDepth) {\n                    this.maxDepth = d;\n                }\n\n                var aw = 0, w = 1000, h = 1000, diameter = d === 0 ? 0 : Math.sqrt((w * w) + (h * h)) / d;\n\n                if (n.children.length > 0) {\n                    // eventually with n.IsExpanded\n                    for (var i = 0, len = n.children.length; i < len; i++) {\n                        var child = n.children[i];\n                        aw += this.calculateAngularWidth(child, d + 1);\n                    }\n                    aw = Math.max(diameter, aw);\n                }\n                else {\n                    aw = diameter;\n                }\n\n                n.sectorAngle = aw;\n                return aw;\n            },\n            sortChildren: function(n) {\n                var basevalue = 0, i;\n\n                // update basevalue angle for node ordering\n                if (n.parents.length > 1) {\n                    throw \"Node is not part of a tree.\";\n                }\n                var p = n.parents[0];\n                if (p) {\n                    var pl = new Point(p.x, p.y);\n                    var nl = new Point(n.x, n.y);\n                    basevalue = this.normalizeAngle(Math.atan2(pl.y - nl.y, pl.x - nl.x));\n                }\n\n                var count = n.children.length;\n                if (count === 0) {\n                    return null;\n                }\n\n                var angle = [];\n                var idx = [];\n\n                for (i = 0; i < count; ++i) {\n                    var c = n.children[i];\n                    var l = new Point(c.x, c.y);\n                    idx[i] = i;\n                    angle[i] = this.normalizeAngle(-basevalue + Math.atan2(l.y - l.y, l.x - l.x));\n                }\n\n                Utils.bisort(angle, idx);\n                var col = []; // list of nodes\n                var children = n.children;\n                for (i = 0; i < count; ++i) {\n                    col.push(children[idx[i]]);\n                }\n\n                return col;\n            },\n\n            normalizeAngle: function(angle) {\n                while (angle > Math.PI * 2) {\n                    angle -= 2 * Math.PI;\n                }\n                while (angle < 0) {\n                    angle += Math.PI * 2;\n                }\n                return angle;\n            },\n            radialLayout: function(node, radius, startAngle, endAngle) {\n                var deltaTheta = endAngle - startAngle;\n                var deltaThetaHalf = deltaTheta / 2.0;\n                var parentSector = node.sectorAngle;\n                var fraction = 0;\n                var sorted = this.sortChildren(node);\n                for (var i = 0, len = sorted.length; i < len; i++) {\n                    var childNode = sorted[i];\n                    var cp = childNode;\n                    var childAngleFraction = cp.sectorAngle / parentSector;\n                    if (childNode.children.length > 0) {\n                        this.radialLayout(childNode,\n                            radius + this.options.radialSeparation,\n                            startAngle + (fraction * deltaTheta),\n                            startAngle + ((fraction + childAngleFraction) * deltaTheta));\n                    }\n\n                    this.setPolarLocation(childNode, radius, startAngle + (fraction * deltaTheta) + (childAngleFraction * deltaThetaHalf));\n                    cp.angle = childAngleFraction * deltaTheta;\n                    fraction += childAngleFraction;\n                }\n            },\n            setPolarLocation: function(node, radius, angle) {\n                node.x = this.origin.x + (radius * Math.cos(angle));\n                node.y = this.origin.y + (radius * Math.sin(angle));\n                node.BoundingRectangle = new Rect(node.x, node.y, node.width, node.height);\n            },\n\n            /**\n             * Sets the children direction recursively.\n             * @param node\n             * @param direction\n             * @param includeStart\n             */\n            setChildrenDirection: function(node, direction, includeStart) {\n                var rootDirection = node.treeDirection;\n                this.graph.depthFirstTraversal(node, function(n) {\n                    n.treeDirection = direction;\n                });\n                if (!includeStart) {\n                    node.treeDirection = rootDirection;\n                }\n            },\n\n            /**\n             * Sets the children layout recursively.\n             * @param node\n             * @param layout\n             * @param includeStart\n             * @param startFromLevel\n             */\n            setChildrenLayout: function(node, layout, includeStart, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n                var rootLayout = node.childrenLayout;\n                if (startFromLevel > 0) {\n                    // assign levels to the Node.Level property\n                    this.graph.assignLevels(node);\n\n                    // assign the layout on the condition that the level is at least the 'startFromLevel'\n                    this.graph.depthFirstTraversal(\n                        node, function(s) {\n                            if (s.level >= startFromLevel + 1) {\n                                s.childrenLayout = layout;\n                            }\n                        }\n                    );\n                }\n                else {\n                    this.graph.depthFirstTraversal(node, function(s) {\n                        s.childrenLayout = layout;\n                    });\n\n                    // if the start should not be affected we put the state back\n                    if (!includeStart) {\n                        node.childrenLayout = rootLayout;\n                    }\n                }\n            },\n\n            /**\n             * Returns the actual size of the node. The given size is the allowed space wherein the node can lay out itself.\n             * @param node\n             * @param givenSize\n             * @returns {Size}\n             */\n            measure: function(node, givenSize) {\n                var w = 0, h = 0, s;\n                var result = new Size(0, 0);\n                if (!node) {\n                    throw \"\";\n                }\n                var b = node.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (node.parents.length !== 1) {\n                    throw \"Node not in a spanning tree.\";\n                }\n\n                var parent = node.parents[0];\n                if (node.treeDirection === \"Undefined\") {\n                    node.treeDirection = parent.treeDirection;\n                }\n\n                if (Utils.isEmpty(node.children)) {\n                    result = new Size(\n                        Math.abs(shapeWidth) < EPSILON ? 50 : shapeWidth,\n                        Math.abs(shapeHeight) < EPSILON ? 25 : shapeHeight);\n                }\n                else if (node.children.length === 1) {\n                    switch (node.treeDirection) {\n                        case \"Radial\":\n                            s = this.measure(node.children[0], givenSize); // child size\n                            w = shapeWidth + (this.options.radialSeparation * Math.cos(node.AngleToParent)) + s.width;\n                            h = shapeHeight + Math.abs(this.options.radialSeparation * Math.sin(node.AngleToParent)) + s.height;\n                            break;\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                    break;\n\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + s.width + this.options.underneathHorizontalOffset;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + this.options.horizontalSeparation + s.width;\n                                    h = Math.max(shapeHeight, s.height);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Radial layout measuring.\";\n                            }\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = Math.max(shapeWidth, s.width + this.options.underneathHorizontalOffset);\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    h = shapeHeight + this.options.verticalSeparation + s.height;\n                                    w = Math.max(shapeWidth, s.width);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n                else {\n                    var i, childNode;\n                    switch (node.treeDirection) {\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = shapeWidth;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, shapeWidth + this.options.horizontalSeparation + s.width);\n                                        h += s.height + this.options.verticalSeparation;\n                                    }\n                                    h -= this.options.verticalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Right layout measuring.\";\n                            }\n\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = 0;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w += s.width + this.options.horizontalSeparation;\n                                        h = Math.max(h, s.height + this.options.verticalSeparation + shapeHeight);\n                                    }\n\n                                    w -= this.options.horizontalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n\n                node.SectorAngle = Math.sqrt((w * w / 4) + (h * h / 4));\n                node.Size = result;\n                return result;\n            },\n            arrange: function(n, p) {\n                var i, pp, child, node, childrenwidth, b = n.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (Utils.isEmpty(n.children)) {\n                    n.x = p.x;\n                    n.y = p.y;\n                    n.BoundingRectangle = new Rect(p.x, p.y, shapeWidth, shapeHeight);\n                }\n                else {\n                    var x, y;\n                    var selfLocation;\n                    switch (n.treeDirection) {\n                        case \"Left\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        node = node.children[i];\n                                        x = selfLocation.x - node.associatedShape.width - this.options.underneathHorizontalOffset;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + n.Size.width - shapeWidth, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = selfLocation.x - this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x - node.Size.width, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Right\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.underneathHorizontalOffset;\n\n                                    // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Up\":\n                            selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y + n.Size.height - shapeHeight);\n                            n.x = selfLocation.x;\n                            n.y = selfLocation.y;\n                            n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                            if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                childrenwidth = 0;\n                                // means there is an aberration due to the oversized Element with respect to the children\n                                for (i = 0; i < n.children.length; i++) {\n                                    child = n.children[i];\n                                    childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                }\n                                childrenwidth -= this.options.horizontalSeparation;\n                                x = p.x + ((shapeWidth - childrenwidth) / 2);\n                            }\n                            else {\n                                x = p.x;\n                            }\n\n                            for (i = 0; i < n.children.length; i++) {\n                                node = n.children[i];\n                                y = selfLocation.y - this.options.verticalSeparation - node.Size.height;\n                                pp = new Point(x, y);\n                                this.arrange(node, pp);\n                                x += node.Size.width + this.options.horizontalSeparation;\n                            }\n                            break;\n\n                        case \"Down\":\n\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + this.options.underneathHorizontalOffset; // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y);\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                        childrenwidth = 0;\n                                        // means there is an aberration due to the oversized Element with respect to the children\n                                        for (i = 0; i < n.children.length; i++) {\n                                            child = n.children[i];\n                                            childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                        }\n\n                                        childrenwidth -= this.options.horizontalSeparation;\n                                        x = p.x + ((shapeWidth - childrenwidth) / 2);\n                                    }\n                                    else {\n                                        x = p.x;\n                                    }\n\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        y = selfLocation.y + this.options.verticalSeparation + shapeHeight;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        x += node.Size.width + this.options.horizontalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n                            break;\n\n                        case \"None\":\n                            break;\n\n                        default:\n                            throw \"Unsupported TreeDirection\";\n                    }\n                }\n            },\n            layoutSwitch: function() {\n                if (!this.center) {\n                    return;\n                }\n\n                if (Utils.isEmpty(this.center.children)) {\n                    return;\n                }\n\n                var type = this.options.subtype;\n                if (Utils.isUndefined(type)) {\n                    type = \"Down\";\n                }\n                var single, male, female, leftcount;\n                var children = this.center.children;\n                switch (type.toLowerCase()) {\n                    case \"radial\":\n                    case \"radialtree\":\n                        this.layoutRadialTree();\n                        break;\n\n                    case \"mindmaphorizontal\":\n                    case \"mindmap\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutRight(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n\n                            this.layoutLeft(male);\n                            this.layoutRight(female);\n                        }\n                        break;\n\n                    case \"mindmapvertical\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutDown(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n                            this.layoutUp(male);\n                            this.layoutDown(female);\n                        }\n                        break;\n\n                    case \"right\":\n                        this.layoutRight(this.center.children);\n                        break;\n\n                    case \"left\":\n                        this.layoutLeft(this.center.children);\n                        break;\n\n                    case \"up\":\n                    case \"bottom\":\n                        this.layoutUp(this.center.children);\n                        break;\n\n                    case \"down\":\n                    case \"top\":\n                        this.layoutDown(this.center.children);\n                        break;\n\n                    case \"tipover\":\n                    case \"tipovertree\":\n                        if (this.options.tipOverTreeStartLevel < 0) {\n                            throw \"The tip-over level should be a positive integer.\";\n                        }\n                        this.tipOverTree(this.center.children, this.options.tipOverTreeStartLevel);\n                        break;\n\n                    case \"undefined\":\n                    case \"none\":\n                        break;\n                }\n            }\n        });\n\n        /**\n         * The various tree layout algorithms.\n         * @type {*}\n         */\n        var TreeLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            /**\n             * Arranges the diagram in a tree-layout with the specified options and tree subtype.\n             */\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                // transform the diagram into a Graph\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\n                /**\n                 * The Graph reduction from the given diagram.\n                 * @type {*}\n                 */\n                this.graph = adapter.convert();\n\n                var finalNodeSet = this.layoutComponents();\n\n                // note that the graph contains the original data and\n                // the components are another instance of nodes referring to the same set of shapes\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutComponents: function() {\n                if (this.graph.isEmpty()) {\n                    return;\n                }\n\n                // split into connected components\n                var components = this.graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n\n                var layout = new TreeLayoutProcessor(this.options);\n                var trees = [];\n                // find a spanning tree for each component\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n\n                    var treeGraph = this.getTree(component);\n                    if (!treeGraph) {\n                        throw \"Failed to find a spanning tree for the component.\";\n                    }\n                    var root = treeGraph.root;\n                    var tree = treeGraph.tree;\n                    layout.layout(tree, root);\n\n                    trees.push(tree);\n                }\n\n                return this.gridLayoutComponents(trees);\n\n            },\n\n            /**\n             * Gets a spanning tree (and root) for the given graph.\n             * Ensure that the given graph is connected!\n             * @param graph\n             * @returns {*} A literal object consisting of the found root and the spanning tree.\n             */\n            getTree: function(graph) {\n                var root = null;\n                if (this.options.roots && this.options.roots.length > 0) {\n                    for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                        var node = graph.nodes[i];\n                        for (var j = 0; j < this.options.roots.length; j++) {\n                            var givenRootShape = this.options.roots[j];\n                            if (givenRootShape === node.associatedShape) {\n                                root = node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!root) {\n                    // finds the most probable root on the basis of the longest path in the component\n                    root = graph.root();\n                    // should not happen really\n                    if (!root) {\n                        throw \"Unable to find a root for the tree.\";\n                    }\n                }\n                return this.getTreeForRoot(graph, root);\n            },\n\n            getTreeForRoot: function(graph, root) {\n\n                var tree = graph.getSpanningTree(root);\n                if (Utils.isUndefined(tree) || tree.isEmpty()) {\n                    return null;\n                }\n                return {\n                    tree: tree,\n                    root: tree.root\n                };\n            }\n\n        });\n\n        /**\n         * The Sugiyama aka layered layout algorithm.\n         * @type {*}\n         */\n        var LayeredLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n\n            },\n\n            /**\n             * Initializes the runtime data properties of the layout.\n             * @private\n             */\n            _initRuntimeProperties: function() {\n                for (var k = 0; k < this.graph.nodes.length; k++) {\n                    var node = this.graph.nodes[k];\n                    node.layer = -1;\n                    node.downstreamLinkCount = 0;\n                    node.upstreamLinkCount = 0;\n\n                    node.isVirtual = false;\n\n                    node.uBaryCenter = 0.0;\n                    node.dBaryCenter = 0.0;\n\n                    node.upstreamPriority = 0;\n                    node.downstreamPriority = 0;\n\n                    node.gridPosition = 0;\n                }\n            },\n            _prepare: function(graph) {\n                var current = [], i, l, link;\n\n                // defines a mapping of a node to the layer index\n                var layerMap = new Dictionary();\n                var layerCount = 0;\n                var targetLayer, next, target;\n\n                Utils.forEach(graph.nodes, function(node) {\n                    if (node.incoming.length === 0) {\n                        layerMap.set(node, 0);\n                        current.push(node);\n                    }\n                });\n\n                while (current.length > 0) {\n                    next = current.shift();\n                    for (i = 0; i < next.outgoing.length; i++) {\n                        link = next.outgoing[i];\n                        target = link.target;\n\n                        if (layerMap.containsKey(target)) {\n                            targetLayer = Math.max(layerMap.get(next) + 1, layerMap.get(target));\n                        } else {\n                            targetLayer = layerMap.get(next) + 1;\n                        }\n                        layerMap.set(target, targetLayer);\n                        if (targetLayer > layerCount) {\n                            layerCount = targetLayer;\n                        }\n\n                        if (!contains(current, target)) {\n                            current.push(target);\n                        }\n                    }\n                }\n\n                var sortedNodes = layerMap.keys();\n\n                sortedNodes.sort(function(o1, o2) {\n                    var o1layer = layerMap.get(o1);\n                    var o2layer = layerMap.get(o2);\n                    return Utils.sign(o2layer - o1layer);\n                });\n\n                for (var n = 0; n < sortedNodes.length; ++n) {\n                    var node = sortedNodes[n];\n                    var minLayer = Number.MAX_VALUE;\n\n                    if (node.outgoing.length === 0) {\n                        continue;\n                    }\n\n                    for (l = 0; l < node.outgoing.length; ++l) {\n                        link = node.outgoing[l];\n                        minLayer = Math.min(minLayer, layerMap.get(link.target));\n                    }\n\n                    if (minLayer > 1) {\n                        layerMap.set(node, minLayer - 1);\n                    }\n                }\n\n                this.layers = [];\n                var layer;\n                for (i = 0; i < layerCount + 1; i++) {\n                    layer = [];\n                    layer.linksTo = {};\n                    this.layers.push(layer);\n                }\n\n                layerMap.forEach(function(node, layer) {\n                    node.layer = layer;\n                    this.layers[layer].push(node);\n                }, this);\n\n                // set initial grid positions\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n                    for (i = 0; i < layer.length; i++) {\n                        layer[i].gridPosition = i;\n                    }\n                }\n            },\n            /**\n             * Performs the layout of a single component.\n             */\n            layoutGraph: function(graph, options) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph given or graph analysis of the diagram failed.\";\n                }\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                // sets unique indices on the nodes\n                graph.setItemIndices();\n\n                // ensures no cycles present for this layout\n                var reversedEdges = graph.makeAcyclic();\n\n                // define the runtime props being used by the layout algorithm\n                this._initRuntimeProperties();\n\n                this._prepare(graph, options);\n\n                this._dummify();\n\n                this._optimizeCrossings();\n\n                this._swapPairs();\n\n                this.arrangeNodes();\n\n                this._moveThingsAround();\n\n                this._dedummify();\n\n                // re-reverse the links which were switched earlier\n                Utils.forEach(reversedEdges, function(e) {\n                    if (e.points) {\n                        e.points.reverse();\n                    }\n                });\n            },\n\n            setMinDist: function(m, n, minDist) {\n                var l = m.layer;\n                var i = m.layerIndex;\n                this.minDistances[l][i] = minDist;\n            },\n\n            getMinDist: function(m, n) {\n                var dist = 0,\n                    i1 = m.layerIndex,\n                    i2 = n.layerIndex,\n                    l = m.layer,\n                    min = Math.min(i1, i2),\n                    max = Math.max(i1, i2);\n                // use Sum()?\n                for (var k = min; k < max; ++k) {\n                    dist += this.minDistances[l][k];\n                }\n                return dist;\n            },\n\n            placeLeftToRight: function(leftClasses) {\n                var leftPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = leftClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!leftPos.containsKey(node)) {\n                            this.placeLeft(node, leftPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.POSITIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var rightSibling = this.rightSibling(node);\n                        if (rightSibling && this.nodeLeftClass.get(rightSibling) !== c) {\n                            d = Math.min(d, leftPos.get(rightSibling) - leftPos.get(node) - this.getMinDist(node, rightSibling));\n                        }\n                    }\n                    if (d === Number.POSITIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeLeftClass.get(neighbor) < c) {\n                                    D.push(leftPos.get(neighbor) - leftPos.get(node));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        leftPos.set(node, leftPos.get(node) + d);\n                    }\n                }\n                return leftPos;\n            },\n\n            placeRightToLeft: function(rightClasses) {\n                var rightPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = rightClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!rightPos.containsKey(node)) {\n                            this.placeRight(node, rightPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.NEGATIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var leftSibling = this.leftSibling(node);\n                        if (leftSibling && this.nodeRightClass.get(leftSibling) !== c) {\n                            d = Math.max(d, rightPos.get(leftSibling) - rightPos.get(node) + this.getMinDist(leftSibling, node));\n                        }\n                    }\n                    if (d === Number.NEGATIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeRightClass.get(neighbor) < c) {\n                                    D.push(rightPos.get(node) - rightPos.get(neighbor));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        rightPos.set(node, rightPos.get(node) + d);\n                    }\n                }\n                return rightPos;\n            },\n\n            _getLeftWing: function() {\n                var leftWing = { value: null };\n                var result = this.computeClasses(leftWing, 1);\n                this.nodeLeftClass = leftWing.value;\n                return result;\n            },\n\n            _getRightWing: function() {\n                var rightWing = { value: null };\n                var result = this.computeClasses(rightWing, -1);\n                this.nodeRightClass = rightWing.value;\n                return result;\n            },\n\n            computeClasses: function(wingPair, d) {\n                var currentWing = 0,\n                    wing = wingPair.value = new Dictionary();\n\n                for (var l = 0; l < this.layers.length; ++l) {\n                    currentWing = l;\n\n                    var layer = this.layers[l];\n                    for (var n = d === 1 ? 0 : layer.length - 1; n >= 0 && n < layer.length; n += d) {\n                        var node = layer[n];\n                        if (!wing.containsKey(node)) {\n                            wing.set(node, currentWing);\n                            if (node.isVirtual) {\n                                var ndsinl = this._nodesInLink(node);\n                                for (var kk = 0; kk < ndsinl.length; kk++) {\n                                    var vnode = ndsinl[kk];\n                                    wing.set(vnode, currentWing);\n                                }\n                            }\n                        }\n                        else {\n                            currentWing = wing.get(node);\n                        }\n                    }\n                }\n\n                var wings = [];\n                for (var i = 0; i < this.layers.length; i++) {\n                    wings.push(null);\n                }\n                wing.forEach(function(node, classIndex) {\n                    if (wings[classIndex] === null) {\n                        wings[classIndex] = [];\n                    }\n                    wings[classIndex].push(node);\n                });\n\n                return wings;\n            },\n            _isVerticalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"up\" || this.options.subtype.toLowerCase() === \"down\" || this.options.subtype.toLowerCase() === \"vertical\";\n            },\n\n            _isHorizontalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"left\" || this.options.subtype.toLowerCase() === \"horizontal\";\n            },\n            _isIncreasingLayout: function() {\n                // meaning that the visiting of the layers goes in the natural order of increasing layer index\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"down\";\n            },\n            _moveThingsAround: function() {\n                var i, l, node, layer, n, w;\n                // sort the layers by their grid position\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    layer.sort(this._gridPositionComparer);\n                }\n\n                this.minDistances = [];\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    this.minDistances[l] = [];\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        node.layerIndex = n;\n                        this.minDistances[l][n] = this.options.nodeDistance;\n                        if (n < layer.length - 1) {\n                            if (this._isVerticalLayout()) {\n                                this.minDistances[l][n] += (node.width + layer[n + 1].width) / 2;\n                            }\n                            else {\n                                this.minDistances[l][n] += (node.height + layer[n + 1].height) / 2;\n                            }\n                        }\n                    }\n                }\n\n                this.downNodes = new Dictionary();\n                this.upNodes = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    this.downNodes.set(node, []);\n                    this.upNodes.set(node, []);\n                }, this);\n                Utils.forEach(this.graph.links, function(link) {\n                    var origin = link.source;\n                    var dest = link.target;\n                    var down = null, up = null;\n                    if (origin.layer > dest.layer) {\n                        down = link.source;\n                        up = link.target;\n                    }\n                    else {\n                        up = link.source;\n                        down = link.target;\n                    }\n                    this.downNodes.get(up).push(down);\n                    this.upNodes.get(down).push(up);\n                }, this);\n                this.downNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n                this.upNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n\n                for (l = 0; l < this.layers.length - 1; ++l) {\n                    layer = this.layers[l];\n                    for (w = 0; w < layer.length - 1; w++) {\n                        var currentNode = layer[w];\n                        if (!currentNode.isVirtual) {\n                            continue;\n                        }\n\n                        var currDown = this.downNodes.get(currentNode)[0];\n                        if (!currDown.isVirtual) {\n                            continue;\n                        }\n\n                        for (n = w + 1; n < layer.length; ++n) {\n                            node = layer[n];\n                            if (!node.isVirtual) {\n                                continue;\n                            }\n\n                            var downNode = this.downNodes.get(node)[0];\n                            if (!downNode.isVirtual) {\n                                continue;\n                            }\n\n                            if (currDown.gridPosition > downNode.gridPosition) {\n                                var pos = currDown.gridPosition;\n                                currDown.gridPosition = downNode.gridPosition;\n                                downNode.gridPosition = pos;\n                                var i1 = currDown.layerIndex;\n                                var i2 = downNode.layerIndex;\n                                this.layers[l + 1][i1] = downNode;\n                                this.layers[l + 1][i2] = currDown;\n                                currDown.layerIndex = i2;\n                                downNode.layerIndex = i1;\n                            }\n                        }\n                    }\n                }\n\n\n                var leftClasses = this._getLeftWing();\n                var rightClasses = this._getRightWing();\n\n\n                var leftPos = this.placeLeftToRight(leftClasses);\n                var rightPos = this.placeRightToLeft(rightClasses);\n                var x = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    x.set(node, (leftPos.get(node) + rightPos.get(node)) / 2);\n                });\n\n\n                var order = new Dictionary();\n                var placed = new Dictionary();\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    var sequenceStart = -1, sequenceEnd = -1;\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        order.set(node, 0);\n                        placed.set(node, false);\n                        if (node.isVirtual) {\n                            if (sequenceStart === -1) {\n                                sequenceStart = n;\n                            }\n                            else if (sequenceStart === n - 1) {\n                                sequenceStart = n;\n                            }\n                            else {\n                                sequenceEnd = n;\n                                order.set(layer[sequenceStart], 0);\n                                if (x.get(node) - x.get(layer[sequenceStart]) === this.getMinDist(layer[sequenceStart], node)) {\n                                    placed.set(layer[sequenceStart], true);\n                                }\n                                else {\n                                    placed.set(layer[sequenceStart], false);\n                                }\n                                sequenceStart = n;\n                            }\n                        }\n                    }\n                }\n                var directions = [1, -1];\n                Utils.forEach(directions, function(d) {\n                    var start = d === 1 ? 0 : this.layers.length - 1;\n                    for (var l = start; l >= 0 && l < this.layers.length; l += d) {\n                        var layer = this.layers[l];\n                        var virtualStartIndex = this._firstVirtualNode(layer);\n                        var virtualStart = null;\n                        var sequence = null;\n                        if (virtualStartIndex !== -1) {\n                            virtualStart = layer[virtualStartIndex];\n                            sequence = [];\n                            for (i = 0; i < virtualStartIndex; i++) {\n                                sequence.push(layer[i]);\n                            }\n                        }\n                        else {\n                            virtualStart = null;\n                            sequence = layer;\n                        }\n                        if (sequence.length > 0) {\n                            this._sequencer(x, null, virtualStart, d, sequence);\n                            for (i = 0; i < sequence.length - 1; ++i) {\n                                this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                            }\n                            if (virtualStart) {\n                                this.setMinDist(sequence[sequence.length - 1], virtualStart, x.get(virtualStart) - x.get(sequence[sequence.length - 1]));\n                            }\n                        }\n\n                        while (virtualStart) {\n                            var virtualEnd = this.nextVirtualNode(layer, virtualStart);\n                            if (!virtualEnd) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < layer.length; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, null, d, sequence);\n                                    for (i = 0; i < sequence.length - 1; ++i) {\n                                        this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                                    }\n                                    this.setMinDist(virtualStart, sequence[0], x.get(sequence[0]) - x.get(virtualStart));\n                                }\n                            }\n                            else if (order.get(virtualStart) === d) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                var virtualEndIndex = virtualEnd.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < virtualEndIndex; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, virtualEnd, d, sequence);\n                                }\n                                placed.set(virtualStart, true);\n                            }\n                            virtualStart = virtualEnd;\n                        }\n                        this.adjustDirections(l, d, order, placed);\n                    }\n                }, this);\n\n\n                var fromLayerIndex = this._isIncreasingLayout() ? 0 : this.layers.length - 1;\n                var reachedFinalLayerIndex = function(k, ctx) {\n                    if (ctx._isIncreasingLayout()) {\n                        return k < ctx.layers.length;\n                    }\n                    else {\n                        return k >= 0;\n                    }\n                };\n                var layerIncrement = this._isIncreasingLayout() ? +1 : -1, offset = 0;\n\n                /**\n                 * Calcs the max height of the given layer.\n                 */\n                function maximumHeight(layer, ctx) {\n                    var height = Number.MIN_VALUE;\n                    for (var n = 0; n < layer.length; ++n) {\n                        var node = layer[n];\n                        if (ctx._isVerticalLayout()) {\n                            height = Math.max(height, node.height);\n                        }\n                        else {\n                            height = Math.max(height, node.width);\n                        }\n                    }\n                    return height;\n                }\n\n                for (i = fromLayerIndex; reachedFinalLayerIndex(i, this); i += layerIncrement) {\n                    layer = this.layers[i];\n                    var height = maximumHeight(layer, this);\n\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        if (this._isVerticalLayout()) {\n                            node.x = x.get(node);\n                            node.y = offset + height / 2;\n                        }\n                        else {\n                            node.x = offset + height / 2;\n                            node.y = x.get(node);\n                        }\n                    }\n\n                    offset += this.options.layerSeparation + height;\n                }\n            },\n\n            adjustDirections: function(l, d, order, placed) {\n                if (l + d < 0 || l + d >= this.layers.length) {\n                    return;\n                }\n\n                var prevBridge = null, prevBridgeTarget = null;\n                var layer = this.layers[l + d];\n                for (var n = 0; n < layer.length; ++n) {\n                    var nextBridge = layer[n];\n                    if (nextBridge.isVirtual) {\n                        var nextBridgeTarget = this.getNeighborOnLayer(nextBridge, l);\n                        if (nextBridgeTarget.isVirtual) {\n                            if (prevBridge) {\n                                var p = placed.get(prevBridgeTarget);\n                                var clayer = this.layers[l];\n                                var i1 = prevBridgeTarget.layerIndex;\n                                var i2 = nextBridgeTarget.layerIndex;\n                                for (var i = i1 + 1; i < i2; ++i) {\n                                    if (clayer[i].isVirtual) {\n                                        p = p && placed.get(clayer[i]);\n                                    }\n                                }\n                                if (p) {\n                                    order.set(prevBridge, d);\n                                    var j1 = prevBridge.layerIndex;\n                                    var j2 = nextBridge.layerIndex;\n                                    for (var j = j1 + 1; j < j2; ++j) {\n                                        if (layer[j].isVirtual) {\n                                            order.set(layer[j], d);\n                                        }\n                                    }\n                                }\n                            }\n                            prevBridge = nextBridge;\n                            prevBridgeTarget = nextBridgeTarget;\n                        }\n                    }\n                }\n            },\n\n            getNeighborOnLayer: function(node, l) {\n                var neighbor = this.upNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                neighbor = this.downNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                return null;\n            },\n\n            _sequencer: function(x, virtualStart, virtualEnd, dir, sequence) {\n                if (sequence.length === 1) {\n                    this._sequenceSingle(x, virtualStart, virtualEnd, dir, sequence[0]);\n                }\n\n                if (sequence.length > 1) {\n                    var r = sequence.length, t = this.intDiv(r, 2);\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(0, t));\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(t));\n                    this.combineSequences(x, virtualStart, virtualEnd, dir, sequence);\n                }\n            },\n\n            _sequenceSingle: function(x, virtualStart, virtualEnd, dir, node) {\n                var neighbors = dir === -1 ? this.downNodes.get(node) : this.upNodes.get(node);\n\n                var n = neighbors.length;\n                if (n !== 0) {\n                    if (n % 2 === 1) {\n                        x.set(node, x.get(neighbors[this.intDiv(n, 2)]));\n                    }\n                    else {\n                        x.set(node, (x.get(neighbors[this.intDiv(n, 2) - 1]) + x.get(neighbors[this.intDiv(n, 2)])) / 2);\n                    }\n\n                    if (virtualStart) {\n                        x.set(node, Math.max(x.get(node), x.get(virtualStart) + this.getMinDist(virtualStart, node)));\n                    }\n                    if (virtualEnd) {\n                        x.set(node, Math.min(x.get(node), x.get(virtualEnd) - this.getMinDist(node, virtualEnd)));\n                    }\n                }\n            },\n\n            combineSequences: function(x, virtualStart, virtualEnd, dir, sequence) {\n                var r = sequence.length, t = this.intDiv(r, 2);\n\n                // collect left changes\n                var leftHeap = [], i, c, n, neighbors, neighbor, pair;\n                for (i = 0; i < t; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) >= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            leftHeap.push({ k: x.get(neighbor) + this.getMinDist(sequence[i], sequence[t - 1]), v: 2 });\n                        }\n                    }\n                    leftHeap.push({ k: x.get(sequence[i]) + this.getMinDist(sequence[i], sequence[t - 1]), v: c });\n                }\n                if (virtualStart) {\n                    leftHeap.push({ k: x.get(virtualStart) + this.getMinDist(virtualStart, sequence[t - 1]), v: Number.MAX_VALUE });\n                }\n                leftHeap.sort(this._positionDescendingComparer);\n\n                // collect right changes\n                var rightHeap = [];\n                for (i = t; i < r; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) <= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            rightHeap.push({ k: x.get(neighbor) - this.getMinDist(sequence[i], sequence[t]), v: 2 });\n                        }\n                    }\n                    rightHeap.push({ k: x.get(sequence[i]) - this.getMinDist(sequence[i], sequence[t]), v: c });\n                }\n                if (virtualEnd) {\n                    rightHeap.push({ k: x.get(virtualEnd) - this.getMinDist(virtualEnd, sequence[t]), v: Number.MAX_VALUE });\n                }\n                rightHeap.sort(this._positionAscendingComparer);\n\n                var leftRes = 0, rightRes = 0;\n                var m = this.getMinDist(sequence[t - 1], sequence[t]);\n                while (x.get(sequence[t]) - x.get(sequence[t - 1]) < m) {\n                    if (leftRes < rightRes) {\n                        if (leftHeap.length === 0) {\n                            x.set(sequence[t - 1], x.get(sequence[t]) - m);\n                            break;\n                        }\n                        else {\n                            pair = leftHeap.shift();\n                            leftRes = leftRes + pair.v;\n                            x.set(sequence[t - 1], pair.k);\n                            x.set(sequence[t - 1], Math.max(x.get(sequence[t - 1]), x.get(sequence[t]) - m));\n                        }\n                    }\n                    else {\n                        if (rightHeap.length === 0) {\n                            x.set(sequence[t], x.get(sequence[t - 1]) + m);\n                            break;\n                        }\n                        else {\n                            pair = rightHeap.shift();\n                            rightRes = rightRes + pair.v;\n                            x.set(sequence[t], pair.k);\n                            x.set(sequence[t], Math.min(x.get(sequence[t]), x.get(sequence[t - 1]) + m));\n                        }\n                    }\n                }\n                for (i = t - 2; i >= 0; i--) {\n                    x.set(sequence[i], Math.min(x.get(sequence[i]), x.get(sequence[t - 1]) - this.getMinDist(sequence[i], sequence[t - 1])));\n                }\n                for (i = t + 1; i < r; i++) {\n                    x.set(sequence[i], Math.max(x.get(sequence[i]), x.get(sequence[t]) + this.getMinDist(sequence[i], sequence[t])));\n                }\n            },\n\n            placeLeft: function(node, leftPos, leftClass) {\n                var pos = Number.NEGATIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var leftSibling = this.leftSibling(v);\n                    if (leftSibling && this.nodeLeftClass.get(leftSibling) === this.nodeLeftClass.get(v)) {\n                        if (!leftPos.containsKey(leftSibling)) {\n                            this.placeLeft(leftSibling, leftPos, leftClass);\n                        }\n                        pos = Math.max(pos, leftPos.get(leftSibling) + this.getMinDist(leftSibling, v));\n                    }\n                }, this);\n                if (pos === Number.NEGATIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    leftPos.set(v, pos);\n                });\n            },\n\n            placeRight: function(node, rightPos, rightClass) {\n                var pos = Number.POSITIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var rightSibling = this.rightSibling(v);\n                    if (rightSibling && this.nodeRightClass.get(rightSibling) === this.nodeRightClass.get(v)) {\n                        if (!rightPos.containsKey(rightSibling)) {\n                            this.placeRight(rightSibling, rightPos, rightClass);\n                        }\n                        pos = Math.min(pos, rightPos.get(rightSibling) - this.getMinDist(v, rightSibling));\n                    }\n                }, this);\n                if (pos === Number.POSITIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    rightPos.set(v, pos);\n                });\n            },\n\n            leftSibling: function(node) {\n                var layer = this.layers[node.layer],\n                    layerIndex = node.layerIndex;\n                return layerIndex === 0 ? null : layer[layerIndex - 1];\n            },\n\n            rightSibling: function(node) {\n                var layer = this.layers[node.layer];\n                var layerIndex = node.layerIndex;\n                return layerIndex === layer.length - 1 ? null : layer[layerIndex + 1];\n\n            },\n\n            _getComposite: function(node) {\n                return node.isVirtual ? this._nodesInLink(node) : [node];\n            },\n\n            arrangeNodes: function() {\n                var i, l, ni, layer, node;\n                // Initialize node's base priority\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        node.upstreamPriority = node.upstreamLinkCount;\n                        node.downstreamPriority = node.downstreamLinkCount;\n                    }\n                }\n\n                // Layout is invoked after MinimizeCrossings\n                // so we may assume node's barycenters are initially correct\n\n                var maxLayoutIterations = 2;\n                for (var it = 0; it < maxLayoutIterations; it++) {\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        this.layoutLayer(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        this.layoutLayer(true, i);\n                    }\n                }\n\n                // Offset the whole structure so that there are no gridPositions < 0\n                var gridPos = Number.MAX_VALUE;\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        gridPos = Math.min(gridPos, node.gridPosition);\n                    }\n                }\n\n                if (gridPos < 0) {\n                    for (l = 0; l < this.layers.length; l++) {\n                        layer = this.layers[l];\n\n                        for (ni = 0; ni < layer.length; ni++) {\n                            node = layer[ni];\n                            node.gridPosition = node.gridPosition - gridPos;\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Layout of a single layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">The layer to organize.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <seealso cref=\"OptimizeCrossings()\"/>\n            layoutLayer: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // list containing the nodes in the considered layer sorted by priority\n                var sorted = [];\n                for (var n = 0; n < considered.length; n++) {\n                    sorted.push(considered[n]);\n                }\n                sorted.sort(function(n1, n2) {\n                    var n1Priority = (n1.upstreamPriority + n1.downstreamPriority) / 2;\n                    var n2Priority = (n2.upstreamPriority + n2.downstreamPriority) / 2;\n\n                    if (Math.abs(n1Priority - n2Priority) < 0.0001) {\n                        return 0;\n                    }\n                    if (n1Priority < n2Priority) {\n                        return 1;\n                    }\n                    return -1;\n                });\n\n                // each node strives for its barycenter; high priority nodes start first\n                Utils.forEach(sorted, function(node) {\n                    var nodeGridPos = node.gridPosition;\n                    var nodeBaryCenter = this.calcBaryCenter(node);\n                    var nodePriority = (node.upstreamPriority + node.downstreamPriority) / 2;\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.0001) {\n                        // This node is exactly at its barycenter -> perfect\n                        return;\n                    }\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.25 + 0.0001) {\n                        // This node is close enough to the barycenter -> should work\n                        return;\n                    }\n\n                    if (nodeGridPos < nodeBaryCenter) {\n                        // Try to move the node to the right in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos < nodeBaryCenter) {\n                            if (!this.moveRight(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                    else {\n                        // Try to move the node to the left in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos > nodeBaryCenter) {\n                            if (!this.moveLeft(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                }, this);\n\n                // after the layer has been rearranged we need to recalculate the barycenters\n                // of the nodes in the surrounding layers\n                if (iconsidered > 0) {\n                    this.calcDownData(iconsidered - 1);\n                }\n                if (iconsidered < this.layers.length - 1) {\n                    this.calcUpData(iconsidered + 1);\n                }\n            },\n\n            /// <summary>\n            /// Moves the node to the right and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveRight: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === layer.length - 1) {\n                    // this is the last node in the layer, so we can move to the right without troubles\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                var rightNode = layer[index + 1];\n                var rightNodePriority = (rightNode.upstreamPriority + rightNode.downstreamPriority) / 2;\n\n                // check if there is space between the right and the current node\n                if (rightNode.gridPosition > node.gridPosition + 1) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (rightNodePriority > priority ||\n                    Math.abs(rightNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // the right node has lower priority - try to move it\n                if (this.moveRight(rightNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            /// <summary>\n            /// Moves the node to the left and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveLeft: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === 0) {\n                    // this is the last node in the layer, so we can move to the left without troubles\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                var leftNode = layer[index - 1];\n                var leftNodePriority = (leftNode.upstreamPriority + leftNode.downstreamPriority) / 2;\n\n                // check if there is space between the left and the current node\n                if (leftNode.gridPosition < node.gridPosition - 1) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (leftNodePriority > priority ||\n                    Math.abs(leftNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // The left node has lower priority - try to move it\n                if (this.moveLeft(leftNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            mapVirtualNode: function(node, link) {\n                this.nodeToLinkMap.set(node, link);\n                if (!this.linkToNodeMap.containsKey(link)) {\n                    this.linkToNodeMap.set(link, []);\n                }\n                this.linkToNodeMap.get(link).push(node);\n            },\n\n            _nodesInLink: function(node) {\n                return this.linkToNodeMap.get(this.nodeToLinkMap.get(node));\n            },\n\n            /// <summary>\n            /// Inserts dummy nodes to break long links.\n            /// </summary>\n            _dummify: function() {\n                this.linkToNodeMap = new Dictionary();\n                this.nodeToLinkMap = new Dictionary();\n\n                var layer, pos, newNode, node, r, newLink, i, l, links = this.graph.links.slice(0);\n                var layers = this.layers;\n\n                var addLinkBetweenLayers = function(upLayer, downLayer, link) {\n                    layers[upLayer].linksTo[downLayer] = layers[upLayer].linksTo[downLayer] || [];\n                    layers[upLayer].linksTo[downLayer].push(link);\n                };\n\n                for (l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    var o = link.source;\n                    var d = link.target;\n\n                    var oLayer = o.layer;\n                    var dLayer = d.layer;\n                    var oPos = o.gridPosition;\n                    var dPos = d.gridPosition;\n\n                    var step = (dPos - oPos) / Math.abs(dLayer - oLayer);\n\n                    var p = o;\n                    if (oLayer - dLayer > 1) {\n                        for (i = oLayer - 1; i > dLayer; i--) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - dLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n\n                        // set the origin of the real arrow to the last dummy\n                        addLinkBetweenLayers(dLayer - 1, dLayer, newLink);\n                        link.changeSource(p);\n                        link.depthOfDumminess = oLayer - dLayer - 1;\n                    } else if (oLayer - dLayer < -1) {\n                        for (i = oLayer + 1; i < dLayer; i++) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - oLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            pos &= pos; // truncates to int\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n                        addLinkBetweenLayers(dLayer - 1, dLayer, link);\n\n                        // Set the origin of the real arrow to the last dummy\n                        link.changeSource(p);\n                        link.depthOfDumminess = dLayer - oLayer - 1;\n                    } else {\n                        addLinkBetweenLayers(oLayer, dLayer, link);\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Removes the dummy nodes inserted earlier to break long links.\n            /// </summary>\n            /// <remarks>The virtual nodes are effectively turned into intermediate connection points.</remarks>\n            _dedummify: function() {\n                var dedum = true;\n                while (dedum) {\n                    dedum = false;\n\n                    for (var l = 0; l < this.graph.links.length; l++) {\n                        var link = this.graph.links[l];\n                        if (!link.depthOfDumminess) {\n                            continue;\n                        }\n\n                        var points = [];\n\n                        // add points in reverse order\n                        points.unshift({ x: link.target.x, y: link.target.y });\n                        points.unshift({ x: link.source.x, y: link.source.y });\n\n                        // _dedummify the link\n                        var temp = link;\n                        var depthOfDumminess = link.depthOfDumminess;\n                        for (var d = 0; d < depthOfDumminess; d++) {\n                            var node = temp.source;\n                            var prevLink = node.incoming[0];\n\n                            points.unshift({ x: prevLink.source.x, y: prevLink.source.y });\n\n                            temp = prevLink;\n                        }\n\n                        // restore the original link origin\n                        link.changeSource(temp.source);\n\n                        // reset dummification flag\n                        link.depthOfDumminess = 0;\n\n                        // note that we only need the intermediate points, floating links have been dropped in the analysis\n                        if (points.length > 2) {\n                            // first and last are the endpoints\n                            points.splice(0, 1);\n                            points.splice(points.length - 1);\n                            link.points = points;\n                        }\n                        else {\n                            link.points = [];\n                        }\n\n                        // we are not going to delete the dummy elements;\n                        // they won't be needed anymore anyway.\n\n                        dedum = true;\n                        break;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.\n            /// </summary>\n            _optimizeCrossings: function() {\n                var moves = -1, i;\n                var maxIterations = 3;\n                var iter = 0;\n\n                while (moves !== 0) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    moves = 0;\n\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        moves += this.optimizeLayerCrossings(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        moves += this.optimizeLayerCrossings(true, i);\n                    }\n                }\n            },\n\n            calcUpData: function(layer) {\n                if (layer === 0) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i, l, link;\n                var upLayer = new Set();\n                var temp = this.layers[layer - 1];\n                for (i = 0; i < temp.length; i++) {\n                    upLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (upLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (upLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.uBaryCenter = sum / total;\n                        node.upstreamLinkCount = total;\n                    }\n                    else {\n                        node.uBaryCenter = i;\n                        node.upstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            calcDownData: function(layer) {\n                if (layer === this.layers.length - 1) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i , l, link;\n                var downLayer = new Set();\n                var temp = this.layers[layer + 1];\n                for (i = 0; i < temp.length; i++) {\n                    downLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (downLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (downLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.dBaryCenter = sum / total;\n                        node.downstreamLinkCount = total;\n                    }\n                    else {\n                        node.dBaryCenter = i;\n                        node.downstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes the crossings.\n            /// </summary>\n            /// <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links\n            /// to an a problem of ordering numbers.</remarks>\n            /// <param name=\"layerIndex\">The layer index.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>\n            optimizeLayerCrossings: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // remember what it was\n                var presorted = considered.slice(0);\n\n                // calculate barycenters for all nodes in the considered layer\n                if (down) {\n                    this.calcUpData(iconsidered);\n                }\n                else {\n                    this.calcDownData(iconsidered);\n                }\n\n                var that = this;\n                // sort nodes within this layer according to the barycenters\n                considered.sort(function(n1, n2) {\n                    var n1BaryCenter = that.calcBaryCenter(n1),\n                        n2BaryCenter = that.calcBaryCenter(n2);\n                    if (Math.abs(n1BaryCenter - n2BaryCenter) < 0.0001) {\n                        // in case of coinciding barycenters compare by the count of in/out links\n                        if (n1.degree() === n2.degree()) {\n                            return that.compareByIndex(n1, n2);\n                        }\n                        else if (n1.degree() < n2.degree()) {\n                            return 1;\n                        }\n                        return -1;\n                    }\n                    var compareValue = (n2BaryCenter - n1BaryCenter) * 1000;\n                    if (compareValue > 0) {\n                        return -1;\n                    }\n                    else if (compareValue < 0) {\n                        return 1;\n                    }\n                    return that.compareByIndex(n1, n2);\n                });\n\n                // count relocations\n                var i, moves = 0;\n                for (i = 0; i < considered.length; i++) {\n                    if (considered[i] !== presorted[i]) {\n                        moves++;\n                    }\n                }\n\n                if (moves > 0) {\n                    // now that the boxes have been arranged, update their grid positions\n                    var inode = 0;\n                    for (i = 0; i < considered.length; i++) {\n                        var node = considered[i];\n                        node.gridPosition = inode++;\n                    }\n                }\n\n                return moves;\n            },\n\n            /// <summary>\n            /// Swaps a pair of nodes in a layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">Index of the layer.</param>\n            /// <param name=\"n\">The Nth node in the layer.</param>\n            _swapPairs: function() {\n                var maxIterations = this.options.layeredIterations;\n                var iter = 0;\n\n                while (true) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    var downwards = (iter % 4 <= 1);\n                    var secondPass = (iter % 4 === 1);\n\n                    for (var l = (downwards ? 0 : this.layers.length - 1);\n                         downwards ? l <= this.layers.length - 1 : l >= 0; l += (downwards ? 1 : -1)) {\n                        var layer = this.layers[l];\n                        var hasSwapped = false;\n\n                        // there is no need to recalculate crossings if they were calculated\n                        // on the previous step and nothing has changed\n                        var calcCrossings = true;\n                        var memCrossings = 0;\n\n                        for (var n = 0; n < layer.length - 1; n++) {\n                            // count crossings\n                            var up = 0;\n                            var down = 0;\n                            var crossBefore = 0;\n\n                            if (calcCrossings) {\n                                if (l !== 0) {\n                                    up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                                }\n                                if (l !== this.layers.length - 1) {\n                                    down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                                }\n                                if (downwards) {\n                                    up *= 2;\n                                }\n                                else {\n                                    down *= 2;\n                                }\n\n                                crossBefore = up + down;\n                            }\n                            else {\n                                crossBefore = memCrossings;\n                            }\n\n                            if (crossBefore === 0) {\n                                continue;\n                            }\n\n                            // Swap nodes\n                            var node1 = layer[n];\n                            var node2 = layer[n + 1];\n\n                            var node1GridPos = node1.gridPosition;\n                            var node2GridPos = node2.gridPosition;\n                            layer[n] = node2;\n                            layer[n + 1] = node1;\n                            node1.gridPosition = node2GridPos;\n                            node2.gridPosition = node1GridPos;\n\n                            // count crossings again and if worse than before, restore swapping\n                            up = 0;\n                            if (l !== 0) {\n                                up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                            }\n                            down = 0;\n                            if (l !== this.layers.length - 1) {\n                                down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                            }\n                            if (downwards) {\n                                up *= 2;\n                            }\n                            else {\n                                down *= 2;\n                            }\n                            var crossAfter = up + down;\n\n                            var revert = false;\n                            if (secondPass) {\n                                revert = crossAfter >= crossBefore;\n                            }\n                            else {\n                                revert = crossAfter > crossBefore;\n                            }\n\n                            if (revert) {\n                                node1 = layer[n];\n                                node2 = layer[n + 1];\n\n                                node1GridPos = node1.gridPosition;\n                                node2GridPos = node2.gridPosition;\n                                layer[n] = node2;\n                                layer[n + 1] = node1;\n                                node1.gridPosition = node2GridPos;\n                                node2.gridPosition = node1GridPos;\n\n                                // nothing has changed, remember the crossings so that\n                                // they are not calculated again on the next step\n                                memCrossings = crossBefore;\n                                calcCrossings = false;\n                            }\n                            else {\n                                hasSwapped = true;\n                                calcCrossings = true;\n                            }\n                        }\n\n                        if (hasSwapped) {\n                            if (l !== this.layers.length - 1) {\n                                this.calcUpData(l + 1);\n                            }\n                            if (l !== 0) {\n                                this.calcDownData(l - 1);\n                            }\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Counts the number of links crossing between two layers.\n            /// </summary>\n            /// <param name=\"layerIndex1\">The layer index.</param>\n            /// <param name=\"layerIndex2\">Another layer index.</param>\n            /// <returns></returns>\n            countLinksCrossingBetweenTwoLayers: function(ulayer, dlayer) {\n                var links = this.layers[ulayer].linksTo[dlayer];\n                var link1, link2, n11, n12, n21, n22, l1, l2;\n                var crossings = 0;\n                var length = links.length;\n\n                for (l1 = 0; l1 < length; l1++) {\n                    link1 = links[l1];\n                    for (l2 = l1 + 1; l2 < length; l2++) {\n\n                        link2 = links[l2];\n\n                        if (link1.target.layer === dlayer) {\n                            n11 = link1.source;\n                            n12 = link1.target;\n                        }\n                        else {\n                            n11 = link1.target;\n                            n12 = link1.source;\n                        }\n\n                        if (link2.target.layer === dlayer) {\n                            n21 = link2.source;\n                            n22 = link2.target;\n                        }\n                        else {\n                            n21 = link2.target;\n                            n22 = link2.source;\n                        }\n\n                        var n11gp = n11.gridPosition;\n                        var n12gp = n12.gridPosition;\n                        var n21gp = n21.gridPosition;\n                        var n22gp = n22.gridPosition;\n\n                        if ((n11gp - n21gp) * (n12gp - n22gp) < 0) {\n                            crossings++;\n                        }\n                    }\n                }\n\n                return crossings;\n            },\n\n            calcBaryCenter: function(node) {\n                var upstreamLinkCount = node.upstreamLinkCount;\n                var downstreamLinkCount = node.downstreamLinkCount;\n                var uBaryCenter = node.uBaryCenter;\n                var dBaryCenter = node.dBaryCenter;\n\n                if (upstreamLinkCount > 0 && downstreamLinkCount > 0) {\n                    return (uBaryCenter + dBaryCenter) / 2;\n                }\n                if (upstreamLinkCount > 0) {\n                    return uBaryCenter;\n                }\n                if (downstreamLinkCount > 0) {\n                    return dBaryCenter;\n                }\n\n                return 0;\n            },\n\n            _gridPositionComparer: function(x, y) {\n                if (x.gridPosition < y.gridPosition) {\n                    return -1;\n                }\n                if (x.gridPosition > y.gridPosition) {\n                    return 1;\n                }\n                return 0;\n            },\n\n            _positionAscendingComparer: function(x, y) {\n                return x.k < y.k ? -1 : x.k > y.k ? 1 : 0;\n            },\n\n            _positionDescendingComparer: function(x, y) {\n                return x.k < y.k ? 1 : x.k > y.k ? -1 : 0;\n            },\n\n            _firstVirtualNode: function(layer) {\n                for (var c = 0; c < layer.length; c++) {\n                    if (layer[c].isVirtual) {\n                        return c;\n                    }\n                }\n                return -1;\n            },\n\n            compareByIndex: function(o1, o2) {\n                var i1 = o1.index;\n                var i2 = o2.index;\n\n                if (i1 < i2) {\n                    return 1;\n                }\n\n                if (i1 > i2) {\n                    return -1;\n                }\n\n                return 0;\n            },\n\n            intDiv: function(numerator, denominator) {\n                return (numerator - numerator % denominator) / denominator;\n            },\n\n            nextVirtualNode: function(layer, node) {\n                var nodeIndex = node.layerIndex;\n                for (var i = nodeIndex + 1; i < layer.length; ++i) {\n                    if (layer[i].isVirtual) {\n                        return layer[i];\n                    }\n                }\n                return null;\n            }\n\n        });\n\n        /**\n         * Captures the state of a diagram; node positions, link points and so on.\n         * @type {*}\n         */\n        var LayoutState = kendo.Class.extend({\n            init: function(diagram, graphOrNodes) {\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram given\";\n                }\n                this.diagram = diagram;\n                this.nodeMap = new Dictionary();\n                this.linkMap = new Dictionary();\n                this.capture(graphOrNodes ? graphOrNodes : diagram);\n            },\n\n            /**\n             * Will capture either\n             * - the state of the shapes and the intermediate points of the connections in the diagram\n             * - the bounds of the nodes contained in the Graph together with the intermediate points of the links in the Graph\n             * - the bounds of the nodes in the Array<Node>\n             * - the links points and node bounds in the literal object\n             * @param diagramOrGraphOrNodes\n             */\n            capture: function(diagramOrGraphOrNodes) {\n                var node,\n                    nodes,\n                    shape,\n                    i,\n                    conn,\n                    link,\n                    links;\n\n                if (diagramOrGraphOrNodes instanceof diagram.Graph) {\n\n                    for (i = 0; i < diagramOrGraphOrNodes.nodes.length; i++) {\n                        node = diagramOrGraphOrNodes.nodes[i];\n                        shape = node.associatedShape;\n                        //shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                        this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                    }\n                    for (i = 0; i < diagramOrGraphOrNodes.links.length; i++) {\n                        link = diagramOrGraphOrNodes.links[i];\n                        conn = link.associatedConnection;\n                        this.linkMap.set(conn.visual.id, link.points());\n                    }\n                }\n                else if (diagramOrGraphOrNodes instanceof Array) {\n                    nodes = diagramOrGraphOrNodes;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                }\n                else if (diagramOrGraphOrNodes.hasOwnProperty(\"links\") && diagramOrGraphOrNodes.hasOwnProperty(\"nodes\")) {\n                    nodes = diagramOrGraphOrNodes.nodes;\n                    links = diagramOrGraphOrNodes.links;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                    for (i = 0; i < links.length; i++) {\n                        link = links[i];\n                        conn = link.associatedConnection;\n                        if (conn) {\n                            this.linkMap.set(conn.visual.id, link.points);\n                        }\n                    }\n                }\n                else { // capture the diagram\n                    var shapes = this.diagram.shapes;\n                    var connections = this.diagram.connections;\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        this.nodeMap.set(shape.visual.id, shape.bounds());\n                    }\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        this.linkMap.set(conn.visual.id, conn.points());\n                    }\n                }\n            }\n        });\n\n        deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            SpringLayout: SpringLayout,\n            TreeLayout: TreeLayout,\n            GraphAdapter: DiagramToHyperTreeAdapter,\n            LayeredLayout: LayeredLayout,\n            LayoutBase: LayoutBase,\n            LayoutState: LayoutState\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var dataviz = kendo.dataviz,\n                draw = kendo.drawing,\n                geom = kendo.geometry,\n                diagram = dataviz.diagram,\n                Widget = kendo.ui.Widget,\n                Class = kendo.Class,\n                deepExtend = kendo.deepExtend,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n                Canvas = diagram.Canvas,\n                Group = diagram.Group,\n                Rectangle = diagram.Rectangle,\n                Circle = diagram.Circle,\n                CompositeTransform = diagram.CompositeTransform,\n                Rect = diagram.Rect,\n                Path = diagram.Path,\n                DeleteShapeUnit = diagram.DeleteShapeUnit,\n                DeleteConnectionUnit = diagram.DeleteConnectionUnit,\n                TextBlock = diagram.TextBlock,\n                Image = diagram.Image,\n                Point = diagram.Point,\n                Intersect = diagram.Intersect,\n                ConnectionEditAdorner = diagram.ConnectionEditAdorner,\n                UndoRedoService = diagram.UndoRedoService,\n                ToolService = diagram.ToolService,\n                Selector = diagram.Selector,\n                ResizingAdorner = diagram.ResizingAdorner,\n                ConnectorsAdorner = diagram.ConnectorsAdorner,\n                Cursors = diagram.Cursors,\n                Utils = diagram.Utils,\n                Observable = kendo.Observable,\n                ToBackUnit = diagram.ToBackUnit,\n                ToFrontUnit = diagram.ToFrontUnit,\n                PolylineRouter = diagram.PolylineRouter,\n                CascadingRouter = diagram.CascadingRouter,\n                isUndefined = Utils.isUndefined,\n                isDefined = Utils.isDefined,\n                defined = draw.util.defined,\n                isArray = Array.isArray,\n                isFunction = kendo.isFunction,\n                isString = Utils.isString,\n                isPlainObject = $.isPlainObject,\n\n                math = Math;\n\n            // Constants ==============================================================\n            var NS = \".kendoDiagram\",\n                CASCADING = \"cascading\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                CHANGE = \"change\",\n                CLICK = \"click\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                DRAG_START = \"dragStart\",\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ERROR = \"error\",\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                MAXINT = 9007199254740992,\n                SELECT = \"select\",\n                ITEMROTATE = \"itemRotate\",\n                PAN = \"pan\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                NONE = \"none\",\n                DEFAULT_CANVAS_WIDTH = 600,\n                DEFAULT_CANVAS_HEIGHT = 600,\n                DEFAULT_SHAPE_TYPE = \"rectangle\",\n                DEFAULT_SHAPE_WIDTH = 100,\n                DEFAULT_SHAPE_HEIGHT = 100,\n                DEFAULT_SHAPE_MINWIDTH = 20,\n                DEFAULT_SHAPE_MINHEIGHT = 20,\n                DEFAULT_SHAPE_POSITION = 0,\n                DEFAULT_CONNECTION_BACKGROUND = \"Yellow\",\n                MAX_VALUE = Number.MAX_VALUE,\n                MIN_VALUE = -Number.MAX_VALUE,\n                ABSOLUTE = \"absolute\",\n                TRANSFORMED = \"transformed\",\n                ROTATED = \"rotated\",\n                TRANSPARENT = \"transparent\",\n                WIDTH = \"width\",\n                HEIGHT = \"height\",\n                X = \"x\",\n                Y = \"y\",\n                MOUSEWHEEL_NS = \"DOMMouseScroll\" + NS + \" mousewheel\" + NS,\n                MOBILE_ZOOM_RATE = 0.05,\n                MOBILE_PAN_DISTANCE = 5,\n                BUTTON_TEMPLATE = ({ className, icon, themeColor, text }) =>\n                    kendo.html.renderButton(`<button class=\"${className}\" href=\"#\">${text}</button>`, {\n                        icon: icon,\n                        themeColor\n                    }),\n                CONNECTION_CONTENT_OFFSET = 5;\n\n            diagram.DefaultConnectors = [{\n                name: TOP\n            }, {\n                name: BOTTOM\n            }, {\n                name: LEFT\n            }, {\n                name: RIGHT\n            }, {\n                name: AUTO,\n                position: function(shape) {\n                    return shape.getPosition(\"center\");\n                }\n            }];\n\n            var defaultButtons = {\n                cancel: {\n                    text: \"Cancel\",\n                    icon: \"cancel-outline\",\n                    className: \"k-diagram-cancel\",\n                },\n                update: {\n                    text: \"Save\",\n                    imageClass: \"save\",\n                    className: \"k-diagram-update\",\n                    icon: \"save\",\n                    themeColor: \"primary\"\n                }\n            };\n\n            diagram.shapeDefaults = function(extra) {\n                var defaults = {\n                    type: DEFAULT_SHAPE_TYPE,\n                    path: \"\",\n                    autoSize: true,\n                    visual: null,\n                    x: DEFAULT_SHAPE_POSITION,\n                    y: DEFAULT_SHAPE_POSITION,\n                    minWidth: DEFAULT_SHAPE_MINWIDTH,\n                    minHeight: DEFAULT_SHAPE_MINHEIGHT,\n                    width: DEFAULT_SHAPE_WIDTH,\n                    height: DEFAULT_SHAPE_HEIGHT,\n                    hover: {},\n                    editable: {\n                        connect: true,\n                        tools: []\n                    },\n                    connectors: diagram.DefaultConnectors,\n                    rotation: {\n                        angle: 0\n                    }\n                };\n\n                Utils.simpleExtend(defaults, extra);\n\n                return defaults;\n            };\n\n            function mwDelta(e) {\n                var origEvent = e.originalEvent,\n                    delta = 0;\n\n                if (origEvent.wheelDelta) {\n                    delta = -origEvent.wheelDelta / 40;\n                    delta = delta > 0 ? math.ceil(delta) : math.floor(delta);\n                } else if (origEvent.detail) {\n                    delta = origEvent.detail;\n                }\n\n                return delta;\n            }\n\n            function isAutoConnector(connector) {\n                return connector.options.name.toLowerCase() === AUTO.toLowerCase();\n            }\n\n            function closestConnector(point, connectors) {\n                var minimumDistance = MAXINT, resCtr, connector;\n                for (var i = 0; i < connectors.length; i++) {\n                    connector = connectors[i];\n                    if (!isAutoConnector(connector)) {\n                        var dist = point.distanceTo(connector.position());\n                        if (dist < minimumDistance) {\n                            minimumDistance = dist;\n                            resCtr = connector;\n                        }\n                    }\n                }\n                return resCtr;\n            }\n\n            function indicesOfItems(group, visuals) {\n                var i, indices = [], visual;\n                var children = group.drawingContainer().children;\n                var length = children.length;\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    for (var j = 0; j < length; j++) {\n                        if (children[j] == visual.drawingContainer()) {\n                            indices.push(j);\n                            break;\n                        }\n                    }\n                }\n                return indices;\n            }\n\n            var DiagramElement = Observable.extend({\n                init: function(options) {\n                    var that = this;\n                    that.dataItem = (options || {}).dataItem;\n                    Observable.fn.init.call(that);\n                    that.options = deepExtend({ id: diagram.randomId() }, that.options, options);\n                    that.isSelected = false;\n                    that.visual = new Group({\n                        id: that.options.id,\n                        autoSize: that.options.autoSize\n                    });\n                    that.id = that.options.id;\n                    that._template();\n                },\n\n                options: {\n                    hover: {},\n                    cursor: Cursors.grip,\n                    content: {\n                        align: \"center middle\"\n                    },\n                    selectable: true,\n                    serializable: true,\n                    enable: true\n                },\n\n                _getCursor: function(point) {\n                    if (this.adorner) {\n                        return this.adorner._getCursor(point);\n                    }\n                    return this.options.cursor;\n                },\n\n                visible: function(value) {\n                    if (isUndefined(value)) {\n                        return this.visual.visible();\n                    } else {\n                        this.visual.visible(value);\n                    }\n                },\n\n                bounds: function() {\n                },\n\n                refresh: function() {\n                    this.visual.redraw();\n                },\n\n                position: function(point) {\n                    this.options.x = point.x;\n                    this.options.y = point.y;\n                    this.visual.position(point);\n                },\n\n                toString: function() {\n                    return this.options.id;\n                },\n\n                serialize: function() {\n                    // the options json object describes the shape perfectly. So this object can serve as shape serialization.\n                    var json = deepExtend({}, { options: this.options });\n                    if (this.dataItem) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n                    return json;\n                },\n\n                _content: function(content) {\n                    if (content !== undefined$1) {\n                        var options = this.options;\n\n                        if (diagram.Utils.isString(content)) {\n                            options.content.text = content;\n                        } else {\n                            deepExtend(options.content, content);\n                        }\n\n                        var contentOptions = options.content;\n                        var contentVisual = this._contentVisual;\n\n                        if (!contentVisual) {\n                            this._createContentVisual(contentOptions);\n                        } else {\n                            this._updateContentVisual(contentOptions);\n                        }\n                    }\n\n                    return this.options.content.text;\n                },\n\n                _createContentVisual: function(options) {\n                    if (options.text) {\n                        this._contentVisual = new TextBlock(options);\n                        this._contentVisual._includeInBBox = false;\n                        this.visual.append(this._contentVisual);\n                    }\n                },\n\n                _updateContentVisual: function(options) {\n                    this._contentVisual.redraw(options);\n                },\n\n                _hitTest: function(point) {\n                    var bounds = this.bounds();\n                    return this.visible() && bounds.contains(point) && this.options.enable;\n                },\n\n                _template: function() {\n                    var that = this;\n                    if (that.options.content.template) {\n                        var data = that.dataItem || {},\n                            elementTemplate = kendo.template(that.options.content.template, {\n                                paramName: \"dataItem\"\n                            });\n\n                        that.options.content.text = elementTemplate(data);\n                    }\n                },\n\n                _canSelect: function() {\n                    return this.options.selectable !== false;\n                },\n\n                toJSON: function() {\n                    return {\n                        id: this.options.id\n                    };\n                }\n            });\n\n            var Connector = Class.extend({\n                init: function(shape, options) {\n                    this.options = deepExtend({}, this.options, options);\n                    this.connections = [];\n                    this.shape = shape;\n                },\n                options: {\n                    width: 7,\n                    height: 7,\n                    fill: {\n                        color: DEFAULT_CONNECTION_BACKGROUND\n                    },\n                    hover: {}\n                },\n                position: function() {\n                    if (this.options.position) {\n                        return this.options.position(this.shape);\n                    } else {\n                        return this.shape.getPosition(this.options.name);\n                    }\n                },\n                toJSON: function() {\n                    return {\n                        shapeId: this.shape.toString(),\n                        connector: this.options.name\n                    };\n                }\n            });\n\n            Connector.parse = function(diagram, str) {\n                var tempStr = str.split(\":\"),\n                    id = tempStr[0],\n                    name = tempStr[1] || AUTO;\n\n                for (var i = 0; i < diagram.shapes.length; i++) {\n                    var shape = diagram.shapes[i];\n                    if (shape.options.id == id) {\n                        return shape.getConnector(name.trim());\n                    }\n                }\n            };\n\n            var Shape = DiagramElement.extend({\n                init: function(options, diagram) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.diagram = diagram;\n                    this.updateOptionsFromModel();\n                    options = that.options;\n                    that.connectors = [];\n                    that.type = options.type;\n                    that.createShapeVisual();\n                    that.updateBounds();\n                    that.content(that.content());\n\n                    that._createConnectors();\n                },\n\n                options: diagram.shapeDefaults(),\n\n                _setOptionsFromModel: function(model) {\n                    var modelOptions = filterShapeDataItem(model || this.dataItem);\n                    this.options = deepExtend({}, this.options, modelOptions);\n\n                    this.redrawVisual();\n                },\n\n                updateOptionsFromModel: function(model, field) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var modelOptions = filterShapeDataItem(model || this.dataItem);\n\n                        if (model && field) {\n                            if (!dataviz.inArray(field, [\"x\", \"y\", \"width\", \"height\"])) {\n                                if (this.options.visual) {\n                                    this._redrawVisual();\n                                } else if (modelOptions.type) {\n                                    this.options = deepExtend({}, this.options, modelOptions);\n                                    this._redrawVisual();\n                                }\n\n                                if (this.options.content) {\n                                    this._template();\n                                    this.content(this.options.content);\n                                }\n                            } else {\n                                var bounds = this.bounds();\n                                bounds[field] = model[field];\n                                this.bounds(bounds);\n                            }\n                        } else {\n                            this.options = deepExtend({}, this.options, modelOptions);\n                        }\n                    }\n                },\n\n                _redrawVisual: function() {\n                    this.visual.clear();\n                    this._contentVisual = null;\n                    this.options.dataItem = this.dataItem;\n                    this.createShapeVisual();\n                    this.updateBounds();\n                },\n\n                redrawVisual: function() {\n                    this._redrawVisual();\n                    if (this.options.content) {\n                        this._template();\n                        this.content(this.options.content);\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    var diagram = this.diagram;\n                    if (diagram && diagram._isEditable) {\n                        var bounds = this._bounds;\n                        var model = this.dataItem;\n\n                        if (model) {\n                            diagram._suspendModelRefresh();\n                            if (defined(model.x) && bounds.x !== model.x) {\n                                model.set(\"x\", bounds.x);\n                            }\n\n                            if (defined(model.y) && bounds.y !== model.y) {\n                                model.set(\"y\", bounds.y);\n                            }\n\n                            if (defined(model.width) && bounds.width !== model.width) {\n                                model.set(\"width\", bounds.width);\n                            }\n\n                            if (defined(model.height) && bounds.height !== model.height) {\n                                model.set(\"height\", bounds.height);\n                            }\n\n                            this.dataItem = model;\n                            diagram._resumeModelRefresh();\n\n                            if (syncChanges) {\n                                diagram._syncShapeChanges();\n                            }\n                        }\n                    }\n                },\n\n                updateBounds: function() {\n                    var bounds = this.visual._measure(true);\n                    var options = this.options;\n                    this.bounds(new Rect(options.x, options.y, bounds.width, bounds.height));\n                    this._rotate();\n                    this._alignContent();\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n\n                    this._alignContent();\n\n                    return result;\n                },\n\n                _alignContent: function() {\n                    var contentOptions = this.options.content || {};\n                    var contentVisual = this._contentVisual;\n                    if (contentVisual && contentOptions.align) {\n                        var containerRect = this.visual._measure();\n                        var aligner = new diagram.RectAlign(containerRect);\n                        var contentBounds = contentVisual.drawingElement.bbox(null);\n\n                        var contentRect = new Rect(0, 0, contentBounds.width(), contentBounds.height());\n                        var alignedBounds = aligner.align(contentRect, contentOptions.align);\n\n                        contentVisual.position(alignedBounds.topLeft());\n                    }\n                },\n\n                _createConnectors: function() {\n                    var options = this.options,\n                        length = options.connectors.length,\n                        connectorDefaults = options.connectorDefaults,\n                        connector, i;\n\n                    for (i = 0; i < length; i++) {\n                        connector = new Connector(\n                            this, deepExtend({},\n                                connectorDefaults,\n                                options.connectors[i]\n                            )\n                        );\n                        this.connectors.push(connector);\n                    }\n                },\n\n                bounds: function(value) {\n                    var bounds;\n\n                    if (value) {\n                        if (isString(value)) {\n                            switch (value) {\n                                case TRANSFORMED :\n                                    bounds = this._transformedBounds();\n                                    break;\n                                case ABSOLUTE :\n                                    bounds = this._transformedBounds();\n                                    var pan = this.diagram._pan;\n                                    bounds.x += pan.x;\n                                    bounds.y += pan.y;\n                                    break;\n                                case ROTATED :\n                                    bounds = this._rotatedBounds();\n                                    break;\n                                default:\n                                    bounds = this._bounds;\n                            }\n                        } else {\n                            this._setBounds(value);\n                            this._triggerBoundsChange();\n                            if (!(this.diagram && this.diagram._layouting)) {\n                                this.refreshConnections();\n                            }\n                        }\n                    } else {\n                        bounds = this._bounds;\n                    }\n\n                    return bounds;\n                },\n\n                _setBounds: function(rect) {\n                    var options = this.options;\n                    var topLeft = rect.topLeft();\n                    var x = options.x = topLeft.x;\n                    var y = options.y = topLeft.y;\n                    var width = options.width = math.max(rect.width, options.minWidth);\n                    var height = options.height = math.max(rect.height, options.minHeight);\n\n                    this._bounds = new Rect(x, y, width, height);\n\n                    this.visual.redraw({\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                },\n\n                position: function(point) {\n                    if (point) {\n                        this.bounds(new Rect(point.x, point.y, this._bounds.width, this._bounds.height));\n                    } else {\n                        return this._bounds.topLeft();\n                    }\n                },\n                /**\n                 * Returns a clone of this shape.\n                 * @returns {Shape}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    json.options.id = diagram.randomId();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Shape(json.options);\n                },\n\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (isUndefined(value)) {\n                        value = true;\n                    }\n\n                    if (this._canSelect()) {\n                        if (this.isSelected != value) {\n                            selected = [];\n                            deselected = [];\n                            this.isSelected = value;\n                            if (this.isSelected) {\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                Utils.remove(diagram._selectedItems, this);\n                                deselected.push(this);\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n\n                            return true;\n                        }\n                    }\n                },\n\n                rotate: function(angle, center, undoable) { // we assume the center is always the center of the shape.\n                    var rotate = this.visual.rotate();\n                    if (angle !== undefined$1) {\n                        if (undoable !== false && this.diagram && this.diagram.undoRedoService && angle !== rotate.angle) {\n                            this.diagram.undoRedoService.add(\n                                new diagram.RotateUnit(this.diagram._resizingAdorner, [this], [rotate.angle]), false);\n                        }\n\n                        var b = this.bounds(),\n                            sc = new Point(b.width / 2, b.height / 2),\n                            deltaAngle,\n                            newPosition;\n\n                        if (center) {\n                            deltaAngle = angle - rotate.angle;\n                            newPosition = b.center().rotate(deltaAngle, center).minus(sc);\n                            this._rotationOffset = this._rotationOffset.plus(newPosition.minus(b.topLeft()));\n                            this.position(newPosition);\n                        }\n\n                        this.visual.rotate(angle, sc);\n                        this.options.rotation.angle = angle;\n\n                        if (this.diagram && this.diagram._connectorsAdorner) {\n                            this.diagram._connectorsAdorner.refresh();\n                        }\n\n                        this.refreshConnections();\n\n                        if (this.diagram) {\n                            this.diagram.trigger(ITEMROTATE, { item: this });\n                        }\n                    }\n\n                    return rotate;\n                },\n\n                connections: function(type) { // in, out, undefined = both\n                    var result = [], i, j, con, cons, ctr;\n\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        cons = ctr.connections;\n                        for (j = 0, cons; j < cons.length; j++) {\n                            con = cons[j];\n                            if (type == \"out\") {\n                                var source = con.source();\n                                if (source.shape && source.shape == this) {\n                                    result.push(con);\n                                }\n                            } else if (type == \"in\") {\n                                var target = con.target();\n                                if (target.shape && target.shape == this) {\n                                    result.push(con);\n                                }\n                            } else {\n                                result.push(con);\n                            }\n                        }\n                    }\n\n                    return result;\n                },\n\n                refreshConnections: function() {\n                    $.each(this.connections(), function() {\n                        this.refresh();\n                    });\n                },\n                /**\n                 * Gets a connector of this shape either by the connector's supposed name or\n                 * via a Point in which case the closest connector will be returned.\n                 * @param nameOrPoint The name of a Connector or a Point.\n                 * @returns {Connector}\n                 */\n                getConnector: function(nameOrPoint) {\n                    var i, ctr;\n                    if (isString(nameOrPoint)) {\n                        nameOrPoint = nameOrPoint.toLocaleLowerCase();\n                        for (i = 0; i < this.connectors.length; i++) {\n                            ctr = this.connectors[i];\n                            if (ctr.options.name.toLocaleLowerCase() == nameOrPoint) {\n                                return ctr;\n                            }\n                        }\n                    } else if (nameOrPoint instanceof Point) {\n                        return closestConnector(nameOrPoint, this.connectors);\n                    } else {\n                        return this.connectors.length ? this.connectors[0] : null;\n                    }\n                },\n\n                getPosition: function(side) {\n                    var b = this.bounds(),\n                        fnName = side.charAt(0).toLowerCase() + side.slice(1);\n\n                    if (isFunction(b[fnName])) {\n                        return this._transformPoint(b[fnName]());\n                    }\n\n                    return b.center();\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        var shapeOptions = this.options;\n                        var boundsChange;\n\n                        this.shapeVisual.redraw(this._visualOptions(options));\n\n                        if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                            this.bounds(new Rect(shapeOptions.x, shapeOptions.y, shapeOptions.width, shapeOptions.height));\n                            boundsChange = true;\n                        }\n\n                        if (options.connectors) {\n                            shapeOptions.connectors = options.connectors;\n                            this._updateConnectors();\n                        }\n\n                        shapeOptions = deepExtend(shapeOptions, options);\n\n                        if (options.rotation || boundsChange) {\n                            this._rotate();\n                        }\n\n                        if (shapeOptions.content) {\n                            this.content(shapeOptions.content);\n                        }\n                    }\n                },\n\n                _updateConnectors: function() {\n                    var connections = this.connections();\n                    this.connectors = [];\n                    this._createConnectors();\n                    var connection;\n                    var source;\n                    var target;\n\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connection = connections[idx];\n                        source = connection.source();\n                        target = connection.target();\n                        if (source.shape && source.shape === this) {\n                            connection.source(this.getConnector(source.options.name) || null);\n                        } else if (target.shape && target.shape === this) {\n                            connection.target(this.getConnector(target.options.name) || null);\n                        }\n                        connection.updateModel();\n                    }\n                },\n\n                _diffNumericOptions: diagram.diffNumericOptions,\n\n                _visualOptions: function(options) {\n                    return {\n                        data: options.path,\n                        source: options.source,\n                        hover: options.hover,\n                        fill: options.fill,\n                        stroke: options.stroke\n                    };\n                },\n\n                _triggerBoundsChange: function() {\n                    if (this.diagram) {\n                        this.diagram.trigger(ITEMBOUNDSCHANGE, { item: this, bounds: this._bounds.clone() }); // the trigger modifies the arguments internally.\n                    }\n                },\n\n                _transformPoint: function(point) {\n                    var rotate = this.rotate(),\n                        bounds = this.bounds(),\n                        tl = bounds.topLeft();\n\n                    if (rotate.angle) {\n                        point.rotate(rotate.angle, rotate.center().plus(tl));\n                    }\n\n                    return point;\n                },\n\n                _transformedBounds: function() {\n                    var bounds = this.bounds(),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(this.diagram.modelToView(tl), this.diagram.modelToView(br));\n                },\n\n                _rotatedBounds: function() {\n                    var bounds = this.bounds().rotatedBounds(this.rotate().angle),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(tl, br);\n                },\n\n                _rotate: function() {\n                    var rotation = this.options.rotation;\n\n                    if (rotation && rotation.angle) {\n                        this.rotate(rotation.angle);\n                    }\n\n                    this._rotationOffset = new Point();\n                },\n\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.shapeVisual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n\n                    if (options.editable && options.editable.connect) {\n                        this.diagram._showConnectors(this, value);\n                    }\n                },\n\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var bounds = this.bounds(), rotatedPoint,\n                            angle = this.rotate().angle;\n\n                        if (value.isEmpty && !value.isEmpty()) { // rect selection\n                            return Intersect.rects(value, bounds, angle ? angle : 0);\n                        } else { // point\n                            rotatedPoint = value.clone().rotate(angle, bounds.center()); // cloning is important because rotate modifies the point inline.\n                            if (bounds.contains(rotatedPoint)) {\n                                return this;\n                            }\n                        }\n                    }\n                },\n\n                toJSON: function() {\n                    return {\n                        shapeId: this.options.id\n                    };\n                },\n\n                createShapeVisual: function() {\n                    var options = this.options;\n                    var visualOptions = this._visualOptions(options);\n                    var visualTemplate = options.visual;\n                    var type = (options.type + \"\").toLocaleLowerCase();\n                    var shapeVisual;\n\n                    visualOptions.width = options.width;\n                    visualOptions.height = options.height;\n\n                    if (isFunction(visualTemplate)) { // custom template\n                        shapeVisual = visualTemplate.call(this, options);\n                    } else if (visualOptions.data) {\n                        shapeVisual = new Path(visualOptions);\n                        translateToOrigin(shapeVisual);\n                    } else if (type == \"rectangle\") {\n                        shapeVisual = new Rectangle(visualOptions);\n                    } else if (type == \"circle\") {\n                        shapeVisual = new Circle(visualOptions);\n                    } else if (type == \"text\") {\n                        shapeVisual = new TextBlock(visualOptions);\n                    } else if (type == \"image\") {\n                        shapeVisual = new Image(visualOptions);\n                    } else {\n                        shapeVisual = new Path(visualOptions);\n                    }\n\n                    this.shapeVisual = shapeVisual;\n                    this.visual.append(this.shapeVisual);\n                }\n            });\n\n            /**\n             * The visual link between two Shapes through the intermediate of Connectors.\n             */\n            var Connection = DiagramElement.extend({\n                init: function(from, to, options) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.updateOptionsFromModel();\n                    this._initRouter();\n                    that.path = new diagram.Polyline(that.options);\n                    that.path.fill(TRANSPARENT);\n                    that.visual.append(that.path);\n                    that._sourcePoint = that._targetPoint = new Point();\n                    that._setSource(from);\n                    that._setTarget(to);\n                    that.content(that.options.content);\n                    that.definers = [];\n                    if (defined(options) && options.points) {\n                        that.points(options.points);\n                    }\n                },\n\n                options: {\n                    hover: {\n                        stroke: {}\n                    },\n                    startCap: NONE,\n                    endCap: NONE,\n                    points: [],\n                    selectable: true,\n                    fromConnector: AUTO,\n                    toConnector: AUTO\n                },\n\n                _setOptionsFromModel: function(model) {\n                    this.updateOptionsFromModel(model || this.dataItem);\n                },\n\n                updateOptionsFromModel: function(model) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var dataMap = this.diagram._dataMap;\n                        var options = filterConnectionDataItem(model || this.dataItem);\n\n                        if (model) {\n                            if (defined(options.from)) {\n                                var from = dataMap[options.from];\n                                if (from && defined(options.fromConnector)) {\n                                   from = from.getConnector(options.fromConnector);\n                                }\n                                this.source(from);\n                            } else if (defined(options.fromX) && defined(options.fromY)) {\n                                this.source(new Point(options.fromX, options.fromY));\n                            }\n\n                            if (defined(options.to)) {\n                                var to = dataMap[options.to];\n                                if (to && defined(options.toConnector)) {\n                                    to = to.getConnector(options.toConnector);\n                                }\n                                this.target(to);\n                            } else if (defined(options.toX) && defined(options.toY)) {\n                                this.target(new Point(options.toX, options.toY));\n                            }\n\n                            if (defined(options.type) && this.type() !== options.type) {\n                                this.points([]);\n                                this.type(options.type);\n                            }\n\n                            this.dataItem = model;\n\n                            this._template();\n                            this.redraw(this.options);\n                        } else {\n                            this.options = deepExtend({}, options, this.options);\n                        }\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        if (this.diagram.connectionsDataSource) {\n                            var model = this.diagram.connectionsDataSource.getByUid(this.dataItem.uid);\n\n                            if (model) {\n                                this.diagram._suspendModelRefresh();\n                                if (defined(this.options.fromX) && this.options.fromX !== null) {\n                                    clearField(\"from\", model);\n                                    clearField(\"fromConnector\", model);\n                                    model.set(\"fromX\", this.options.fromX);\n                                    model.set(\"fromY\", this.options.fromY);\n                                } else {\n                                    model.set(\"from\", this.options.from);\n                                    if (defined(model.fromConnector)) {\n                                        model.set(\"fromConnector\", this.sourceConnector ? this.sourceConnector.options.name : null);\n                                    }\n                                    clearField(\"fromX\", model);\n                                    clearField(\"fromY\", model);\n                                }\n\n                                if (defined(this.options.toX) && this.options.toX !== null) {\n                                    clearField(\"to\", model);\n                                    clearField(\"toConnector\", model);\n                                    model.set(\"toX\", this.options.toX);\n                                    model.set(\"toY\", this.options.toY);\n                                } else {\n                                    model.set(\"to\", this.options.to);\n                                    if (defined(model.toConnector)) {\n                                        model.set(\"toConnector\", this.targetConnector ? this.targetConnector.options.name : null);\n                                    }\n                                    clearField(\"toX\", model);\n                                    clearField(\"toY\", model);\n                                }\n\n                                if (defined(this.options.type) && defined(model.type)) {\n                                    model.set(\"type\", this.options.type);\n                                }\n\n                                this.dataItem = model;\n                                this.diagram._resumeModelRefresh();\n\n                                if (syncChanges) {\n                                    this.diagram._syncConnectionChanges();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Gets the Point where the source of the connection resides.\n                 * If the endpoint in Auto-connector the location of the resolved connector will be returned.\n                 * If the endpoint is floating the location of the endpoint is returned.\n                 */\n                sourcePoint: function() {\n                    return this._resolvedSourceConnector ? this._resolvedSourceConnector.position() : this._sourcePoint;\n                },\n\n                _setSource: function(source) {\n                    var shapeSource = source instanceof Shape;\n                    var defaultConnector = this.options.fromConnector || AUTO;\n                    var dataItem;\n                    if (shapeSource && !source.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (source !== undefined$1) {\n                        this.from = source;\n                    }\n\n                    this._removeFromSourceConnector();\n\n                    if (source === null) { // detach\n                        if (this.sourceConnector) {\n                            this._sourcePoint = (this._resolvedSourceConnector || this.sourceConnector).position();\n                            this._clearSourceConnector();\n                            this._setFromOptions(null, this._sourcePoint);\n                        }\n                    } else if (source instanceof Connector) {\n                        dataItem = source.shape.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n                        this.sourceConnector = source;\n                        this.sourceConnector.connections.push(this);\n                    } else if (source instanceof Point) {\n                        this._setFromOptions(null, source);\n                        this._sourcePoint = source;\n                        if (this.sourceConnector) {\n                            this._clearSourceConnector();\n                        }\n\n                    } else if (shapeSource) {\n                        dataItem = source.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n\n                        this.sourceConnector = source.getConnector(defaultConnector);\n                        this.sourceConnector.connections.push(this);\n                    }\n                },\n\n                source: function(source, undoable) {\n                    if (isDefined(source)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, source));\n                        }\n                        this._setSource(source);\n                        this.refresh();\n                    }\n                    return this.sourceConnector ? this.sourceConnector : this._sourcePoint;\n                },\n\n                _setFromOptions: function(from, fromPoint) {\n                    this.options.from = from;\n                    if (fromPoint) {\n                        this.options.fromX = fromPoint.x;\n                        this.options.fromY = fromPoint.y;\n                    } else {\n                        this.options.fromX = null;\n                        this.options.fromY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the sourcePoint.\n                 * The left part of this definer is always null since it defines the source tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                sourceDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.left = null;\n                            this._sourceDefiner = value;\n                            this.source(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._sourceDefiner) {\n                            this._sourceDefiner = new diagram.PathDefiner(this.sourcePoint(), null, null);\n                        }\n                        return this._sourceDefiner;\n                    }\n                },\n\n                /**\n                 * Gets  the Point where the target of the connection resides.\n                 */\n                targetPoint: function() {\n                    return this._resolvedTargetConnector ? this._resolvedTargetConnector.position() : this._targetPoint;\n                },\n\n                _setTarget: function(target) {\n                    var shapeTarget = target instanceof Shape;\n                    var defaultConnector = this.options.toConnector || AUTO;\n                    var dataItem;\n\n                    if (shapeTarget && !target.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (target !== undefined$1) {\n                        this.to = target;\n                    }\n\n                    this._removeFromTargetConnector();\n\n                    if (target === null) { // detach\n                        if (this.targetConnector) {\n                            this._targetPoint = (this._resolvedTargetConnector || this.targetConnector).position();\n                            this._clearTargetConnector();\n                            this._setToOptions(null, this._targetPoint);\n                        }\n                    } else if (target instanceof Connector) {\n                        dataItem = target.shape.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target;\n                        this.targetConnector.connections.push(this);\n                    } else if (target instanceof Point) {\n                        this._setToOptions(null, target);\n                        this._targetPoint = target;\n                        if (this.targetConnector) {\n                            this._clearTargetConnector();\n                        }\n                    } else if (shapeTarget) {\n                        dataItem = target.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target.getConnector(defaultConnector);\n                        this.targetConnector.connections.push(this);\n                    }\n                },\n\n                target: function(target, undoable) {\n                    if (isDefined(target)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, undefined$1, target));\n                        }\n                        this._setTarget(target);\n\n                        this.refresh();\n                    }\n                    return this.targetConnector ? this.targetConnector : this._targetPoint;\n                },\n\n                _setToOptions: function(to, toPoint) {\n                    this.options.to = to;\n                    if (toPoint) {\n                        this.options.toX = toPoint.x;\n                        this.options.toY = toPoint.y;\n                    } else {\n                        this.options.toX = null;\n                        this.options.toY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the targetPoint.\n                 * The right part of this definer is always null since it defines the target tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                targetDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.right = null;\n                            this._targetDefiner = value;\n                            this.target(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._targetDefiner) {\n                            this._targetDefiner = new diagram.PathDefiner(this.targetPoint(), null, null);\n                        }\n                        return this._targetDefiner;\n                    }\n                },\n\n                _updateConnectors: function() {\n                    this._updateConnector(this.source(), \"source\");\n                    this._updateConnector(this.target(), \"target\");\n                },\n\n                _updateConnector: function(instance, name) {\n                    var that = this;\n                    var diagram = that.diagram;\n                    if (instance instanceof Connector && !diagram.getShapeById(instance.shape.id)) {\n                        var dataItem = instance.shape.dataItem;\n                        var connectorName = instance.options.name;\n                        var setNewTarget = function() {\n                            var shape = diagram._dataMap[dataItem.id];\n                            instance = shape.getConnector(connectorName);\n                            that[name](instance, false);\n                            that.updateModel();\n                        };\n                        if (diagram._dataMap[dataItem.id]) {\n                           setNewTarget();\n                        } else {\n                            var inactiveItem = diagram._inactiveShapeItems.getByUid(dataItem.uid);\n                            if (inactiveItem) {\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(setNewTarget));\n                            }\n                        }\n                    } else {\n                        that[name](instance, false);\n                    }\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n                    if (defined(content)) {\n                        this._alignContent();\n                    }\n                    return result;\n                },\n\n                _createContentVisual: function(options) {\n                    var visual;\n                    if (isFunction(options.visual)) {\n                        visual = options.visual.call(this, options);\n                    } else if (options.text) {\n                        visual = new TextBlock(options);\n                    }\n\n                    if (visual) {\n                        this._contentVisual = visual;\n                        visual._includeInBBox = false;\n                        this.visual.append(visual);\n                    }\n\n                    return visual;\n                },\n\n                _updateContentVisual: function(options) {\n                    if (isFunction(options.visual)) {\n                        this.visual.remove(this._contentVisual);\n                        this._createContentVisual(options);\n                    } else {\n                        this._contentVisual.redraw(options);\n                    }\n                },\n\n                _alignContent: function() {\n                    if (this._contentVisual) {\n                        var offset = CONNECTION_CONTENT_OFFSET;\n                        var points = this.allPoints();\n                        var endIdx = math.floor(points.length / 2);\n                        var startIdx = endIdx - 1;\n\n                        while (startIdx > 0 && points[startIdx].equals(points[endIdx])) {\n                            startIdx--;\n                            endIdx++;\n                        }\n\n                        var endPoint = points[endIdx];\n                        var startPoint = points[startIdx];\n\n                        var boundingBox = this._contentVisual._measure();\n                        var width = boundingBox.width;\n                        var height = boundingBox.height;\n                        var alignToPath = points.length % 2 === 0;\n                        var distance = startPoint.distanceTo(endPoint);\n\n                        if (alignToPath && points.length > 2 && distance > 0 &&\n                            ((startPoint.y === endPoint.y && distance < width) || (startPoint.x === endPoint.x && distance < height))) {\n                            alignToPath = false;\n                            offset = 0;\n                        }\n\n                        var point;\n\n                        if (alignToPath) {\n                            var angle = draw.util.deg(math.atan2(endPoint.y - startPoint.y, endPoint.x - startPoint.x));\n                            point = new Point((endPoint.x - startPoint.x) / 2 + startPoint.x, (endPoint.y - startPoint.y) / 2 + startPoint.y);\n\n                            if (math.abs(angle) === 90) {\n                                point.x += offset;\n                                point.y -= height / 2;\n                            } else if (angle % 180 === 0) {\n                                point.x -= width / 2;\n                                point.y -= height + offset;\n                            } else if (angle < -90 || (0 < angle && angle < 90)) {\n                                point.y -= height;\n                            } else if (angle < 0 || angle > 90) {\n                                point.x -= width;\n                                point.y -= height;\n                            }\n                        } else {\n                            var midIdx = math.floor(points.length / 2);\n                            point = points[midIdx].clone();\n                            startPoint = points[midIdx - 1];\n                            endPoint = points[midIdx + 1];\n\n                            var offsetX = startPoint.x <= point.x && endPoint.x <= point.x ? offset : -boundingBox.width - offset;\n                            var offsetY = startPoint.y <= point.y && endPoint.y <= point.y ? offset : -boundingBox.height - offset;\n\n                            point.x += offsetX;\n                            point.y += offsetY;\n                        }\n\n                        this._contentVisual.position(point);\n                    }\n                },\n\n                /**\n                 * Selects or unselects this connections.\n                 * @param value True to select, false to unselect.\n                 */\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (this._canSelect()) {\n                        if (this.isSelected !== value) {\n                            this.isSelected = value;\n                            selected = [];\n                            deselected = [];\n                            if (this.isSelected) {\n                                this.adorner = new ConnectionEditAdorner(this, this.options.selection);\n                                diagram._adorn(this.adorner, true);\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                if (this.adorner) {\n                                    diagram._adorn(this.adorner, false);\n                                    Utils.remove(diagram._selectedItems, this);\n                                    this.adorner = undefined$1;\n                                    deselected.push(this);\n                                }\n                            }\n\n                            if (this.adorner) {\n                                this.adorner.refresh();\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n                            return true;\n                        }\n                    }\n                },\n                /**\n                 * Gets or sets the bounds of this connection.\n                 * @param value A Rect object.\n                 * @remark This is automatically set in the refresh().\n                 * @returns {Rect}\n                 */\n                bounds: function(value) {\n                    if (value && !isString(value)) {\n                        this._bounds = value;\n                    } else {\n                        return this._bounds;\n                    }\n                },\n                /**\n                 * Gets or sets the connection type (see ConnectionType enumeration).\n                 * @param value A ConnectionType value.\n                 * @returns {ConnectionType}\n                 */\n                type: function(value) {\n                    var options = this.options;\n                    if (value) {\n                        if (value !== options.type) {\n                            options.type = value;\n                            this._initRouter();\n                            this.refresh();\n                        }\n                    } else {\n                        return options.type;\n                    }\n                },\n\n                _initRouter: function() {\n                    var type = (this.options.type || \"\").toLowerCase();\n                    if (type == CASCADING) {\n                        this._router = new CascadingRouter(this);\n                    } else {\n                        this._router = new PolylineRouter(this);\n                    }\n                },\n                /**\n                 * Gets or sets the collection of *intermediate* points.\n                 * The 'allPoints()' property will return all the points.\n                 * The 'definers' property returns the definers of the intermediate points.\n                 * The 'sourceDefiner' and 'targetDefiner' return the definers of the endpoints.\n                 * @param value\n                 */\n                points: function(value) {\n                    if (value) {\n                        this.definers = [];\n                        for (var i = 0; i < value.length; i++) {\n                            var definition = value[i];\n                            if (definition instanceof diagram.Point) {\n                                this.definers.push(new diagram.PathDefiner(definition));\n                            } else if (definition.hasOwnProperty(\"x\") && definition.hasOwnProperty(\"y\")) { // e.g. Clipboard does not preserve the Point definition and tunred into an Object\n                                this.definers.push(new diagram.PathDefiner(new Point(definition.x, definition.y)));\n                            } else {\n                                throw \"A Connection point needs to be a Point or an object with x and y properties.\";\n                            }\n                        }\n\n                    } else {\n                        var pts = [];\n                        if (isDefined(this.definers)) {\n                            for (var k = 0; k < this.definers.length; k++) {\n                                pts.push(this.definers[k].point);\n                            }\n                        }\n                        return pts;\n                    }\n                },\n                /**\n                 * Gets all the points of this connection. This is the combination of the sourcePoint, the points and the targetPoint.\n                 * @returns {Array}\n                 */\n                allPoints: function() {\n                    var pts = [this.sourcePoint()];\n                    if (this.definers) {\n                        for (var k = 0; k < this.definers.length; k++) {\n                            pts.push(this.definers[k].point);\n                        }\n                    }\n                    pts.push(this.targetPoint());\n                    return pts;\n                },\n\n                refresh: function() {\n                    this._resolveConnectors();\n                    this._refreshPath();\n                    this._alignContent();\n\n                    if (this.adorner) {\n                        this.adorner.refresh();\n                    }\n                },\n\n                _resolveConnectors: function() {\n                    var connection = this,\n                        sourcePoint, targetPoint,\n                        sourceConnectors, targetConnectors,\n                        source = connection.source(),\n                        target = connection.target();\n\n                    if (source instanceof Point) {\n                        sourcePoint = source;\n                    } else if (source instanceof Connector) {\n                        if (isAutoConnector(source)) {\n                            sourceConnectors = source.shape.connectors;\n                        } else {\n                            sourceConnectors = [source];\n                        }\n                    }\n\n                    if (target instanceof Point) {\n                        targetPoint = target;\n                    } else if (target instanceof Connector) {\n                        if (isAutoConnector(target)) {\n                            targetConnectors = target.shape.connectors;\n                        } else {\n                            targetConnectors = [target];\n                        }\n                    }\n\n                    if (sourcePoint) {\n                        if (targetConnectors) {\n                            connection._resolvedTargetConnector = closestConnector(sourcePoint, targetConnectors);\n                        }\n                    } else if (sourceConnectors) {\n                        if (targetPoint) {\n                            connection._resolvedSourceConnector = closestConnector(targetPoint, sourceConnectors);\n                        } else if (targetConnectors) {\n                            this._resolveAutoConnectors(sourceConnectors, targetConnectors);\n                        }\n                    }\n                },\n\n                _resolveAutoConnectors: function(sourceConnectors, targetConnectors) {\n                    var minNonConflict = MAXINT;\n                    var minDist = MAXINT;\n                    var minNonConflictSource, minNonConflictTarget;\n                    var sourcePoint, targetPoint;\n                    var minSource, minTarget;\n                    var sourceConnector, targetConnector;\n                    var sourceIdx, targetIdx;\n                    var dist;\n\n                    for (sourceIdx = 0; sourceIdx < sourceConnectors.length; sourceIdx++) {\n                        sourceConnector = sourceConnectors[sourceIdx];\n                        if (!isAutoConnector(sourceConnector)) {\n                            sourcePoint = sourceConnector.position();\n\n                            for (targetIdx = 0; targetIdx < targetConnectors.length; targetIdx++) {\n                                targetConnector = targetConnectors[targetIdx];\n                                if (!isAutoConnector(targetConnector)) {\n                                    targetPoint = targetConnector.position();\n                                    dist = math.round(sourcePoint.distanceTo(targetPoint));\n\n                                    if (dist < minNonConflict && this.diagram && this._testRoutePoints(sourcePoint, targetPoint, sourceConnector, targetConnector)) {\n                                        minNonConflict = dist;\n                                        minNonConflictSource = sourceConnector;\n                                        minNonConflictTarget = targetConnector;\n                                    }\n\n                                    if (dist < minDist) {\n                                        minSource = sourceConnector;\n                                        minTarget = targetConnector;\n                                        minDist = dist;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (minNonConflictSource) {\n                        minSource = minNonConflictSource;\n                        minTarget = minNonConflictTarget;\n                    }\n\n                    this._resolvedSourceConnector = minSource;\n                    this._resolvedTargetConnector = minTarget;\n                },\n\n                _testRoutePoints: function(sourcePoint, targetPoint, sourceConnector, targetConnector) {\n                    var router = this._router;\n                    var passRoute = true;\n                    if (router instanceof CascadingRouter) {\n                        var points = router.routePoints(sourcePoint, targetPoint, sourceConnector, targetConnector),\n                            start, end,\n                             rect, exclude;\n\n                        exclude = this._getRouteExclude(sourcePoint, targetPoint, sourceConnector.shape, targetConnector.shape);\n                        points.unshift(sourcePoint);\n                        points.push(targetPoint);\n\n\n                        for (var idx = 1; idx < points.length; idx++) {\n                            start = points[idx - 1];\n                            end = points[idx];\n                            rect = new Rect(math.min(start.x, end.x), math.min(start.y, end.y),\n                                            math.abs(start.x - end.x), math.abs(start.y - end.y));\n                            if (rect.width > 0) {\n                                rect.x++;\n                                rect.width -= 2;\n                            }\n                            if (rect.height > 0) {\n                                rect.y++;\n                                rect.height -= 2;\n                            }\n\n                            if (!rect.isEmpty() && this.diagram._shapesQuadTree.hitTestRect(rect, exclude)) {\n                                passRoute = false;\n                                break;\n                            }\n                        }\n                    }\n                    return passRoute;\n                },\n\n                _getRouteExclude: function(sourcePoint, targetPoint, sourceShape, targetShape) {\n                    var exclude = [];\n                    if (this._isPointInsideShape(sourcePoint, sourceShape)) {\n                        exclude.push(sourceShape);\n                    }\n                    if (this._isPointInsideShape(targetPoint, targetShape)) {\n                        exclude.push(targetShape);\n                    }\n                    return exclude;\n                },\n\n                _isPointInsideShape: function(point, shape) {\n                    var bounds = shape.bounds(), rotatedPoint,\n                        angle = shape.rotate().angle,\n                        pointX, pointY,\n                        boundsX = bounds.x,\n                        boundsY = bounds.y;\n\n                    rotatedPoint = point.clone().rotate(angle, bounds.center());\n                    pointX = rotatedPoint.x;\n                    pointY = rotatedPoint.y;\n                    return pointX > boundsX && pointX < (boundsX + bounds.width) && pointY > boundsY && pointY < (boundsY + bounds.height);\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        this.options = deepExtend({}, this.options, options);\n\n                        var points = this.options.points;\n\n                        if (defined(points) && points.length > 0) {\n                            this.points(points);\n                            this._refreshPath();\n                        }\n\n                        if ((options && options.content) || options.text) {\n                            this.content(options.content);\n                        }\n\n                        this.path.redraw({\n                            fill: options.fill,\n                            stroke: options.stroke,\n                            startCap: options.startCap,\n                            endCap: options.endCap\n                        });\n                    }\n                },\n                /**\n                 * Returns a clone of this connection.\n                 * @returns {Connection}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Connection(this.from, this.to, json.options);\n                },\n                /**\n                 * Returns a serialized connection in json format. Consist of the options and the dataItem.\n                 * @returns {Connection}\n                 */\n                serialize: function() {\n                    var from = this.from.toJSON ? this.from.toJSON : this.from.toString(),\n                        to = this.to.toJSON ? this.to.toJSON : this.to.toString();\n\n                    var json = deepExtend({}, {\n                        options: this.options,\n                        from: from,\n                        to: to\n                    });\n\n                    if (defined(this.dataItem)) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n\n                    json.options.points = this.points();\n                    return json;\n                },\n\n                /**\n                 * Returns whether the given Point or Rect hits this connection.\n                 * @param value\n                 * @returns {Connection}\n                 * @private\n                 */\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var p = new Point(value.x, value.y), from = this.sourcePoint(), to = this.targetPoint();\n                        if (value.isEmpty && !value.isEmpty() && value.contains(from) && value.contains(to)) {\n                            return this;\n                        }\n                        if (this._router.hitTest(p)) {\n                            return this;\n                        }\n                    }\n                },\n\n                _hover: function(value) {\n                    var color = (this.options.stroke || {}).color;\n\n                    if (value && isDefined(this.options.hover.stroke.color)) {\n                        color = this.options.hover.stroke.color;\n                    }\n\n                    this.path.redraw({\n                        stroke: {\n                            color: color\n                        }\n                    });\n                },\n\n                _refreshPath: function() {\n                    if (!defined(this.path)) {\n                        return;\n                    }\n                    this._drawPath();\n                    this.bounds(this._router.getBounds());\n                },\n\n                _drawPath: function() {\n                    if (this._router) {\n                        this._router.route(); // sets the intermediate points\n                    }\n                    var source = this.sourcePoint();\n                    var target = this.targetPoint();\n                    var points = this.points();\n\n                    this.path.redraw({\n                        points: [source].concat(points, [target])\n                    });\n                },\n\n                _clearSourceConnector: function() {\n                    this.sourceConnector = undefined$1;\n                    this._resolvedSourceConnector = undefined$1;\n                },\n\n                _clearTargetConnector: function() {\n                    this.targetConnector = undefined$1;\n                    this._resolvedTargetConnector = undefined$1;\n                },\n\n                _removeFromSourceConnector: function() {\n                    if (this.sourceConnector) {\n                        Utils.remove(this.sourceConnector.connections, this);\n                    }\n                },\n\n                _removeFromTargetConnector: function() {\n                    if (this.targetConnector) {\n                        Utils.remove(this.targetConnector.connections, this);\n                    }\n                },\n\n                toJSON: function() {\n                    var connection = this;\n                    var from, to, point;\n                    if (connection.from && connection.from.toJSON) {\n                        from = connection.from.toJSON();\n                    } else {\n                        point = connection._sourcePoint;\n                        from = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    if (connection.to && connection.to.toJSON) {\n                        to = connection.to.toJSON();\n                    } else {\n                        point = connection._targetPoint;\n                        to = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    return {\n                        from: from,\n                        to: to\n                    };\n                }\n            });\n\n            var Diagram = Widget.extend({\n                init: function(element, userOptions) {\n                    var that = this;\n\n                    kendo.destroy(element);\n                    Widget.fn.init.call(that, element, userOptions);\n\n                    that._initTheme();\n\n                    that._initElements();\n                    that._extendLayoutOptions(that.options);\n                    that._initDefaults(userOptions);\n                    that._interactionDefaults();\n\n                    that._initCanvas();\n\n                    that.mainLayer = new Group({\n                        id: \"main-layer\"\n                    });\n                    that.canvas.append(that.mainLayer);\n\n                    that._shapesQuadTree = new ShapesQuadTree(that);\n\n                    that._pan = new Point();\n                    that._adorners = [];\n                    that.adornerLayer = new Group({\n                        id: \"adorner-layer\"\n                    });\n                    that.canvas.append(that.adornerLayer);\n\n                    that._createHandlers();\n\n                    that._initialize();\n\n                    that._resizingAdorner = new ResizingAdorner(that, { editable: that.options.editable });\n                    that._connectorsAdorner = new ConnectorsAdorner(that);\n\n                    that._adorn(that._resizingAdorner, true);\n                    that._adorn(that._connectorsAdorner, true);\n\n                    that.selector = new Selector(that);\n                    // TODO: We may consider using real Clipboard API once is supported by the standard.\n                    that._clipboard = [];\n\n                    that.pauseMouseHandlers = false;\n\n                    that._fetchFreshData();\n\n                    that._createGlobalToolBar();\n\n                    that._createOptionElements();\n\n                    that.zoom(that.options.zoom);\n\n                    that.canvas.draw();\n                },\n\n                options: {\n                    name: \"Diagram\",\n                    theme: \"sass\",\n                    layout: \"\",\n                    zoomRate: 0.1,\n                    zoom: 1,\n                    zoomMin: 0,\n                    zoomMax: 2,\n                    dataSource: {},\n                    draggable: true,\n                    template: \"\",\n                    autoBind: true,\n                    editable: {\n                        rotate: {},\n                        resize: {},\n                        text: true,\n                        tools: [],\n                        drag: {\n                            snap: {\n                                size: 10,\n                                angle: 10\n                            }\n                        },\n                        remove: true\n                    },\n                    pannable: {},\n                    selectable: {\n                        key: \"none\"\n                    },\n                    tooltip: { enabled: true, format: \"{0}\" },\n                    copy: {\n                        enabled: true,\n                        offsetX: 20,\n                        offsetY: 20\n                    },\n                    shapeDefaults: diagram.shapeDefaults({ undoable: true }),\n                    connectionDefaults: {\n                        editable: {\n                            tools: []\n                        },\n                        type: CASCADING\n                    },\n                    shapes: [],\n                    connections: []\n                },\n\n                events: [\n                    ZOOM_END,\n                    ZOOM_START,\n                    PAN, SELECT,\n                    ITEMROTATE,\n                    ITEMBOUNDSCHANGE,\n                    CHANGE,\n                    CLICK,\n                    MOUSE_ENTER,\n                    MOUSE_LEAVE,\n                    \"toolBarClick\",\n                    \"save\",\n                    \"cancel\",\n                    \"edit\",\n                    \"remove\",\n                    \"add\",\n                    \"dataBound\",\n                    DRAG_START,\n                    DRAG,\n                    DRAG_END\n                ],\n\n                items: function() {\n                    return $();\n                },\n\n                _createGlobalToolBar: function() {\n                    var editable = this.options.editable;\n                    if (editable) {\n                        var tools = editable.tools;\n                        if (this._isEditable && tools !== false && (!tools || tools.length === 0)) {\n                            tools = [\"createShape\", \"undo\", \"redo\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                        }\n\n                        if (tools && tools.length) {\n                            this.toolBar = new DiagramToolBar(this, {\n                                tools: tools || {},\n                                click: this._toolBarClick.bind(this),\n                                modal: false\n                            });\n\n                            this.toolBar.element.css({\n                                textAlign: \"left\"\n                            });\n\n                            this.element.prepend(this.toolBar.element);\n                            this._resize();\n                        }\n                    }\n                },\n\n                createShape: function() {\n                    if ((this.editor && this.editor.end()) || !this.editor) {\n                        var dataSource = this.dataSource;\n                        var view = dataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(dataSource, {});\n                        var shape = this._createShape(model, {});\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            dataSource.insert(index, model);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(model.uid);\n                            inactiveItem.element = shape;\n                            this.edit(shape);\n                        }\n                    }\n                },\n\n                _createShape: function(dataItem, options) {\n                    options = deepExtend({}, this.options.shapeDefaults, options);\n                    options.dataItem = dataItem;\n                    var shape = new Shape(options, this);\n                    return shape;\n                },\n\n                createConnection: function() {\n                    if (((this.editor && this.editor.end()) || !this.editor)) {\n                        var connectionsDataSource = this.connectionsDataSource;\n                        var view = connectionsDataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(connectionsDataSource, {});\n                        var connection = this._createConnection(model);\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[model.uid] = connection;\n                            connectionsDataSource.insert(index, model);\n                            this.addConnection(connection, false);\n                            this.edit(connection);\n                        }\n                    }\n                },\n\n                _createConnection: function(dataItem, source, target) {\n                    var options = deepExtend({}, this.options.connectionDefaults);\n                    options.dataItem = dataItem;\n\n                    var connection = new Connection(source || new Point(), target || new Point(), options);\n\n                    return connection;\n                },\n\n                editModel: function(dataItem, editorType) {\n                    this.cancelEdit();\n                    var editors, template;\n                    var editable = this.options.editable;\n\n                    if (editorType == \"shape\") {\n                        editors = editable.shapeEditors;\n                        template = editable.shapeTemplate;\n                    } else if (editorType == \"connection\") {\n                        var connectionSelectorHandler = connectionSelector.bind(this);\n                        editors = deepExtend({}, { from: connectionSelectorHandler, to: connectionSelectorHandler }, editable.connectionEditors);\n                        template = editable.connectionTemplate;\n                    } else {\n                        return;\n                    }\n\n                    this.editor = new PopupEditor(this.element, {\n                        update: this._update.bind(this),\n                        cancel: this._cancel.bind(this),\n                        model: dataItem,\n                        type: editorType,\n                        target: this,\n                        editors: editors,\n                        template: template\n                    });\n\n                    this.trigger(\"edit\", this._editArgs());\n                },\n\n                edit: function(item) {\n                    if (item.dataItem) {\n                        var editorType = item instanceof Shape ? \"shape\" : \"connection\";\n                        this.editModel(item.dataItem, editorType);\n                    }\n                },\n\n                cancelEdit: function() {\n                    if (this.editor) {\n                        this._getEditDataSource().cancelChanges(this.editor.model);\n\n                        this._destroyEditor();\n                    }\n                },\n\n                saveEdit: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                    }\n                },\n\n                _update: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                        this._destroyEditor();\n                    }\n                },\n\n                _cancel: function() {\n                    if (this.editor && !this.trigger(\"cancel\", this._editArgs())) {\n                        var model = this.editor.model;\n                        this._getEditDataSource().cancelChanges(model);\n                        var element = this._connectionsDataMap[model.uid] || this._dataMap[model.id];\n                        if (element) {\n                            element._setOptionsFromModel(model);\n                        }\n                        this._destroyEditor();\n                    }\n                },\n\n                _getEditDataSource: function() {\n                    return this.editor.options.type === \"shape\" ? this.dataSource : this.connectionsDataSource;\n                },\n\n                _editArgs: function() {\n                    var result = { container: this.editor.wrapper };\n                    result[this.editor.options.type] = this.editor.model;\n                    return result;\n                },\n\n                _destroyEditor: function() {\n                    if (this.editor) {\n                        this.editor.close();\n                        this.editor = null;\n                    }\n                },\n\n                _initElements: function() {\n                    this.wrapper = this.element.empty()\n                        .css(\"position\", \"relative\")\n                        .attr(\"tabindex\", 0)\n                        .addClass(\"k-widget k-diagram\");\n\n                    this.scrollable = $(\"<div />\").appendTo(this.element);\n                },\n\n                _initDefaults: function(userOptions) {\n                    var options = this.options;\n                    var editable = options.editable;\n                    var shapeDefaults = options.shapeDefaults;\n                    var connectionDefaults = options.connectionDefaults;\n                    var userShapeDefaults = (userOptions || {}).shapeDefaults;\n                    if (editable === false) {\n                        shapeDefaults.editable = false;\n                        connectionDefaults.editable = false;\n                    } else {\n                        copyDefaultOptions(editable, shapeDefaults.editable, [\"drag\", \"remove\", \"connect\"]);\n                        copyDefaultOptions(editable, connectionDefaults.editable, [\"drag\", \"remove\"]);\n                    }\n\n                    if (userShapeDefaults && userShapeDefaults.connectors) {\n                        options.shapeDefaults.connectors = userShapeDefaults.connectors;\n                    }\n                },\n\n                _interactionDefaults: function() {\n                    var options = this.options;\n                    var selectable = options.selectable;\n                    var pannable = options.pannable;\n                    var mobile = kendo.support.mobileOS;\n\n                    if (selectable && !defined(selectable.multiple)) {\n                        options.selectable = deepExtend({\n                            multiple: mobile ? false : true\n                        }, options.selectable);\n                    }\n\n                    if (pannable && !defined(pannable.key)) {\n                        options.pannable = deepExtend({\n                            key: mobile ? \"none\" : \"ctrl\"\n                        }, options.pannable);\n                    }\n                },\n\n                _initCanvas: function() {\n                    var canvasContainer = $(\"<div class='k-layer'></div>\").appendTo(this.scrollable)[0];\n                    var viewPort = this.viewport();\n                    this.canvas = new Canvas(canvasContainer, {\n                        width: viewPort.width || DEFAULT_CANVAS_WIDTH,\n                        height: viewPort.height || DEFAULT_CANVAS_HEIGHT\n                    });\n                },\n\n                _createHandlers: function() {\n                    var that = this;\n                    var element = that.element;\n\n                    element.on(MOUSEWHEEL_NS, that._wheel.bind(that))\n                    .on(\"keydown\" + NS, that._keydown.bind(that));\n\n                    that._userEvents = new kendo.UserEvents(this.scrollable, {\n                        multiTouch: true,\n                        fastTap: true,\n                        tap: that._tap.bind(that),\n                        start: that._dragStart.bind(that),\n                        move: that._drag.bind(that),\n                        end: that._dragEnd.bind(that),\n                        gesturestart: that._gestureStart.bind(that),\n                        gesturechange: that._gestureChange.bind(that),\n                        gestureend: that._gestureEnd.bind(that),\n                        doubleTap: that._doubleTap.bind(that),\n                        supportDoubleTap: true\n                    });\n\n                    that.toolService = new ToolService(that);\n\n                    this.scrollable\n                        .on(\"mouseover\" + NS, that._mouseover.bind(that))\n                        .on(\"mouseout\" + NS, that._mouseout.bind(that))\n                        .on(\"mousemove\" + NS, that._mouseMove.bind(that))\n                        .on(\"mousedown\" + NS, that._mouseDown.bind(that))\n                        .on(\"mouseup\" + NS, that._mouseUp.bind(that));\n\n                    this._syncHandler = that._syncChanges.bind(that);\n\n                    that._resizeHandler = that.resize.bind(that, false);\n                    kendo.onResize(that._resizeHandler);\n\n                    this.bind(ZOOM_START, that._destroyToolBar.bind(that));\n                    this.bind(PAN, that._destroyToolBar.bind(that));\n                },\n\n                _dragStart: function(e) {\n                    this._pauseMouseHandlers = true;\n                    var point = this._eventPositions(e, true);\n\n                    var event = e.event;\n                    if (this.toolService.start(point, this._meta(event))) {\n                        this._destroyToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _drag: function(e) {\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.move(p, this._meta(event))) {\n                        event.preventDefault();\n                    }\n                },\n\n                _dragEnd: function(e) {\n                    this._pauseMouseHandlers = false;\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.end(p, this._meta(event))) {\n                        this._createToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _mouseMove: function(e) {\n                    if (!this._pauseMouseHandlers) {\n                        var p = this._eventPositions(e);\n                        this.toolService._updateHoveredItem(p);\n                        this.toolService._updateCursor(p);\n                    }\n                },\n\n                _mouseDown: function() {\n                    this._pauseMouseHandlers = true;\n                },\n\n                _mouseUp: function() {\n                    this._pauseMouseHandlers = false;\n                },\n\n                _tap: function(e) {\n                    var toolService = this.toolService;\n                    var selectable = this.options.selectable;\n                    var point = this._eventPositions(e);\n                    var focused = this.focus();\n\n                    toolService._updateHoveredItem(point);\n\n                    if (toolService.hoveredItem) {\n                        var item = toolService.hoveredItem;\n\n                        this.trigger(\"click\", {\n                            item: item,\n                            point: point,\n                            meta: this._meta(e.event)\n                        });\n\n                        if (selectable && item.options.selectable !== false) {\n                            var multiple = selectable.multiple !== false;\n                            var ctrlPressed = kendo.support.mobileOS || this._meta(e.event).ctrlKey;\n\n                            if (item.isSelected) {\n                                if (ctrlPressed) {\n                                    this._destroyToolBar();\n                                    item.select(false);\n                                } else {\n                                    this._createToolBar(focused);\n                                }\n                            } else {\n                                this._destroyToolBar();\n                                this.select(item, {\n                                    addToSelection: multiple && ctrlPressed\n                                });\n                                this._createToolBar(focused);\n                            }\n                        }\n                    } else if (selectable) {\n                        this._destroyToolBar();\n                        this.deselect();\n                    }\n                },\n\n                _keydown: function(e) {\n                    if (this.toolService.keyDown(e.keyCode, this._meta(e))) {\n                        e.preventDefault();\n                    }\n                },\n\n                _wheel: function(e) {\n                    var delta = mwDelta(e),\n                        p = this._eventPositions(e),\n                        meta = deepExtend(this._meta(e), { delta: delta });\n\n                    if (this.toolService.wheel(p, meta)) {\n                        e.preventDefault();\n                    }\n                },\n\n                _meta: function(e) {\n                    return { ctrlKey: e.ctrlKey, metaKey: e.metaKey, altKey: e.altKey, shiftKey: e.shiftKey, type: e.type };\n                },\n\n                _eventPositions: function(e, start) {\n                    var point;\n                    if (e.touch) {\n                        var field = start ? \"startLocation\" : \"location\";\n                        point = new Point(e.x[field], e.y[field]);\n                    } else {\n                        var event = e.originalEvent;\n                        point = new Point(event.pageX, event.pageY);\n                    }\n\n                    return this.documentToModel(point);\n                },\n\n                _gestureStart: function(e) {\n                    this._destroyToolBar();\n                    this.scroller.disable();\n                    var initialCenter = this.documentToModel(new Point(e.center.x, e.center.y));\n                    var eventArgs = {\n                        point: initialCenter,\n                        zoom: this.zoom()\n                    };\n\n                    if (this.trigger(ZOOM_START, eventArgs)) {\n                        return;\n                    }\n\n                    this._gesture = e;\n                    this._initialCenter = initialCenter;\n                },\n\n                _gestureChange: function(e) {\n                    var previousGesture = this._gesture;\n                    var initialCenter = this._initialCenter;\n                    var center = this.documentToView(new Point(e.center.x, e.center.y));\n                    var scaleDelta = e.distance / previousGesture.distance;\n                    var zoom = this._zoom;\n                    var updateZoom = false;\n\n                    if (math.abs(scaleDelta - 1) >= MOBILE_ZOOM_RATE) {\n                        this._zoom = zoom = this._getValidZoom(zoom * scaleDelta);\n                        this.options.zoom = zoom;\n                        this._gesture = e;\n                        updateZoom = true;\n                    }\n\n                    var zoomedPoint = initialCenter.times(zoom);\n                    var pan = center.minus(zoomedPoint);\n                    if (updateZoom || this._pan.distanceTo(pan) >= MOBILE_PAN_DISTANCE) {\n                        this._panTransform(pan);\n                        this._updateAdorners();\n                    }\n\n                    e.preventDefault();\n                },\n\n                _doubleTap: function(e) {\n                    var diagram = this;\n                    var pointPosition = this._eventPositions(e);\n                    var options = diagram.options;\n                    var zoomRate = options.zoomRate;\n                    var zoom = diagram.zoom() + zoomRate;\n                    var meta = this._meta(e);\n                    var zoomOptions = { point: pointPosition, meta: meta, zoom: zoom };\n\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    zoom = kendo.drawing.util.round(Math.max(options.zoomMin, Math.min(options.zoomMax, zoom)), 2);\n                    zoomOptions.zoom = zoom;\n\n                    diagram.zoom(zoom, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n                },\n\n                _gestureEnd: function() {\n                    if (this.options.pannable !== false) {\n                        this.scroller.enable();\n                    }\n                    this.trigger(ZOOM_END, {\n                        point: this._initialCenter,\n                        zoom: this.zoom()\n                    });\n                },\n\n                _resize: function() {\n                    var viewport = this.viewport();\n                    if (this.canvas) {\n                        this.canvas.size(viewport);\n                    }\n\n                    if (this.scrollable && this.toolBar) {\n                        this.scrollable.height(viewport.height);\n                    }\n                },\n\n                _mouseover: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(true, node.srcElement);\n                    }\n                },\n\n                _mouseout: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(false, node.srcElement);\n                    }\n                },\n\n                _initTheme: function() {\n                    var that = this;\n                    var themeName = ((that.options || {}).theme || \"\").toLowerCase();\n                    var themes = dataviz.ui.themes || {};\n                    var themeOptions;\n\n                    if (dataviz.SASS_THEMES.indexOf(themeName) != -1) {\n                        themeOptions = dataviz.autoTheme().diagram;\n                    }\n                    else {\n                        themeOptions = (themes[themeName] || {}).diagram;\n                    }\n\n                    that.options = deepExtend({}, themeOptions, that.options);\n                    if (that.options.editable === true) {\n                        deepExtend(that.options, {\n                            editable: (themeOptions || {}).editable\n                        });\n                    }\n                },\n\n                _createOptionElements: function() {\n                    var options = this.options;\n                    var shapesLength = options.shapes.length;\n\n                    if (shapesLength) {\n                        this._createShapes();\n                    }\n\n                    if (options.connections.length) {\n                        this._createConnections();\n                    }\n\n                    if (shapesLength && options.layout) {\n                        this.layout(options.layout);\n                    }\n                },\n\n                _createShapes: function() {\n                    var that = this,\n                        options = that.options,\n                        shapes = options.shapes,\n                        shape, i;\n\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        that.addShape(shape);\n                    }\n                },\n\n                _createConnections: function() {\n                    var diagram = this,\n                        options = diagram.options,\n                        defaults = options.connectionDefaults,\n                        connections = options.connections,\n                        conn, source, target, i;\n\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        source = diagram._findConnectionTarget(conn.from);\n                        target = diagram._findConnectionTarget(conn.to);\n\n                        diagram.connect(source, target, deepExtend({}, defaults, conn));\n                    }\n                },\n\n                _findConnectionTarget: function(options) {\n                    options = options || {};\n                    var diagram = this;\n                    var shapeId = isString(options) ? options : options.shapeId || options.id;\n                    var target;\n                    if (shapeId) {\n                        target = diagram.getShapeById(shapeId);\n                        if (options.connector) {\n                            target = target.getConnector(options.connector);\n                        }\n                    } else {\n                        target = new Point(options.x || 0, options.y || 0);\n                    }\n\n                    return target;\n                },\n\n                destroy: function() {\n                    var that = this;\n                    Widget.fn.destroy.call(that);\n\n                    if (this._userEvents) {\n                        this._userEvents.destroy();\n                    }\n\n                    kendo.unbindResize(that._resizeHandler);\n\n                    that.clear();\n                    that.element.off(NS);\n                    that.scroller.wrapper.off(NS);\n                    that.canvas.destroy(true);\n                    that.canvas = undefined$1;\n\n                    that._destroyEditor();\n                    that.destroyScroller();\n                    that._destroyGlobalToolBar();\n                    that._destroyToolBar();\n                },\n\n                destroyScroller: function() {\n                    var scroller = this.scroller;\n\n                    if (!scroller) {\n                        return;\n                    }\n\n                    scroller.destroy();\n                    scroller.element.remove();\n                    this.scroller = null;\n                },\n\n                save: function() {\n                    var json = {\n                        shapes: [],\n                        connections: []\n                    };\n                    var i, connection, shape;\n\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        if (shape.options.serializable) {\n                            json.shapes.push(shape.options);\n                        }\n                    }\n\n                    for (i = 0; i < this.connections.length; i++) {\n                        connection = this.connections[i];\n\n                        json.connections.push(deepExtend({}, connection.options, connection.toJSON()));\n                    }\n\n                    return json;\n                },\n\n                focus: function() {\n                    if (!this.element.is(kendo._activeElement())) {\n                        var element = this.element,\n                            scrollContainer = element[0],\n                            containers = [],\n                            offsets = [],\n                            documentElement = document.documentElement,\n                            i;\n\n                        do {\n                            scrollContainer = scrollContainer.parentNode;\n\n                            if (scrollContainer.scrollHeight > scrollContainer.clientHeight) {\n                                containers.push(scrollContainer);\n                                offsets.push(scrollContainer.scrollTop);\n                            }\n                        } while (scrollContainer != documentElement);\n\n                        element.trigger(\"focus\");\n\n                        for (i = 0; i < containers.length; i++) {\n                            containers[i].scrollTop = offsets[i];\n                        }\n                        return true;\n                    }\n                },\n\n                load: function(options) {\n                    this.clear();\n\n                    this.setOptions(options);\n                    this._createShapes();\n                    this._createConnections();\n                },\n\n                setOptions: function(options) {\n                    deepExtend(this.options, options);\n                },\n\n                clear: function() {\n                    var that = this;\n\n                    that.select(false);\n                    that.mainLayer.clear();\n                    that._shapesQuadTree.clear();\n                    that._initialize();\n                },\n                /**\n                 * Connects two items.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @param options Connection options that will be passed to the newly created connection.\n                 * @returns The newly created connection.\n                 */\n                connect: function(source, target, options) {\n                    var connection;\n                    if (this.connectionsDataSource && this._isEditable) {\n                        var dataItem = this.connectionsDataSource.add({});\n                        connection = this._connectionsDataMap[dataItem.uid];\n                        connection.source(source);\n                        connection.target(target);\n                        connection.redraw(options);\n                        connection.updateModel();\n                    } else {\n                        connection = new Connection(source, target,\n                            deepExtend({ }, this.options.connectionDefaults, options));\n\n                        this.addConnection(connection);\n                    }\n\n                    return connection;\n                },\n                /**\n                 * Determines whether the the two items are connected.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @returns true if the two items are connected.\n                 */\n                connected: function(source, target) {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        var c = this.connections[i];\n                        if (c.from == source && c.to == target) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                },\n                /**\n                 * Adds connection to the diagram.\n                 * @param connection Connection.\n                 * @param undoable Boolean.\n                 * @returns The newly created connection.\n                 */\n                addConnection: function(connection, undoable) {\n                    if (undoable !== false) {\n                        this.undoRedoService.add(\n                            new diagram.AddConnectionUnit(connection, this), false);\n                    }\n\n                    connection.diagram = this;\n                    connection._setOptionsFromModel();\n                    connection.refresh();\n                    this.mainLayer.append(connection.visual);\n                    this.connections.push(connection);\n\n                    this.trigger(CHANGE, {\n                        added: [connection],\n                        removed: []\n                    });\n\n                    return connection;\n                },\n\n                _addConnection: function(connection, undoable) {\n                    var connectionsDataSource = this.connectionsDataSource;\n                    var dataItem;\n                    if (connectionsDataSource && this._isEditable) {\n                        dataItem = createModel(connectionsDataSource, cloneDataItem(connection.dataItem));\n                        connection.dataItem = dataItem;\n                        connection.updateModel();\n\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[dataItem.uid] = connection;\n\n                            connectionsDataSource.add(dataItem);\n                            this.addConnection(connection, undoable);\n                            connection._updateConnectors();\n\n                            return connection;\n                        }\n                    } else if (!this.trigger(\"add\", { connection: connection })) {\n                        this.addConnection(connection, undoable);\n                        connection._updateConnectors();\n                        return connection;\n                    }\n                },\n\n                /**\n                 * Adds shape to the diagram.\n                 * @param item Shape, Point. If point is passed it will be created new Shape and positioned at that point.\n                 * @param options. The options to be passed to the newly created Shape.\n                 * @returns The newly created shape.\n                 */\n                addShape: function(item, undoable) {\n                    var shape,\n                        shapeDefaults = this.options.shapeDefaults;\n\n                    if (item instanceof Shape) {\n                        shape = item;\n                        this._parseBounds(shape.bounds());\n                    } else if (!(item instanceof kendo.Class)) {\n                        shapeDefaults = deepExtend({}, shapeDefaults, item || {});\n                        shape = new Shape(shapeDefaults, this);\n                        this._parseBounds(shape.bounds());\n                    } else {\n                        return;\n                    }\n\n                    if (undoable !== false) {\n                        this.undoRedoService.add(new diagram.AddShapeUnit(shape, this), false);\n                    }\n\n                    this.shapes.push(shape);\n                    if (shape.diagram !== this) {\n                        this._shapesQuadTree.insert(shape);\n                        shape.diagram = this;\n                    }\n                    this.mainLayer.append(shape.visual);\n\n                    this.trigger(CHANGE, {\n                        added: [shape],\n                        removed: []\n                    });\n\n                    return shape;\n                },\n\n                _addShape: function(shape, undoable) {\n                    var that = this;\n                    var dataSource = that.dataSource;\n                    var dataItem;\n                    if (dataSource && this._isEditable) {\n                        dataItem = createModel(dataSource, cloneDataItem(shape.dataItem));\n                        shape.dataItem = dataItem;\n                        shape.updateModel();\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            this.dataSource.add(dataItem);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(dataItem.uid);\n                            inactiveItem.element = shape;\n                            inactiveItem.undoable = undoable;\n                            return shape;\n                        }\n                    } else if (!this.trigger(\"add\", { shape: shape })) {\n                        return this.addShape(shape, undoable);\n                    }\n                },\n\n                _parseBounds: function(bounds) {\n                    bounds.x = typeof(bounds.x) == \"string\" ? parseFloat(bounds.x) : bounds.x;\n                    bounds.y = typeof(bounds.y) == \"string\" ? parseFloat(bounds.y) : bounds.y;\n                },\n                /**\n                 * Removes items (or single item) from the diagram.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable.\n                 */\n\n               remove: function(items, undoable) {\n                    items = isArray(items) ? items.slice(0) : [items];\n                    var elements = splitDiagramElements(items);\n                    var shapes = elements.shapes;\n                    var connections = elements.connections;\n                    var i;\n\n                    if (!defined(undoable)) {\n                        undoable = true;\n                    }\n\n                    if (undoable) {\n                        this.undoRedoService.begin();\n                    }\n\n                    this._suspendModelRefresh();\n                    for (i = shapes.length - 1; i >= 0; i--) {\n                       this._removeItem(shapes[i], undoable, connections);\n                    }\n\n                    for (i = connections.length - 1; i >= 0; i--) {\n                        this._removeItem(connections[i], undoable);\n                    }\n\n                    this._resumeModelRefresh();\n\n                    if (undoable) {\n                        this.undoRedoService.commit(false);\n                    }\n\n                    this.trigger(CHANGE, {\n                        added: [],\n                        removed: items\n                    });\n                },\n\n                _removeShapeDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.dataSource.remove(item.dataItem);\n                        delete this._dataMap[item.dataItem.id];\n                    }\n                },\n\n                _removeConnectionDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.connectionsDataSource.remove(item.dataItem);\n                        delete this._connectionsDataMap[item.dataItem.uid];\n                    }\n                },\n\n                _triggerRemove: function(items) {\n                    var toRemove = [];\n                    var item, args, editable;\n\n                    for (var idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        editable = item.options.editable;\n                        if (item instanceof Shape) {\n                            args = { shape: item };\n                        } else {\n                            args = { connection: item };\n                        }\n                        if (editable && editable.remove !== false && !this.trigger(\"remove\", args)) {\n                            toRemove.push(item);\n                        }\n                    }\n                    return toRemove;\n                },\n\n                /**\n                 * Executes the next undoable action on top of the undo stack if any.\n                 */\n                undo: function() {\n                    this.undoRedoService.undo();\n                },\n                /**\n                 * Executes the previous undoable action on top of the redo stack if any.\n                 */\n                redo: function() {\n                    this.undoRedoService.redo();\n                },\n                /**\n                 * Selects items on the basis of the given input or returns the current selection if none.\n                 * @param itemsOrRect DiagramElement, Array of elements, \"All\", false or Rect. A value 'false' will deselect everything.\n                 * @param options\n                 * @returns {Array}\n                 */\n                select: function(item, options) {\n                    if (isDefined(item)) {\n                        options = deepExtend({ addToSelection: false }, options);\n\n                        var addToSelection = options.addToSelection,\n                            items = [],\n                            selected = [],\n                            i, element;\n\n                        if (!addToSelection) {\n                            this.deselect();\n                        }\n\n                        this._internalSelection = true;\n\n                        if (item instanceof Array) {\n                            items = item;\n                        } else if (item instanceof DiagramElement) {\n                            items = [ item ];\n                        }\n\n                        for (i = 0; i < items.length; i++) {\n                            element = items[i];\n                            if (element.select(true)) {\n                                selected.push(element);\n                            }\n                        }\n\n                        this._selectionChanged(selected, []);\n\n                        this._internalSelection = false;\n                    } else {\n                        return this._selectedItems;\n                    }\n                },\n\n                selectAll: function() {\n                    this.select(this.shapes.concat(this.connections));\n                },\n\n                selectArea: function(rect) {\n                    var i, items, item;\n                    this._internalSelection = true;\n                    var selected = [];\n                    if (rect instanceof Rect) {\n                        items = this.shapes.concat(this.connections);\n                        for (i = 0; i < items.length; i++) {\n                            item = items[i];\n                            if ((!rect || item._hitTest(rect)) && item.options.enable) {\n                                if (item.select(true)) {\n                                    selected.push(item);\n                                }\n                            }\n                        }\n                    }\n\n                    this._selectionChanged(selected, []);\n                    this._internalSelection = false;\n                },\n\n                deselect: function(item) {\n                    this._internalSelection = true;\n                    var deselected = [],\n                        items = [],\n                        element, i;\n\n                    if (item instanceof Array) {\n                        items = item;\n                    } else if (item instanceof DiagramElement) {\n                        items.push(item);\n                    } else if (!isDefined(item)) {\n                        items = this._selectedItems.slice(0);\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        element = items[i];\n                        if (element.select(false)) {\n                            deselected.push(element);\n                        }\n                    }\n\n                    this._selectionChanged([], deselected);\n                    this._internalSelection = false;\n                },\n                /**\n                 * Brings to front the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toFront: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToFrontUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toFront(result.visuals);\n                        this._fixOrdering(result, true);\n                    }\n                },\n                /**\n                 * Sends to back the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toBack: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToBackUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toBack(result.visuals);\n                        this._fixOrdering(result, false);\n                    }\n                },\n                /**\n                 * Bring into view the passed item(s) or rectangle.\n                 * @param items DiagramElement, Array of Items, Rect.\n                 * @param options. align - controls the position of the calculated rectangle relative to the viewport.\n                 * \"Center middle\" will position the items in the center. animate - controls if the pan should be animated.\n                 */\n                bringIntoView: function(item, options) { // jQuery|Item|Array|Rect\n                    var viewport = this.viewport();\n                    var aligner = new diagram.RectAlign(viewport);\n                    var current, rect, original, newPan;\n\n                    if (viewport.width === 0 || viewport.height === 0) {\n                        return;\n                    }\n\n                    options = deepExtend({ animate: false, align: \"center middle\" }, options);\n                    if (options.align == \"none\") {\n                        options.align = \"center middle\";\n                    }\n\n                    if (item instanceof DiagramElement) {\n                        rect = item.bounds(TRANSFORMED);\n                    } else if (isArray(item)) {\n                        rect = this.boundingBox(item);\n                    } else if (item instanceof Rect) {\n                        rect = item.clone();\n                    }\n\n                    original = rect.clone();\n\n                    rect.zoom(this._zoom);\n\n                    if (rect.width > viewport.width || rect.height > viewport.height) {\n                        this._zoom = this._getValidZoom(math.min(viewport.width / original.width, viewport.height / original.height));\n                        rect = original.clone().zoom(this._zoom);\n                    }\n\n                    this._zoomMainLayer();\n\n                    current = rect.clone();\n                    aligner.align(rect, options.align);\n\n                    newPan = rect.topLeft().minus(current.topLeft());\n                    this.pan(newPan.times(-1), options.animate);\n                },\n\n                alignShapes: function(direction) {\n                    if (isUndefined(direction)) {\n                        direction = \"Left\";\n                    }\n                    var items = this.select(),\n                        val,\n                        item,\n                        i;\n\n                    if (items.length === 0) {\n                        return;\n                    }\n\n                    switch (direction.toLowerCase()) {\n                        case \"left\":\n                        case \"top\":\n                            val = MAX_VALUE;\n                            break;\n                        case \"right\":\n                        case \"bottom\":\n                            val = MIN_VALUE;\n                            break;\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                    val = math.min(val, item.options.x);\n                                    break;\n                                case \"top\":\n                                    val = math.min(val, item.options.y);\n                                    break;\n                                case \"right\":\n                                    val = math.max(val, item.options.x);\n                                    break;\n                                case \"bottom\":\n                                    val = math.max(val, item.options.y);\n                                    break;\n                            }\n                        }\n                    }\n                    var undoStates = [];\n                    var shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            shapes.push(item);\n                            undoStates.push(item.bounds());\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                case \"right\":\n                                    item.position(new Point(val, item.options.y));\n                                    break;\n                                case \"top\":\n                                case \"bottom\":\n                                    item.position(new Point(item.options.x, val));\n                                    break;\n                            }\n                        }\n                    }\n                    var unit = new diagram.TransformUnit(shapes, undoStates);\n                    this.undoRedoService.add(unit, false);\n                },\n\n                zoom: function(zoom, options) {\n                    if (zoom) {\n                        var staticPoint = options ? options.point : new diagram.Point(0, 0);\n                        // var meta = options ? options.meta : 0;\n                        zoom = this._zoom = this._getValidZoom(zoom);\n\n                        if (!isUndefined(staticPoint)) {//Viewpoint vector is constant\n                            staticPoint = new diagram.Point(math.round(staticPoint.x), math.round(staticPoint.y));\n                            var zoomedPoint = staticPoint.times(zoom);\n                            var viewportVector = this.modelToView(staticPoint);\n                            var raw = viewportVector.minus(zoomedPoint);//pan + zoomed point = viewpoint vector\n                            this._storePan(new diagram.Point(math.round(raw.x), math.round(raw.y)));\n                        }\n\n                        if (options) {\n                            options.zoom = zoom;\n                        }\n\n                        this._panTransform();\n\n                        this.canvas.surface.hideTooltip();\n\n                        this._updateAdorners();\n                    }\n\n                    return this._zoom;\n                },\n\n                _getPan: function(pan) {\n                    var canvas = this.canvas;\n                    if (!canvas.translate) {\n                        pan = pan.plus(this._pan);\n                    }\n                    return pan;\n                },\n\n                pan: function(pan, animate) {\n                    if (pan instanceof Point) {\n                        var that = this;\n                        var scroller = that.scroller;\n                        pan = that._getPan(pan);\n                        pan = pan.times(-1);\n\n                        if (animate) {\n                            scroller.animatedScrollTo(pan.x, pan.y, function() {\n                                that._updateAdorners();\n                            });\n                        } else {\n                            scroller.scrollTo(pan.x, pan.y);\n                            that._updateAdorners();\n                        }\n                    } else {\n                        return this._pan.times(-1);\n                    }\n                },\n\n                viewport: function() {\n                    var element = this.element;\n                    var width = element.width();\n                    var height = element.height();\n\n                    if (this.toolBar) {\n                        height -= outerHeight(this.toolBar.element);\n                    }\n\n                    return new Rect(0, 0, width, height);\n                },\n                copy: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 1;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                    }\n                },\n                cut: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 0;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                        this.remove(this._clipboard, true);\n                    }\n                },\n\n                paste: function() {\n                    if (this._clipboard.length > 0) {\n                        var item, copied, i;\n                        var mapping = {};\n                        var elements = splitDiagramElements(this._clipboard);\n                        var connections = elements.connections;\n                        var shapes = elements.shapes;\n                        var offset = {\n                            x: this._copyOffset * this.options.copy.offsetX,\n                            y: this._copyOffset * this.options.copy.offsetY\n                        };\n                        this.deselect();\n                        // first the shapes\n                        for (i = 0; i < shapes.length; i++) {\n                            item = shapes[i];\n                            copied = item.clone();\n                            mapping[item.id] = copied;\n                            copied.position(new Point(item.options.x + offset.x, item.options.y + offset.y));\n                            copied.diagram = this;\n                            copied = this._addShape(copied);\n                            if (copied) {\n                                copied.select();\n                            }\n                        }\n                        // then the connections\n                        for (i = 0; i < connections.length; i++) {\n                            item = connections[i];\n                            copied = this._addConnection(item.clone());\n                            if (copied) {\n                                this._updateCopiedConnection(copied, item, \"source\", mapping, offset);\n                                this._updateCopiedConnection(copied, item, \"target\", mapping, offset);\n\n                                copied.select(true);\n                                copied.updateModel();\n                            }\n                        }\n\n                        this._syncChanges();\n\n                        this._copyOffset += 1;\n                    }\n                },\n\n                _updateCopiedConnection: function(connection, sourceConnection, connectorName, mapping, offset) {\n                    var onActivate, inactiveItem, targetShape;\n                    var target = sourceConnection[connectorName]();\n                    var diagram = this;\n                    if (target instanceof Connector && mapping[target.shape.id]) {\n                        targetShape = mapping[target.shape.id];\n                        if (diagram.getShapeById(targetShape.id)) {\n                            connection[connectorName](targetShape.getConnector(target.options.name));\n                        } else {\n                            inactiveItem = diagram._inactiveShapeItems.getByUid(targetShape.dataItem.uid);\n                            if (inactiveItem) {\n                                onActivate = function(item) {\n                                    targetShape = diagram._dataMap[item.id];\n                                    connection[connectorName](targetShape.getConnector(target.options.name));\n                                    connection.updateModel();\n                                };\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(onActivate));\n                            }\n                        }\n                    } else {\n                        connection[connectorName](new Point(sourceConnection[connectorName + \"Point\"]().x + offset.x, sourceConnection[connectorName + \"Point\"]().y + offset.y));\n                    }\n                },\n                /**\n                 * Gets the bounding rectangle of the given items.\n                 * @param items DiagramElement, Array of elements.\n                 * @param origin Boolean. Pass 'true' if you need to get the bounding box of the shapes without their rotation offset.\n                 * @returns {Rect}\n                 */\n                boundingBox: function(items, origin) {\n                    var rect = Rect.empty(), temp,\n                        di = isDefined(items) ? this._getDiagramItems(items) : { shapes: this.shapes };\n                    if (di.shapes.length > 0) {\n                        var item = di.shapes[0];\n                        rect = item.bounds(ROTATED);\n                        for (var i = 1; i < di.shapes.length; i++) {\n                            item = di.shapes[i];\n                            temp = item.bounds(ROTATED);\n                            if (origin === true) {\n                                temp.x -= item._rotationOffset.x;\n                                temp.y -= item._rotationOffset.y;\n                            }\n                            rect = rect.union(temp);\n                        }\n                    }\n                    return rect;\n                },\n\n                _containerOffset: function() {\n                    var containerOffset = this.element.offset();\n                    if (this.toolBar) {\n                        containerOffset.top += outerHeight(this.toolBar.element);\n                    }\n                    return containerOffset;\n                },\n\n                documentToView: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x - containerOffset.left, point.y - containerOffset.top);\n                },\n                viewToDocument: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x + containerOffset.left, point.y + containerOffset.top);\n                },\n                viewToModel: function(point) {\n                    return this._transformWithMatrix(point, this._matrixInvert);\n                },\n                modelToView: function(point) {\n                    return this._transformWithMatrix(point, this._matrix);\n                },\n                modelToLayer: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrix);\n                },\n                layerToModel: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrixInvert);\n                },\n                documentToModel: function(point) {\n                    var viewPoint = this.documentToView(point);\n                    if (!this.canvas.translate) {\n                        viewPoint.x = viewPoint.x + this.scroller.scrollLeft;\n                        viewPoint.y = viewPoint.y + this.scroller.scrollTop;\n                    }\n                    return this.viewToModel(viewPoint);\n                },\n                modelToDocument: function(point) {\n                    return this.viewToDocument(this.modelToView(point));\n                },\n                _transformWithMatrix: function(point, matrix) {\n                    var result = point;\n                    if (point instanceof Point) {\n                        if (matrix) {\n                            result = matrix.apply(point);\n                        }\n                    }\n                    else {\n                        var tl = this._transformWithMatrix(point.topLeft(), matrix),\n                            br = this._transformWithMatrix(point.bottomRight(), matrix);\n                        result = Rect.fromPoints(tl, br);\n                    }\n                    return result;\n                },\n\n                setDataSource: function(dataSource) {\n                    this.options.dataSource = dataSource;\n                    this._dataSource();\n                    if (this.options.autoBind) {\n                        this.dataSource.fetch();\n                    }\n                },\n\n                setConnectionsDataSource: function(dataSource) {\n                    this.options.connectionsDataSource = dataSource;\n                    this._connectionDataSource();\n                    if (this.options.autoBind) {\n                        this.connectionsDataSource.fetch();\n                    }\n                },\n\n                /**\n                 * Performs a diagram layout of the given type.\n                 * @param layoutType The layout algorithm to be applied (TreeLayout, LayeredLayout, SpringLayout).\n                 * @param options Layout-specific options.\n                 */\n                layout: function(options) {\n                    this._layouting = true;\n                    // TODO: raise layout event?\n                    var type;\n                    if (isUndefined(options)) {\n                        options = this.options.layout;\n                    }\n                    if (isUndefined(options) || isUndefined(options.type)) {\n                        type = \"Tree\";\n                    }\n                    else {\n                        type = options.type;\n                    }\n                    var l;\n                    switch (type.toLowerCase()) {\n                        case \"tree\":\n                            l = new diagram.TreeLayout(this);\n                            break;\n\n                        case \"layered\":\n                            l = new diagram.LayeredLayout(this);\n                            break;\n\n                        case \"forcedirected\":\n                        case \"force\":\n                        case \"spring\":\n                        case \"springembedder\":\n                            l = new diagram.SpringLayout(this);\n                            break;\n                        default:\n                            throw \"Layout algorithm '\" + type + \"' is not supported.\";\n                    }\n                    var initialState = new diagram.LayoutState(this);\n                    var finalState = l.layout(options);\n                    if (finalState) {\n                        var unit = new diagram.LayoutUndoUnit(initialState, finalState, options ? options.animate : null);\n                        this.undoRedoService.add(unit);\n                    }\n                    this._layouting = false;\n                    this._redrawConnections();\n                },\n                /**\n                 * Gets a shape on the basis of its identifier.\n                 * @param id (string) the identifier of a shape.\n                 * @returns {Shape}\n                 */\n                getShapeById: function(id) {\n                    var found;\n                    found = Utils.first(this.shapes, function(s) {\n                        return s.visual.id === id;\n                    });\n                    if (found) {\n                        return found;\n                    }\n                    found = Utils.first(this.connections, function(c) {\n                        return c.visual.id === id;\n                    });\n                    return found;\n                },\n\n                getShapeByModelId: function(id) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = this._dataMap[id];\n                    } else {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).id === id;\n                        });\n                    }\n                    return shape;\n                },\n\n                getShapeByModelUid: function(uid) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).uid === uid;\n                        });\n                    } else {\n                        shape = this._dataMap[uid];\n                    }\n                    return shape;\n                },\n\n                getConnectionByModelId: function(id) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = Utils.first(this.connections, function(connection) {\n                            return (connection.dataItem || {}).id === id;\n                        });\n                    }\n                    return connection;\n                },\n\n                getConnectionByModelUid: function(uid) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = this._connectionsDataMap[uid];\n                    }\n                    return connection;\n                },\n\n                _extendLayoutOptions: function(options) {\n                    if (options.layout) {\n                        options.layout = deepExtend({}, diagram.LayoutBase.fn.defaultOptions || {}, options.layout);\n                    }\n                },\n\n                _selectionChanged: function(selected, deselected) {\n                    if (selected.length || deselected.length) {\n                        this.trigger(SELECT, { selected: selected, deselected: deselected });\n                    }\n                },\n                _getValidZoom: function(zoom) {\n                    return math.min(math.max(zoom, this.options.zoomMin), this.options.zoomMax);\n                },\n                _panTransform: function(pos) {\n                    var diagram = this,\n                        pan = pos || diagram._pan;\n\n                    if (diagram.canvas.translate) {\n                        diagram.scroller.scrollTo(pan.x, pan.y);\n                        diagram._zoomMainLayer();\n                    } else {\n                        diagram._storePan(pan);\n                        diagram._transformMainLayer();\n                    }\n                },\n\n                _finishPan: function() {\n                    this.trigger(PAN, { total: this._pan, delta: Number.NaN });\n                },\n                _storePan: function(pan) {\n                    this._pan = pan;\n                    this._storeViewMatrix();\n                },\n                _zoomMainLayer: function() {\n                    var zoom = this._zoom;\n\n                    var transform = new CompositeTransform(0, 0, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _transformMainLayer: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _storeLayerMatrix: function(canvasTransform) {\n                    this._layerMatrix = canvasTransform.toMatrix();\n                    this._layerMatrixInvert = canvasTransform.invert().toMatrix();\n                },\n                _storeViewMatrix: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    this._matrix = transform.toMatrix();\n                    this._matrixInvert = transform.invert().toMatrix();\n                },\n                _toIndex: function(items, indices) {\n                    var result = this._getDiagramItems(items);\n                    this.mainLayer.toIndex(result.visuals, indices);\n                    this._fixOrdering(result, false);\n                },\n                _fixOrdering: function(result, toFront) {\n                    var shapePos = toFront ? this.shapes.length - 1 : 0,\n                        conPos = toFront ? this.connections.length - 1 : 0,\n                        i, item;\n                    for (i = 0; i < result.shapes.length; i++) {\n                        item = result.shapes[i];\n                        Utils.remove(this.shapes, item);\n                        Utils.insert(this.shapes, item, shapePos);\n                    }\n                    for (i = 0; i < result.cons.length; i++) {\n                        item = result.cons[i];\n                        Utils.remove(this.connections, item);\n                        Utils.insert(this.connections, item, conPos);\n                    }\n                },\n                _getDiagramItems: function(items) {\n                    var i, result = {}, args = items;\n                    result.visuals = [];\n                    result.shapes = [];\n                    result.cons = [];\n\n                    if (!items) {\n                        args = this._selectedItems.slice();\n                    } else if (!isArray(items)) {\n                        args = [items];\n                    }\n\n                    for (i = 0; i < args.length; i++) {\n                        var item = args[i];\n                        if (item instanceof Shape) {\n                            result.shapes.push(item);\n                            result.visuals.push(item.visual);\n                        } else if (item instanceof Connection) {\n                            result.cons.push(item);\n                            result.visuals.push(item.visual);\n                        }\n                    }\n\n                    return result;\n                },\n\n                _removeItem: function(item, undoable, removedConnections) {\n                    item.select(false);\n                    if (item instanceof Shape) {\n                        this._removeShapeDataItem(item);\n                        this._removeShape(item, undoable, removedConnections);\n                    } else if (item instanceof Connection) {\n                        this._removeConnectionDataItem(item);\n                        this._removeConnection(item, undoable);\n                    }\n\n                    this.mainLayer.remove(item.visual);\n                },\n\n                _removeShape: function(shape, undoable, removedConnections) {\n                    var i, connection, connector,\n                        sources = [], targets = [];\n                    this.toolService._removeHover();\n\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteShapeUnit(shape));\n                    }\n                    Utils.remove(this.shapes, shape);\n                    this._shapesQuadTree.remove(shape);\n\n                    for (i = 0; i < shape.connectors.length; i++) {\n                        connector = shape.connectors[i];\n                        for (var j = 0; j < connector.connections.length; j++) {\n                            connection = connector.connections[j];\n                            if (!removedConnections || !dataviz.inArray(connection, removedConnections)) {\n                                if (connection.sourceConnector == connector) {\n                                    sources.push(connection);\n                                } else if (connection.targetConnector == connector) {\n                                    targets.push(connection);\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < sources.length; i++) {\n                        sources[i].source(null, undoable);\n                        sources[i].updateModel();\n                    }\n                    for (i = 0; i < targets.length; i++) {\n                        targets[i].target(null, undoable);\n                        targets[i].updateModel();\n                    }\n                },\n\n                _removeConnection: function(connection, undoable) {\n                    if (connection.sourceConnector) {\n                        Utils.remove(connection.sourceConnector.connections, connection);\n                    }\n                    if (connection.targetConnector) {\n                        Utils.remove(connection.targetConnector.connections, connection);\n                    }\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteConnectionUnit(connection));\n                    }\n\n                    Utils.remove(this.connections, connection);\n                },\n\n                _removeDataItems: function(items, recursive) {\n                    var item, children, shape, idx;\n                    items = isArray(items) ? items : [items];\n\n                    while (items.length) {\n                        item = items.shift();\n                        shape = this._dataMap[item.uid];\n                        if (shape) {\n                            this._removeShapeConnections(shape);\n                            this._removeItem(shape, false);\n                            delete this._dataMap[item.uid];\n                            if (recursive && item.hasChildren && item.loaded()) {\n                                children = item.children.data();\n                                for (idx = 0; idx < children.length; idx++) {\n                                    items.push(children[idx]);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _removeShapeConnections: function(shape) {\n                    var connections = shape.connections();\n                    var idx;\n\n                    if (connections) {\n                        for (idx = 0; idx < connections.length; idx++) {\n                            this._removeItem(connections[idx], false);\n                        }\n                    }\n                },\n\n                _addDataItem: function(dataItem, undoable) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.id];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape, undoable !== false);\n                    this._dataMap[dataItem.id] = shape;\n                    return shape;\n                },\n\n                _addDataItemByUid: function(dataItem) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.uid];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape);\n                    this._dataMap[dataItem.uid] = shape;\n                    return shape;\n                },\n\n                _addDataItems: function(items, parent) {\n                    var item, idx, shape, parentShape, connection;\n                    for (idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        shape = this._addDataItemByUid(item);\n                        parentShape = this._addDataItemByUid(parent);\n                        if (parentShape && !this.connected(parentShape, shape)) { // check if connected to not duplicate connections.\n                            connection = this.connect(parentShape, shape);\n                        }\n                    }\n                },\n\n                _refreshSource: function(e) {\n                    var that = this,\n                        node = e.node,\n                        action = e.action,\n                        items = e.items,\n                        options = that.options,\n                        idx,\n                        dataBound;\n\n                    if (e.field) {\n                        for (idx = 0; idx < items.length; idx++) {\n                            if (this._dataMap[items[idx].uid]) {\n                                this._dataMap[items[idx].uid].redrawVisual();\n                            }\n                        }\n                        return;\n                    }\n\n                    if (action == \"remove\") {\n                        this._removeDataItems(e.items, true);\n                    } else {\n\n                        if ((!action || action === \"itemloaded\") && !this._bindingRoots) {\n                            this._bindingRoots = true;\n                            dataBound = true;\n                        }\n\n                        if (!action && !node) {\n                            that.clear();\n                        }\n\n                        this._addDataItems(items, node);\n\n                        for (idx = 0; idx < items.length; idx++) {\n                            items[idx].load();\n                        }\n                    }\n\n                    if (options.layout && (dataBound || action == \"remove\" || action == \"add\")) {\n                        that.layout(options.layout);\n                    }\n\n                    if (dataBound) {\n                        this.trigger(\"dataBound\");\n                        this._bindingRoots = false;\n                    }\n                },\n\n                _addItem: function(item) {\n                    if (item instanceof Shape) {\n                        this.addShape(item);\n                    } else if (item instanceof Connection) {\n                        this.addConnection(item);\n                    }\n                },\n\n                _createToolBar: function(preventClosing) {\n                    var diagram = this.toolService.diagram;\n\n                    if (!this.singleToolBar && diagram.select().length === 1) {\n                        var element = diagram.select()[0];\n                        if (element && element.options.editable !== false) {\n                            var editable = element.options.editable;\n                            var tools = editable.tools;\n                            if (this._isEditable && tools.length === 0) {\n                                if (element instanceof Shape) {\n                                    tools = [\"edit\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                                } else if (element instanceof Connection) {\n                                    tools = [\"edit\"];\n                                }\n\n                                if (editable && editable.remove !== false) {\n                                    tools.push(\"delete\");\n                                }\n                            }\n\n                            if (tools && tools.length) {\n                                var padding = 20;\n                                var point;\n                                this.singleToolBar = new DiagramToolBar(diagram, {\n                                    tools: tools,\n                                    click: this._toolBarClick.bind(this),\n                                    modal: true,\n                                    popupZIndex: parseInt(diagram.element.closest(\".k-window\").css(\"zIndex\"), 10) + 10\n                                });\n                                var popupWidth = outerWidth(this.singleToolBar._popup.element);\n                                var popupHeight = outerHeight(this.singleToolBar._popup.element);\n                                if (element instanceof Shape) {\n                                    var shapeBounds = this.modelToView(element.bounds(ROTATED));\n                                    point = new Point(shapeBounds.x, shapeBounds.y).minus(new Point(\n                                        (popupWidth - shapeBounds.width) / 2,\n                                        popupHeight + padding));\n                                } else if (element instanceof Connection) {\n                                    var connectionBounds = this.modelToView(element.bounds());\n\n                                    point = new Point(connectionBounds.x, connectionBounds.y)\n                                        .minus(new Point(\n                                            (popupWidth - connectionBounds.width - 20) / 2,\n                                            popupHeight + padding\n                                        ));\n                                }\n\n                                if (point) {\n                                    if (!this.canvas.translate) {\n                                        point = point.minus(new Point(this.scroller.scrollLeft, this.scroller.scrollTop));\n                                    }\n                                    point = this.viewToDocument(point);\n                                    point = new Point(math.max(point.x, 0), math.max(point.y, 0));\n                                    this.singleToolBar.showAt(point);\n                                    if (preventClosing) {\n                                        this.singleToolBar._popup.one(\"close\", preventDefault);\n                                    }\n                                } else {\n                                    this._destroyToolBar();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _toolBarClick: function(e) {\n                    this.trigger(\"toolBarClick\", e);\n                    this._destroyToolBar();\n                },\n\n                _normalizePointZoom: function(point) {\n                    return point.times(1 / this.zoom());\n                },\n\n                _initialize: function() {\n                    this.shapes = [];\n                    this._selectedItems = [];\n                    this.connections = [];\n                    this._dataMap = {};\n                    this._connectionsDataMap = {};\n                    this._inactiveShapeItems = new InactiveItemsCollection();\n                    this._deferredConnectionUpdates = [];\n                    this.undoRedoService = new UndoRedoService({\n                        undone: this._syncHandler,\n                        redone: this._syncHandler\n                    });\n                    this.id = diagram.randomId();\n                },\n\n                _fetchFreshData: function() {\n                    var that = this;\n                    that._dataSource();\n\n                    if (that._isEditable) {\n                        that._connectionDataSource();\n                    }\n\n                    if (that.options.autoBind) {\n                        if (that._isEditable) {\n                            this._loadingShapes = true;\n                            this._loadingConnections = true;\n                            that.dataSource.fetch();\n                            that.connectionsDataSource.fetch();\n                        } else {\n                            that.dataSource.fetch();\n                        }\n                    }\n                },\n\n                _dataSource: function() {\n                    if (defined(this.options.connectionsDataSource)) {\n                        this._isEditable = true;\n                        var dsOptions = this.options.dataSource || {};\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.dataSource && this._shapesRefreshHandler) {\n                            this.dataSource\n                                .unbind(\"change\", this._shapesRefreshHandler)\n                                .unbind(\"requestStart\", this._shapesRequestStartHandler)\n                                .unbind(\"error\", this._shapesErrorHandler);\n                        } else {\n                            this._shapesRefreshHandler = this._refreshShapes.bind(this);\n                            this._shapesRequestStartHandler = this._shapesRequestStart.bind(this);\n                            this._shapesErrorHandler = this._error.bind(this);\n                        }\n\n                        this.dataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._shapesRefreshHandler)\n                            .bind(\"requestStart\", this._shapesRequestStartHandler)\n                            .bind(\"error\", this._shapesErrorHandler);\n                    } else {\n                        this._treeDataSource();\n                        this._isEditable = false;\n                    }\n                },\n\n                _connectionDataSource: function() {\n                    var dsOptions = this.options.connectionsDataSource;\n                    if (dsOptions) {\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.connectionsDataSource && this._connectionsRefreshHandler) {\n                            this.connectionsDataSource\n                                .unbind(\"change\", this._connectionsRefreshHandler)\n                                .unbind(\"requestStart\", this._connectionsRequestStartHandler)\n                                .unbind(\"error\", this._connectionsErrorHandler);\n                        } else {\n                            this._connectionsRefreshHandler = this._refreshConnections.bind(this);\n                            this._connectionsRequestStartHandler = this._connectionsRequestStart.bind(this);\n                            this._connectionsErrorHandler = this._connectionsError.bind(this);\n                        }\n\n                        this.connectionsDataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._connectionsRefreshHandler)\n                            .bind(\"requestStart\", this._connectionsRequestStartHandler)\n                            .bind(\"error\", this._connectionsErrorHandler);\n                    }\n                },\n\n                _shapesRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingShapes = true;\n                    }\n                },\n\n                _connectionsRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingConnections = true;\n                    }\n                },\n\n                _error: function() {\n                    this._loadingShapes = false;\n                },\n\n                _connectionsError: function() {\n                    this._loadingConnections = false;\n                },\n\n                _refreshShapes: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeShapes(e.items);\n                        }\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateShapes(e.items, e.field);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._inactiveShapeItems.add(e.items);\n                    } else if (e.action === \"sync\") {\n                        this._syncShapes(e.items);\n                    } else {\n                        this.refresh();\n                    }\n                },\n\n                _shouldRefresh: function() {\n                    return !this._suspended;\n                },\n\n                _suspendModelRefresh: function() {\n                    this._suspended = (this._suspended || 0) + 1;\n                },\n\n                _resumeModelRefresh: function() {\n                    this._suspended = math.max((this._suspended || 0) - 1, 0);\n                },\n\n                refresh: function() {\n                    this._loadingShapes = false;\n                    if (!this._loadingConnections) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _rebindShapesAndConnections: function() {\n                    this.clear();\n                    this._addShapes(this.dataSource.view());\n                    if (this.connectionsDataSource) {\n                        this._addConnections(this.connectionsDataSource.view(), false);\n                    }\n\n                    if (this.options.layout) {\n                        this.layout(this.options.layout);\n                    } else {\n                        this._redrawConnections();\n                    }\n                    this.trigger(\"dataBound\");\n                },\n\n                refreshConnections: function() {\n                    this._loadingConnections = false;\n                    if (!this._loadingShapes) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _redrawConnections: function() {\n                    var connections = this.connections;\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connections[idx].refresh();\n                    }\n                },\n\n                _removeShapes: function(items) {\n                    var dataMap = this._dataMap;\n                    var item, i;\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (dataMap[item.id]) {\n                            this.remove(dataMap[item.id], false);\n                            dataMap[item.id] = null;\n                        }\n                    }\n                },\n\n                _syncShapes: function() {\n                    var diagram = this;\n                    var inactiveItems = diagram._inactiveShapeItems;\n                    inactiveItems.forEach(function(inactiveItem) {\n                        var dataItem = inactiveItem.dataItem;\n                        var shape = inactiveItem.element;\n                        if (!dataItem.isNew()) {\n                            if (shape) {\n                                shape._setOptionsFromModel();\n                                diagram.addShape(shape, inactiveItem.undoable);\n                                diagram._dataMap[dataItem.id] = shape;\n                            } else {\n                                diagram._addDataItem(dataItem);\n                            }\n                            inactiveItem.activate();\n                            inactiveItems.remove(dataItem);\n                        }\n                    });\n                },\n\n                _updateShapes: function(items, field) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var shape = this._dataMap[dataItem.id];\n                        if (shape) {\n                            shape.updateOptionsFromModel(dataItem, field);\n                        }\n                    }\n                },\n\n                _addShapes: function(dataItems) {\n                    for (var i = 0; i < dataItems.length; i++) {\n                        this._addDataItem(dataItems[i], false);\n                    }\n                },\n\n                _refreshConnections: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeConnections(e.items);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._addConnections(e.items);\n                    } else if (e.action === \"sync\") {\n                        //TO DO: include logic to update the connections with different values returned from the server.\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateConnections(e.items);\n                        }\n                    } else {\n                        this.refreshConnections();\n                    }\n                },\n\n                _removeConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        this.remove(this._connectionsDataMap[items[i].uid], false);\n                        this._connectionsDataMap[items[i].uid] = null;\n                    }\n                },\n\n                _updateConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var connection = this._connectionsDataMap[dataItem.uid];\n                        connection.updateOptionsFromModel(dataItem);\n                    }\n                },\n\n                _addConnections: function(connections, undoable) {\n                    var length = connections.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var dataItem = connections[i];\n                        this._addConnectionDataItem(dataItem, undoable);\n                    }\n                },\n\n                _addConnectionDataItem: function(dataItem, undoable) {\n                    if (!this._connectionsDataMap[dataItem.uid]) {\n                        var from = this._validateConnector(dataItem.from);\n                        if (!defined(from) || from === null) {\n                            from = new Point(dataItem.fromX, dataItem.fromY);\n                        }\n\n                        var to = this._validateConnector(dataItem.to);\n                        if (!defined(to) || to === null) {\n                            to = new Point(dataItem.toX, dataItem.toY);\n                        }\n\n                        if (defined(from) && defined(to)) {\n                            var options = deepExtend({}, this.options.connectionDefaults);\n                            options.dataItem = dataItem;\n                            var connection = new Connection(from, to, options);\n\n                            this._connectionsDataMap[dataItem.uid] = connection;\n                            this.addConnection(connection, undoable);\n                        }\n                    }\n                },\n\n                _validateConnector: function(value) {\n                    var connector;\n\n                    if (defined(value) && value !== null) {\n                        connector = this._dataMap[value];\n                    }\n\n                    return connector;\n                },\n\n                _treeDataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        dataSource = options.dataSource;\n\n                    dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (dataSource instanceof kendo.data.DataSource && !(dataSource instanceof kendo.data.HierarchicalDataSource)) {\n                        throw new Error(\"Incorrect DataSource type. If a single dataSource instance is set to the diagram then it should be a HierarchicalDataSource. You should set only the options instead of an instance or a HierarchicalDataSource instance or supply connectionsDataSource as well.\");\n                    }\n\n                    if (!dataSource.fields) {\n                        dataSource.fields = [\n                            { field: \"text\" },\n                            { field: \"url\" },\n                            { field: \"spriteCssClass\" },\n                            { field: \"imageUrl\" }\n                        ];\n                    }\n                    if (that.dataSource && that._refreshHandler) {\n                        that._unbindDataSource();\n                    }\n\n                    that._refreshHandler = that._refreshSource.bind(that);\n                    that._errorHandler = that._error.bind(that);\n\n                    that.dataSource = HierarchicalDataSource.create(dataSource)\n                        .bind(CHANGE, that._refreshHandler)\n                        .bind(ERROR, that._errorHandler);\n                },\n\n                _unbindDataSource: function() {\n                    var that = this;\n\n                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(ERROR, that._errorHandler);\n                },\n\n                _adorn: function(adorner, isActive) {\n                    if (isActive !== undefined$1 && adorner) {\n                        if (isActive) {\n                            this._adorners.push(adorner);\n                            this.adornerLayer.append(adorner.visual);\n                        }\n                        else {\n                            Utils.remove(this._adorners, adorner);\n                            this.adornerLayer.remove(adorner.visual);\n                        }\n                    }\n                },\n\n                _showConnectors: function(shape, value) {\n                    if (value) {\n                        this._connectorsAdorner.show(shape);\n                    } else {\n                        this._connectorsAdorner.destroy();\n                    }\n                },\n\n                _updateAdorners: function() {\n                    var adorners = this._adorners;\n\n                    for (var i = 0; i < adorners.length; i++) {\n                        var adorner = adorners[i];\n\n                        if (adorner.refreshBounds) {\n                            adorner.refreshBounds();\n                        }\n                        adorner.refresh();\n                    }\n                },\n\n                _refresh: function() {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        this.connections[i].refresh();\n                    }\n                },\n\n                _destroyToolBar: function() {\n                    if (this.singleToolBar) {\n                        this.singleToolBar.hide();\n                        this.singleToolBar.destroy();\n                        this.singleToolBar = null;\n                    }\n                },\n\n                _destroyGlobalToolBar: function() {\n                    if (this.toolBar) {\n                        this.toolBar.hide();\n                        this.toolBar.destroy();\n                        this.toolBar = null;\n                    }\n                },\n\n                exportDOMVisual: function() {\n                    var viewBox = this.canvas._viewBox;\n                    var scrollOffset = geom.transform()\n                                           .translate(-viewBox.x, -viewBox.y);\n\n                    var viewRect = new geom.Rect([0, 0], [viewBox.width, viewBox.height]);\n                    var clipPath = draw.Path.fromRect(viewRect);\n                    var wrap = new draw.Group({ transform: scrollOffset });\n                    var clipWrap = new draw.Group({ clip: clipPath });\n                    var root = this.canvas.drawingElement.children[0];\n\n                    clipWrap.append(wrap);\n\n                    // Don't reparent the root\n                    wrap.children.push(root);\n\n                    return clipWrap;\n                },\n\n                exportVisual: function() {\n                    var scale = geom.transform().scale(1 / this._zoom);\n                    var wrap = new draw.Group({\n                        transform: scale\n                    });\n\n                    var root = this.mainLayer.drawingElement;\n                    wrap.children.push(root);\n\n                    return wrap;\n                },\n\n                _syncChanges: function() {\n                    this._syncShapeChanges();\n                    this._syncConnectionChanges();\n                },\n\n                _syncShapeChanges: function() {\n                    if (this.dataSource && this._isEditable) {\n                        this.dataSource.sync();\n                    }\n                },\n\n                _syncConnectionChanges: function() {\n                    var that = this;\n                    if (that.connectionsDataSource && that._isEditable) {\n                        $.when.apply($, that._deferredConnectionUpdates).then(function() {\n                            that.connectionsDataSource.sync();\n                        });\n                        that.deferredConnectionUpdates = [];\n                    }\n                }\n            });\n\n            dataviz.ExportMixin.extend(Diagram.fn, true);\n\n            if (kendo.PDFMixin) {\n                kendo.PDFMixin.extend(Diagram.fn);\n            }\n\n            function filterShapeDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.text = dataItem.text;\n                }\n\n                if (defined(dataItem.x) && dataItem.x !== null) {\n                    result.x = dataItem.x;\n                }\n\n                if (defined(dataItem.y) && dataItem.y !== null) {\n                    result.y = dataItem.y;\n                }\n\n                if (defined(dataItem.width) && dataItem.width !== null) {\n                    result.width = dataItem.width;\n                }\n\n                if (defined(dataItem.height) && dataItem.height !== null) {\n                    result.height = dataItem.height;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                return result;\n            }\n\n            function filterConnectionDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.content = dataItem.text;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                if (defined(dataItem.from) && dataItem.from !== null) {\n                    result.from = dataItem.from;\n                }\n\n                if (defined(dataItem.fromConnector) && dataItem.fromConnector !== null) {\n                    result.fromConnector = dataItem.fromConnector;\n                }\n\n                if (defined(dataItem.fromX) && dataItem.fromX !== null) {\n                    result.fromX = dataItem.fromX;\n                }\n\n                if (defined(dataItem.fromY) && dataItem.fromY !== null) {\n                    result.fromY = dataItem.fromY;\n                }\n\n                if (defined(dataItem.to) && dataItem.to !== null) {\n                    result.to = dataItem.to;\n                }\n\n                if (defined(dataItem.toConnector) && dataItem.toConnector !== null) {\n                    result.toConnector = dataItem.toConnector;\n                }\n\n                if (defined(dataItem.toX) && dataItem.toX !== null) {\n                    result.toX = dataItem.toX;\n                }\n\n                if (defined(dataItem.toY) && dataItem.toY !== null) {\n                    result.toY = dataItem.toY;\n                }\n\n                return result;\n            }\n\n\n            var DiagramToolBar = kendo.Observable.extend({\n                init: function(diagram, options) {\n                    kendo.Observable.fn.init.call(this);\n                    this.diagram = diagram;\n                    this.options = deepExtend({}, this.options, options);\n                    this._tools = [];\n                    this.createToolBar();\n                    this.createTools();\n                    this.appendTools();\n\n                    if (this.options.modal) {\n                        this.createPopup();\n                    }\n\n                    this.bind(this.events, options);\n                },\n\n                events: [\"click\"],\n\n                createPopup: function() {\n                    this.container = $(\"<div/>\").append(this.element);\n                    this._popup = this.container.kendoPopup({}).getKendoPopup();\n                },\n\n                appendTools: function() {\n                    for (var i = 0; i < this._tools.length; i++) {\n                        var tool = this._tools[i];\n                        if (tool.buttons && tool.buttons.length || !defined(tool.buttons)) {\n                            this._toolBar.add(tool);\n                        }\n                    }\n                },\n\n                createToolBar: function() {\n                    this.element = $(\"<div/>\");\n                    this._toolBar = this.element\n                        .kendoToolBar({\n                            click: this.click.bind(this),\n                            resizable: false\n                        }).getKendoToolBar();\n\n                    this.element.css(\"border\", \"none\");\n                },\n\n                createTools: function() {\n                    for (var i = 0; i < this.options.tools.length; i++) {\n                        this.createTool(this.options.tools[i]);\n                    }\n                },\n\n                createTool: function(tool) {\n                    if (!isPlainObject(tool)) {\n                        tool = {\n                            name: tool\n                        };\n                    }\n                    var toolName = tool.name + \"Tool\";\n                    if (this[toolName]) {\n                        this[toolName](tool);\n                    } else {\n                        this._tools.push(deepExtend({}, tool, {\n                            attributes: this._setAttributes({ action: tool.name })\n                        }));\n                    }\n                },\n\n                showAt: function(point) {\n                    var popupZIndex = parseInt(this.options.popupZIndex, 10);\n\n                    if (this._popup) {\n                        this._popup.open(point.x, point.y);\n\n                        if (popupZIndex) {\n                            this._popup.wrapper.css(\"zIndex\", popupZIndex);\n                        }\n                    }\n                },\n\n                hide: function() {\n                    if (this._popup) {\n                        this._popup.close();\n                    }\n                },\n\n                newGroup: function() {\n                    return {\n                        type: \"buttonGroup\",\n                        buttons: []\n                    };\n                },\n\n                editTool: function() {\n                    this._tools.push({\n                        icon: \"pencil\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Edit\",\n                        attributes: this._setAttributes({ action: \"edit\" })\n                    });\n                },\n\n                deleteTool: function() {\n                    this._tools.push({\n                        icon: \"x\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Delete\",\n                        attributes: this._setAttributes({ action: \"delete\" })\n                    });\n                },\n\n                rotateAnticlockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-left\",\n                        showText: \"overflow\",\n                        text: \"RotateAnticlockwise\",\n                        group: \"rotate\",\n                        attributes: this._setAttributes({ action: \"rotateAnticlockwise\", step: options.step })\n                    });\n                },\n\n                rotateClockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-right\",\n                        attributes: this._setAttributes({ action: \"rotateClockwise\", step: options.step }),\n                        showText: \"overflow\",\n                        text: \"RotateClockwise\",\n                        group: \"rotate\"\n                    });\n                },\n\n                createShapeTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"shapes\",\n                        showText: \"overflow\",\n                        text: \"CreateShape\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createShape\" })\n                    });\n                },\n\n                createConnectionTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"connector\",\n                        showText: \"overflow\",\n                        text: \"CreateConnection\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createConnection\" })\n                    });\n                },\n\n                undoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"undo\",\n                        showText: \"overflow\",\n                        text: \"Undo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"undo\" })\n                    });\n                },\n\n                redoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"redo\",\n                        showText: \"overflow\",\n                        text: \"Redo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"redo\" })\n                    });\n                },\n\n                _appendGroup: function(name) {\n                    var prop = \"_\" + name + \"Group\";\n                    if (!this[prop]) {\n                        this[prop] = this.newGroup();\n                        this._tools.push(this[prop]);\n                    }\n                },\n\n                _setAttributes: function(attributes) {\n                    var attr = {};\n\n                    if (attributes.action) {\n                        attr[kendo.attr(\"action\")] = attributes.action;\n                    }\n\n                    if (attributes.step) {\n                        attr[kendo.attr(\"step\")] = attributes.step;\n                    }\n\n                    return attr;\n                },\n\n                _getAttributes: function(element) {\n                    var attr = {};\n\n                    var action = element.attr(kendo.attr(\"action\"));\n                    if (action) {\n                        attr.action = action;\n                    }\n\n                    var step = element.attr(kendo.attr(\"step\"));\n                    if (step) {\n                        attr.step = step;\n                    }\n\n                    return attr;\n                },\n\n                click: function(e) {\n                    var attributes = this._getAttributes($(e.target));\n                    var action = attributes.action;\n\n                    if (action && this[action]) {\n                        this[action](attributes);\n                    }\n\n                    this.trigger(\"click\", this.eventData(action, e.target));\n                },\n\n                eventData: function(action, target) {\n                    var elements = this.selectedElements(),\n                        length = elements.length,\n                        shapes = [], connections = [], element;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        element = elements[idx];\n                        if (element instanceof Shape) {\n                            shapes.push(element);\n                        } else {\n                            connections.push(element);\n                        }\n                    }\n\n                    return {\n                        shapes: shapes,\n                        connections: connections,\n                        action: action,\n                        target: target\n                    };\n                },\n\n                \"delete\": function() {\n                    var diagram = this.diagram;\n                    var toRemove = diagram._triggerRemove(this.selectedElements());\n                    if (toRemove.length) {\n                        this.diagram.remove(toRemove, true);\n                        this.diagram._syncChanges();\n                    }\n                },\n\n                edit: function() {\n                    var selectedElemens = this.selectedElements();\n                    if (selectedElemens.length === 1) {\n                        this.diagram.edit(selectedElemens[0]);\n                    }\n                },\n\n                rotateClockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(angle);\n                },\n\n                rotateAnticlockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(-angle);\n                },\n\n                _rotate: function(angle) {\n                    var adorner = this.diagram._resizingAdorner;\n                    adorner.angle(adorner.angle() + angle);\n                    adorner.rotate();\n                },\n\n                selectedElements: function() {\n                    return this.diagram.select();\n                },\n\n                createShape: function() {\n                    this.diagram.createShape();\n                },\n\n                createConnection: function() {\n                    this.diagram.createConnection();\n                },\n\n                undo: function() {\n                    this.diagram.undo();\n                },\n\n                redo: function() {\n                    this.diagram.redo();\n                },\n\n                destroy: function() {\n                    this.diagram = null;\n                    this.element = null;\n                    this.options = null;\n\n                    if (this._toolBar) {\n                        this._toolBar.destroy();\n                    }\n\n                    if (this._popup) {\n                        this._popup.destroy();\n                    }\n                }\n            });\n\n            var Editor = kendo.Observable.extend({\n                init: function(element, options) {\n                    kendo.Observable.fn.init.call(this);\n\n                    this.options = extend(true, {}, this.options, options);\n                    this.element = element;\n                    this.model = this.options.model;\n                    this.fields = this._getFields();\n                    this._initContainer();\n                    this.createEditable();\n                },\n\n                options: {\n                    editors: {}\n                },\n\n                _initContainer: function() {\n                    this.wrapper = this.element;\n                },\n\n                createEditable: function() {\n                    var options = this.options;\n\n                    this.editable = new kendo.ui.Editable(this.wrapper, {\n                        fields: this.fields,\n                        target: options.target,\n                        clearContainer: false,\n                        model: this.model\n                    });\n                },\n\n                _isEditable: function(field) {\n                    return this.model.editable && this.model.editable(field);\n                },\n\n                _getFields: function() {\n                    var fields = [];\n                    var modelFields = this.model.fields;\n\n                    for (var field in modelFields) {\n                        var result = {};\n                        if (this._isEditable(field)) {\n                            var editor = this.options.editors[field];\n                            if (editor) {\n                                result.editor = editor;\n                            }\n                            result.field = field;\n                            fields.push(result);\n                        }\n                    }\n\n                    return fields;\n                },\n\n                end: function() {\n                    return this.editable.end();\n                },\n\n                destroy: function() {\n                    this.editable.destroy();\n                    this.editable.element.find(\"[\" + kendo.attr(\"container-for\") + \"]\").empty();\n                    this.model = this.wrapper = this.element = this.columns = this.editable = null;\n                }\n            });\n\n            var PopupEditor = Editor.extend({\n                init: function(element, options) {\n                    Editor.fn.init.call(this, element, options);\n                    this.bind(this.events, this.options);\n\n                    this.open();\n                },\n\n                events: [ \"update\", \"cancel\" ],\n\n                options: {\n                    window: {\n                        modal: true,\n                        resizable: false,\n                        draggable: true,\n                        title: \"Edit\",\n                        visible: false\n                    }\n                },\n\n                _initContainer: function() {\n                    var that = this;\n                    this.wrapper = $('<div class=\"k-popup-edit-form\"/>')\n                        .attr(kendo.attr(\"uid\"), this.model.uid);\n\n                    var formContent = \"\";\n\n                    if (this.options.template) {\n                        formContent += this._renderTemplate();\n                        this.fields = [];\n                    } else {\n                        formContent += this._renderFields();\n                    }\n\n                    formContent += this._renderButtons();\n\n                    this.wrapper.append(\n                        $('<div class=\"k-edit-form-container\"/>').append(formContent));\n\n                    this.window = new kendo.ui.Window(this.wrapper.appendTo(this.element), this.options.window);\n                    this.window.bind(\"close\", function(e) {\n                        //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing\n                        if (e.userTriggered) {\n                            e.sender.element.trigger(\"focus\");\n                            that._cancelClick(e);\n                        }\n                    });\n\n                    this._attachButtonEvents();\n                },\n\n                _renderTemplate: function() {\n                    var template = this.options.template;\n\n                    if (typeof template === \"string\") {\n                        template = kendo.unescape(template);\n                    }\n\n                    template = kendo.template(template)(this.model);\n\n                    return template;\n                },\n\n                _renderFields: function() {\n                    var form = \"\";\n                    for (var i = 0; i < this.fields.length; i++) {\n                        var field = this.fields[i];\n\n                        form += '<div class=\"k-edit-label\"><label for=\"' + field.field + '\">' + (field.field || \"\") + '</label></div>';\n\n                        if (this._isEditable(field.field)) {\n                            form += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field +\n                            '\" class=\"k-edit-field\"></div>';\n                        }\n                    }\n\n                    return form;\n                },\n\n                _renderButtons: function() {\n                    var form = '<div class=\"k-edit-buttons\">';\n                    form += this._createButton(\"update\");\n                    form += this._createButton(\"cancel\");\n                    form += '</div>';\n                    return form;\n                },\n\n                _createButton: function(name) {\n                    return kendo.template(BUTTON_TEMPLATE)(defaultButtons[name]);\n                },\n\n                _attachButtonEvents: function() {\n                    this._cancelClickHandler = this._cancelClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-cancel\", this._cancelClickHandler);\n\n                    this._updateClickHandler = this._updateClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-update\", this._updateClickHandler);\n                },\n\n                _updateClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"update\");\n                },\n\n                _cancelClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"cancel\");\n                },\n\n                open: function() {\n                    this.window.center().open();\n                },\n\n                close: function() {\n                    this.window.bind(\"deactivate\", this.destroy.bind(this)).close();\n                },\n\n                destroy: function() {\n                    this.window.close().destroy();\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-cancel\", this._cancelClickHandler);\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-update\", this._updateClickHandler);\n                    this._cancelClickHandler = null;\n                    this._editUpdateClickHandler = null;\n                    this.window = null;\n                    Editor.fn.destroy.call(this);\n                }\n            });\n\n            function connectionSelector(container, options) {\n                var model = this.dataSource.reader.model;\n                if (model) {\n                    var textField = model.fn.fields.text ? \"text\" : model.idField;\n                    $(\"<input name='\" + options.field + \"' />\")\n                        .appendTo(container).kendoDropDownList({\n                            dataValueField: model.idField,\n                            dataTextField: textField,\n                            dataSource: this.dataSource.data().toJSON(),\n                            optionLabel: \" \",\n                            valuePrimitive: true\n                        });\n                }\n            }\n\n            function InactiveItem(dataItem) {\n                this.dataItem = dataItem;\n                this.callbacks = [];\n            }\n\n            InactiveItem.fn = InactiveItem.prototype = {\n                onActivate: function(callback) {\n                    var deffered = $.Deferred();\n                    this.callbacks.push({\n                        callback: callback,\n                        deferred: deffered\n                    });\n                    return deffered;\n                },\n\n                activate: function() {\n                    var callbacks = this.callbacks;\n                    var item;\n                    for (var idx = 0; idx < callbacks.length; idx++) {\n                        item = this.callbacks[idx];\n                        item.callback(this.dataItem);\n                        item.deferred.resolve();\n                    }\n                    this.callbacks = [];\n                }\n            };\n\n            function InactiveItemsCollection() {\n                this.items = {};\n            }\n\n            InactiveItemsCollection.fn = InactiveItemsCollection.prototype = {\n                add: function(items) {\n                    for (var idx = 0; idx < items.length; idx++) {\n                        this.items[items[idx].uid] = new InactiveItem(items[idx]);\n                    }\n                },\n\n                forEach: function(callback) {\n                    for (var uid in this.items) {\n                        callback(this.items[uid]);\n                    }\n                },\n\n                getByUid: function(uid) {\n                    return this.items[uid];\n                },\n\n                remove: function(item) {\n                    delete this.items[item.uid];\n                }\n            };\n\n            var QuadRoot = Class.extend({\n                init: function() {\n                    this.shapes = [];\n                },\n\n                _add: function(shape, bounds) {\n                    this.shapes.push({\n                        bounds: bounds,\n                        shape: shape\n                    });\n                    shape._quadNode = this;\n                },\n\n                insert: function(shape, bounds) {\n                    this._add(shape, bounds);\n                },\n\n                remove: function(shape) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        if (shapes[idx].shape === shape) {\n                            shapes.splice(idx, 1);\n                            break;\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var i = 0; i < length; i++) {\n                        if (this._testRect(shapes[i].shape, rect) && !dataviz.inArray(shapes[i].shape, exclude)) {\n                            return true;\n                        }\n                    }\n                },\n\n                _testRect: function(shape, rect) {\n                    var angle = shape.rotate().angle;\n                    var bounds = shape.bounds();\n                    var hit;\n                    if (!angle) {\n                        hit = bounds.overlaps(rect);\n                    } else {\n                        hit = Intersect.rects(rect, bounds, -angle);\n                    }\n                    return hit;\n                }\n            });\n\n            var QuadNode = QuadRoot.extend({\n                init: function(rect) {\n                    QuadRoot.fn.init.call(this);\n                    this.children = [];\n                    this.rect = rect;\n                },\n\n                inBounds: function(rect) {\n                    var nodeRect = this.rect;\n                    var nodeBottomRight = nodeRect.bottomRight();\n                    var bottomRight = rect.bottomRight();\n                    var inBounds = nodeRect.x <= rect.x && nodeRect.y <= rect.y && bottomRight.x <= nodeBottomRight.x &&\n                        bottomRight.y <= nodeBottomRight.y;\n                    return inBounds;\n                },\n\n                overlapsBounds: function(rect) {\n                    return this.rect.overlaps(rect);\n                },\n\n                insert: function(shape, bounds) {\n                    var inserted = false;\n                    var children = this.children;\n                    var length = children.length;\n                    if (this.inBounds(bounds)) {\n                        if (!length && this.shapes.length < 4) {\n                            this._add(shape, bounds);\n                        } else {\n                            if (!length) {\n                                this._initChildren();\n                            }\n\n                            for (var idx = 0; idx < children.length; idx++) {\n                                if (children[idx].insert(shape, bounds)) {\n                                    inserted = true;\n                                    break;\n                                }\n                            }\n\n                            if (!inserted) {\n                                this._add(shape, bounds);\n                            }\n                        }\n                        inserted = true;\n                    }\n\n                    return inserted;\n                },\n\n                _initChildren: function() {\n                    var rect = this.rect,\n                        children = this.children,\n                        shapes = this.shapes,\n                        center = rect.center(),\n                        halfWidth = rect.width / 2,\n                        halfHeight = rect.height / 2,\n                        childIdx, shapeIdx;\n\n                    children.push(\n                        new QuadNode(new Rect(rect.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(rect.x, center.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, center.y, halfWidth, halfHeight))\n                    );\n                    for (shapeIdx = shapes.length - 1; shapeIdx >= 0; shapeIdx--) {\n                        for (childIdx = 0; childIdx < children.length; childIdx++) {\n                            if (children[childIdx].insert(shapes[shapeIdx].shape, shapes[shapeIdx].bounds)) {\n                                shapes.splice(shapeIdx, 1);\n                                break;\n                            }\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var idx;\n                    var children = this.children;\n                    var length = children.length;\n                    var hit = false;\n\n                    if (this.overlapsBounds(rect)) {\n                        if (QuadRoot.fn.hitTestRect.call(this, rect, exclude)) {\n                            hit = true;\n                        } else {\n                             for (idx = 0; idx < length; idx++) {\n                                if (children[idx].hitTestRect(rect, exclude)) {\n                                   hit = true;\n                                   break;\n                                }\n                            }\n                        }\n                    }\n\n                    return hit;\n                }\n            });\n\n            var ShapesQuadTree = Class.extend({\n                ROOT_SIZE: 1000,\n\n                init: function(diagram) {\n                    var boundsChangeHandler = this._boundsChange.bind(this);\n                    diagram.bind(ITEMBOUNDSCHANGE, boundsChangeHandler);\n                    diagram.bind(ITEMROTATE, boundsChangeHandler);\n                    this.initRoots();\n                },\n\n                initRoots: function() {\n                    this.rootMap = {};\n                    this.root = new QuadRoot();\n                },\n\n                clear: function() {\n                    this.initRoots();\n                },\n\n                _boundsChange: function(e) {\n                    if (e.item._quadNode) {\n                        e.item._quadNode.remove(e.item);\n                    }\n                    this.insert(e.item);\n                },\n\n                insert: function(shape) {\n                    var bounds = shape.bounds(ROTATED);\n                    var rootSize = this.ROOT_SIZE;\n                    var sectors = this.getSectors(bounds);\n                    var x = sectors[0][0];\n                    var y = sectors[1][0];\n\n                    if (this.inRoot(sectors)) {\n                        this.root.insert(shape, bounds);\n                    } else {\n                        if (!this.rootMap[x]) {\n                            this.rootMap[x] = {};\n                        }\n\n                        if (!this.rootMap[x][y]) {\n                            this.rootMap[x][y] = new QuadNode(\n                                new Rect(x * rootSize, y * rootSize, rootSize, rootSize)\n                            );\n                        }\n\n                        this.rootMap[x][y].insert(shape, bounds);\n                    }\n                },\n\n                remove: function(shape) {\n                    if (shape._quadNode) {\n                        shape._quadNode.remove(shape);\n                    }\n                },\n\n                inRoot: function(sectors) {\n                    return sectors[0].length > 1 || sectors[1].length > 1;\n                },\n\n                getSectors: function(rect) {\n                    var rootSize = this.ROOT_SIZE;\n                    var bottomRight = rect.bottomRight();\n                    var bottomX = math.floor(bottomRight.x / rootSize);\n                    var bottomY = math.floor(bottomRight.y / rootSize);\n                    var sectors = [[],[]];\n                    for (var x = math.floor(rect.x / rootSize); x <= bottomX; x++) {\n                        sectors[0].push(x);\n                    }\n                    for (var y = math.floor(rect.y / rootSize); y <= bottomY; y++) {\n                        sectors[1].push(y);\n                    }\n                    return sectors;\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var sectors = this.getSectors(rect);\n                    var xIdx, yIdx, x, y;\n                    var root;\n\n                    if (this.root.hitTestRect(rect, exclude)) {\n                        return true;\n                    }\n\n                    for (xIdx = 0; xIdx < sectors[0].length; xIdx++) {\n                        x = sectors[0][xIdx];\n                        for (yIdx = 0; yIdx < sectors[1].length; yIdx++) {\n                            y = sectors[1][yIdx];\n                            root = (this.rootMap[x] || {})[y];\n                            if (root && root.hitTestRect(rect, exclude)) {\n                                return true;\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n            });\n\n            function cloneDataItem(dataItem) {\n                var result = dataItem;\n                if (dataItem instanceof kendo.data.Model) {\n                    result = dataItem.toJSON();\n                    result[dataItem.idField] = dataItem._defaultId;\n                }\n                return result;\n            }\n\n            function splitDiagramElements(elements) {\n                var connections = [];\n                var shapes = [];\n                var element, idx;\n                for (idx = 0; idx < elements.length; idx++) {\n                    element = elements[idx];\n                    if (element instanceof Shape) {\n                        shapes.push(element);\n                    } else {\n                        connections.push(element);\n                    }\n                }\n                return {\n                    shapes: shapes,\n                    connections: connections\n                };\n            }\n\n            function createModel(dataSource, model) {\n                if (dataSource.reader.model) {\n                    return new dataSource.reader.model(model);\n                }\n\n                return new kendo.data.ObservableObject(model);\n            }\n\n            function clearField(field, model) {\n                if (defined(model[field])) {\n                    model.set(field, null);\n                }\n            }\n\n            function copyDefaultOptions(mainOptions, elementOptions, fields) {\n                var field;\n                for (var idx = 0; idx < fields.length; idx++) {\n                    field = fields[idx];\n                    if (elementOptions && !defined(elementOptions[field])) {\n                        elementOptions[field] = mainOptions[field];\n                    }\n                }\n            }\n\n            function translateToOrigin(visual) {\n                var bbox = visual.drawingContainer().clippedBBox(null);\n                if (bbox.origin.x !== 0 || bbox.origin.y !== 0) {\n                    visual.position(-bbox.origin.x, -bbox.origin.y);\n                }\n            }\n\n            function preventDefault(e) {\n                e.preventDefault();\n            }\n\n            dataviz.ui.plugin(Diagram);\n\n            deepExtend(diagram, {\n                Shape: Shape,\n                Connection: Connection,\n                Connector: Connector,\n                DiagramToolBar: DiagramToolBar,\n                QuadNode: QuadNode,\n                QuadRoot: QuadRoot,\n                ShapesQuadTree: ShapesQuadTree,\n                PopupEditor: PopupEditor\n            });\n    })(window.kendo.jQuery);\n\n    const __meta__ = {\n            id: \"dataviz.diagram\",\n            name: \"Diagram\",\n            category: \"dataviz\",\n            description: \"The Kendo DataViz Diagram \",\n            depends: [ \"data\", \"userevents\", \"mobile.scroller\", \"draganddrop\", \"drawing\", \"dataviz.core\", \"dataviz.themes\", \"toolbar\" ],\n            features: [{\n                id: \"dataviz.diagram-pdf-export\",\n                name: \"PDF export\",\n                description: \"Export Diagram as PDF\",\n                depends: [ \"pdf\" ]\n            },{\n                id: \"dataviz.diagram-editing\",\n                name: \"Editing\",\n                description: \"Support for model editing\",\n                depends: [ \"editable\", \"window\", \"dropdownlist\" ]\n            }]\n        };\n        var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}