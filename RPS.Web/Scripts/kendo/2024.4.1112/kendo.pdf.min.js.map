{"version":3,"file":"kendo.pdf.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Pdf","this","$","pdf","supportsDeflate","window","pako","deflate","data","jQuery","PDFMixin","extend","proto","events","push","options","saveAsPDF","_drawPDF","_drawPDFShadow","fileName","proxyURL","paperSize","allPages","landscape","margin","title","author","subject","keywords","creator","version","date","progress","Deferred","promise","args","trigger","multiPage","then","root","drawing","exportPDF","done","dataURI","saveAs","forceProxy","proxyTarget","resolve","fail","err","reject","drawDOM","wrapper","group","page","pageNumber","totalPages","notify","settings","drawOptions","shadow","width","css","overflow","before","append","content","clone","defer","setTimeout","always","remove","apply","arguments","__meta__","id","name","description","mixin","category","depends"],"sources":["kendo.pdf.js"],"mappings":"CAAA,SAAWA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,oBAAqBA,QAAQ,mBAC7H,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,CAAC,UAAW,iBAAkB,gBAAiB,eAAgBJ,GACxCA,IAA1ED,EAA+B,oBAAfO,WAA6BA,WAAaP,GAAUQ,MAAsBC,MAAQT,EAAOS,OAAS,CAAC,EAAGT,EAAOS,MAAMC,SAAWV,EAAOS,MAAMC,UAAY,CAAC,EAAGV,EAAOS,MAAMC,SAASC,IAAM,CAAC,GAC5M,CAJD,CAIGC,MAAM,SAAWV,GAmBhB,IAAWW,EAhBPJ,MAAMK,IAAML,MAAMK,KAAO,CAAC,EAE1BL,MAAMK,IAAIC,gBAAkB,WACxB,OAAOC,OAAOC,MAAsC,mBAAvBD,OAAOC,KAAKC,OAC7C,EAEAT,MAAMK,IAAII,QAAU,SAASC,GACzB,OAAOH,OAAOC,KAAKC,QAAQC,EAC/B,EAMDH,OAAOP,MAAMW,OAELP,EA0IRG,OAAOP,MAAMW,OAxIhBX,MAAMY,SAAW,CACbC,OAAQ,SAASC,GACbA,EAAMC,OAAOC,KAAK,aAClBF,EAAMG,QAAQZ,IAAMF,KAAKc,QACzBH,EAAMI,UAAYf,KAAKe,UACvBJ,EAAMK,SAAWhB,KAAKgB,SACtBL,EAAMM,eAAiBjB,KAAKiB,cAChC,EACAH,QAAS,CACLI,SAAY,aACZC,SAAY,GAMZC,UAAY,OAGZC,UAAU,EAGVC,WAAY,EAGZC,OAAY,KAGZC,MAAY,KACZC,OAAY,KACZC,QAAY,KACZC,SAAY,KACZC,QAAY,4BAA8B/B,MAAMgC,QAGhDC,KAAY,MAGhBf,UAAW,WACP,IAAIgB,EAAW,IAAI9B,EAAE+B,SACjBC,EAAUF,EAASE,UACnBC,EAAO,CAAED,QAASA,GAEtB,IAAIjC,KAAKmC,QAAQ,YAAaD,GAA9B,CAIA,IAAIpB,EAAUd,KAAKc,QAAQZ,IAsB3B,OArBAY,EAAQsB,UAAYtB,EAAQsB,WAAatB,EAAQO,SAEjDrB,KAAKgB,SAASe,GACbM,MAAK,SAASC,GACX,OAAOzC,MAAM0C,QAAQC,UAAUF,EAAMxB,EACzC,IACC2B,MAAK,SAASC,GACX7C,MAAM8C,OAAO,CACTD,QAASA,EACTxB,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAClByB,WAAY9B,EAAQ8B,WACpBC,YAAa/B,EAAQ+B,cAGzBd,EAASe,SACb,IACCC,MAAK,SAASC,GACXjB,EAASkB,OAAOD,EACpB,IAEOf,CAxBP,CAyBJ,EAEAjB,SAAU,SAASe,GACf,IAAIE,EAAU,IAAIhC,EAAE+B,SAkBpB,OAhBAnC,MAAM0C,QAAQW,QAAQlD,KAAKmD,SAC1BV,MAAK,SAASW,GACX,IAAIlB,EAAO,CACPmB,KAAMD,EACNE,WAAY,EACZvB,SAAU,EACVwB,WAAY,GAGhBxB,EAASyB,OAAOtB,GAChBD,EAAQa,QAAQZ,EAAKmB,KACzB,IACCN,MAAK,SAASC,GACXf,EAAQgB,OAAOD,EACnB,IAEOf,CACX,EAEAhB,eAAgB,SAASwC,EAAUC,GAC/BD,EAAWA,GAAY,CAAC,EACxB,IAAIN,EAAUnD,KAAKmD,QACfQ,EAAS1D,EAAE,qCAGXwD,EAASG,OACTD,EAAOE,IAAI,CACPD,MAAOH,EAASG,MAChBE,SAAU,YAIlBX,EAAQY,OAAOJ,GACfA,EAAOK,OAAOP,EAASQ,SAAWd,EAAQe,OAAM,GAAM,IAEtD,IAAIC,EAAQlE,EAAE+B,WAsBd,OAbAoC,YAAW,WACOvE,MAAM0C,QAAQW,QAAQS,EAAQD,GACpCW,QAAO,WACXV,EAAOW,QACX,IAAGjC,MAAK,WACJ8B,EAAMrB,QAAQyB,MAAMJ,EAAOK,UAC/B,IAAGzB,MAAK,WACJoB,EAAMlB,OAAOsB,MAAMJ,EAAOK,UAC9B,IAAGzC,UAAS,WACRoC,EAAMpC,SAASwC,MAAMJ,EAAOK,UAChC,GACJ,GAAG,IAEIL,EAAMlC,SACjB,GAcJ3C,EAAQmF,SATS,CACbC,GAAI,MACJC,KAAM,aACNC,YAAa,2BACbC,OAAO,EACPC,SAAU,YACVC,QAAS,CAAE,OAAQ,WAK1B","ignoreList":[],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.drawing.js'), require('kendo.color.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.drawing', 'kendo.color'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Pdf = {})));\n})(this, (function (exports) {\n    (function () {\n\n        kendo.pdf = kendo.pdf || {};\n\n        kendo.pdf.supportsDeflate = function() {\n            return window.pako && typeof window.pako.deflate == \"function\";\n        };\n\n        kendo.pdf.deflate = function(data) {\n            return window.pako.deflate(data);\n        };\n\n    })();\n\n    (function($) {\n\n    })(window.kendo.jQuery);\n\n    (function ($, undefined$1) {\n\n    kendo.PDFMixin = {\n        extend: function(proto) {\n            proto.events.push(\"pdfExport\");\n            proto.options.pdf = this.options;\n            proto.saveAsPDF = this.saveAsPDF;\n            proto._drawPDF = this._drawPDF;\n            proto._drawPDFShadow = this._drawPDFShadow;\n        },\n        options: {\n            fileName  : \"Export.pdf\",\n            proxyURL  : \"\",\n\n            // paperSize can be an usual name, i.e. \"A4\", or an array of two Number-s specifying the\n            // width/height in points (1pt = 1/72in), or strings including unit, i.e. \"10mm\".  Supported\n            // units are \"mm\", \"cm\", \"in\" and \"pt\".  The default \"auto\" means paper size is determined\n            // by content.\n            paperSize : \"auto\",\n\n            // Export all pages, if applicable\n            allPages: false,\n\n            // True to reverse the paper dimensions if needed such that width is the larger edge.\n            landscape : false,\n\n            // An object containing { left, top, bottom, right } margins with units.\n            margin    : null,\n\n            // Optional information for the PDF Info dictionary; all strings except for the date.\n            title     : null,\n            author    : null,\n            subject   : null,\n            keywords  : null,\n            creator   : \"Kendo UI PDF Generator v.\" + kendo.version,\n\n            // Creation Date; defaults to new Date()\n            date      : null\n        },\n\n        saveAsPDF: function() {\n            var progress = new $.Deferred();\n            var promise = progress.promise();\n            var args = { promise: promise };\n\n            if (this.trigger(\"pdfExport\", args)) {\n                return;\n            }\n\n            var options = this.options.pdf;\n            options.multiPage = options.multiPage || options.allPages;\n\n            this._drawPDF(progress)\n            .then(function(root) {\n                return kendo.drawing.exportPDF(root, options);\n            })\n            .done(function(dataURI) {\n                kendo.saveAs({\n                    dataURI: dataURI,\n                    fileName: options.fileName,\n                    proxyURL: options.proxyURL,\n                    forceProxy: options.forceProxy,\n                    proxyTarget: options.proxyTarget\n                });\n\n                progress.resolve();\n            })\n            .fail(function(err) {\n                progress.reject(err);\n            });\n\n            return promise;\n        },\n\n        _drawPDF: function(progress) {\n            var promise = new $.Deferred();\n\n            kendo.drawing.drawDOM(this.wrapper)\n            .done(function(group) {\n                var args = {\n                    page: group,\n                    pageNumber: 1,\n                    progress: 1,\n                    totalPages: 1\n                };\n\n                progress.notify(args);\n                promise.resolve(args.page);\n            })\n            .fail(function(err) {\n                promise.reject(err);\n            });\n\n            return promise;\n        },\n\n        _drawPDFShadow: function(settings, drawOptions) {\n            settings = settings || {};\n            var wrapper = this.wrapper;\n            var shadow = $(\"<div class='k-pdf-export-shadow'>\");\n\n            // Content will be allowed to take up to 200\" if no width is given.\n            if (settings.width) {\n                shadow.css({\n                    width: settings.width,\n                    overflow: \"visible\"\n                });\n            }\n\n            wrapper.before(shadow);\n            shadow.append(settings.content || wrapper.clone(true, true));\n\n            var defer = $.Deferred();\n\n            /* https://github.com/telerik/kendo/issues/4790 -- We need to\n             * allow a small timeout so that the browser finalizes the\n             * layout of any images here.  Another option would be to pass\n             * forcePageBreak: \"-\" to drawDOM, but that would make it\n             * clone the content as well and look for page breaks;\n             * needless work, so better do it here.\n             */\n            setTimeout(function(){\n                var promise = kendo.drawing.drawDOM(shadow, drawOptions);\n                promise.always(function() {\n                    shadow.remove();\n                }).then(function(){\n                    defer.resolve.apply(defer, arguments);\n                }).fail(function(){\n                    defer.reject.apply(defer, arguments);\n                }).progress(function(){\n                    defer.progress.apply(defer, arguments);\n                });\n            }, 15);\n\n            return defer.promise();\n        }\n    };\n\n    })(window.kendo.jQuery);\n\n    const __meta__ = {\n        id: \"pdf\",\n        name: \"PDF export\",\n        description: \"PDF Generation framework\",\n        mixin: true,\n        category: \"framework\",\n        depends: [ \"core\", \"drawing\" ]\n    };\n\n    exports.__meta__ = __meta__;\n\n}));\n"]}