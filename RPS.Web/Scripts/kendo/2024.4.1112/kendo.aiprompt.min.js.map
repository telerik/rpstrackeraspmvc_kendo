{"version":3,"file":"kendo.aiprompt.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Aiprompt","this","$","window","Widget","ui","extend","FOCUS","cssClasses","defaultViews","prompt","type","name","buttonIcon","output","commands","custom","AIPrompt","init","element","options","that","fn","call","views","length","promptCommands","push","promptOutputs","_initLayout","_initViews","_initToolbar","activeView","notify","enabled","toolbarItems","popup","messages","promptView","outputView","commandsView","customView","promptPlaceholder","promptSuggestions","generateOutput","outputTitle","outputRetryTitle","copyOutput","retryGeneration","ratePositive","rateNegative","showOutputRating","events","_initializeView","view","viewConfig","getter","Error","promptSuggestionItemTemplate","_unbindView","destroy","viewsArray","i","l","isSettings","defaultView","buttonText","Object","assign","title","index","getViews","undefined","_activeViewIndex","Number","isInteger","_selectedView","findIndex","v","render","_updateToolbarState","toolItem","toolbar","_getAllItems","_resetTabIndex","trigger","addPromptOutput","id","guid","unshift","renderPromptOutput","activeToolIndex","find","each","elm","toggle","header","addClass","append","popupWrapper","closest","_getViewTools","map","text","icon","fillMode","themeColor","rounded","togglable","attributes","items","Array","isArray","closeButton","item","toolbarEl","kendoToolBar","resizable","concat","appendTo","data","focus","off","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","defineProperty","value"],"sources":["kendo.aiprompt.js"],"mappings":"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","ignoreList":[],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.icons.js'), require('kendo.textarea.js'), require('kendo.button.js'), require('kendo.toolbar.js'), require('kendo.aiprompt.views.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.icons', 'kendo.textarea', 'kendo.button', 'kendo.toolbar', 'kendo.aiprompt.views'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Aiprompt = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"aiprompt\",\n        name: \"AIPrompt\",\n        category: \"web\",\n        description: \"The AIPrompt component simplifies the incorporation of external AI services into apps.\",\n        depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"panelbar\"],\n    };\n\n    (function($) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoAIPrompt\",\n            ui = kendo.ui,\n            extend = $.extend,\n\n            COMMAND_EXECUTE = \"commandExecute\",\n            PROMPT_REQUEST = \"promptRequest\",\n            OUTPUT_RATING_CHANGE = \"outputRatingChange\",\n            OUTPUT_COPY = \"outputCopy\",\n\n            FOCUS = \"focus\";\n\n        let cssClasses = {\n            menuButton: \"k-menu-button\",\n            aIPrompt: \"k-prompt\"\n        };\n\n        let defaultViews = {\n            prompt: {\n                type: \"kendo.ui.AIPromptPromptView\",\n                name: \"prompt\",\n                buttonIcon: \"sparkles\",\n            },\n            output: {\n                type: \"kendo.ui.AIPromptOutputView\",\n                name: \"output\",\n                buttonIcon: \"comment\",\n            },\n            commands: {\n                type: \"kendo.ui.AIPromptCommandsView\",\n                name: \"commands\",\n                buttonIcon: \"more-horizontal\",\n            },\n            custom: {\n                type: \"kendo.ui.AIPromptCustomView\",\n                name: \"custom\",\n            }\n        };\n\n        let AIPrompt = Widget.extend({\n            init: function(element, options) {\n                let that = this;\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                if (that.options.views.length == 0) {\n                    that.options.views = [\"prompt\", \"output\"];\n\n                    if (this.options.promptCommands && this.options.promptCommands.length) {\n                        this.options.views.push(\"commands\");\n                    }\n                }\n\n                that.promptOutputs = that.options.promptOutputs || [];\n                that._initLayout();\n                that._initViews();\n                that._initToolbar();\n                that.activeView(that.options.activeView);\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"AIPrompt\",\n                enabled: true,\n                toolbarItems: [],\n                promptOutputs: [],\n                activeView: 0,\n                views: [],\n                popup: null,\n                messages: {\n                    promptView: \"Ask AI\",\n                    outputView: \"Output\",\n                    commandsView: \"\",\n                    customView: \"Custom View\",\n                    promptPlaceholder: \"Ask or generate content with AI\",\n                    promptSuggestions: \"Prompt Suggestions\",\n                    generateOutput: \"Generate\",\n                    outputTitle: \"Generated with AI\",\n                    outputRetryTitle: \"Generated with AI\",\n                    copyOutput: \"Copy\",\n                    retryGeneration: \"Retry\",\n                    ratePositive: \"\",\n                    rateNegative: \"\"\n                },\n                showOutputRating: true,\n            },\n\n            events: [\n                COMMAND_EXECUTE,\n                PROMPT_REQUEST,\n                OUTPUT_RATING_CHANGE,\n                OUTPUT_COPY,\n            ],\n\n            _initializeView: function(name) {\n                let viewConfig = this.views[name];\n                let view;\n                if (viewConfig) {\n                    let type = viewConfig.type;\n\n                    if (typeof type === \"string\") {\n                        type = kendo.getter(viewConfig.type)(window);\n                    }\n\n                    if (type) {\n                        view = new type(this.element, extend(true, {\n                            promptSuggestions: this.options.promptSuggestions,\n                            promptCommands: this.options.promptCommands,\n                            promptOutputs: this.promptOutputs,\n                            showOutputRating: this.options.showOutputRating,\n                            messages: this.options.messages,\n                            promptSuggestionItemTemplate: this.options.promptSuggestionItemTemplate,\n\n                        },\n                            viewConfig\n                        ));\n                    } else {\n                        throw new Error(\"There is no such view\");\n                    }\n                }\n\n                return view;\n            },\n\n            _unbindView: function(view) {\n                if (view) {\n                    view.destroy();\n                }\n            },\n\n            _initViews: function() {\n                let that = this,\n                    options = that.options,\n                    views = options.views;\n\n                that.views = {};\n                that.viewsArray = [];\n\n                for (let i = 0, l = views.length; i < l; i++) {\n                    let view = views[i];\n                    let isSettings = typeof view === \"object\";\n                    let name = view;\n\n                    if (isSettings) {\n                        name = typeof view.type !== \"string\" ? view.name : view.type;\n                    }\n\n                    let defaultView = defaultViews[name];\n\n                    if (defaultView) {\n                        if (isSettings) {\n                            view.type = defaultView.type;\n                        }\n\n                        defaultView.buttonText = that.options.messages[`${name}View`];\n                    }\n\n                    view = Object.assign({ title: view.title, name, index: i }, defaultView, isSettings ? view : {});\n                    that.viewsArray.push(view);\n\n                    if (name) {\n                        that.views[name] = view;\n                    }\n                }\n            },\n\n            getViews: function() {\n                return this.viewsArray;\n            },\n\n            activeView: function(name) {\n                let that = this;\n                if (name === undefined) {\n                    return that._activeViewIndex;\n                }\n\n                if (Number.isInteger(name)) {\n                    name = that.viewsArray[name].name;\n                }\n\n                if (name && that.views[name]) {\n                    if (that._selectedView) {\n                        that._unbindView(that._selectedView);\n                    }\n\n                    that._selectedView = that._initializeView(name);\n                    that._activeViewIndex = that.viewsArray.findIndex(v => v.name === name);\n                    that._selectedView.render();\n\n                    that._updateToolbarState(that._activeViewIndex);\n\n                    let toolItem = $(that.toolbar._getAllItems()[that._activeViewIndex]);\n                    that.toolbar._resetTabIndex(toolItem);\n                    toolItem.trigger(FOCUS);\n                }\n            },\n\n            addPromptOutput: function(output) {\n                output.id = output.id || kendo.guid();\n                this.promptOutputs.unshift(output);\n\n                if (typeof this._selectedView.renderPromptOutput === \"function\") {\n                    return this._selectedView.renderPromptOutput(output);\n                }\n            },\n\n            _updateToolbarState: function(activeToolIndex) {\n                let toolbar = this.toolbar;\n                toolbar.element.find(\".k-toolbar-toggle-button\").each(function(index, elm) {\n                    toolbar.toggle($(elm), index == activeToolIndex);\n                });\n            },\n\n            _initLayout: function() {\n                let that = this,\n                    header = $(\"<div></div>\").addClass(\"k-prompt-header\");\n                that.header = header;\n                that.element.addClass(cssClasses.aIPrompt);\n                that.element.append(header);\n                const popupWrapper = that.element.closest('.k-popup');\n\n                if (popupWrapper.length) {\n                    $(popupWrapper).addClass('k-prompt-popup');\n                }\n            },\n\n            _getViewTools: function() {\n                let that = this;\n\n                return that.viewsArray.map(v => {\n                    if (v.name === 'commands') {\n                        if (v.buttonText) {\n                            v.title = v.buttonText;\n                        } else {\n                            v.title = \"More Actions\";\n                        }\n                    }\n\n                    return {\n                    type: \"button\",\n                    text: v.buttonText,\n                    icon: v.buttonIcon,\n                    fillMode: \"flat\",\n                    themeColor: \"primary\",\n                    rounded: \"full\",\n                    togglable: true,\n                    attributes: { title: v.title },\n                    toggle: function() {\n                        that.activeView(v.name);\n                    }\n                };\n            });\n            },\n\n            _initToolbar: function() {\n                let that = this;\n                let items = that.options.toolbarItems;\n                items = Array.isArray(items) ? items : [items];\n                const closeButton = items.find(item => item.icon === 'x');\n\n                if (closeButton) {\n                    closeButton.themeColor = 'base';\n                }\n\n                let toolbarEl = $(\"<div></div>\").kendoToolBar({\n                    resizable: false,\n                    fillMode: \"flat\",\n                    items: that._getViewTools().concat(items)\n                }).appendTo(that.header);\n\n                that.toolbar = toolbarEl.data(\"kendoToolBar\");\n            },\n\n            focus: function() {\n                let that = this;\n                that.element.trigger(FOCUS);\n            },\n\n            destroy: function() {\n                let that = this;\n\n                that.toolbar?.destroy();\n                that._selectedView?.destroy();\n\n                that.element.off(NS);\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        ui.plugin(AIPrompt);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}