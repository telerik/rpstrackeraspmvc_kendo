{"version":3,"file":"kendo.splitter.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Splitter","this","$","window","ui","keys","extend","Widget","pxUnitsRegex","percentageUnitsRegex","NS","EXPAND","COLLAPSE","CONTENTLOAD","ERROR","LAYOUTCHANGE","PANE","FOCUSED","PANECLASS","KPANE","KSCROLLABLE","KSTATIC_PANE","SPLITTER","KSPLITBAR","PANE_SIZING_PROP","HORIZONTAL","VERTICAL","MAX_NUMBER_VALUE","Number","MAX_SAFE_INTEGER","CLICK","RESIZE","PX","isPercentageSize","size","test","isPixelSize","isFluid","calculateSize","total","output","parseInt","Math","floor","panePropertyAccessor","propertyName","triggersResize","pane","value","paneConfig","element","find","data","arguments","length","options","name","resize","init","isHorizontal","that","fn","call","wrapper","orientation","toLowerCase","_dimension","_keys","decrease","LEFT","UP","increase","RIGHT","DOWN","_resizeStep","_marker","guid","substring","addClass","closest","removeClass","_initPanes","resizing","PaneResizing","triggerHandler","events","_addOverlays","_panes","append","_removeOverlays","children","remove","_attachEvents","on","_keydown","bind","e","currentTarget","focus","end","_togglePane","_arrowClick","document","_detachEvents","off","clickMoveClick","panes","destroy","key","keyCode","target","navigationKeys","ctrlKey","isResizing","_triggerAction","move","preventDefault","HOME","prev","collapse","END","expand","ENTER","panesConfig","each","i","nodeName","_getDefaultPaneConfig","order","style","_initPane","scrollable","resizable","_updatePaneOrderStyles","parentElement","config","fixedSize","attr","isStaticPane","collapsible","css","toggleClass","Boolean","ajaxRequest","url","contentUrl","isLocalUrl","jQuery","ajax","type","dataType","success","html","trigger","error","xhr","status","shouldExecute","collapsed","stop","arrow","is","next","arrowType","parent","_updateSplitBar","splitbar","previousPane","nextPane","previousPaneEl","catIconIf","actionType","iconType","condition","icon","draggable","prevCollapsible","prevCollapsed","nextCollapsible","nextCollapsed","previousPaneId","isRtl","support","leftIcon","rightIcon","labelId","label","removeAttr","_updateSplitBars","prevAll","first","nextAll","_removeSplitBars","_resetAriaValueNow","splitBars","panesSizes","valueNow","joinDimension","round","setAttribute","_resize","splitBarsCount","sizingProperty","totalSize","_suppressResize","slice","after","sizedPanesWidth","freeSizedPanes","collapsedSize","add","push","freeSizePanesCount","freeSizePaneWidth","eq","forEach","sizingDomProperty","lastNonCollapsedPane","filter","last","toggle","_addPane","idx","paneElement","splice","appendTo","insertBefore","referencePane","index","insertAfter","min","max","_getPaneElement","paneIndex","_getPaneElements","Array","from","x","hasClass","_dragSplitterBar","splitterBarIndex","delta","leftPane","rightPane","_getAdjacentPanes","leftPaneNewSize","computedSize","isLeftPaneSizeInBounds","panesWithoutSize","canResizeBothPanes","_resizePane","leftPaneIndex","rightPaneIndex","leftPaneELement","rightPaneELement","_getPane","leftPaneSize","_getPaneOffsetSize","rightPaneSize","totalPaneSize","splitterSize","_getElementClientSize","getPixelSize","paneSize","_calculatePixelSize","leftPaneMaxSize","rightPaneMaxSize","_getAdjacentPanesMaxSize","rightMaxPixelSize","leftMaxPixelSize","uid","constrainedSize","newSize","toPercentages","parseFloat","toPixel","_setPaneSize","_allExpandedPanesHaveSize","expandedPanes","_getPaneSizes","containerSize","numericSize","_getElementOffsetSize","rect","getBoundingClientRect","width","height","_getElementSize","sizeType","_getPaneIndex","indexOf","leftPaneMinSize","leftPaneMaxPixelSize","rightPaneMinSize","rightPaneMaxPixelSize","_getElementIndex","childrenSelector","matches","plugin","verticalDefaults","alternateSizingProperty","positioningProperty","mousePositioningProperty","horizontalDefaults","splitter","handle","owner","_element","_resizable","Resizable","hint","_createHint","start","_start","_max","_min","invalidClass","resizeend","_stop","prototype","press","pressed","offsetBoundaryProp","initialTarget","previousPaneConfig","nextPaneConfig","prevBoundary","nextBoundary","toPx","val","sender","cancel","prevMinSize","prevMaxSize","nextMinSize","nextMaxSize","_maxPosition","_minPosition","splitterBar","rtlModifier","y","ESC","initialDelta","splitbarPosition","position","left","top","ghostPosition","abs","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"sources":["kendo.splitter.js"],"mappings":"CAAA,SAAWA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,sBAAuBA,QAAQ,mBACrG,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,CAAC,UAAW,kBAAmB,eAAgBJ,GACxBA,IAA1ED,EAA+B,oBAAfO,WAA6BA,WAAaP,GAAUQ,MAAsBC,MAAQT,EAAOS,OAAS,CAAC,EAAGT,EAAOS,MAAMC,SAAWV,EAAOS,MAAMC,UAAY,CAAC,EAAGV,EAAOS,MAAMC,SAASC,SAAW,CAAC,GACjN,CAJD,CAIGC,MAAM,SAAWV,IAShB,SAAUW,GACN,IAAIJ,EAAQK,OAAOL,MACfM,EAAKN,EAAMM,GACXC,EAAOP,EAAMO,KACbC,EAASJ,EAAEI,OACXC,EAASH,EAAGG,OACZC,EAAe,mBACfC,EAAuB,kBACvBC,EAAK,iBACLC,EAAS,SACTC,EAAW,WACXC,EAAc,cACdC,EAAQ,QAERC,EAAe,eAKfC,EAAO,OAEPC,EAAU,UAEVC,EAAY,KADZC,EAAQ,KAAOH,GAEfI,EAAc,eASdC,EAAe,gBACfC,EAAW,aACXC,EAAY,aAEZC,EAAmB,aACnBC,EAAa,aACbC,EAAW,WAEXC,EAAmBC,OAAOC,iBAC1BV,EAAQ,SAERW,EAAQ,QACRC,EAAS,SACTC,EAAK,KAET,SAASC,EAAiBC,GACtB,OAAOzB,EAAqB0B,KAAKD,EACrC,CAEA,SAASE,EAAYF,GACjB,OAAO1B,EAAa2B,KAAKD,IAAS,QAAQC,KAAKD,EACnD,CAEA,SAASG,EAAQH,GACb,OAAQD,EAAiBC,KAAUE,EAAYF,EACnD,CAEA,SAASI,EAAcJ,EAAMK,GACzB,IAAIC,EAASC,SAASP,EAAM,IAM5B,OAJID,EAAiBC,KACjBM,EAASE,KAAKC,MAAMH,EAASD,EAAQ,MAGlCC,CACX,CAEA,SAASI,EAAqBC,EAAcC,GACxC,OAAO,SAASC,EAAMC,GAClB,IAAIC,EAAahD,KAAKiD,QAAQC,KAAKJ,GAAMK,KAAKpC,GAE9C,GAAwB,GAApBqC,UAAUC,OACV,OAAOL,EAAWJ,IAGtBI,EAAWJ,GAAgBG,EAEvBF,IACe7C,KAAKiD,QAAQE,KAAK,QAAUnD,KAAKsD,QAAQC,MAC/CC,QAAO,EAExB,CACJ,CAEA,IAAIzD,EAAWO,EAAOD,OAAO,CACzBoD,KAAM,SAASR,EAASK,GACpB,IACII,EADAC,EAAO3D,KAGXM,EAAOsD,GAAGH,KAAKI,KAAKF,EAAMV,EAASK,GAEnCK,EAAKG,QAAUH,EAAKV,QAEhBU,EAAKL,QAAQS,cACbL,EAAeC,EAAKL,QAAQS,YAAYC,eAAiBvC,GAG7DkC,EAAKI,YAAcL,EAAelC,EAAaC,EAC/CkC,EAAKM,WAAaP,EAAe,QAAU,SAC3CC,EAAKO,MAAQ,CACTC,SAAUT,EAAetD,EAAKgE,KAAOhE,EAAKiE,GAC1CC,SAAUZ,EAAetD,EAAKmE,MAAQnE,EAAKoE,MAG/Cb,EAAKc,YAAc,GAEnBd,EAAKe,QAAU7E,EAAM8E,OAAOC,UAAU,EAAG,GAEzCjB,EAAKV,QAAQ4B,SAAS,GAAGxD,qBAA6BA,KAAYsC,EAAKI,eACvEJ,EAAKV,QAAQ6B,QAAQ5D,GAAO6D,YAAY3D,GAAcyD,SArE7C,eAsETlB,EAAKqB,aAELrB,EAAKsB,SAAW,IAAIC,EAAavB,GAEjCA,EAAKV,QAAQkC,eAAe,OAAS1E,EACzC,EACA2E,OAAQ,CACJ1E,EACAC,EACAC,EACAC,EACAiB,EACAhB,GAGJuE,aAAc,WACVrF,KAAKsF,SAASC,OAAO,+CACzB,EAEAC,gBAAiB,WACbxF,KAAKsF,SAASG,SAAS,uBAAuBC,QAClD,EAEAC,cAAe,WACX,IAAIhC,EAAO3D,KACP+D,EAAcJ,EAAKL,QAAQS,YAG/BJ,EAAKV,QACAwC,SAAS,yBAA2B1B,GACpC6B,GAAG,UAAYnF,EAAIkD,EAAKkC,SAASC,KAAKnC,IACtCiC,GAAG,YAAcnF,GAAI,SAASsF,GAAKA,EAAEC,cAAcC,OAAS,IAC5DL,GAAG,QAAUnF,GAAI,SAASsF,GAAK9F,EAAE8F,EAAEC,eAAenB,SAAS7D,EAAU,IACrE4E,GAAG,OAASnF,GAAI,SAASsF,GACtB9F,EAAE8F,EAAEC,eAAejB,YAAY/D,GAC3B2C,EAAKsB,UACLtB,EAAKsB,SAASiB,KAEtB,IACCN,GAvII,aAuIYnF,GAAI,WAAaR,EAAED,MAAM6E,SAAS,cAAgBlB,EAAKI,YAAc,SAAW,IAChG6B,GArII,aAqIYnF,GAAI,WAAaR,EAAED,MAAM+E,YAAY,cAAgBpB,EAAKI,YAAc,SAAW,IACnG6B,GAAG,YAAcnF,EAAIkD,EAAK0B,aAAaS,KAAKnC,IAC5CuC,MACAT,SAAS,eACTG,GAAG,WAAanF,EAAIkD,EAAKwC,YAAYL,KAAKnC,IAC1C8B,SAAS,sCAAsCG,GAAG/D,EAAQpB,EAAIkD,EAAKyC,YAAYzF,IAAWuF,MAC1FT,SAAS,kCAAkCG,GAAG/D,EAAQpB,EAAIkD,EAAKyC,YAAY1F,IAASwF,MACpFA,MAELjG,EAAEC,QAAQ0F,GAAG,SAAWnF,EAAKkD,EAAKe,QAASf,EAAKH,OAAOsC,KAAKnC,GAAM,IAClE1D,EAAEoG,UAAUT,GAAG,UAAYnF,EAAKkD,EAAKe,QAASf,EAAK6B,gBAAgBM,KAAKnC,GAC5E,EAEA2C,cAAe,WACX,IAAI3C,EAAO3D,KAEX2D,EAAKV,QACAwC,SAAS,yBAA2B9B,EAAKI,aAAawC,IAAI9F,GAAIyF,MAC9DT,SAAS,eAAec,IAAI,WAAa9F,GACzCgF,SAAS,sEAAsEc,IAAI9F,GAExFR,EAAEC,QAAQqG,IAAI9F,EAAKkD,EAAKe,SACxBzE,EAAEoG,UAAUE,IAAI9F,EAAKkD,EAAKe,QAC9B,EAEApB,QAAS,CACLC,KAAM,WACNiD,gBAAgB,EAChBzC,YAAavC,EACbiF,MAAO,IAGXC,QAAS,WACLpG,EAAOsD,GAAG8C,QAAQ7C,KAAK7D,MAEvBA,KAAKsG,gBAEDtG,KAAKiF,UACLjF,KAAKiF,SAASyB,UAGlB7G,EAAM6G,QAAQ1G,KAAKiD,SAEnBjD,KAAK8D,QAAU9D,KAAKiD,QAAU,IAClC,EAEA4C,SAAU,SAASE,GACf,IAOIjD,EAPAa,EAAO3D,KACP2G,EAAMZ,EAAEa,QACR3B,EAAWtB,EAAKsB,SAChB4B,EAAS5G,EAAE8F,EAAEC,eACbc,EAAiBnD,EAAKO,MACtBI,EAAWqC,IAAQG,EAAexC,SAClCH,EAAWwC,IAAQG,EAAe3C,SAGlCG,GAAYH,GACR4B,EAAEgB,SACFjE,EAAO+D,EAAO1C,EAAW,OAAS,UAE9Bc,GAAYA,EAAS+B,cACrB/B,EAASiB,MAGRpD,EAAKa,EAAKM,cAGXN,EAAKsD,eAAetG,EAAUkG,EAAO1C,EAAW,OAAS,WAFzDR,EAAKsD,eAAevG,EAAQoC,IAIzBmC,GACPA,EAASiC,MAAM/C,GAAY,EAAI,GAAKR,EAAKc,YAAaoC,GAE1Dd,EAAEoB,kBACKR,IAAQvG,EAAKgH,MACpBtE,EAAO+D,EAAOQ,OACd1D,EAAK2D,SAASxE,GACdiD,EAAEoB,kBACKR,IAAQvG,EAAKmH,KACpBzE,EAAO+D,EAAOQ,OACd1D,EAAK6D,OAAO1E,GACZiD,EAAEoB,kBACKR,IAAQvG,EAAKqH,OAASxC,IAC7BA,EAASiB,MACTH,EAAEoB,iBAEFxD,EAAKwC,YAAYJ,GAEzB,EAEAf,WAAY,WACR,IAAI0C,EAAc1H,KAAKsD,QAAQmD,OAAS,GACpC9C,EAAO3D,KAEXA,KAAKiD,QACAwC,WACAkC,MAAK,SAASC,EAAG9E,GACqB,UAA/BA,EAAK+E,SAAS7D,gBACd0D,EAAYE,GAAK3H,EAAEI,OAAOsD,EAAKmE,wBAAyBJ,EAAYE,GAAI,CAAEG,MAAW,EAAJH,IACjFF,EAAYE,GAAGxF,QAAUA,EAAQsF,EAAYE,GAAG3F,MAChDa,EAAKkF,MAAMD,MAAY,EAAJH,EAEnBjE,EAAKsE,UAAUnF,EAAM4E,EAAYE,IAEzC,IAEJ5H,KAAKwD,QACT,EACAsE,sBAAuB,WACnB,MAAO,CAAEI,YAAY,EAAMC,WAAW,EAAMlG,KAAM,OACtD,EACAmG,uBAAwB,SAASC,GAC7BpI,EAAEoI,GAAiBrI,KAAKiD,SAASwC,WAAWkC,MAAK,SAASC,EAAG9E,GACzD,GAAmC,UAA/BA,EAAK+E,SAAS7D,cAA2B,CACxBlB,EAAKK,KAAKpC,GAEhBgH,MAAY,EAAJH,EACnB9E,EAAKkF,MAAMD,MAAY,EAAJH,CACvB,CACJ,GACJ,EACAK,UAAW,SAASnF,EAAMwF,IACtBA,EAASrI,EAAEI,OAAO,CAAC,EAAGL,KAAK8H,wBAAyBQ,IAC7CC,UAAYD,EAAOrG,MAAwB,SAAhBqG,EAAOrG,KACzCa,EAAO7C,EAAE6C,GACJ0F,KAAK,OAAQ,SACb3D,SAAS3D,GAEd,IAAIuH,GAAgBH,EAAOH,YAAcG,EAAOI,aAAeJ,EAAOC,UAEtEzF,EAAK6F,IAAIpH,EAAkB+G,EAAOrG,MAC7BkB,KAAKpC,EAAMuH,GACXM,YAAYxH,EAAcyH,QAAQJ,IAClCG,YAAYzH,EAAa0H,QAAQP,EAAOJ,aAE7ClI,KAAK8I,YAAYhG,EACrB,EAEAgG,YAAa,SAAShG,EAAMiG,EAAK5F,GAC7B,IACIH,EADAW,EAAO3D,KAIXgD,GADAF,EAAOa,EAAKV,QAAQC,KAAKJ,IACPK,KAAKpC,IAEvBgI,EAAMA,GAAO/F,EAAWgG,cAGpBlG,EAAKyC,OAAO,sDAER1F,EAAMoJ,WAAWF,GACjBG,OAAOC,KAAK,CACRJ,IAAKA,EACL5F,KAAMA,GAAQ,CAAC,EACfiG,KAAM,MACNC,SAAU,OACVC,QAAS,SAASnG,GACdL,EAAKyG,KAAKpG,GAEVQ,EAAK6F,QAAQ5I,EAAa,CAAEkC,KAAMA,EAAK,IAC3C,EACA2G,MAAO,SAASC,EAAKC,GACjBhG,EAAK6F,QAAQ3I,EAAO,CAChBiC,KAAMA,EAAK,GACX6G,OAAQA,EACRD,IAAKA,GAEb,IAGJ5G,EAAKiC,YAAY5D,GACZoI,KAAK,gBAAkBR,EAAlB,yGAKtB,EAEA9B,eAAgB,SAASmC,EAAMtG,GAC3B,IAAIE,EAAaF,EAAKK,KAAKpC,GACvB6I,EAAiB5G,EAAW6G,WAAaT,GAAQ1I,IAAasC,EAAW6G,WAAaT,GAAQzI,EAE7FqC,EAAW0F,cAIZkB,IAAkB5J,KAAKwJ,QAAQJ,EAAM,CAAEtG,KAAMA,EAAK,MAClD9C,KAAKoJ,GAAMtG,EAAK,IAGpB9C,KAAKiF,SAAS6E,OACd9J,KAAKiF,SAASiB,MAClB,EAEAC,YAAa,SAASJ,GAClB,IAEIgE,EAFApG,EAAO3D,KACP6G,EAAS5G,EAAE8F,EAAEc,QAGbA,EAAO/B,QAAQ,eAAe,IAAMnB,EAAKV,QAAQ,IAMhC,KAFrB8G,EAAQlD,EAAOpB,SAAS,+BAEdpC,SAIN0G,EAAMC,GAAG,oBACTrG,EAAKsD,eAAetG,EAAUkG,EAAOQ,QAC9B0C,EAAMC,GAAG,oBAChBrG,EAAKsD,eAAetG,EAAUkG,EAAOoD,QAC9BF,EAAMC,GAAG,kBAChBrG,EAAKsD,eAAevG,EAAQmG,EAAOQ,QAC5B0C,EAAMC,GAAG,mBAChBrG,EAAKsD,eAAevG,EAAQmG,EAAOoD,QAGvCtG,EAAKsB,UAAUiB,MACnB,EACAE,YAAa,SAAS8D,GAClB,IAAIvG,EAAO3D,KAEX,OAAO,SAAS+F,GACZ,IACIjD,EADA+D,EAAS5G,EAAE8F,EAAEC,eAGba,EAAO/B,QAAQ,eAAe,IAAMnB,EAAKV,QAAQ,KAKjDH,EADA+D,EAAOmD,GAAG,MAAQE,EAAY,SACvBrD,EAAOsD,SAAS9C,OAEhBR,EAAOsD,SAASF,OAE3BtG,EAAKsD,eAAeiD,EAAWpH,GACnC,CACJ,EACAsH,gBAAiB,SAASC,EAAUC,EAAcC,EAAUC,GACxD,IAAIC,EAAY,SAASC,EAAYC,EAAUC,GAC3C,IAAIC,EAAOF,EAAWxK,EAAG0K,KAAK,CAAEA,KAAMF,EAAU1I,KAAM,WAAc,GACpE,OAAO2I,EAAY,kBAAoBF,EAAa,KAAOG,EAAO,UAAY,EAClF,EACI9G,EAAc/D,KAAK+D,YACnB+G,GAAwC,IAA3BR,EAAanC,YAAgD,IAAvBoC,EAASpC,UAC5D4C,EAAkBT,EAAa5B,YAC/BsC,EAAgBV,EAAaT,UAC7BoB,EAAkBV,EAAS7B,YAC3BwC,EAAgBX,EAASV,UACzBsB,EAAiBX,EAAehC,KAAK,MAEpC2C,IACDA,EAAiBtL,EAAM8E,OACvB6F,EAAehC,KAAK,KAAM2C,IAG9B,MAAMC,EAAQvL,EAAMwL,QAAQD,MAAMf,GAC5BiB,EAAWF,EAAQ,kBAAoB,iBACvCG,EAAYH,EAAQ,iBAAmB,kBAE7Cf,EAASxF,SAAS,yBAA2Bd,GACxCyE,KAAK,OAAQ,aACbA,KAtYO,gBAsYa,KACpBA,KAtYO,gBAsYa,OACpBA,KArYO,gBAqYa2C,GACpBpG,YAAY,cAAgBhB,EAAc,UAC1C6E,YAAY,wBAA0B7E,EACnC+G,IAAcE,IAAkBE,GACnCtC,YAAY,qBAAuB7E,GAC/B+G,IAAcC,IAAoBE,GACtC1B,KACGkB,EAAU,gBAAiB,eAAgBM,IAAoBC,IAAkBE,GAAiBnH,GAAetC,GACjHgJ,EAAU,gBAAiBa,EAAUP,IAAoBC,IAAkBE,GAAiBnH,GAAevC,GAC3GiJ,EAAU,cAAe,iBAAkBM,GAAmBC,IAAkBE,GAAiBnH,GAAetC,GAChHgJ,EAAU,cAAec,EAAWR,GAAmBC,IAAkBE,GAAiBnH,GAAevC,GACzGiJ,EAAU,gBAAiB,KAAMK,GAAa/G,GAAetC,GAC7DgJ,EAAU,gBAAiB,KAAMK,GAAa/G,GAAevC,GAC7DiJ,EAAU,gBAAiB,iBAAkBQ,IAAoBC,IAAkBF,GAAiBjH,GAAetC,GACnHgJ,EAAU,gBAAiBc,EAAWN,IAAoBC,IAAkBF,GAAiBjH,GAAevC,GAC5GiJ,EAAU,cAAe,eAAgBQ,GAAmBC,IAAkBF,GAAiBjH,GAAetC,GAC9GgJ,EAAU,cAAea,EAAUL,GAAmBC,IAAkBF,GAAiBjH,GAAevC,IAG5G8I,EAAakB,QACbnB,EAAS7B,KAvZC,kBAuZqB8B,EAAakB,SACrClB,EAAamB,OACpBpB,EAAS7B,KA1ZJ,aA0ZqB8B,EAAamB,OAGvC1H,GAAevC,GACf6I,EAAS7B,KA5ZE,mBA4ZqB/G,GAG/BqJ,GAAcC,GAAoBE,GACnCZ,EAASqB,WAvaN,WAyaX,EACAC,iBAAkB,WACd,IAAIhI,EAAO3D,KAEXA,KAAKiD,QAAQwC,SAAS,eAAekC,MAAK,WACtC,IAAI0C,EAAWpK,EAAED,MACbwK,EAAiBH,EAASuB,QAAQ3K,GAAW4K,QAC7CvB,EAAeE,EAAerH,KAAKpC,GACnCwJ,EAAWF,EAASyB,QAAQ7K,GAAW4K,QAAQ1I,KAAKpC,GAGxDsJ,EAAS1B,IAAI,QAAS2B,EAAavC,MAAQ,GAEtCwC,GAIL5G,EAAKyG,gBAAgBC,EAAUC,EAAcC,EAAUC,EAC3D,GACJ,EACAuB,iBAAkB,WACd/L,KAAKiD,QAAQwC,SAAS,eAAeC,QACzC,EACAJ,OAAQ,WACJ,OAAKtF,KAAKiD,QAGHjD,KAAKiD,QAAQwC,SAASxE,GAFlBhB,GAGf,EAEA+L,mBAAoB,SAASC,EAAWC,GACpC,IAAItE,EAAauE,EAAUC,EAE3B,IAAKxE,EAAI,EAAGA,EAAIqE,EAAU5I,OAAQuE,IAC9BwE,EAAiBF,EAAWtE,GAAKsE,EAAWtE,EAAI,IAAO,EACvDuE,EAAW1J,KAAK4J,MAAMH,EAAWtE,GAAKwE,EAAgB,KAC3CH,EAAUrE,GACZ0E,aA3cD,gBA2c6BH,EAE7C,EAEAI,QAAS,WACL,IAAI5I,EAAO3D,KACPiD,EAAUU,EAAKV,QACfwD,EAAQxD,EAAQwC,SAASxE,GACzByC,EAAeC,EAAKI,aAAevC,EACnCyK,EAAYhJ,EAAQwC,SAAS,eAC7B+G,EAAiBP,EAAU5I,OAC3BoJ,EAAiB/I,EAAe,QAAU,SAC1CgJ,EAAYzJ,EAAQwJ,KACpBP,EAAa,GAIjB,GAFAvI,EAAKG,QAAQe,SAAS,wBAElBlB,EAAKgJ,gBAAT,CAIuB,IAAnBH,GACAA,EAAiB/F,EAAMpD,OAAS,EAChCoD,EAAMmG,MAAM,EAAGJ,GACVK,MAAM,qDAAuDlJ,EAAKe,QAAU,QAEjFf,EAAKgI,mBACLM,EAAYhJ,EAAQwC,SAAS,gBAE7B9B,EAAKgI,mBAITM,EAAUtE,MAAK,WACX+E,GAAa1M,KAAK0D,EAAe,cAAgB,eACrD,IAEA,IAAIoJ,EAAkB,EAElBC,EAAiB9M,IAErBwG,EACKkB,MAAK,WACF,IACuC1F,EADnCgB,EAAUhD,EAAED,MACZsI,EAASrF,EAAQE,KAAKpC,IAAS,CAAC,EAGpC,GADAkC,EAAQ8B,YAAY,eAChBuD,EAAOuB,UACP5H,EAAOqG,EAAO0E,cAAgB3K,EAAciG,EAAO0E,cAAeN,GAAa,EAC/EzJ,EAAQ0F,IAAI,WAAY,UAAU9D,SAAS,mBACxC,IAAIyD,EAAOlG,SAAWA,EAAQkG,EAAOrG,MAGxC,OAFA8K,EAAiBA,EAAeE,IAAIjN,WACpCkM,EAAWgB,MAAK,GAGhBjL,EAAOI,EAAciG,EAAOrG,KAAMyK,EACtC,CAMA,OAHAI,GAAmB7K,EACnBiK,EAAWgB,KAAKjL,GAChBgB,EAAQ0F,IAAIpH,EAAkBU,EAAOF,GAC9BE,CACX,IAEJyK,GAAaI,EAEb,IAAIK,EAAqBJ,EAAe1J,OACpC+J,EAAoB3K,KAAKC,MAAMgK,EAAYS,GAE/CJ,EACKH,MAAM,EAAGO,EAAqB,GAC9BxE,IAAIpH,EAAkB6L,EAAoBrL,GAC1CmE,MACAmH,GAAGF,EAAqB,GACxBxE,IAAIpH,EAAmBmL,GAAaS,EAAqB,GAAKC,EAAqBrL,GAExFmK,EAAWoB,SAAQ,SAASrL,EAAM2F,IACjB,IAAT3F,IACAiK,EAAWtE,GAAKwF,EAExB,IAEAzJ,EAAKqI,mBAAmBC,EAAWC,GAGnC,IAAIqB,EAAoB7J,EAAe,cAAgB,eAEvD,GAA2B,IAAvByJ,EAA0B,CAC1B,IAAIK,EAAuB/G,EAAMgH,QAAO,WACpC,QAAUxN,EAAED,MAAMmD,KAAKpC,IAAS,CAAC,GAAY,SACjD,IAAG2M,OAECF,EAAqBnK,QACrBmK,EAAqBf,GAAgBC,EAAYc,EAAqB,GAAGD,GAEjF,CAEA5J,EAAK2C,gBACL3C,EAAKgC,gBAELhC,EAAKG,QAAQiB,YAAY,uBAEzBlF,EAAM2D,OAAOiD,GACb9C,EAAK6F,QAAQ1I,EArFb,CAsFJ,EACA6M,OAAQ,SAAS7K,EAAM0E,GACnB,IACIxE,EAGJA,GADAF,EAHW9C,KAGCiD,QAAQC,KAAKJ,IACPK,KAAKpC,IAElByG,IAAsC,IAA5BxE,GAAY0F,eAIH,GAApBtF,UAAUC,SACVmE,EA7lBhB,YA6lByBxE,EAAW6G,WAAoC7G,EAAW6G,WAGvE7G,EAAW6G,WAAarC,EAExB1E,EAAK8F,YA1jBC,WA0jBoB5F,EAAW6G,YAAc7G,EAAWgK,eAC9DlK,EAAK6F,IAAI,WAAY3F,EAAW6G,YAAc7G,EAAWgK,cAAgB,SAAW,QAjBzEhN,KAkBNwD,QAAO,GAChB,EAEA8D,SAAU,SAASxE,GACf9C,KAAK2N,OAAO7K,GAAM,EACtB,EAEA0E,OAAQ,SAAS1E,GACb9C,KAAK2N,OAAO7K,GAAM,EACtB,EAEA8K,SAAU,SAAStF,EAAQuF,EAAKC,GAC5B,IAAInK,EAAO3D,KAYX,OAVI8N,EAAYzK,SACZM,EAAKL,QAAQmD,MAAMsH,OAAOF,EAAK,EAAGvF,GAElC3E,EAAKsE,UAAU6F,EAAaxF,GAE5B3E,EAAKoI,mBAELpI,EAAKH,QAAO,IAGTsK,CACX,EAEAvI,OAAQ,SAAS+C,GACbA,EAASA,GAAU,CAAC,EAEpB,IAAI3E,EAAO3D,KACP8N,EAAc7N,EAAE,WAAW+N,SAASrK,EAAKV,SAE7C,OAAOU,EAAKiK,SAAStF,EAAQ3E,EAAKL,QAAQmD,MAAMpD,OAAQyK,EAC5D,EAEAG,aAAc,SAAS3F,EAAQ4F,GAC3BA,EAAgBjO,EAAEiO,GAClB5F,EAASA,GAAU,CAAC,EAEpB,IACIuF,EADO7N,KACI8D,QAAQ2B,SAAS,WAAW0I,MAAMD,GAC7CJ,EAAc7N,EAAE,WAAWgO,aAAahO,EAAEiO,IAE9C,OAJWlO,KAIC4N,SAAStF,EAAQuF,EAAKC,EACtC,EAEAM,YAAa,SAAS9F,EAAQ4F,GAC1BA,EAAgBjO,EAAEiO,GAClB5F,EAASA,GAAU,CAAC,EAEpB,IACIuF,EADO7N,KACI8D,QAAQ2B,SAAS,WAAW0I,MAAMD,GAC7CJ,EAAc7N,EAAE,WAAWmO,YAAYnO,EAAEiO,IAE7C,OAJWlO,KAIC4N,SAAStF,EAAQuF,EAAM,EAAGC,EAC1C,EAEApI,OAAQ,SAAS5C,GACb,IAAIa,EAAO3D,KAiBX,OAhBA8C,EAAOa,EAAKG,QAAQZ,KAAKJ,IAEhBO,SACLxD,EAAM6G,QAAQ5D,GACdA,EAAK6E,MAAK,SAASkG,EAAK5K,GACpBU,EAAKL,QAAQmD,MAAMsH,OAAOpK,EAAKG,QAAQ2B,SAAS,WAAW0I,MAAMlL,GAAU,GAC3EhD,EAAEgD,GAASyC,QACf,IAEA/B,EAAKoI,mBAEDpI,EAAKL,QAAQmD,MAAMpD,QACnBM,EAAKH,QAAO,IAIbG,CACX,EAEA1B,KAAMU,EAAqB,QAAQ,GAEnC0L,IAAK1L,EAAqB,OAE1B2L,IAAK3L,EAAqB,OAE1B4L,gBAAiB,SAASC,GAGtB,OAFaxO,KACMyO,mBACND,EACjB,EAEAC,iBAAkB,WAGd,OADcC,MAAMC,KADP3O,KACiBiD,QAAQwC,YAAc,IAAIgI,QAAOmB,GAAK3O,EAAE2O,GAAGC,SAAS,WAAa5O,EAAE2O,GAAGC,SAAS,eAEjH,EACAC,iBAAkB,SAASC,EAAkBC,GACzC,MAAMrL,EAAO3D,MACPiP,SAAEA,EAAQC,UAAEA,GAAcvL,EAAKwL,kBAAkBJ,GAEjDK,EAAkBH,EAASI,aAAeL,EAC1CM,EAAyBF,EAAkBH,EAASZ,KAAOe,EAAkBH,EAASX,IAEtFiB,EAAmB5L,EAAK8K,mBAAmBhB,QAAOmB,IAAMA,EAAE5G,MAAMzG,KAChEiO,GAAsBP,EAAShN,MAAQiN,EAAUjN,OAASsN,EAAiBlM,OAAS,EAY1F,OAVK4L,EAAShN,MAAQiN,EAAUjN,MAASuN,EACjCF,IACA3L,EAAK8L,YAAYR,EAAUD,GAC3BrL,EAAK8L,YAAYP,GAAYF,IAE1BE,EAAUjN,KACjB0B,EAAK8L,YAAYP,GAAYF,GAE7BrL,EAAK8L,YAAYR,EAAUD,GAExB,CAAEC,WAAUC,YACvB,EACAC,kBAAmB,SAASJ,GACxB,MAAMpL,EAAO3D,KACP0P,EAAgBX,EAChBY,EAAiBZ,EAAmB,EAEpCa,EAAkBjM,EAAK4K,gBAAgBmB,GACvCG,EAAmBlM,EAAK4K,gBAAgBoB,GAExCV,EAAWtL,EAAKmM,SAASJ,GACzBR,EAAYvL,EAAKmM,SAASH,GAE1BI,EAAepM,EAAKqM,mBAAmBN,GACvCO,EAAgBtM,EAAKqM,mBAAmBL,GAExCO,EAAgBH,EAAeE,EAC/BE,EAAexM,EAAKyM,sBAAsBzM,EAAKV,QAASU,EAAKL,QAAQS,aACrEsM,EAAeC,GAAY3M,EAAK4M,oBAAoBD,EAAUH,IAE9DK,gBAAEA,EAAeC,iBAAEA,GAAqB9M,EAAK+M,yBAAyBhB,EAAeC,GACrFgB,EAAoBN,EAAanB,GAAaA,EAAUZ,KACxDsC,EAAmBP,EAAapB,GAAYA,EAASX,KAE3D,MAAO,CACHW,SAAU,CACNd,MAAOuB,EACPL,aAAcU,EACd1B,IAAKgC,EAAapB,GAAYA,EAASZ,OAASsC,EAAoBT,EAAgBS,EAAoB,IAAM,EAC9GrC,IAAKkC,EACLvO,KAAM2N,EAAgB5H,MAAMzG,GAC5BmH,YAAauG,GAAYA,EAASvG,YAClCmI,IAAK5B,EAAS4B,KAElB3B,UAAW,CACPf,MAAOwB,EACPN,aAAcY,EACd5B,IAAKgC,EAAanB,GAAaA,EAAUb,OAASuC,EAAmBV,EAAgBU,EAAmB,IAAM,EAC9GtC,IAAKmC,EACLxO,KAAM4N,EAAiB7H,MAAMzG,GAC7BmH,YAAawG,GAAaA,EAAUxG,YACpCmI,IAAK3B,EAAU2B,KAG3B,EAEApB,YAAa,SAAS3M,EAAMkM,GACxB,MAAMrL,EAAO3D,KACP8Q,GA4KC/N,EA5KuBD,EAAKuM,aAAeL,EA4KpCX,EA5K2CvL,EAAKuL,IA4K3CC,EA5KgDxL,EAAKwL,IA6KrE7L,KAAK4L,IAAIC,EAAK7L,KAAK6L,IAAID,EAAKtL,KADvC,IAAeA,EAAOsL,EAAKC,EA3KnB,IAAIyC,EAAU,GAEd,GAAI/O,EAAiBc,EAAKb,MAAO,CAE7B8O,EA2JZ,SAAuBhO,GACnB,MAAO,GAAGA,IACd,CA7JsBiO,CAAc,IAAMF,EADTnN,EAAKyM,sBAAsBzM,EAAKV,QAASU,EAAKL,QAAQS,aAE/E,MACIgN,EA6JZ,SAAiBhO,GACb,OAAOlD,EAAMoR,WAAWlO,GAAS,IACrC,CA/JsBmO,CAAQJ,GAEtBhO,EAAKb,KAAO8O,EACZpN,EAAKwN,aAAarO,EAAKqL,MAAO4C,EAClC,EAEAK,0BAA2B,WACvB,MACMC,EADOrR,KACcsD,QAAQmD,MAAMgH,QAAOmB,IAAMA,EAAE/E,YAExD,QAAIwH,EAAchO,QACPgO,EAAc5D,QAAOmB,GAAKA,EAAE3M,OAAMoB,MAIjD,EAEA8N,aAAc,SAAS3C,EAAWvM,GAC9B,MACM6L,EADO9N,KACYuO,gBAAgBC,GAEpCV,IAHQ9N,KAOHoR,6BACNnR,EAAE6N,GAAajJ,SAASzD,GAG5B0M,EAAY9F,MAAMzG,GAAoBU,EACtChC,EAAE6N,GAAa3K,KAAK,QAAQlB,KAAOA,EACvC,EAEAqP,cAAe,SAAS9C,GACpB,MAAM7K,EAAO3D,KACPmQ,EAAexM,EAAKyM,sBAAsBzM,EAAKV,QAASU,EAAKL,QAAQS,aACrEjB,EAAOa,EAAKmM,SAAStB,GAK3B,MAAO,CACHvM,KALa0B,EAAKqM,mBAAmBxB,GAMrCH,IALgBvL,GAAQA,EAAKuL,IAAM1K,EAAK4M,oBAAoBzN,EAAKuL,IAAK8B,GAAgB,EAMtF7B,IALgBxL,GAAQA,EAAKwL,IAAM3K,EAAK4M,oBAAoBzN,EAAKwL,IAAK6B,GAAgBzO,EAO9F,EAEA6O,oBAAqB,SAAStO,EAAMsP,GAChC,IAAIC,EAAc3R,EAAMoR,WAAWhP,GAMnC,OAJID,EAAiBC,KACjBuP,EAAeD,EAAgBC,EAAc,KAG1CA,CACX,EAEAxB,mBAAoB,SAASxB,GACzB,MAAM7K,EAAO3D,KACP8N,EAAcnK,EAAK4K,gBAAgBC,GAEzC,OADa7K,EAAK8N,sBAAsB3D,EAAanK,EAAKL,QAAQS,YAEtE,EAGA0N,sBAAuB,SAASxO,EAASc,GACrC,IAAKd,EACD,OAAO,EAGX,MAAMyO,EAAOzO,EAAQ0O,wBAErB,OAAI5N,IAAgBvC,EACTkQ,EAAKE,MAELF,EAAKG,MAEpB,EAEAzB,sBAAuB,SAASnN,EAASc,GAGrC,OAFa/D,KAED8R,gBAAgB7O,EAASc,EAAa,SACtD,EAEA+N,gBAAiB,SAAS7O,EAASc,EAAagO,GAC5C,OAAK9O,GAILA,EAAUA,EAAQ,GAEdc,IAAgBvC,EACTyB,EAAQ,GAAG8O,UAEX9O,EAAQ,GAAG8O,YARX,CAUf,EAEAjC,SAAU,SAAStB,GAGf,OAFaxO,KAEAsD,QAAQmD,OAAS,IAAI+H,EACtC,EAEAwD,cAAe,SAASlP,GAGpB,OAFa9C,KAEDsD,QAAQmD,MAAMwL,QAAQnP,EACtC,EAEA4N,yBAA0B,SAAShB,EAAeC,GAC9C,MAEI1N,KAAM8N,EACN1B,IAAK6D,EACL5D,IAAK6D,GAJInS,KAKJsR,cAAc5B,IAGnBzN,KAAMgO,EACN5B,IAAK+D,EACL9D,IAAK+D,GAVIrS,KAWJsR,cAAc3B,GAEjBO,EAAgBH,EAAeE,EAKrC,MAAO,CACHO,gBAJoB/N,KAAK4L,IAAI8D,EAAsBjC,EAAgBkC,GAKnE3B,iBAJqBhO,KAAK4L,IAAIgE,EAAuBnC,EAAgBgC,GAM7E,EACAI,iBAAkB,SAASrP,EAASsP,GAChC,IAAKtP,EACD,MAAO,GAAGgP,QAAQhP,GAGtB,IAAIwC,EAAWiJ,MAAMC,KAAK1L,EAAQkH,SAAS1E,YAM3C,OAJI8M,IACA9M,EAAWA,EAASgI,QAAOmB,GAAKA,EAAE4D,QAAQD,MAGvC7D,MAAMC,KAAKlJ,GAAUwM,QAAQhP,EAAQ,GAChD,IAGJ9C,EAAGsS,OAAO1S,GAkBV,IAAI2S,EAAmB,CACnBjG,eAAgB,SAChBc,kBAAmB,eACnBoF,wBAAyB,QACzBC,oBAAqB,MACrBC,yBAA0B,SAG1BC,EAAqB,CACrBrG,eAAgB,QAChBc,kBAAmB,cACnBoF,wBAAyB,SACzBC,oBAAqB,OACrBC,yBAA0B,SAG9B,SAAS3N,EAAa6N,GAClB,IAAIpP,EAAO3D,KACP+D,EAAcgP,EAAShP,YACvBiP,EAAS,yBAA2BjP,EAAc,gBAAkBgP,EAASrO,QAAU,IAEvFqO,EAASzP,QAAQkD,iBACjBwM,GAAU,sBAGdrP,EAAKsP,MAAQF,EACbpP,EAAKuP,SAAWH,EAAS9P,QACzBU,EAAKI,YAAcA,EAEnB1D,EAAOsD,EAAMI,IAAgBvC,EAAasR,EAAqBJ,GAE/D/O,EAAKwP,WAAa,IAAItT,EAAMM,GAAGiT,UAAUL,EAAS9P,QAAS,CACvDc,YAAaA,EACbiP,OAAQA,EACRxM,eAAgBuM,EAASzP,QAAQkD,eACjC6M,KAAM1P,EAAK2P,YAAYxN,KAAKnC,GAC5B4P,MAAO5P,EAAK6P,OAAO1N,KAAKnC,GACxB2K,IAAK3K,EAAK8P,KAAK3N,KAAKnC,GACpB0K,IAAK1K,EAAK+P,KAAK5N,KAAKnC,GACpBgQ,aAAc,qBAAuB5P,EACrCP,OAAQG,EAAK4I,QAAQzG,KAAKnC,GAC1BiQ,UAAWjQ,EAAKkQ,MAAM/N,KAAKnC,IAEnC,CAEAuB,EAAa4O,UAAY,CACrBhK,KAAM,WACF9J,KAAKmT,WAAWU,OACpB,EAEAE,MAAO,SAASlN,GACZ7G,KAAKmT,WAAWY,MAAMlN,GACtB7G,KAAKgU,SAAU,CACnB,EAEA9M,KAAM,SAAS8H,EAAOnI,GAClB,IAAKA,EAAOgI,SAAS,qCAAuChI,EAAOgI,SAAS,iCACxE,OAGJ,MAAME,EAAmB/O,KAAKiT,MAAMX,iBAAiBzL,EAAQ,IAAIvF,MAC3D2N,SAAEA,EAAQC,UAAEA,GAAclP,KAAKiT,MAAMnE,iBAAiBC,EAAkBC,GAC9EhP,KAAKiT,MAAMzJ,QAAQ1H,EAAQ,CAAEmN,SAAUA,EAAUC,UAAWA,GAChE,EAEAhJ,IAAK,WACDlG,KAAKmT,WAAWjN,MAChBlG,KAAKgU,SAAU,CACnB,EAEAtN,QAAS,WACL1G,KAAKmT,WAAWzM,UAChB1G,KAAKmT,WAAanT,KAAKkT,SAAWlT,KAAKiT,MAAQ,IACnD,EAEAjM,WAAY,WACR,OAAOhH,KAAKmT,WAAWlO,QAC3B,EAEAqO,YAAa,SAASN,GAClB,IAAIrP,EAAO3D,KACX,OAAOC,EAAE,iDAAmD0D,EAAKI,YAAc,QAC1E4E,IAAI,UAAW,IACfA,IAAIhF,EAAKgP,wBAAyBK,EAAOrP,EAAKgP,2BACvD,EAEAa,OAAQ,SAASzN,GACb,IAAIpC,EAAO3D,KACPqK,EAAWpK,EAAE8F,EAAEC,eAEnB,MAAMoF,EAAQvL,EAAMwL,QAAQD,MAAMzH,EAAKuP,UACvC,IAAIe,EAAqBtQ,EAAKI,cAAgBvC,EAAa,aAAe,YAC1E,MAAMuN,EAAmBpL,EAAKsP,MAAMX,iBAAiBjI,EAAU,IAAI/I,KAE7DsO,EAAkBjM,EAAKsP,MAAM1E,gBAAgBQ,GAC7Cc,EAAmBlM,EAAKsP,MAAM1E,gBAAgBQ,EAAmB,GACvE,IAAIzE,EAAerK,EAAG0D,EAAKI,cAAgBvC,GAAc4J,EAASyE,EAAmBD,GACjFrF,EAAWtK,EAAG0D,EAAKI,cAAgBvC,GAAc4J,EAASwE,EAAkBC,GAEhF,GAAI5P,EAAE8F,EAAEmO,eAAepP,QAAQ,sEAAsEzB,OAAS,IACzGkH,EAASlH,SACTiH,EAAajH,OACd0C,EAAEoB,qBAHN,CAOA,IAAIgN,EAAqB7J,EAAanH,KAAKpC,GACvCqT,EAAiB7J,EAASpH,KAAKpC,GAC/BsT,EAAe7R,SAAS8H,EAAa,GAAG2J,GAAqB,IAC7DK,EAAe9R,SAAS+H,EAAS,GAAG0J,GAAqB,IAAM1J,EAAS,GAAG5G,EAAK4J,mBAAqBlD,EAAS,GAAG1G,EAAK4J,mBACtHb,EAAYlK,SAASmB,EAAKuP,SAASvK,IAAIhF,EAAK8I,gBAAiB,IAC7D8H,EAAO,SAASxR,GACZ,IAAIyR,EAAMhS,SAASO,EAAO,IAC1B,OAAQZ,EAAYY,GAASyR,EAAO9H,EAAY8H,EAAO,MAAQ,CACnE,EAEJ,IAAKL,IAAuBC,EAIxB,OAHArO,EAAEoB,iBACFpB,EAAE0O,OAAO3J,UAAUtE,eAAekO,cAClC/Q,EAAKsP,MAAMhQ,QAAQC,KAAK,qBAAqBwC,SAIjD,IAAIiP,EAAcJ,EAAKJ,EAAmB9F,KACtCuG,EAAcL,EAAKJ,EAAmB7F,MAAQgG,EAAeD,EAC7DQ,EAAcN,EAAKH,EAAe/F,KAClCyG,EAAcP,EAAKH,EAAe9F,MAAQgG,EAAeD,EAE7D1Q,EAAK2G,aAAeA,EACpB3G,EAAK4G,SAAWA,EAChB5G,EAAKoR,aAAetS,KAAK4L,IAAIiG,EAAeO,EAAaR,EAAeO,GACxEjR,EAAKqR,aAAevS,KAAK6L,IAAI+F,EAAeM,EAAaL,EAAeQ,EA3BxE,CA4BJ,EACArB,KAAM,WACF,OAAOzT,KAAK+U,YAChB,EACArB,KAAM,WACF,OAAO1T,KAAKgV,YAChB,EACAzI,QAAS,SAASxG,GACd,IAGIiJ,EAFA+D,EADO/S,KACSiT,MAChBlP,EAAcgP,EAAShP,YAE3B,MAAMkR,EAAclP,EAAEC,eAAiBD,EAAEc,OAEzC,IAAKoO,EACD,OAGJ,MAAMlG,EAAmBgE,EAAST,iBAAiB2C,EAAa,IAAI3T,KAC9D4T,EAAcrV,EAAMwL,QAAQD,MAXvBpL,KAWkCkT,WAAa,EAAI,EAE1DlE,EADAjL,IAAgBvC,EACRuE,EAAE6I,EAAEI,MAAQkG,EAEZnP,EAAEoP,EAAEnG,MAGhB+D,EAASjE,iBAAiBC,EAAkBC,EAChD,EACA6E,MAAO,SAAS9N,GACZ,IACIsE,EAAWpK,EAAE8F,EAAEC,eACfiN,EAFOjT,KAEMiT,MACjB,IAAI7H,EAAQvL,EAAMwL,QAAQD,MAHfpL,KAG0BkT,UAGrC,GAFAD,EAAM3N,SAASG,SAAS,uBAAuBC,SAE3CK,EAAEa,UAAY/G,EAAMO,KAAKgV,IAAK,CAC9B,IAAIpG,EAAQiE,EAAMlP,cAAgBvC,EAAauE,EAAE6I,EAAEyG,aAAetP,EAAEoP,EAAEE,aAClEC,EAAmBrC,EAAMlP,cAAgBvC,EAAa6I,EAASkL,WAAWC,KAAOnL,EAASkL,WAAWE,IACrGC,EAAgB3P,EAAEwP,SAClBL,EAAejC,EAAMlP,cAAgBvC,GAAc4J,GAAU,EAAI,EAErE,MAAM2D,EAAmB/O,KAAKiT,MAAMX,iBAAiBvM,EAAEC,cAAe,IAAI1E,KACtEmB,KAAKkT,IAAIL,EAAmBI,GAAiB,GAC7CzC,EAAMnE,iBAAiBC,EAAkBC,EAAQkG,GAGrD,MAAMjG,SAAEA,EAAQC,UAAEA,GAAc+D,EAAM9D,kBAAkBJ,GACxDkE,EAAMzJ,QAAQ1H,EAAQ,CAAEmN,SAAUA,EAAUC,UAAWA,GAC3D,CAEA,OAAO,CACX,EAGP,CAlnCD,CAknCGhP,OAAOL,MAAMqJ,QAChB,IAAI0M,EAAU/V,MAEdP,EAAQuW,SA7nCS,CACbC,GAAI,WACJvS,KAAM,WACNwS,SAAU,MACVC,YAAa,0GACbC,QAAS,CAAC,YAAa,UAynC3B3W,EAAQ4W,QAAUN,EAElBO,OAAOC,eAAe9W,EAAS,aAAc,CAAEyD,OAAO,GAEzD","ignoreList":[],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.resizable.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.resizable', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Splitter = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"splitter\",\n        name: \"Splitter\",\n        category: \"web\",\n        description: \"The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.\",\n        depends: [\"resizable\", \"icons\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            keys = kendo.keys,\n            extend = $.extend,\n            Widget = ui.Widget,\n            pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n            percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n            NS = \".kendoSplitter\",\n            EXPAND = \"expand\",\n            COLLAPSE = \"collapse\",\n            CONTENTLOAD = \"contentLoad\",\n            ERROR = \"error\",\n            RESIZE = \"resize\",\n            LAYOUTCHANGE = \"layoutChange\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            MOUSEENTER = \"mouseenter\",\n            CLICK = \"click\",\n            PANE = \"pane\",\n            MOUSELEAVE = \"mouseleave\",\n            FOCUSED = \"k-focus\",\n            KPANE = \"k-\" + PANE,\n            PANECLASS = \".\" + KPANE,\n            KSCROLLABLE = \"k-scrollable\",\n            TABINDEX = \"tabindex\",\n            ARIA_VALUEMIN = \"aria-valuemin\",\n            ARIA_VALUEMAX = \"aria-valuemax\",\n            ARIA_VALUENOW = \"aria-valuenow\",\n            ARIA_CONTROLS = \"aria-controls\",\n            ARIA_LABEL = \"aria-label\",\n            ARIA_LABELLEDBY = \"aria-labelledby\",\n            ARIA_ORIENTATION = \"aria-orientation\",\n            KSTATIC_PANE = \"k-pane-static\",\n            SPLITTER = \"k-splitter\",\n            KSPLITBAR = \"k-splitbar\",\n            SPLITTER_FLEX = \"k-splitter-flex\",\n            PANE_SIZING_PROP = \"flex-basis\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            KHIDDEN = \"k-hidden\",\n            MAX_NUMBER_VALUE = Number.MAX_SAFE_INTEGER,\n            KPANE = \"k-pane\",\n            KPANE_FLEX = \"k-pane-flex\",\n            CLICK = \"click\",\n            RESIZE = \"resize\",\n            PX = \"px\";\n\n        function isPercentageSize(size) {\n            return percentageUnitsRegex.test(size);\n        }\n\n        function isPixelSize(size) {\n            return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n        }\n\n        function isFluid(size) {\n            return !isPercentageSize(size) && !isPixelSize(size);\n        }\n\n        function calculateSize(size, total) {\n            var output = parseInt(size, 10);\n\n            if (isPercentageSize(size)) {\n                output = Math.floor(output * total / 100);\n            }\n\n            return output;\n        }\n\n        function panePropertyAccessor(propertyName, triggersResize) {\n            return function(pane, value) {\n                var paneConfig = this.element.find(pane).data(PANE);\n\n                if (arguments.length == 1) {\n                    return paneConfig[propertyName];\n                }\n\n                paneConfig[propertyName] = value;\n\n                if (triggersResize) {\n                    var splitter = this.element.data(\"kendo\" + this.options.name);\n                    splitter.resize(true);\n                }\n            };\n        }\n\n        var Splitter = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    isHorizontal;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.wrapper = that.element;\n\n                if (that.options.orientation) {\n                    isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;\n                }\n\n                that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;\n                that._dimension = isHorizontal ? \"width\" : \"height\";\n                that._keys = {\n                    decrease: isHorizontal ? keys.LEFT : keys.UP,\n                    increase: isHorizontal ? keys.RIGHT : keys.DOWN\n                };\n\n                that._resizeStep = 10;\n\n                that._marker = kendo.guid().substring(0, 8);\n\n                that.element.addClass(`${SPLITTER} ${SPLITTER_FLEX} ${SPLITTER}-${that.orientation}`);\n                that.element.closest(KPANE).removeClass(KSTATIC_PANE).addClass(KPANE_FLEX);\n                that._initPanes();\n\n                that.resizing = new PaneResizing(that);\n\n                that.element.triggerHandler(\"init\" + NS);\n            },\n            events: [\n                EXPAND,\n                COLLAPSE,\n                CONTENTLOAD,\n                ERROR,\n                RESIZE,\n                LAYOUTCHANGE\n            ],\n\n            _addOverlays: function() {\n                this._panes().append(\"<div class='k-splitter-overlay k-overlay' />\");\n            },\n\n            _removeOverlays: function() {\n                this._panes().children(\".k-splitter-overlay\").remove();\n            },\n\n            _attachEvents: function() {\n                var that = this,\n                    orientation = that.options.orientation;\n\n                // do not use delegated events to increase performance of nested elements\n                that.element\n                    .children(\".k-splitbar-draggable-\" + orientation)\n                    .on(\"keydown\" + NS, that._keydown.bind(that))\n                    .on(\"mousedown\" + NS, function(e) { e.currentTarget.focus(); })\n                    .on(\"focus\" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED); })\n                    .on(\"blur\" + NS, function(e) {\n                        $(e.currentTarget).removeClass(FOCUSED);\n                        if (that.resizing) {\n                            that.resizing.end();\n                        }\n                    })\n                    .on(MOUSEENTER + NS, function() { $(this).addClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(MOUSELEAVE + NS, function() { $(this).removeClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(\"mousedown\" + NS, that._addOverlays.bind(that))\n                    .end()\n                    .children(\".k-splitbar\")\n                    .on(\"dblclick\" + NS, that._togglePane.bind(that))\n                    .children(\".k-collapse-next, .k-collapse-prev\").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()\n                    .children(\".k-expand-next, .k-expand-prev\").on(CLICK + NS, that._arrowClick(EXPAND)).end()\n                    .end();\n\n                $(window).on(\"resize\" + NS + that._marker, that.resize.bind(that, false));\n                $(document).on(\"mouseup\" + NS + that._marker, that._removeOverlays.bind(that));\n            },\n\n            _detachEvents: function() {\n                var that = this;\n\n                that.element\n                    .children(\".k-splitbar-draggable-\" + that.orientation).off(NS).end()\n                    .children(\".k-splitbar\").off(\"dblclick\" + NS)\n                    .children(\".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev\").off(NS);\n\n                $(window).off(NS + that._marker);\n                $(document).off(NS + that._marker);\n            },\n\n            options: {\n                name: \"Splitter\",\n                clickMoveClick: true,\n                orientation: HORIZONTAL,\n                panes: []\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this._detachEvents();\n\n                if (this.resizing) {\n                    this.resizing.destroy();\n                }\n\n                kendo.destroy(this.element);\n\n                this.wrapper = this.element = null;\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    key = e.keyCode,\n                    resizing = that.resizing,\n                    target = $(e.currentTarget),\n                    navigationKeys = that._keys,\n                    increase = key === navigationKeys.increase,\n                    decrease = key === navigationKeys.decrease,\n                    pane;\n\n                if (increase || decrease) {\n                    if (e.ctrlKey) {\n                        pane = target[decrease ? \"next\" : \"prev\"]();\n\n                        if (resizing && resizing.isResizing()) {\n                            resizing.end();\n                        }\n\n                        if (!pane[that._dimension]()) {\n                            that._triggerAction(EXPAND, pane);\n                        } else {\n                            that._triggerAction(COLLAPSE, target[decrease ? \"prev\" : \"next\"]());\n                        }\n                    } else if (resizing) {\n                        resizing.move((decrease ? -1 : 1) * that._resizeStep, target);\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    pane = target.prev();\n                    that.collapse(pane);\n                    e.preventDefault();\n                } else if (key === keys.END) {\n                    pane = target.prev();\n                    that.expand(pane);\n                    e.preventDefault();\n                } else if (key === keys.ENTER && resizing) {\n                    resizing.end();\n                    e.preventDefault();\n\n                    that._togglePane(e);\n                }\n            },\n\n            _initPanes: function() {\n                var panesConfig = this.options.panes || [];\n                var that = this;\n\n                this.element\n                    .children()\n                    .each(function(i, pane) {\n                        if (pane.nodeName.toLowerCase() != \"script\") {\n                            panesConfig[i] = $.extend(that._getDefaultPaneConfig(), panesConfig[i], { order: i * 2 });\n                            panesConfig[i].isFluid = isFluid(panesConfig[i].size);\n                            pane.style.order = i * 2;\n\n                            that._initPane(pane, panesConfig[i]);\n                        }\n                    });\n\n                this.resize();\n            },\n            _getDefaultPaneConfig: function() {\n                return { scrollable: true, resizable: true, size: \"auto\" };\n            },\n            _updatePaneOrderStyles: function(parentElement) {\n                $(parentElement || this.element).children().each(function(i, pane) {\n                    if (pane.nodeName.toLowerCase() != \"script\") {\n                        let paneConfig = pane.data(PANE);\n\n                        paneConfig.order = i * 2;\n                        pane.style.order = i * 2;\n                    }\n                });\n            },\n            _initPane: function(pane, config) {\n                config = $.extend({}, this._getDefaultPaneConfig(), config);\n                config.fixedSize = config.size && config.size !== \"auto\";\n                pane = $(pane)\n                    .attr(\"role\", \"group\")\n                    .addClass(KPANE);\n\n                let isStaticPane = !config.resizable && !config.collapsible || config.fixedSize;\n\n                pane.css(PANE_SIZING_PROP, config.size)\n                    .data(PANE, config)\n                    .toggleClass(KSTATIC_PANE, Boolean(isStaticPane))\n                    .toggleClass(KSCROLLABLE, Boolean(config.scrollable));\n\n                this.ajaxRequest(pane);\n            },\n\n            ajaxRequest: function(pane, url, data) {\n                var that = this,\n                    paneConfig;\n\n                pane = that.element.find(pane);\n                paneConfig = pane.data(PANE);\n\n                url = url || paneConfig.contentUrl;\n\n                if (url) {\n                    pane.append(\"<span class='k-icon k-i-loading k-pane-loading' />\");\n\n                    if (kendo.isLocalUrl(url)) {\n                        jQuery.ajax({\n                            url: url,\n                            data: data || {},\n                            type: \"GET\",\n                            dataType: \"html\",\n                            success: function(data) {\n                                pane.html(data);\n\n                                that.trigger(CONTENTLOAD, { pane: pane[0] });\n                            },\n                            error: function(xhr, status) {\n                                that.trigger(ERROR, {\n                                    pane: pane[0],\n                                    status: status,\n                                    xhr: xhr\n                                });\n                            }\n                        });\n                    } else {\n                        pane.removeClass(KSCROLLABLE)\n                            .html(\"<iframe src='\" + url + \"' frameborder='0' class='k-content-frame'>\" +\n                                \"This page requires frames in order to show content\" +\n                                \"</iframe>\");\n                    }\n                }\n            },\n\n            _triggerAction: function(type, pane) {\n                var paneConfig = pane.data(PANE);\n                var shouldExecute = (paneConfig.collapsed && type == EXPAND) || (!paneConfig.collapsed && type == COLLAPSE);\n\n                if (!paneConfig.collapsible) {\n                    return;\n                }\n\n                if (shouldExecute && !this.trigger(type, { pane: pane[0] })) {\n                    this[type](pane[0]);\n                }\n\n                this.resizing.stop();\n                this.resizing.end();\n            },\n\n            _togglePane: function(e) {\n                var that = this,\n                    target = $(e.target),\n                    arrow;\n\n                if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                    return;\n                }\n\n                arrow = target.children(\"span:not(.k-resize-handle)\");\n\n                if (arrow.length !== 1) {\n                    return;\n                }\n\n                if (arrow.is(\".k-collapse-prev\")) {\n                    that._triggerAction(COLLAPSE, target.prev());\n                } else if (arrow.is(\".k-collapse-next\")) {\n                    that._triggerAction(COLLAPSE, target.next());\n                } else if (arrow.is(\".k-expand-prev\")) {\n                    that._triggerAction(EXPAND, target.prev());\n                } else if (arrow.is(\".k-expand-next\")) {\n                    that._triggerAction(EXPAND, target.next());\n                }\n\n                that.resizing?.end();\n            },\n            _arrowClick: function(arrowType) {\n                var that = this;\n\n                return function(e) {\n                    var target = $(e.currentTarget),\n                        pane;\n\n                    if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                        return;\n                    }\n\n                    if (target.is(\".k-\" + arrowType + \"-prev\")) {\n                        pane = target.parent().prev();\n                    } else {\n                        pane = target.parent().next();\n                    }\n                    that._triggerAction(arrowType, pane);\n                };\n            },\n            _updateSplitBar: function(splitbar, previousPane, nextPane, previousPaneEl) {\n                var catIconIf = function(actionType, iconType, condition) {\n                    var icon = iconType ? ui.icon({ icon: iconType, size: \"xsmall\" }) : \"\";\n                    return condition ? \"<span class='k-\" + actionType + \"'>\" + icon + \"</span>\" : \"\";\n                },\n                    orientation = this.orientation,\n                    draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),\n                    prevCollapsible = previousPane.collapsible,\n                    prevCollapsed = previousPane.collapsed,\n                    nextCollapsible = nextPane.collapsible,\n                    nextCollapsed = nextPane.collapsed,\n                    previousPaneId = previousPaneEl.attr(\"id\");\n\n                if (!previousPaneId) {\n                    previousPaneId = kendo.guid();\n                    previousPaneEl.attr(\"id\", previousPaneId);\n                }\n\n                const isRtl = kendo.support.isRtl(splitbar);\n                const leftIcon = isRtl ? \"caret-alt-right\" : \"caret-alt-left\";\n                const rightIcon = isRtl ? \"caret-alt-left\" : \"caret-alt-right\";\n\n                splitbar.addClass(\"k-splitbar k-splitbar-\" + orientation)\n                    .attr(\"role\", \"separator\")\n                    .attr(ARIA_VALUEMIN, \"0\")\n                    .attr(ARIA_VALUEMAX, \"100\")\n                    .attr(ARIA_CONTROLS, previousPaneId)\n                    .removeClass(\"k-splitbar-\" + orientation + \"-hover\")\n                    .toggleClass(\"k-splitbar-draggable-\" + orientation,\n                        draggable && !prevCollapsed && !nextCollapsed)\n                    .toggleClass(\"k-splitbar-static-\" + orientation,\n                        !draggable && !prevCollapsible && !nextCollapsible)\n                    .html(\n                        catIconIf(\"collapse-prev\", \"caret-alt-up\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-prev\", leftIcon, prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-prev\", \"caret-alt-down\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-prev\", rightIcon, prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == VERTICAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == HORIZONTAL) +\n                        catIconIf(\"collapse-next\", \"caret-alt-down\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-next\", rightIcon, nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-next\", \"caret-alt-up\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-next\", leftIcon, nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)\n                    );\n\n                if (previousPane.labelId) {\n                    splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);\n                } else if (previousPane.label) {\n                    splitbar.attr(ARIA_LABEL, previousPane.label);\n                }\n\n                if (orientation == HORIZONTAL) {\n                    splitbar.attr(ARIA_ORIENTATION, VERTICAL);\n                }\n\n                if (!draggable && !prevCollapsible && !nextCollapsible) {\n                    splitbar.removeAttr(TABINDEX);\n                }\n            },\n            _updateSplitBars: function() {\n                var that = this;\n\n                this.element.children(\".k-splitbar\").each(function() {\n                    var splitbar = $(this),\n                        previousPaneEl = splitbar.prevAll(PANECLASS).first(),\n                        previousPane = previousPaneEl.data(PANE),\n                        nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);\n\n                    // TODO: check if the proper place to set order\n                    splitbar.css(\"order\", previousPane.order + 1);\n\n                    if (!nextPane) {\n                        return;\n                    }\n\n                    that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);\n                });\n            },\n            _removeSplitBars: function() {\n                this.element.children(\".k-splitbar\").remove();\n            },\n            _panes: function() {\n                if (!this.element) {\n                    return $();\n                }\n                return this.element.children(PANECLASS);\n            },\n\n            _resetAriaValueNow: function(splitBars, panesSizes) {\n                var i, splitbar, valueNow, joinDimension;\n\n                for (i = 0; i < splitBars.length; i++) {\n                    joinDimension = (panesSizes[i] + panesSizes[i + 1]) || 1;\n                    valueNow = Math.round(panesSizes[i] / joinDimension * 100);\n                    splitbar = splitBars[i];\n                    splitbar.setAttribute(ARIA_VALUENOW, valueNow);\n                }\n            },\n\n            _resize: function() {\n                var that = this,\n                    element = that.element,\n                    panes = element.children(PANECLASS),\n                    isHorizontal = that.orientation == HORIZONTAL,\n                    splitBars = element.children(\".k-splitbar\"),\n                    splitBarsCount = splitBars.length,\n                    sizingProperty = isHorizontal ? \"width\" : \"height\",\n                    totalSize = element[sizingProperty](),\n                    panesSizes = [];\n\n                that.wrapper.addClass(\"k-splitter-resizing\");\n\n                if (that._suppressResize) {\n                    return;\n                }\n\n                if (splitBarsCount === 0) {\n                    splitBarsCount = panes.length - 1;\n                    panes.slice(0, splitBarsCount)\n                        .after(\"<div tabindex='0' class='k-splitbar' data-marker='\" + that._marker + \"' />\");\n\n                    that._updateSplitBars();\n                    splitBars = element.children(\".k-splitbar\");\n                } else {\n                    that._updateSplitBars();\n                }\n\n                // discard splitbar sizes from total size\n                splitBars.each(function() {\n                    totalSize -= this[isHorizontal ? \"offsetWidth\" : \"offsetHeight\"];\n                });\n\n                var sizedPanesWidth = 0,\n                    sizedPanesCount = 0,\n                    freeSizedPanes = $();\n\n                panes\n                    .each(function() {\n                        var element = $(this),\n                            config = element.data(PANE) || {}, size;\n\n                        element.removeClass(\"k-collapsed\");\n                        if (config.collapsed) {\n                            size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;\n                            element.css(\"overflow\", \"hidden\").addClass(\"k-collapsed\");\n                        } else if (config.isFluid || isFluid(config.size)) {\n                            freeSizedPanes = freeSizedPanes.add(this);\n                            panesSizes.push(false);\n                            return;\n                        } else { // sized in px/%, not collapsed\n                            size = calculateSize(config.size, totalSize);\n                        }\n\n                        sizedPanesCount++;\n                        sizedPanesWidth += size;\n                        panesSizes.push(size);\n                        element.css(PANE_SIZING_PROP, size + PX);\n                        return size;\n                    });\n\n                totalSize -= sizedPanesWidth;\n\n                var freeSizePanesCount = freeSizedPanes.length,\n                    freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);\n\n                freeSizedPanes\n                    .slice(0, freeSizePanesCount - 1)\n                    .css(PANE_SIZING_PROP, freeSizePaneWidth + PX)\n                    .end()\n                    .eq(freeSizePanesCount - 1)\n                    .css(PANE_SIZING_PROP, (totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth) + PX);\n\n                panesSizes.forEach(function(size, i) {\n                    if (size === false) {\n                        panesSizes[i] = freeSizePaneWidth;\n                    }\n                });\n\n                that._resetAriaValueNow(splitBars, panesSizes);\n\n                // arrange panes\n                var sizingDomProperty = isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\n\n                if (freeSizePanesCount === 0) {\n                    var lastNonCollapsedPane = panes.filter(function() {\n                        return !(($(this).data(PANE) || {}).collapsed);\n                    }).last();\n\n                    if (lastNonCollapsedPane.length) {\n                        lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);\n                    }\n                }\n\n                that._detachEvents();\n                that._attachEvents();\n\n                that.wrapper.removeClass(\"k-splitter-resizing\");\n\n                kendo.resize(panes);\n                that.trigger(LAYOUTCHANGE);\n            },\n            toggle: function(pane, expand) {\n                var that = this,\n                    paneConfig;\n\n                pane = that.element.find(pane);\n                paneConfig = pane.data(PANE);\n\n                if (!expand && paneConfig?.collapsible !== true) {\n                    return;\n                }\n\n                if (arguments.length == 1) {\n                    expand = paneConfig.collapsed === undefined$1 ? false : paneConfig.collapsed;\n                }\n\n                paneConfig.collapsed = !expand;\n\n                pane.toggleClass(KHIDDEN, paneConfig.collapsed && !paneConfig.collapsedSize);\n                pane.css(\"overflow\", paneConfig.collapsed && !paneConfig.collapsedSize ? \"hidden\" : \"auto\");\n                that.resize(true);\n            },\n\n            collapse: function(pane) {\n                this.toggle(pane, false);\n            },\n\n            expand: function(pane) {\n                this.toggle(pane, true);\n            },\n\n            _addPane: function(config, idx, paneElement) {\n                var that = this;\n\n                if (paneElement.length) {\n                    that.options.panes.splice(idx, 0, config);\n                    // TODO: recalculate order of panes and update them\n                    that._initPane(paneElement, config);\n\n                    that._removeSplitBars();\n\n                    that.resize(true);\n                }\n\n                return paneElement;\n            },\n\n            append: function(config) {\n                config = config || {};\n\n                var that = this,\n                    paneElement = $(\"<div />\").appendTo(that.element);\n\n                return that._addPane(config, that.options.panes.length, paneElement);\n            },\n\n            insertBefore: function(config, referencePane) {\n                referencePane = $(referencePane);\n                config = config || {};\n\n                var that = this,\n                    idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                    paneElement = $(\"<div />\").insertBefore($(referencePane));\n\n                return that._addPane(config, idx, paneElement);\n            },\n\n            insertAfter: function(config, referencePane) {\n                referencePane = $(referencePane);\n                config = config || {};\n\n                var that = this,\n                    idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                    paneElement = $(\"<div />\").insertAfter($(referencePane));\n\n                return that._addPane(config, idx + 1, paneElement);\n            },\n\n            remove: function(pane) {\n                var that = this;\n                pane = that.wrapper.find(pane);\n\n                if (pane.length) {\n                    kendo.destroy(pane);\n                    pane.each(function(idx, element) {\n                        that.options.panes.splice(that.wrapper.children(\".k-pane\").index(element), 1);\n                        $(element).remove();\n                    });\n\n                    that._removeSplitBars();\n\n                    if (that.options.panes.length) {\n                        that.resize(true);\n                    }\n                }\n\n                return that;\n            },\n\n            size: panePropertyAccessor(\"size\", true),\n\n            min: panePropertyAccessor(\"min\"),\n\n            max: panePropertyAccessor(\"max\"),\n\n            _getPaneElement: function(paneIndex) {\n                const that = this;\n                const panes = that._getPaneElements();\n                return panes[paneIndex];\n            },\n\n            _getPaneElements: function() {\n                const that = this;\n                const panes = Array.from(that.element.children() || []).filter(x => $(x).hasClass(\"k-pane\") || $(x).hasClass(\"k-splitter\"));\n                return panes;\n            },\n            _dragSplitterBar: function(splitterBarIndex, delta) {\n                const that = this;\n                const { leftPane, rightPane } = that._getAdjacentPanes(splitterBarIndex);\n\n                const leftPaneNewSize = leftPane.computedSize + delta;\n                const isLeftPaneSizeInBounds = leftPaneNewSize > leftPane.min && leftPaneNewSize < leftPane.max;\n\n                const panesWithoutSize = that._getPaneElements().filter(x => !x.style[PANE_SIZING_PROP]);\n                const canResizeBothPanes = (leftPane.size || rightPane.size) && panesWithoutSize.length > 1;\n\n                if ((leftPane.size && rightPane.size) || canResizeBothPanes) {\n                    if (isLeftPaneSizeInBounds) {\n                        that._resizePane(leftPane, delta);\n                        that._resizePane(rightPane, -delta);\n                    }\n                } else if (rightPane.size) {\n                    that._resizePane(rightPane, -delta);\n                } else {\n                    that._resizePane(leftPane, delta);\n                }\n                return { leftPane, rightPane };\n            },\n            _getAdjacentPanes: function(splitterBarIndex) {\n                const that = this;\n                const leftPaneIndex = splitterBarIndex;\n                const rightPaneIndex = splitterBarIndex + 1;\n\n                const leftPaneELement = that._getPaneElement(leftPaneIndex);\n                const rightPaneELement = that._getPaneElement(rightPaneIndex);\n\n                const leftPane = that._getPane(leftPaneIndex);\n                const rightPane = that._getPane(rightPaneIndex);\n\n                const leftPaneSize = that._getPaneOffsetSize(leftPaneIndex);\n                const rightPaneSize = that._getPaneOffsetSize(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const getPixelSize = paneSize => that._calculatePixelSize(paneSize, splitterSize);\n\n                const { leftPaneMaxSize, rightPaneMaxSize } = that._getAdjacentPanesMaxSize(leftPaneIndex, rightPaneIndex);\n                const rightMaxPixelSize = getPixelSize(rightPane && rightPane.max);\n                const leftMaxPixelSize = getPixelSize(leftPane && leftPane.max);\n\n                return {\n                    leftPane: {\n                        index: leftPaneIndex,\n                        computedSize: leftPaneSize,\n                        min: getPixelSize(leftPane && leftPane.min) || (rightMaxPixelSize ? totalPaneSize - rightMaxPixelSize : 0) || 0,\n                        max: leftPaneMaxSize,\n                        size: leftPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: leftPane && leftPane.collapsible,\n                        uid: leftPane.uid\n                    },\n                    rightPane: {\n                        index: rightPaneIndex,\n                        computedSize: rightPaneSize,\n                        min: getPixelSize(rightPane && rightPane.min) || (leftMaxPixelSize ? totalPaneSize - leftMaxPixelSize : 0) || 0,\n                        max: rightPaneMaxSize,\n                        size: rightPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: rightPane && rightPane.collapsible,\n                        uid: rightPane.uid\n                    }\n                };\n            },\n\n            _resizePane: function(pane, delta) {\n                const that = this;\n                const constrainedSize = clamp(pane.computedSize + delta, pane.min, pane.max);\n                let newSize = \"\";\n\n                if (isPercentageSize(pane.size)) {\n                    const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                    newSize = toPercentages(100 * constrainedSize / splitterSize);\n                } else {\n                    newSize = toPixel(constrainedSize);\n                }\n                pane.size = newSize;\n                that._setPaneSize(pane.index, newSize);\n            },\n\n            _allExpandedPanesHaveSize: function() {\n                const that = this;\n                const expandedPanes = that.options.panes.filter(x => !x.collapsed);\n\n                if (expandedPanes.length) {\n                    return expandedPanes.filter(x => x.size).length;\n                }\n\n                return false;\n            },\n\n            _setPaneSize: function(paneIndex, size) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n\n                if (!paneElement) {\n                    return;\n                }\n\n                if (!that._allExpandedPanesHaveSize()) {\n                    $(paneElement).addClass(KSTATIC_PANE);\n                }\n\n                paneElement.style[PANE_SIZING_PROP] = size;\n                $(paneElement).data(\"pane\").size = size;\n            },\n\n            _getPaneSizes: function(paneIndex) {\n                const that = this;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const pane = that._getPane(paneIndex);\n                const paneSize = that._getPaneOffsetSize(paneIndex);\n                const paneMinSize = pane && pane.min ? that._calculatePixelSize(pane.min, splitterSize) : 0;\n                const paneMaxSize = pane && pane.max ? that._calculatePixelSize(pane.max, splitterSize) : MAX_NUMBER_VALUE;\n\n                return {\n                    size: paneSize,\n                    min: paneMinSize,\n                    max: paneMaxSize\n                };\n            },\n\n            _calculatePixelSize: function(size, containerSize) {\n                let numericSize = kendo.parseFloat(size);\n\n                if (isPercentageSize(size)) {\n                    numericSize = (containerSize * numericSize / 100);\n                }\n\n                return numericSize;\n            },\n\n            _getPaneOffsetSize: function(paneIndex) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n                const size = that._getElementOffsetSize(paneElement, that.options.orientation);\n                return size;\n            },\n\n\n            _getElementOffsetSize: function(element, orientation) {\n                if (!element) {\n                    return 0;\n                }\n\n                const rect = element.getBoundingClientRect();\n\n                if (orientation === HORIZONTAL) {\n                    return rect.width;\n                } else {\n                    return rect.height;\n                }\n            },\n\n            _getElementClientSize: function(element, orientation) {\n                const that = this;\n\n                return that._getElementSize(element, orientation, \"client\");\n            },\n\n            _getElementSize: function(element, orientation, sizeType) {\n                if (!element) {\n                    return 0;\n                }\n\n                element = element[0];\n\n                if (orientation === HORIZONTAL) {\n                    return element[`${sizeType}Width`];\n                } else {\n                    return element[`${sizeType}Height`];\n                }\n            },\n\n            _getPane: function(paneIndex) {\n                const that = this;\n\n                return (that.options.panes || [])[paneIndex];\n            },\n\n            _getPaneIndex: function(pane) {\n                const that = this;\n\n                return that.options.panes.indexOf(pane);\n            },\n\n            _getAdjacentPanesMaxSize: function(leftPaneIndex, rightPaneIndex) {\n                const that = this;\n                const {\n                    size: leftPaneSize,\n                    min: leftPaneMinSize,\n                    max: leftPaneMaxPixelSize\n                } = that._getPaneSizes(leftPaneIndex);\n\n                const {\n                    size: rightPaneSize,\n                    min: rightPaneMinSize,\n                    max: rightPaneMaxPixelSize\n                } = that._getPaneSizes(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n\n                const leftPaneMaxSize = Math.min(leftPaneMaxPixelSize, totalPaneSize - rightPaneMinSize);\n                const rightPaneMaxSize = Math.min(rightPaneMaxPixelSize, totalPaneSize - leftPaneMinSize);\n\n                return {\n                    leftPaneMaxSize,\n                    rightPaneMaxSize\n                };\n            },\n            _getElementIndex: function(element, childrenSelector) {\n                if (!element) {\n                    return [].indexOf(element);\n                }\n\n                let children = Array.from(element.parent().children());\n\n                if (childrenSelector) {\n                    children = children.filter(x => x.matches(childrenSelector));\n                }\n\n                return Array.from(children).indexOf(element[0]);\n            },\n        });\n\n        ui.plugin(Splitter);\n\n        function toPercentages(value) {\n            return `${value}%`;\n        }\n\n        function toPixel(value) {\n            return kendo.parseFloat(value) + \"px\";\n        }\n\n        function percentage(partialValue, totalValue) {\n            return (100 * partialValue) / totalValue;\n        }\n\n        function clamp(value, min, max) {\n            return Math.min(max, Math.max(min, value));\n        }\n\n        var verticalDefaults = {\n            sizingProperty: \"height\",\n            sizingDomProperty: \"offsetHeight\",\n            alternateSizingProperty: \"width\",\n            positioningProperty: \"top\",\n            mousePositioningProperty: \"pageY\"\n        };\n\n        var horizontalDefaults = {\n            sizingProperty: \"width\",\n            sizingDomProperty: \"offsetWidth\",\n            alternateSizingProperty: \"height\",\n            positioningProperty: \"left\",\n            mousePositioningProperty: \"pageX\"\n        };\n\n        function PaneResizing(splitter) {\n            var that = this,\n                orientation = splitter.orientation,\n                handle = \".k-splitbar-draggable-\" + orientation + \"[data-marker=\" + splitter._marker + \"]\";\n\n            if (splitter.options.clickMoveClick) {\n                handle += \",.k-ghost-splitbar\";\n            }\n\n            that.owner = splitter;\n            that._element = splitter.element;\n            that.orientation = orientation;\n\n            extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);\n\n            that._resizable = new kendo.ui.Resizable(splitter.element, {\n                orientation: orientation,\n                handle: handle,\n                clickMoveClick: splitter.options.clickMoveClick,\n                hint: that._createHint.bind(that),\n                start: that._start.bind(that),\n                max: that._max.bind(that),\n                min: that._min.bind(that),\n                invalidClass: \"k-restricted-size-\" + orientation,\n                resize: that._resize.bind(that),\n                resizeend: that._stop.bind(that)\n            });\n        }\n\n        PaneResizing.prototype = {\n            stop: function() {\n                this._resizable._stop();\n            },\n\n            press: function(target) {\n                this._resizable.press(target);\n                this.pressed = true;\n            },\n\n            move: function(delta, target) {\n                if (!target.hasClass(\"k-splitbar-draggable-horizontal\") && !target.hasClass(\"k-splitbar-draggable-vertical\")) {\n                    return;\n                }\n\n                const splitterBarIndex = this.owner._getElementIndex(target, `.${KSPLITBAR}`);\n                const { leftPane, rightPane } = this.owner._dragSplitterBar(splitterBarIndex, delta);\n                this.owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n            },\n\n            end: function() {\n                this._resizable.end();\n                this.pressed = false;\n            },\n\n            destroy: function() {\n                this._resizable.destroy();\n                this._resizable = this._element = this.owner = null;\n            },\n\n            isResizing: function() {\n                return this._resizable.resizing;\n            },\n\n            _createHint: function(handle) {\n                var that = this;\n                return $(\"<div class='k-ghost-splitbar k-ghost-splitbar-\" + that.orientation + \"' />\")\n                    .css(\"z-index\", 99)\n                    .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());\n            },\n\n            _start: function(e) {\n                var that = this,\n                    splitbar = $(e.currentTarget);\n\n                const isRtl = kendo.support.isRtl(that._element);\n                let offsetBoundaryProp = that.orientation === HORIZONTAL ? \"offsetLeft\" : \"offsetTop\";\n                const splitterBarIndex = that.owner._getElementIndex(splitbar, `.${KSPLITBAR}`);\n\n                const leftPaneELement = that.owner._getPaneElement(splitterBarIndex);\n                const rightPaneELement = that.owner._getPaneElement(splitterBarIndex + 1);\n                let previousPane = $((that.orientation === HORIZONTAL && isRtl) ? rightPaneELement : leftPaneELement);\n                let nextPane = $((that.orientation === HORIZONTAL && isRtl) ? leftPaneELement : rightPaneELement);\n\n                if ($(e.initialTarget).closest(\".k-expand-next, .k-expand-prev, .k-collapse-next, .k-collapse-prev\").length > 0 ||\n                    !nextPane.length ||\n                    !previousPane.length) {\n                    e.preventDefault();\n                    return;\n                }\n\n                var previousPaneConfig = previousPane.data(PANE),\n                    nextPaneConfig = nextPane.data(PANE),\n                    prevBoundary = parseInt(previousPane[0][offsetBoundaryProp], 10),\n                    nextBoundary = parseInt(nextPane[0][offsetBoundaryProp], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],\n                    totalSize = parseInt(that._element.css(that.sizingProperty), 10),\n                    toPx = function(value) {\n                        var val = parseInt(value, 10);\n                        return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;\n                    };\n\n                if (!previousPaneConfig || !nextPaneConfig) {\n                    e.preventDefault();\n                    e.sender.draggable.clickMoveClick.cancel();\n                    that.owner.element.find(\".k-ghost-splitbar\").remove();\n                    return;\n                }\n\n                var prevMinSize = toPx(previousPaneConfig.min),\n                    prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,\n                    nextMinSize = toPx(nextPaneConfig.min),\n                    nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;\n\n                that.previousPane = previousPane;\n                that.nextPane = nextPane;\n                that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);\n                that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);\n            },\n            _max: function() {\n                return this._maxPosition;\n            },\n            _min: function() {\n                return this._minPosition;\n            },\n            _resize: function(e) {\n                let that = this;\n                let splitter = that.owner;\n                let orientation = splitter.orientation;\n                let delta;\n                const splitterBar = e.currentTarget || e.target;\n\n                if (!splitterBar) {\n                    return;\n                }\n\n                const splitterBarIndex = splitter._getElementIndex(splitterBar, `.${KSPLITBAR}`);\n                const rtlModifier = kendo.support.isRtl(that._element) ? -1 : 1;\n                if (orientation === HORIZONTAL) {\n                    delta = e.x.delta * rtlModifier;\n                } else {\n                    delta = e.y.delta;\n                }\n\n                splitter._dragSplitterBar(splitterBarIndex, delta);\n            },\n            _stop: function(e) {\n                var that = this,\n                    splitbar = $(e.currentTarget),\n                    owner = that.owner;\n                let isRtl = kendo.support.isRtl(that._element);\n                owner._panes().children(\".k-splitter-overlay\").remove();\n\n                if (e.keyCode !== kendo.keys.ESC) {\n                    let delta = owner.orientation === HORIZONTAL ? e.x.initialDelta : e.y.initialDelta;\n                    let splitbarPosition = owner.orientation === HORIZONTAL ? splitbar.position().left : splitbar.position().top;\n                    let ghostPosition = e.position;\n                    let rtlModifier = (owner.orientation === HORIZONTAL && isRtl) ? -1 : 1;\n\n                    const splitterBarIndex = this.owner._getElementIndex(e.currentTarget, `.${KSPLITBAR}`);\n                    if (Math.abs(splitbarPosition - ghostPosition) > 2) {\n                        owner._dragSplitterBar(splitterBarIndex, delta * rtlModifier);\n                    }\n\n                    const { leftPane, rightPane } = owner._getAdjacentPanes(splitterBarIndex);\n                    owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n                }\n\n                return false;\n            }\n        };\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}