{"version":3,"file":"kendo.maskedtextbox.min.js","names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Maskedtextbox","Core","Floatinglabel","Icons","PrefixSuffixContainersChunk","this","kendo_core_js","kendo_floatinglabel_js","kendo_icons_js","kendo_prefixSuffixContainers_chunk_js","$","undefined$1","window","min","Math","caret","keys","ui","Widget","NS","isPlainObject","setTimeout","STATEDISABLED","STATEINVALID","FOCUSED","DISABLED","READONLY","CHANGE","MOUSEUP","DROP","KEYDOWN","PASTE","ns","name","INPUT_EVENT_NAME","support","propertyChangeEvent","MaskedTextBox","extend","init","element","options","DOMElement","that","fn","call","_rules","rules","_wrapper","_tokenize","_form","addClass","attr","on","value","_togglePrompt","_old","_emptyMask","_oldValue","wrapper","_timeoutId","_maskLength","val","clearTimeout","removeClass","_change","mask","length","is","parents","enable","readonly","_validationIcon","icon","iconClass","insertAfter","_label","_applyCssClasses","a","widget","suffixInsertAfter","floatingLabel","refresh","notify","clearPromptChar","unmaskOnPost","promptChar","culture","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","L","C","A","setOptions","_unbindInput","_bindInput","destroy","off","_formElement","_resetHandler","_submitHandler","raw","_unmask","replace","RegExp","escapeRegExp","emptyMask","_mask","_unmaskedValue","_activeElement","show","_editable","disable","_keydown","bind","_drop","_trackChange","_inputHandler","browser","msie","version","join","_legacyIEInputHandler","toggleClass","prop","trigger","__changing","inputChange","backward","old","cursor","lengthDiff","mobile","mobileOS","__dropping","android","contentStart","str1","str2","i","stringDiffStart","content","substring","caretPos","endContent","_trimStartPromptChars","unmasked","_findCaretPosBackwards","count","indexOf","pos","caretStart","_find","__backward","e","input","type","__pasting","formId","form","closest","key","keyCode","BACKSPACE","ENTER","idx","step","charAt","tokens","start","end","valueLength","chr","current","empty","chrIdx","split","token","tokenIdx","tokensLength","result","test","isFunction","_blinkInvalidState","floating","labelText","id","_floatingLabelContainer","wrap","parent","FloatingLabel","guid","_inputLabel","style","cssText","width","className","_addInvalidState","_invalidStateTimeout","_removeInvalidState","rule","maskChars","numberFormat","getCulture","currency","symbol","l","text","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","Object","defineProperty"],"sources":["kendo.maskedtextbox.js"],"mappings":"CAAA,SAAWA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,0BAA2BA,QAAQ,kBAAmBA,QAAQ,4CAC9J,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,CAAC,UAAW,iBAAkB,sBAAuB,cAAe,wCAAyCJ,GACtFA,IAA1ED,EAA+B,oBAAfO,WAA6BA,WAAaP,GAAUQ,MAAsBC,MAAQT,EAAOS,OAAS,CAAC,EAAGT,EAAOS,MAAMC,SAAWV,EAAOS,MAAMC,UAAY,CAAC,EAAGV,EAAOS,MAAMC,SAASC,cAAgB,CAAC,GAAIX,EAAOS,MAAMC,SAASE,KAAMZ,EAAOS,MAAMC,SAASG,cAAeb,EAAOS,MAAMC,SAASI,MAAOd,EAAOS,MAAMC,SAASK,4BAC9U,CAJD,CAIGC,MAAM,SAAWd,EAASe,EAAeC,EAAwBC,EAAgBC,IAShF,SAAUC,EAAGC,GACT,IAAItB,EAASuB,OACTC,EAAMxB,EAAOyB,KAAKD,IAClBf,EAAQT,EAAOS,MACfiB,EAAQjB,EAAMiB,MACdC,EAAOlB,EAAMkB,KACbC,EAAKnB,EAAMmB,GACXC,EAASD,EAAGC,OACZC,EAAK,sBACLC,EAAgBV,EAAEU,cAClBC,EAAaT,OAAOS,WAIpBC,EAAgB,aAChBC,EAAe,YACfC,EAAU,UACVC,EAAW,WACXC,EAAW,WACXC,EAAS,SACTC,EAAU,UACVC,EAAO,OACPC,EAAU,UACVC,EAAQ,QAGZ,SAASC,EAAGC,GAAQ,OAAOA,EAAOd,CAAI,CAEtC,IAAIe,EAAmBF,EAAGlC,EAAMqC,QAAQC,oBAAsB,iBAJlD,SAiBZ,IAAIC,EAAgBnB,EAAOoB,OAAO,CAC9BC,KAAM,SAASC,EAASC,GACpB,IACIC,EADAC,EAAOtC,KAGXa,EAAO0B,GAAGL,KAAKM,KAAKF,EAAMH,EAASC,GAEnCE,EAAKG,OAASpC,EAAE4B,OAAO,CAAC,EAAGK,EAAKI,MAAOJ,EAAKF,QAAQM,OAEpDP,EAAUG,EAAKH,QACfE,EAAaF,EAAQ,GAErBG,EAAKK,WACLL,EAAKM,YACLN,EAAKO,QAELP,EAAKH,QACAW,SAAS,iBACTC,KAAK,eAAgB,OACrBC,GAAG,QAAUlC,GAAI,WACd,IAAImC,EAAQZ,EAAWY,MAElBA,EAGDX,EAAKY,eAAc,GAFnBb,EAAWY,MAAQX,EAAKa,KAAOb,EAAKc,WAKxCd,EAAKe,UAAYJ,EACjBX,EAAKgB,QAAQR,SAAS3B,GAEtBmB,EAAKiB,WAAavC,GAAW,WACzBN,EAAMyB,EAAS,EAAGc,EAAQX,EAAKkB,YAAc,EACjD,GACJ,IACCR,GAAG,WAAalC,GAAI,WACjB,IAAImC,EAAQd,EAAQsB,MAEpBC,aAAapB,EAAKiB,YAClBlB,EAAWY,MAAQX,EAAKa,KAAO,GAE3BF,IAAUX,EAAKc,aACff,EAAWY,MAAQX,EAAKa,KAAOF,GAGnCX,EAAKgB,QAAQK,YAAYxC,GACzBmB,EAAKsB,UACLtB,EAAKY,eACT,IAEAZ,EAAKF,QAAQyB,MAAQvB,EAAKF,QAAQyB,KAAKC,OAAS,GAChDxB,EAAKH,QAAQY,KAAK,mBAAoBT,EAAKF,QAAQyB,MAGxC1B,EAAQ4B,GAAG,eAAiB1D,EAAEiC,EAAKH,SAAS6B,QAAQ,YAAYD,GAAG,aAG9EzB,EAAK2B,QAAO,GAEZ3B,EAAK4B,SAAS/B,EAAQ4B,GAAG,eAG7BzB,EAAK6B,gBAAkB9D,EAAEZ,EAAMmB,GAAGwD,KAAK,CAAEA,KAAM,qBAAsBC,UAAW,sCAAuCC,YAAYnC,GAEnIG,EAAKW,MAAMX,EAAKF,QAAQa,OAASd,EAAQsB,OAEzCnB,EAAKiC,SACLjC,EAAKkC,mBAELpE,EAAsCqE,EAAE,CAAEC,OAAQpC,EAAMgB,QAAShB,EAAKgB,QAASlB,QAASE,EAAKF,QAASuC,kBAAmBrC,EAAK6B,kBAC1H7B,EAAKsC,eACLtC,EAAKsC,cAAcC,UAGvBpF,EAAMqF,OAAOxC,EACjB,EAEAF,QAAS,CACLR,KAAM,gBACNmD,iBAAiB,EACjBC,cAAc,EACdC,WAAY,IACZC,QAAS,GACTxC,MAAO,CAAC,EACRO,MAAO,GACPY,KAAM,GACNsB,MAAO,KACPC,KAAM,SACNC,SAAU,QACVC,QAAS,SACTC,cAAe,CACXC,WAAW,GAEfC,cAAe,CACXD,WAAW,IAInBE,OAAQ,CACJpE,GAGJoB,MAAO,CACH,EAAK,KACL,EAAK,QACL,IAAK,cACLiD,EAAK,WACL,IAAK,cACL,IAAK,KACLC,EAAK,IACLC,EAAK,cACLpB,EAAK,kBAGTqB,WAAY,SAAS1D,GACjB,IAAIE,EAAOtC,KAEXa,EAAO0B,GAAGuD,WAAWtD,KAAKF,EAAMF,GAEhCE,EAAKG,OAASpC,EAAE4B,OAAO,CAAC,EAAGK,EAAKI,MAAOJ,EAAKF,QAAQM,OAEpDJ,EAAKM,YAEL5C,KAAK+F,eACL/F,KAAKgG,aAEL1D,EAAKW,MAAMX,EAAKH,QAAQsB,MAC5B,EAEAwC,QAAS,WACL,IAAI3D,EAAOtC,KAEPsC,EAAKsC,eACLtC,EAAKsC,cAAcqB,UAGvB3D,EAAKH,QAAQ+D,IAAIpF,GAEbwB,EAAK6D,eACL7D,EAAK6D,aAAaD,IAAI,QAAS5D,EAAK8D,eACpC9D,EAAK6D,aAAaD,IAAI,SAAU5D,EAAK+D,iBAGzCxF,EAAO0B,GAAG0D,QAAQzD,KAAKF,EAC3B,EAEAgE,IAAK,WAED,OADetG,KAAKuG,QAAQvG,KAAKmC,QAAQsB,MAAO,GAChC+C,QAAQ,IAAIC,OAAOC,EAAa1G,KAAKoC,QAAQ6C,YAAa,KAAM,GACpF,EAEAhC,MAAO,SAASA,GACZ,IAAId,EAAUnC,KAAKmC,QACfwE,EAAY3G,KAAKoD,WAErB,OAAIH,IAAU3C,EACHN,KAAKmC,QAAQsB,OAGV,OAAVR,IACAA,EAAQ,IAGP0D,GAML1D,EAAQjD,KAAKuG,QAAQtD,EAAQ,IAE7Bd,EAAQsB,IAAIR,EAAQ0D,EAAY,IAEhC3G,KAAK4G,MAAM,EAAG5G,KAAKwD,YAAaP,GAChCjD,KAAK6G,eAAiB,KAEtB5D,EAAQd,EAAQsB,MAChBzD,KAAKqD,UAAYJ,EAEbxD,EAAMqH,mBAAqB3E,IACvBc,IAAU0D,EACVxE,EAAQsB,IAAI,IAEZzD,KAAKkD,sBAITlD,KAAK4E,eACL5E,KAAK4E,cAAcC,aAxBnB7E,KAAKqD,UAAYJ,OACjBd,EAAQsB,IAAIR,IAyBpB,EAEAC,cAAe,SAAS6D,GACpB,IAAI1E,EAAarC,KAAKmC,QAAQ,GAC1Bc,EAAQZ,EAAWY,MAEnBjD,KAAKoC,QAAQ2C,kBAIT9B,EAHC8D,EAGO/G,KAAKqD,UAFLJ,EAAMuD,QAAQ,IAAIC,OAAOC,EAAa1G,KAAKoC,QAAQ6C,YAAa,KAAM,KAKlF5C,EAAWY,MAAQjD,KAAKmD,KAAOF,EAEvC,EAEAiB,SAAU,SAASA,GAGflE,KAAKgH,UAAU,CACX9C,SAAUA,IAAa5D,GAAqB4D,EAC5C+C,SAAS,IAJFjH,KAOF4E,eAPE5E,KAQF4E,cAAcV,SAASA,IAAa5D,GAAqB4D,EAEtE,EAEAD,OAAQ,SAASA,GAGbjE,KAAKgH,UAAU,CACX9C,UAAU,EACV+C,UAAWhD,EAASA,IAAW3D,GAAqB2D,KAJ7CjE,KAOF4E,eAPE5E,KAQF4E,cAAcX,OAAOA,EAASA,IAAW3D,GAAqB2D,EAE3E,EAEA+B,WAAY,WACR,IAAI1D,EAAOtC,KAEX,GAAIsC,EAAKkB,cACLlB,EAAKH,QACAa,GAAGrB,EAAGF,GAAUa,EAAK4E,SAASC,KAAK7E,IACnCU,GAAGrB,EAAGH,GAAOc,EAAK8E,MAAMD,KAAK7E,IAC7BU,GAAGrB,EAAGL,GAASgB,EAAK+E,aAAaF,KAAK7E,IACtCU,GAAGnB,EAAkBS,EAAKgF,cAAcH,KAAK7E,IAG9C7C,EAAMqC,QAAQyF,QAAQC,MAAM,CAC5B,IAAIC,EAAUhI,EAAMqC,QAAQyF,QAAQE,QACpC,GAAIA,EAAU,GAAKA,EAAU,GAAI,CAC7B,IAAI/B,EAAS,CAAC/D,EAAGJ,GAAUI,EAAGH,GAAOG,EAAGF,GAAUE,EAAGD,IAAQgG,KAAK,KAClEpF,EAAKH,QAAQa,GAAG0C,EAAQpD,EAAKqF,sBAAsBR,KAAK7E,GAC5D,CACJ,CAER,EAEAyD,aAAc,WACV,IAAIL,EAAS,CAAC7D,EAAkBF,EAAGF,GAAUE,EAAGJ,GAAUI,EAAGH,GAAOG,EAAGD,IAAQgG,KAAK,KAEpF1H,KAAKmC,QAAQ+D,IAAIR,EACrB,EAEAsB,UAAW,SAAS5E,GAChB,IAAIE,EAAOtC,KACPmC,EAAUG,EAAKH,QACfmB,EAAUhB,EAAKgB,QACf2D,EAAU7E,EAAQ6E,QAClB/C,EAAW9B,EAAQ8B,SAEvB5B,EAAKyD,eAEA7B,GAAa+C,GAQd9E,EAAQY,KAAK3B,EAAU6F,GACflE,KAAK1B,EAAU6C,GAEvBZ,EAAQsE,YAAY3G,EAAegG,KAVnC9E,EAAQ0F,KAAKzG,GAAU,GACfyG,KAAKxG,GAAU,GAEvBiC,EAAQK,YAAY1C,GAEpBqB,EAAK0D,aAOb,EAEApC,QAAS,WACL,IAAItB,EAAOtC,KACPiD,EAAQX,EAAKW,QAEbA,IAAUX,EAAKe,WACff,EAAKe,UAAYJ,EAEjBX,EAAKwF,QAAQxG,GACbgB,EAAKH,QAAQ2F,QAAQxG,IAEN,KAAV2B,GAAgBX,EAAKyF,YAC1BzF,EAAKH,QAAQ2F,QAAQxG,EAE7B,EAEA0G,YAAa,SAASC,GAClB,IAAI3F,EAAOtC,KACPkI,EAAM5F,EAAKa,KACXhB,EAAUG,EAAKH,QAAQ,GACvBc,EAAQd,EAAQc,MAEhBkF,EADYzH,EAAMyB,GACC,GACnBiG,EAAanF,EAAMa,OAASoE,EAAIpE,OAChCuE,EAAS5I,EAAMqC,QAAQwG,SAE3B,KAAIhG,EAAKiG,YAAcH,EAAa,GAApC,EAIoB,IAAhBA,GAAqBC,EAAOG,SAA8B,WAAnBH,EAAOd,UAC9CU,GAAW,GAGf,IAAIQ,EAAejI,EAAI2H,EAxU/B,SAAyBO,EAAMC,GAE3B,IADA,IAAIC,EAAI,EACDA,EAAID,EAAK7E,QACR4E,EAAKE,KAAOD,EAAKC,IAGrBA,IAGJ,OAAOA,CACX,CA8TuCC,CAAgB5F,EAAOiF,IAClDY,EAAU7F,EAAM8F,UAAUN,EAAcN,GAE5ChG,EAAQc,MAAQA,EAAM8F,UAAU,EAAGN,GAAgBnG,EAAKc,WAAW2F,UAAUN,GAE7E,IAAIO,EAAW1G,EAAKsE,MAAM6B,EAAcN,EAAQW,GAC5CG,EAAa3G,EAAK4G,sBAAsBjG,EAAM8F,UAAUZ,GAAS3H,EAAI4H,EAAYY,EAAWP,IAE5FU,EAAW7G,EAAKiE,QAAQ0C,EAAYf,EAAIpE,OAASmF,EAAWnF,QAChExB,EAAKsE,MAAMoC,EAAUA,EAAUG,GAE3BlB,IACAe,EAAW1G,EAAK8G,uBAAuBX,IAG3C/H,EAAMyB,EAAS6G,GAGf1G,EAAKiG,YAAa,CAxBlB,CAyBJ,EAEAW,sBAAuB,SAASJ,EAASO,GAGrC,IAFA,IAAIpE,EAAajF,KAAKoC,QAAQ6C,WAEvBoE,KAAU,GAAqC,IAAhCP,EAAQQ,QAAQrE,IAClC6D,EAAUA,EAAQC,UAAU,GAGhC,OAAOD,CACX,EAEAM,uBAAwB,SAASG,GAC7B,IAAIC,EAAaxJ,KAAKyJ,MAAMF,GAAK,GAKjC,OAJIC,EAAaD,IACbC,GAAc,GAGXA,CACX,EAEAlC,cAAe,WACP7H,EAAMqH,mBAAqB9G,KAAKmC,QAAQ,IAI5CnC,KAAKgI,YAAYhI,KAAK0J,WAC1B,EAEA/B,sBAAuB,SAASgC,GAC5B,IAAIrH,EAAOtC,KACP4J,EAAQtH,EAAKH,QAAQ,GACrBc,EAAQ2G,EAAM3G,MACd4G,EAAOF,EAAEE,KAEbvH,EAAKwH,UAAsB,UAATD,EAElB7I,GAAW,WACM,YAAT6I,GAAsBvH,EAAKwH,WAG3BF,EAAM3G,OAAS2G,EAAM3G,QAAUA,GAC/BX,EAAK0F,YAAY1F,EAAKoH,WAE9B,GACJ,EAEArC,aAAc,WACV,IAAI/E,EAAOtC,KAEXsC,EAAKyF,YAAa,EAClB/G,GAAW,WAAasB,EAAKyF,YAAa,CAAO,GACrD,EAEAlF,MAAO,WACH,IAAIP,EAAOtC,KACPmC,EAAUG,EAAKH,QACf4H,EAAS5H,EAAQY,KAAK,QACtBiH,EAAOD,EAAS1J,EAAE,IAAM0J,GAAU5H,EAAQ8H,QAAQ,QAElDD,EAAK,KACL1H,EAAK8D,cAAgB,WACjBpF,GAAW,WACPsB,EAAKW,MAAMd,EAAQ,GAAGc,MAC1B,GACJ,EAEAX,EAAK+D,eAAiB,WAClB/D,EAAKH,QAAQ,GAAGc,MAAQX,EAAKa,KAAOb,EAAKgE,KAC7C,EAEIhE,EAAKF,QAAQ4C,cACbgF,EAAKhH,GAAG,SAAUV,EAAK+D,gBAG3B/D,EAAK6D,aAAe6D,EAAKhH,GAAG,QAASV,EAAK8D,eAElD,EAEAc,SAAU,SAASyC,GACf,IAAIO,EAAMP,EAAEQ,QAEZnK,KAAK0J,WAAaQ,IAAQvJ,EAAKyJ,UAE3BF,IAAQvJ,EAAK0J,OACbrK,KAAK4D,SAEb,EAEAwD,MAAO,WACHpH,KAAKuI,YAAa,CACtB,EAEAkB,MAAO,SAASa,EAAKrC,GACjB,IAAIhF,EAAQjD,KAAKmC,QAAQsB,OAASzD,KAAKoD,WACnCmH,EAAO,EAMX,KAJiB,IAAbtC,IACAsC,GAAQ,GAGLD,GAAO,GAAKA,GAAOtK,KAAKwD,aAAa,CACxC,GAAIP,EAAMuH,OAAOF,KAAStK,KAAKyK,OAAOH,GAClC,OAAOA,EAGXA,GAAOC,CACX,CAEA,OAAQ,CACZ,EAEA3D,MAAO,SAAS8D,EAAOC,EAAK1H,EAAOgF,GAC/B,IAGI2C,EAEAzB,EACA0B,EACAP,EAPAnI,EAAUnC,KAAKmC,QAAQ,GACvB2I,EAAU3I,EAAQc,OAASjD,KAAKoD,WAChC2H,EAAQ/K,KAAKoC,QAAQ6C,WAErB+F,EAAS,EAuBb,KAlBAN,EAAQ1K,KAAKyJ,MAAMiB,EAAOzC,IAEd0C,IACRA,EAAMD,GAGVvB,EAAWnJ,KAAKuG,QAAQuE,EAAQ/B,UAAU4B,GAAMA,GAEhDC,GADA3H,EAAQjD,KAAKuG,QAAQtD,EAAOyH,IACR5G,OAEhBb,IACAkG,EAAWA,EAAS3C,QAAQ,IAAIC,OAAO,QAAUmE,EAAc,KAAM,KAGzE3H,GAASkG,EACT2B,EAAUA,EAAQG,MAAM,IACxBJ,EAAM5H,EAAMuH,OAAOQ,GAEZN,EAAQ1K,KAAKwD,aAChBsH,EAAQJ,GAASG,GAAOE,EACxBF,EAAM5H,EAAMuH,SAASQ,GAEjBV,IAAQhK,GAAe0K,EAASJ,IAChCN,EAAMI,GAGVA,EAAQ1K,KAAKyJ,MAAMiB,EAAQ,GAa/B,OAVAvI,EAAQc,MAAQjD,KAAKmD,KAAO2H,EAAQpD,KAAK,IAErCjI,EAAMqH,mBAAqB3E,IACvBmI,IAAQhK,IACRgK,EAAMtK,KAAKwD,aAGf9C,EAAMyB,EAASmI,IAGZA,CACX,EAEA/D,QAAS,SAAStD,EAAOqH,GACrB,IAAKrH,EACD,MAAO,GAGX,GAAIjD,KAAK6G,iBAAmB5D,EACxB,OAAOjD,KAAK6G,eAIhB,IAAIgE,EACAK,EAHJjI,GAASA,EAAQ,IAAIgI,MAAM,IAc3B,IAVA,IAAID,EAAS,EACTG,EAAWb,GAAO,EAElBS,EAAQ/K,KAAKoC,QAAQ6C,WAErB2F,EAAc3H,EAAMa,OACpBsH,EAAepL,KAAKyK,OAAO3G,OAE3BuH,EAAS,GAENF,EAAWC,KACdP,EAAM5H,EAAM+H,OACZE,EAAQlL,KAAKyK,OAAOU,KAECN,IAAQE,GACzBM,GAAUR,IAAQE,EAAQA,EAAQ,GAElCC,GAAU,EACVG,GAAY,GACY,iBAAVD,GACTA,GAASA,EAAMI,MAAQJ,EAAMI,KAAKT,IAAUpL,EAAM8L,WAAWL,IAAUA,EAAML,IAC9EQ,GAAUR,EACVM,GAAY,GAEQ,IAAhBP,GACA5K,KAAKwL,qBAIbR,GAAU,GAEVG,GAAY,IAGZH,GAAUJ,MAKlB,OADA5K,KAAK6G,eAAiBwE,EACfA,CACX,EAEA9G,OAAQ,WACJ,IAIIkH,EACAC,EALApJ,EAAOtC,KACPmC,EAAUG,EAAKH,QACfC,EAAUE,EAAKF,QACfuJ,EAAKxJ,EAAQY,KAAK,MAIA,OAAlBX,EAAQ+C,QACRsG,IAAW1K,EAAcqB,EAAQ+C,QAAS/C,EAAQ+C,MAAMsG,SACxDC,EAAY3K,EAAcqB,EAAQ+C,OAAS/C,EAAQ+C,MAAM2D,QAAU1G,EAAQ+C,MAEvEsG,IACAnJ,EAAKsJ,wBAA0BtJ,EAAKgB,QAAQuI,KAAK,iBAAiBC,SAClExJ,EAAKsC,cAAgB,IAAInF,EAAMmB,GAAGmL,cAAczJ,EAAKsJ,wBAAyB,CAAElH,OAAQpC,KAGxF7C,EAAM8L,WAAWG,KACjBA,EAAYA,EAAUlJ,KAAKF,IAG1BoJ,IACDA,EAAY,IAGXC,IACDA,EAAKvJ,EAAQR,KAAO,IAAMnC,EAAMuM,OAChC7J,EAAQY,KAAK,KAAM4I,IAGvBrJ,EAAK2J,YAAc5L,EAAE,kBAAoBoL,EApmB5B,mBADN,yBAqmBkF,UAAYE,EAAK,KAAOD,EAAY,aAAaD,EAAW,cAAgB,gBAAgBnJ,EAAKgB,SAElM,EAEAX,SAAU,WACN,IACIR,EADOnC,KACQmC,QACfE,EAAaF,EAAQ,GAErBmB,EAAUnB,EAAQ0J,KAAK,iDAAiDC,SAC5ExI,EAAQ,GAAG4I,MAAMC,QAAU9J,EAAW6J,MAAMC,QAC5C9J,EAAW6J,MAAME,MAAQ,OANdpM,KAONsD,QAAUA,EAAQR,SAAST,EAAWgK,WAAW1I,YAAY,yBACtE,EAEA6H,mBAAoB,WAChB,IAAIlJ,EAAOtC,KAEXsC,EAAKgK,mBACL5I,aAAapB,EAAKiK,sBAClBjK,EAAKiK,qBAAuBvL,EAAWsB,EAAKkK,oBAAoBrF,KAAK7E,GAAO,IAChF,EAEAgK,iBAAkB,WACHtM,KAENsD,QAAQR,SAAS5B,GAFXlB,KAGNmE,gBAAgBR,YAAY,WACrC,EAEA6I,oBAAqB,WACjB,IAAIlK,EAAOtC,KAEXsC,EAAKgB,QAAQK,YAAYzC,GACzBoB,EAAK6B,gBAAgBrB,SAAS,YAC9BR,EAAKiK,qBAAuB,IAChC,EAEA3J,UAAW,WAgBP,IAfA,IAOIiI,EACA4B,EARAhC,EAAS,GACTU,EAAW,EAGXuB,GADO1M,KAAKoC,QAAQyB,MAAQ,IACXoH,MAAM,IACvBnH,EAAS4I,EAAU5I,OACnBwG,EAAM,EAIN3D,EAAY,GACZ1B,EAAajF,KAAKoC,QAAQ6C,WAC1B0H,EAAelN,EAAMmN,WAAW5M,KAAKoC,QAAQ8C,SAASyH,aACtDjK,EAAQ1C,KAAKyC,OAEV6H,EAAMxG,GAAQ,CAIjB,GAFA2I,EAAO/J,EADPmI,EAAM6B,EAAUpC,IAIZG,EAAOU,GAAYsB,EACnB9F,GAAa1B,EACbkG,GAAY,MACT,CACS,MAARN,GAAuB,MAARA,EACfA,EAAM8B,EAAa9B,GACJ,MAARA,EACPA,EAAM8B,EAAaE,SAASC,OACb,OAARjC,IAEPA,EAAM6B,EADNpC,GAAO,IAMX,IAAK,IAAI1B,EAAI,EAAGmE,GAFhBlC,EAAMA,EAAII,MAAM,KAEQnH,OAAQ8E,EAAImE,EAAGnE,IACnC6B,EAAOU,GAAYN,EAAIjC,GACvBjC,GAAakE,EAAIjC,GACjBuC,GAAY,CAEpB,CACAb,GACJ,CAEAtK,KAAKyK,OAASA,EAEdzK,KAAKoD,WAAauD,EAClB3G,KAAKwD,YAAcmD,EAAU7C,MACjC,IAGJ,SAAS4C,EAAasG,GAClB,OAAOA,EAAKxG,QAAQ,2BAA4B,OACpD,CAEA/G,EAAMwN,cAAcC,eAAe,gBAAiB,YAEpDzN,EAAMwN,cAAcE,eAAe,gBAAiB,CAAC,CACjDtF,KAAM,UACNuF,OAAQ3N,EAAMwN,cAAcI,cAAcC,OAAO,CAAC,CAAC,OAAQ,aAG/D1M,EAAG2M,OAAOvL,EAEb,CAxtBD,CAwtBGzB,OAAOd,MAAM+N,QAChB,IAAIC,EAAUhO,MAEdP,EAAQwO,SAnuBS,CACb/B,GAAI,gBACJ/J,KAAM,gBACN+L,SAAU,MACVC,YAAa,4EACbC,QAAS,CAAC,OAAQ,gBAAiB,QAAS,mCA+tBhD3O,EAAQ4O,QAAUL,EAElBM,OAAOC,eAAe9O,EAAS,aAAc,CAAE+D,OAAO,GAEzD","ignoreList":[],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.floatinglabel.js'), require('kendo.icons.js'), require('kendo.prefix-suffix-containers.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.floatinglabel', 'kendo.icons', 'kendo.prefix-suffix-containers.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Maskedtextbox = {}), global.kendo._globals.Core, global.kendo._globals.Floatinglabel, global.kendo._globals.Icons, global.kendo._globals.PrefixSuffixContainersChunk));\n})(this, (function (exports, kendo_core_js, kendo_floatinglabel_js, kendo_icons_js, kendo_prefixSuffixContainers_chunk_js) {\n    const __meta__ = {\n        id: \"maskedtextbox\",\n        name: \"MaskedTextBox\",\n        category: \"web\",\n        description: \"The MaskedTextBox widget allows to specify a mask type on an input field.\",\n        depends: [\"core\", \"floatinglabel\", \"icons\", \"prefix-suffix-containers.chunk\"]\n    };\n\n    (function($, undefined$1) {\n        var global = window;\n        var min = global.Math.min;\n        var kendo = global.kendo;\n        var caret = kendo.caret;\n        var keys = kendo.keys;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var NS = \".kendoMaskedTextBox\";\n        var isPlainObject = $.isPlainObject;\n        var setTimeout = window.setTimeout;\n\n        var LABELCLASSES = \"k-label k-input-label\";\n        var FLOATINGLABELCLASS = \"k-floating-label\";\n        var STATEDISABLED = \"k-disabled\";\n        var STATEINVALID = \"k-invalid\";\n        var FOCUSED = \"k-focus\";\n        var DISABLED = \"disabled\";\n        var READONLY = \"readonly\";\n        var CHANGE = \"change\";\n        var MOUSEUP = \"mouseup\";\n        var DROP = \"drop\";\n        var KEYDOWN = \"keydown\";\n        var PASTE = \"paste\";\n        var INPUT = \"input\";\n\n        function ns(name) { return name + NS; }\n\n        var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? \"propertychange\" : INPUT);\n\n        function stringDiffStart(str1, str2) {\n            var i = 0;\n            while (i < str2.length) {\n                if (str1[i] !== str2[i]) {\n                    break;\n                }\n                i++;\n            }\n\n            return i;\n        }\n        var MaskedTextBox = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n                var DOMElement;\n\n                Widget.fn.init.call(that, element, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                element = that.element;\n                DOMElement = element[0];\n\n                that._wrapper();\n                that._tokenize();\n                that._form();\n\n                that.element\n                    .addClass(\"k-input-inner\")\n                    .attr(\"autocomplete\", \"off\")\n                    .on(\"focus\" + NS, function() {\n                        var value = DOMElement.value;\n\n                        if (!value) {\n                            DOMElement.value = that._old = that._emptyMask;\n                        } else {\n                            that._togglePrompt(true);\n                        }\n\n                        that._oldValue = value;\n                        that.wrapper.addClass(FOCUSED);\n\n                        that._timeoutId = setTimeout(function() {\n                            caret(element, 0, value ? that._maskLength : 0);\n                        });\n                    })\n                    .on(\"focusout\" + NS, function() {\n                        var value = element.val();\n\n                        clearTimeout(that._timeoutId);\n                        DOMElement.value = that._old = \"\";\n\n                        if (value !== that._emptyMask) {\n                            DOMElement.value = that._old = value;\n                        }\n\n                        that.wrapper.removeClass(FOCUSED);\n                        that._change();\n                        that._togglePrompt();\n                    });\n\n                if (that.options.mask && that.options.mask.length > 0) {\n                    that.element.attr(\"aria-placeholder\", that.options.mask);\n                }\n\n                var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                } else {\n                    that.readonly(element.is(\"[readonly]\"));\n                }\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n                that.value(that.options.value || element.val());\n\n                that._label();\n                that._applyCssClasses();\n\n                kendo_prefixSuffixContainers_chunk_js.a({ widget: that, wrapper: that.wrapper, options: that.options, suffixInsertAfter: that._validationIcon });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MaskedTextBox\",\n                clearPromptChar: false,\n                unmaskOnPost: false,\n                promptChar: \"_\",\n                culture: \"\",\n                rules: {},\n                value: \"\",\n                mask: \"\",\n                label: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                }\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            rules: {\n                \"0\": /\\d/,\n                \"9\": /\\d|\\s/,\n                \"#\": /\\d|\\s|\\+|\\-/,\n                \"L\": /[a-zA-Z]/,\n                \"?\": /[a-zA-Z]|\\s/,\n                \"&\": /\\S/,\n                \"C\": /./,\n                \"A\": /[a-zA-Z0-9]/,\n                \"a\": /[a-zA-Z0-9]|\\s/\n            },\n\n            setOptions: function(options) {\n                var that = this;\n\n                Widget.fn.setOptions.call(that, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                that._tokenize();\n\n                this._unbindInput();\n                this._bindInput();\n\n                that.value(that.element.val());\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                }\n\n                that.element.off(NS);\n\n                if (that._formElement) {\n                    that._formElement.off(\"reset\", that._resetHandler);\n                    that._formElement.off(\"submit\", that._submitHandler);\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            raw: function() {\n                var unmasked = this._unmask(this.element.val(), 0);\n                return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \"\");\n            },\n\n            value: function(value) {\n                var element = this.element;\n                var emptyMask = this._emptyMask;\n\n                if (value === undefined$1) {\n                    return this.element.val();\n                }\n\n                if (value === null) {\n                    value = \"\";\n                }\n\n                if (!emptyMask) {\n                    this._oldValue = value;\n                    element.val(value);\n                    return;\n                }\n\n                value = this._unmask(value + \"\");\n\n                element.val(value ? emptyMask : \"\");\n\n                this._mask(0, this._maskLength, value);\n                this._unmaskedValue = null;\n\n                value = element.val();\n                this._oldValue = value;\n\n                if (kendo._activeElement() !== element) {\n                    if (value === emptyMask) {\n                        element.val(\"\");\n                    } else {\n                        this._togglePrompt();\n                    }\n                }\n\n                if (this.floatingLabel) {\n                    this.floatingLabel.refresh();\n                }\n            },\n\n            _togglePrompt: function(show) {\n                var DOMElement = this.element[0];\n                var value = DOMElement.value;\n\n                if (this.options.clearPromptChar) {\n                    if (!show) {\n                        value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \" \");\n                    } else {\n                        value = this._oldValue;\n                    }\n\n                    DOMElement.value = this._old = value;\n                }\n            },\n\n            readonly: function(readonly) {\n                var that = this;\n\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                var that = this;\n\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            _bindInput: function() {\n                var that = this;\n\n                if (that._maskLength) {\n                    that.element\n                        .on(ns(KEYDOWN), that._keydown.bind(that))\n                        .on(ns(DROP), that._drop.bind(that))\n                        .on(ns(CHANGE), that._trackChange.bind(that))\n                        .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));\n\n\n                    if (kendo.support.browser.msie) {\n                        var version = kendo.support.browser.version;\n                        if (version > 8 && version < 11) {\n                            var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(\" \");\n                            that.element.on(events, that._legacyIEInputHandler.bind(that));\n                        }\n                    }\n                }\n            },\n\n            _unbindInput: function() {\n                var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(\" \");\n\n                this.element.off(events);\n            },\n\n            _editable: function(options) {\n                var that = this;\n                var element = that.element;\n                var wrapper = that.wrapper;\n                var disable = options.disable;\n                var readonly = options.readonly;\n\n                that._unbindInput();\n\n                if (!readonly && !disable) {\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false);\n\n                    wrapper.removeClass(STATEDISABLED);\n\n                    that._bindInput();\n                } else {\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly);\n\n                    wrapper.toggleClass(STATEDISABLED, disable);\n                }\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that.value();\n\n                if (value !== that._oldValue) {\n                    that._oldValue = value;\n\n                    that.trigger(CHANGE);\n                    that.element.trigger(CHANGE);\n                }\n                else if (value === \"\" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n                    that.element.trigger(CHANGE);\n                }\n            },\n\n            inputChange: function(backward) {\n                var that = this;\n                var old = that._old;\n                var element = that.element[0];\n                var value = element.value;\n                var selection = caret(element);\n                var cursor = selection[1];\n                var lengthDiff = value.length - old.length;\n                var mobile = kendo.support.mobileOS;\n\n                if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n                    return;\n                }\n\n                if (lengthDiff === -1 && mobile.android && mobile.browser === \"chrome\") {\n                    backward = true;\n                }\n\n                var contentStart = min(cursor, stringDiffStart(value, old));\n                var content = value.substring(contentStart, cursor);\n\n                element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n                var caretPos = that._mask(contentStart, cursor, content);\n                var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n                var unmasked = that._unmask(endContent, old.length - endContent.length);\n                that._mask(caretPos, caretPos, unmasked);\n\n                if (backward) {\n                    caretPos = that._findCaretPosBackwards(contentStart);\n                }\n\n                caret(element, caretPos);\n\n                //clean-up flags\n                that.__dropping = false;\n            },\n\n            _trimStartPromptChars: function(content, count) {\n                var promptChar = this.options.promptChar;\n\n                while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                    content = content.substring(1);\n                }\n\n                return content;\n            },\n\n            _findCaretPosBackwards: function(pos) {\n                var caretStart = this._find(pos, true);\n                if (caretStart < pos) {\n                    caretStart += 1;\n                }\n\n                return caretStart;\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this.element[0]) {\n                    return;\n                }\n\n                this.inputChange(this.__backward);\n            },\n\n            _legacyIEInputHandler: function(e) {\n                var that = this;\n                var input = that.element[0];\n                var value = input.value;\n                var type = e.type;\n\n                that.__pasting = (type === \"paste\");\n\n                setTimeout(function() {\n                    if (type === \"mouseup\" && that.__pasting) {\n                        return;\n                    }\n                    if (input.value && input.value !== value) {\n                        that.inputChange(that.__backward);\n                    }\n                });\n            },\n\n            _trackChange: function() {\n                var that = this;\n\n                that.__changing = true;\n                setTimeout(function() { that.__changing = false; });\n            },\n\n            _form: function() {\n                var that = this;\n                var element = that.element;\n                var formId = element.attr(\"form\");\n                var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(element[0].value);\n                        });\n                    };\n\n                    that._submitHandler = function() {\n                        that.element[0].value = that._old = that.raw();\n                    };\n\n                    if (that.options.unmaskOnPost) {\n                        form.on(\"submit\", that._submitHandler);\n                    }\n\n                    that._formElement = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n\n                this.__backward = key === keys.BACKSPACE;\n\n                if (key === keys.ENTER) {\n                    this._change();\n                }\n            },\n\n            _drop: function() {\n                this.__dropping = true;\n            },\n\n            _find: function(idx, backward) {\n                var value = this.element.val() || this._emptyMask;\n                var step = 1;\n\n                if (backward === true) {\n                    step = -1;\n                }\n\n                while (idx > -1 || idx <= this._maskLength) {\n                    if (value.charAt(idx) !== this.tokens[idx]) {\n                        return idx;\n                    }\n\n                    idx += step;\n                }\n\n                return -1;\n            },\n\n            _mask: function(start, end, value, backward) {\n                var element = this.element[0];\n                var current = element.value || this._emptyMask;\n                var empty = this.options.promptChar;\n                var valueLength;\n                var chrIdx = 0;\n                var unmasked;\n                var chr;\n                var idx;\n\n                start = this._find(start, backward);\n\n                if (start > end) {\n                    end = start;\n                }\n\n                unmasked = this._unmask(current.substring(end), end);\n                value = this._unmask(value, start);\n                valueLength = value.length;\n\n                if (value) {\n                    unmasked = unmasked.replace(new RegExp(\"^_{0,\" + valueLength + \"}\"), \"\");\n                }\n\n                value += unmasked;\n                current = current.split(\"\");\n                chr = value.charAt(chrIdx);\n\n                while (start < this._maskLength) {\n                    current[start] = chr || empty;\n                    chr = value.charAt(++chrIdx);\n\n                    if (idx === undefined$1 && chrIdx > valueLength) {\n                        idx = start;\n                    }\n\n                    start = this._find(start + 1);\n                }\n\n                element.value = this._old = current.join(\"\");\n\n                if (kendo._activeElement() === element) {\n                    if (idx === undefined$1) {\n                        idx = this._maskLength;\n                    }\n\n                    caret(element, idx);\n                }\n\n                return idx;\n            },\n\n            _unmask: function(value, idx) {\n                if (!value) {\n                    return \"\";\n                }\n\n                if (this._unmaskedValue === value) {\n                    return this._unmaskedValue;\n                }\n                value = (value + \"\").split(\"\");\n\n                var chr;\n                var token;\n                var chrIdx = 0;\n                var tokenIdx = idx || 0;\n\n                var empty = this.options.promptChar;\n\n                var valueLength = value.length;\n                var tokensLength = this.tokens.length;\n\n                var result = \"\";\n\n                while (tokenIdx < tokensLength) {\n                    chr = value[chrIdx];\n                    token = this.tokens[tokenIdx];\n\n                    if (chr === token || chr === empty) {\n                        result += chr === empty ? empty : \"\";\n\n                        chrIdx += 1;\n                        tokenIdx += 1;\n                    } else if (typeof token !== \"string\") {\n                        if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {\n                            result += chr;\n                            tokenIdx += 1;\n                        } else {\n                            if (valueLength === 1) {\n                                this._blinkInvalidState();\n                            }\n                        }\n\n                        chrIdx += 1;\n                    } else {\n                        tokenIdx += 1;\n                    }\n\n                    if (chrIdx >= valueLength) {\n                        break;\n                    }\n                }\n                this._unmaskedValue = result;\n                return result;\n            },\n\n            _label: function() {\n                var that = this;\n                var element = that.element;\n                var options = that.options;\n                var id = element.attr(\"id\");\n                var floating;\n                var labelText;\n\n                if (options.label !== null) {\n                    floating = isPlainObject(options.label) ? options.label.floating : false;\n                    labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                    if (floating) {\n                        that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                    }\n\n                    if (kendo.isFunction(labelText)) {\n                        labelText = labelText.call(that);\n                    }\n\n                    if (!labelText) {\n                        labelText = \"\";\n                    }\n\n                    if (!id) {\n                        id = options.name + \"_\" + kendo.guid();\n                        element.attr(\"id\", id);\n                    }\n\n                    that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n                }\n            },\n\n            _wrapper: function() {\n                var that = this;\n                var element = that.element;\n                var DOMElement = element[0];\n\n                var wrapper = element.wrap(\"<span class='k-input k-maskedtextbox'></span>\").parent();\n                wrapper[0].style.cssText = DOMElement.style.cssText;\n                DOMElement.style.width = \"100%\";\n                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');\n            },\n\n            _blinkInvalidState: function() {\n                var that = this;\n\n                that._addInvalidState();\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n            },\n\n            _addInvalidState: function() {\n                var that = this;\n\n                that.wrapper.addClass(STATEINVALID);\n                that._validationIcon.removeClass(\"k-hidden\");\n            },\n\n            _removeInvalidState: function() {\n                var that = this;\n\n                that.wrapper.removeClass(STATEINVALID);\n                that._validationIcon.addClass(\"k-hidden\");\n                that._invalidStateTimeout = null;\n            },\n\n            _tokenize: function() {\n                var tokens = [];\n                var tokenIdx = 0;\n\n                var mask = this.options.mask || \"\";\n                var maskChars = mask.split(\"\");\n                var length = maskChars.length;\n                var idx = 0;\n                var chr;\n                var rule;\n\n                var emptyMask = \"\";\n                var promptChar = this.options.promptChar;\n                var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n                var rules = this._rules;\n\n                while (idx < length) {\n                    chr = maskChars[idx];\n                    rule = rules[chr];\n\n                    if (rule) {\n                        tokens[tokenIdx] = rule;\n                        emptyMask += promptChar;\n                        tokenIdx += 1;\n                    } else {\n                        if (chr === \".\" || chr === \",\") {\n                            chr = numberFormat[chr];\n                        } else if (chr === \"$\") {\n                            chr = numberFormat.currency.symbol;\n                        } else if (chr === \"\\\\\") {\n                            idx += 1;\n                            chr = maskChars[idx];\n                        }\n\n                        chr = chr.split(\"\");\n\n                        for (var i = 0, l = chr.length; i < l; i++) {\n                            tokens[tokenIdx] = chr[i];\n                            emptyMask += chr[i];\n                            tokenIdx += 1;\n                        }\n                    }\n                    idx++;\n                }\n\n                this.tokens = tokens;\n\n                this._emptyMask = emptyMask;\n                this._maskLength = emptyMask.length;\n            }\n        });\n\n        function escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        kendo.cssProperties.registerPrefix(\"MaskedTextBox\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MaskedTextBox\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(MaskedTextBox);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}